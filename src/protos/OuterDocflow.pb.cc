// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OuterDocflow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OuterDocflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* OuterDocflowInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OuterDocflowInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OuterDocflow_2eproto() {
  protobuf_AddDesc_OuterDocflow_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OuterDocflow.proto");
  GOOGLE_CHECK(file != NULL);
  OuterDocflowInfo_descriptor_ = file->message_type(0);
  static const int OuterDocflowInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterDocflowInfo, docflownamedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterDocflowInfo, docflowfriendlyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterDocflowInfo, status_),
  };
  OuterDocflowInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OuterDocflowInfo_descriptor_,
      OuterDocflowInfo::default_instance_,
      OuterDocflowInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterDocflowInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterDocflowInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OuterDocflowInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OuterDocflow_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OuterDocflowInfo_descriptor_, &OuterDocflowInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OuterDocflow_2eproto() {
  delete OuterDocflowInfo::default_instance_;
  delete OuterDocflowInfo_reflection_;
}

void protobuf_AddDesc_OuterDocflow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_OuterDocflowStatus_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022OuterDocflow.proto\022\020Diadoc.Api.Proto\032\030"
    "OuterDocflowStatus.proto\"q\n\020OuterDocflow"
    "Info\022\026\n\016DocflowNamedId\030\001 \002(\t\022\033\n\023DocflowF"
    "riendlyName\030\002 \002(\t\022(\n\006Status\030\003 \002(\0132\030.Diad"
    "oc.Api.Proto.Status", 179);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OuterDocflow.proto", &protobuf_RegisterTypes);
  OuterDocflowInfo::default_instance_ = new OuterDocflowInfo();
  OuterDocflowInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OuterDocflow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OuterDocflow_2eproto {
  StaticDescriptorInitializer_OuterDocflow_2eproto() {
    protobuf_AddDesc_OuterDocflow_2eproto();
  }
} static_descriptor_initializer_OuterDocflow_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OuterDocflowInfo::kDocflowNamedIdFieldNumber;
const int OuterDocflowInfo::kDocflowFriendlyNameFieldNumber;
const int OuterDocflowInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

OuterDocflowInfo::OuterDocflowInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.OuterDocflowInfo)
}

void OuterDocflowInfo::InitAsDefaultInstance() {
  status_ = const_cast< ::Diadoc::Api::Proto::Status*>(&::Diadoc::Api::Proto::Status::default_instance());
}

OuterDocflowInfo::OuterDocflowInfo(const OuterDocflowInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.OuterDocflowInfo)
}

void OuterDocflowInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  docflownamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docflowfriendlyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OuterDocflowInfo::~OuterDocflowInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.OuterDocflowInfo)
  SharedDtor();
}

void OuterDocflowInfo::SharedDtor() {
  if (docflownamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete docflownamedid_;
  }
  if (docflowfriendlyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete docflowfriendlyname_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void OuterDocflowInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OuterDocflowInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OuterDocflowInfo_descriptor_;
}

const OuterDocflowInfo& OuterDocflowInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OuterDocflow_2eproto();
  return *default_instance_;
}

OuterDocflowInfo* OuterDocflowInfo::default_instance_ = NULL;

OuterDocflowInfo* OuterDocflowInfo::New() const {
  return new OuterDocflowInfo;
}

void OuterDocflowInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_docflownamedid()) {
      if (docflownamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        docflownamedid_->clear();
      }
    }
    if (has_docflowfriendlyname()) {
      if (docflowfriendlyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        docflowfriendlyname_->clear();
      }
    }
    if (has_status()) {
      if (status_ != NULL) status_->::Diadoc::Api::Proto::Status::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OuterDocflowInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.OuterDocflowInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string DocflowNamedId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docflownamedid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->docflownamedid().data(), this->docflownamedid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "docflownamedid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DocflowFriendlyName;
        break;
      }

      // required string DocflowFriendlyName = 2;
      case 2: {
        if (tag == 18) {
         parse_DocflowFriendlyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docflowfriendlyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->docflowfriendlyname().data(), this->docflowfriendlyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "docflowfriendlyname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Status;
        break;
      }

      // required .Diadoc.Api.Proto.Status Status = 3;
      case 3: {
        if (tag == 26) {
         parse_Status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.OuterDocflowInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.OuterDocflowInfo)
  return false;
#undef DO_
}

void OuterDocflowInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.OuterDocflowInfo)
  // required string DocflowNamedId = 1;
  if (has_docflownamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docflownamedid().data(), this->docflownamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "docflownamedid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->docflownamedid(), output);
  }

  // required string DocflowFriendlyName = 2;
  if (has_docflowfriendlyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docflowfriendlyname().data(), this->docflowfriendlyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "docflowfriendlyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->docflowfriendlyname(), output);
  }

  // required .Diadoc.Api.Proto.Status Status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.OuterDocflowInfo)
}

::google::protobuf::uint8* OuterDocflowInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.OuterDocflowInfo)
  // required string DocflowNamedId = 1;
  if (has_docflownamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docflownamedid().data(), this->docflownamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "docflownamedid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->docflownamedid(), target);
  }

  // required string DocflowFriendlyName = 2;
  if (has_docflowfriendlyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docflowfriendlyname().data(), this->docflowfriendlyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "docflowfriendlyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->docflowfriendlyname(), target);
  }

  // required .Diadoc.Api.Proto.Status Status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.OuterDocflowInfo)
  return target;
}

int OuterDocflowInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string DocflowNamedId = 1;
    if (has_docflownamedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->docflownamedid());
    }

    // required string DocflowFriendlyName = 2;
    if (has_docflowfriendlyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->docflowfriendlyname());
    }

    // required .Diadoc.Api.Proto.Status Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OuterDocflowInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OuterDocflowInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OuterDocflowInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OuterDocflowInfo::MergeFrom(const OuterDocflowInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_docflownamedid()) {
      set_docflownamedid(from.docflownamedid());
    }
    if (from.has_docflowfriendlyname()) {
      set_docflowfriendlyname(from.docflowfriendlyname());
    }
    if (from.has_status()) {
      mutable_status()->::Diadoc::Api::Proto::Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OuterDocflowInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OuterDocflowInfo::CopyFrom(const OuterDocflowInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OuterDocflowInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void OuterDocflowInfo::Swap(OuterDocflowInfo* other) {
  if (other != this) {
    std::swap(docflownamedid_, other->docflownamedid_);
    std::swap(docflowfriendlyname_, other->docflowfriendlyname_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OuterDocflowInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OuterDocflowInfo_descriptor_;
  metadata.reflection = OuterDocflowInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
