// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TimeBasedFilter.proto

#ifndef PROTOBUF_TimeBasedFilter_2eproto__INCLUDED
#define PROTOBUF_TimeBasedFilter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Timestamp.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TimeBasedFilter_2eproto();
void protobuf_AssignDesc_TimeBasedFilter_2eproto();
void protobuf_ShutdownFile_TimeBasedFilter_2eproto();

class TimeBasedFilter;

enum SortDirection {
  UnknownSortDirection = 0,
  Ascending = 1,
  Descending = 2
};
bool SortDirection_IsValid(int value);
const SortDirection SortDirection_MIN = UnknownSortDirection;
const SortDirection SortDirection_MAX = Descending;
const int SortDirection_ARRAYSIZE = SortDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* SortDirection_descriptor();
inline const ::std::string& SortDirection_Name(SortDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    SortDirection_descriptor(), value);
}
inline bool SortDirection_Parse(
    const ::std::string& name, SortDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SortDirection>(
    SortDirection_descriptor(), name, value);
}
// ===================================================================

class TimeBasedFilter : public ::google::protobuf::Message {
 public:
  TimeBasedFilter();
  virtual ~TimeBasedFilter();

  TimeBasedFilter(const TimeBasedFilter& from);

  inline TimeBasedFilter& operator=(const TimeBasedFilter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeBasedFilter& default_instance();

  void Swap(TimeBasedFilter* other);

  // implements Message ----------------------------------------------

  TimeBasedFilter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeBasedFilter& from);
  void MergeFrom(const TimeBasedFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Timestamp FromTimestamp = 1;
  inline bool has_fromtimestamp() const;
  inline void clear_fromtimestamp();
  static const int kFromTimestampFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Timestamp& fromtimestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_fromtimestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_fromtimestamp();
  inline void set_allocated_fromtimestamp(::Diadoc::Api::Proto::Timestamp* fromtimestamp);

  // optional .Diadoc.Api.Proto.Timestamp ToTimestamp = 2;
  inline bool has_totimestamp() const;
  inline void clear_totimestamp();
  static const int kToTimestampFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Timestamp& totimestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_totimestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_totimestamp();
  inline void set_allocated_totimestamp(::Diadoc::Api::Proto::Timestamp* totimestamp);

  // optional .Diadoc.Api.Proto.SortDirection SortDirection = 3 [default = Ascending];
  inline bool has_sortdirection() const;
  inline void clear_sortdirection();
  static const int kSortDirectionFieldNumber = 3;
  inline ::Diadoc::Api::Proto::SortDirection sortdirection() const;
  inline void set_sortdirection(::Diadoc::Api::Proto::SortDirection value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.TimeBasedFilter)
 private:
  inline void set_has_fromtimestamp();
  inline void clear_has_fromtimestamp();
  inline void set_has_totimestamp();
  inline void clear_has_totimestamp();
  inline void set_has_sortdirection();
  inline void clear_has_sortdirection();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Timestamp* fromtimestamp_;
  ::Diadoc::Api::Proto::Timestamp* totimestamp_;
  int sortdirection_;
  friend void  protobuf_AddDesc_TimeBasedFilter_2eproto();
  friend void protobuf_AssignDesc_TimeBasedFilter_2eproto();
  friend void protobuf_ShutdownFile_TimeBasedFilter_2eproto();

  void InitAsDefaultInstance();
  static TimeBasedFilter* default_instance_;
};
// ===================================================================


// ===================================================================

// TimeBasedFilter

// optional .Diadoc.Api.Proto.Timestamp FromTimestamp = 1;
inline bool TimeBasedFilter::has_fromtimestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeBasedFilter::set_has_fromtimestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeBasedFilter::clear_has_fromtimestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeBasedFilter::clear_fromtimestamp() {
  if (fromtimestamp_ != NULL) fromtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_fromtimestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& TimeBasedFilter::fromtimestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.TimeBasedFilter.FromTimestamp)
  return fromtimestamp_ != NULL ? *fromtimestamp_ : *default_instance_->fromtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* TimeBasedFilter::mutable_fromtimestamp() {
  set_has_fromtimestamp();
  if (fromtimestamp_ == NULL) fromtimestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.TimeBasedFilter.FromTimestamp)
  return fromtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* TimeBasedFilter::release_fromtimestamp() {
  clear_has_fromtimestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = fromtimestamp_;
  fromtimestamp_ = NULL;
  return temp;
}
inline void TimeBasedFilter::set_allocated_fromtimestamp(::Diadoc::Api::Proto::Timestamp* fromtimestamp) {
  delete fromtimestamp_;
  fromtimestamp_ = fromtimestamp;
  if (fromtimestamp) {
    set_has_fromtimestamp();
  } else {
    clear_has_fromtimestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.TimeBasedFilter.FromTimestamp)
}

// optional .Diadoc.Api.Proto.Timestamp ToTimestamp = 2;
inline bool TimeBasedFilter::has_totimestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeBasedFilter::set_has_totimestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeBasedFilter::clear_has_totimestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeBasedFilter::clear_totimestamp() {
  if (totimestamp_ != NULL) totimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_totimestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& TimeBasedFilter::totimestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.TimeBasedFilter.ToTimestamp)
  return totimestamp_ != NULL ? *totimestamp_ : *default_instance_->totimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* TimeBasedFilter::mutable_totimestamp() {
  set_has_totimestamp();
  if (totimestamp_ == NULL) totimestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.TimeBasedFilter.ToTimestamp)
  return totimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* TimeBasedFilter::release_totimestamp() {
  clear_has_totimestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = totimestamp_;
  totimestamp_ = NULL;
  return temp;
}
inline void TimeBasedFilter::set_allocated_totimestamp(::Diadoc::Api::Proto::Timestamp* totimestamp) {
  delete totimestamp_;
  totimestamp_ = totimestamp;
  if (totimestamp) {
    set_has_totimestamp();
  } else {
    clear_has_totimestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.TimeBasedFilter.ToTimestamp)
}

// optional .Diadoc.Api.Proto.SortDirection SortDirection = 3 [default = Ascending];
inline bool TimeBasedFilter::has_sortdirection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimeBasedFilter::set_has_sortdirection() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimeBasedFilter::clear_has_sortdirection() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimeBasedFilter::clear_sortdirection() {
  sortdirection_ = 1;
  clear_has_sortdirection();
}
inline ::Diadoc::Api::Proto::SortDirection TimeBasedFilter::sortdirection() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.TimeBasedFilter.SortDirection)
  return static_cast< ::Diadoc::Api::Proto::SortDirection >(sortdirection_);
}
inline void TimeBasedFilter::set_sortdirection(::Diadoc::Api::Proto::SortDirection value) {
  assert(::Diadoc::Api::Proto::SortDirection_IsValid(value));
  set_has_sortdirection();
  sortdirection_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.TimeBasedFilter.SortDirection)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Diadoc::Api::Proto::SortDirection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::SortDirection>() {
  return ::Diadoc::Api::Proto::SortDirection_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TimeBasedFilter_2eproto__INCLUDED
