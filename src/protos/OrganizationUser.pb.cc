// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrganizationUser.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OrganizationUser.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* OrganizationUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrganizationUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrganizationUsersList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrganizationUsersList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OrganizationUser_2eproto() {
  protobuf_AddDesc_OrganizationUser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OrganizationUser.proto");
  GOOGLE_CHECK(file != NULL);
  OrganizationUser_descriptor_ = file->message_type(0);
  static const int OrganizationUser_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationUser, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationUser, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationUser, permissions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationUser, position_),
  };
  OrganizationUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrganizationUser_descriptor_,
      OrganizationUser::default_instance_,
      OrganizationUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrganizationUser));
  OrganizationUsersList_descriptor_ = file->message_type(1);
  static const int OrganizationUsersList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationUsersList, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationUsersList, currentuserid_),
  };
  OrganizationUsersList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrganizationUsersList_descriptor_,
      OrganizationUsersList::default_instance_,
      OrganizationUsersList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationUsersList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationUsersList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrganizationUsersList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OrganizationUser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrganizationUser_descriptor_, &OrganizationUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrganizationUsersList_descriptor_, &OrganizationUsersList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OrganizationUser_2eproto() {
  delete OrganizationUser::default_instance_;
  delete OrganizationUser_reflection_;
  delete OrganizationUsersList::default_instance_;
  delete OrganizationUsersList_reflection_;
}

void protobuf_AddDesc_OrganizationUser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_OrganizationUserPermissions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026OrganizationUser.proto\022\020Diadoc.Api.Pro"
    "to\032!OrganizationUserPermissions.proto\"\202\001"
    "\n\020OrganizationUser\022\n\n\002Id\030\001 \002(\t\022\014\n\004Name\030\002"
    " \002(\t\022B\n\013Permissions\030\003 \002(\0132-.Diadoc.Api.P"
    "roto.OrganizationUserPermissions\022\020\n\010Posi"
    "tion\030\004 \002(\t\"a\n\025OrganizationUsersList\0221\n\005U"
    "sers\030\001 \003(\0132\".Diadoc.Api.Proto.Organizati"
    "onUser\022\025\n\rCurrentUserId\030\002 \002(\t", 309);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OrganizationUser.proto", &protobuf_RegisterTypes);
  OrganizationUser::default_instance_ = new OrganizationUser();
  OrganizationUsersList::default_instance_ = new OrganizationUsersList();
  OrganizationUser::default_instance_->InitAsDefaultInstance();
  OrganizationUsersList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OrganizationUser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OrganizationUser_2eproto {
  StaticDescriptorInitializer_OrganizationUser_2eproto() {
    protobuf_AddDesc_OrganizationUser_2eproto();
  }
} static_descriptor_initializer_OrganizationUser_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OrganizationUser::kIdFieldNumber;
const int OrganizationUser::kNameFieldNumber;
const int OrganizationUser::kPermissionsFieldNumber;
const int OrganizationUser::kPositionFieldNumber;
#endif  // !_MSC_VER

OrganizationUser::OrganizationUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.OrganizationUser)
}

void OrganizationUser::InitAsDefaultInstance() {
  permissions_ = const_cast< ::Diadoc::Api::Proto::OrganizationUserPermissions*>(&::Diadoc::Api::Proto::OrganizationUserPermissions::default_instance());
}

OrganizationUser::OrganizationUser(const OrganizationUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.OrganizationUser)
}

void OrganizationUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permissions_ = NULL;
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrganizationUser::~OrganizationUser() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.OrganizationUser)
  SharedDtor();
}

void OrganizationUser::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (this != default_instance_) {
    delete permissions_;
  }
}

void OrganizationUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrganizationUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrganizationUser_descriptor_;
}

const OrganizationUser& OrganizationUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OrganizationUser_2eproto();
  return *default_instance_;
}

OrganizationUser* OrganizationUser::default_instance_ = NULL;

OrganizationUser* OrganizationUser::New() const {
  return new OrganizationUser;
}

void OrganizationUser::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_permissions()) {
      if (permissions_ != NULL) permissions_->::Diadoc::Api::Proto::OrganizationUserPermissions::Clear();
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrganizationUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.OrganizationUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Permissions;
        break;
      }

      // required .Diadoc.Api.Proto.OrganizationUserPermissions Permissions = 3;
      case 3: {
        if (tag == 26) {
         parse_Permissions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_permissions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Position;
        break;
      }

      // required string Position = 4;
      case 4: {
        if (tag == 34) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.OrganizationUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.OrganizationUser)
  return false;
#undef DO_
}

void OrganizationUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.OrganizationUser)
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .Diadoc.Api.Proto.OrganizationUserPermissions Permissions = 3;
  if (has_permissions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->permissions(), output);
  }

  // required string Position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.OrganizationUser)
}

::google::protobuf::uint8* OrganizationUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.OrganizationUser)
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .Diadoc.Api.Proto.OrganizationUserPermissions Permissions = 3;
  if (has_permissions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->permissions(), target);
  }

  // required string Position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.OrganizationUser)
  return target;
}

int OrganizationUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .Diadoc.Api.Proto.OrganizationUserPermissions Permissions = 3;
    if (has_permissions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->permissions());
    }

    // required string Position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrganizationUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrganizationUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrganizationUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrganizationUser::MergeFrom(const OrganizationUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_permissions()) {
      mutable_permissions()->::Diadoc::Api::Proto::OrganizationUserPermissions::MergeFrom(from.permissions());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrganizationUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrganizationUser::CopyFrom(const OrganizationUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrganizationUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_permissions()) {
    if (!this->permissions().IsInitialized()) return false;
  }
  return true;
}

void OrganizationUser::Swap(OrganizationUser* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(permissions_, other->permissions_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrganizationUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrganizationUser_descriptor_;
  metadata.reflection = OrganizationUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrganizationUsersList::kUsersFieldNumber;
const int OrganizationUsersList::kCurrentUserIdFieldNumber;
#endif  // !_MSC_VER

OrganizationUsersList::OrganizationUsersList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.OrganizationUsersList)
}

void OrganizationUsersList::InitAsDefaultInstance() {
}

OrganizationUsersList::OrganizationUsersList(const OrganizationUsersList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.OrganizationUsersList)
}

void OrganizationUsersList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  currentuserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrganizationUsersList::~OrganizationUsersList() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.OrganizationUsersList)
  SharedDtor();
}

void OrganizationUsersList::SharedDtor() {
  if (currentuserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currentuserid_;
  }
  if (this != default_instance_) {
  }
}

void OrganizationUsersList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrganizationUsersList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrganizationUsersList_descriptor_;
}

const OrganizationUsersList& OrganizationUsersList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OrganizationUser_2eproto();
  return *default_instance_;
}

OrganizationUsersList* OrganizationUsersList::default_instance_ = NULL;

OrganizationUsersList* OrganizationUsersList::New() const {
  return new OrganizationUsersList;
}

void OrganizationUsersList::Clear() {
  if (has_currentuserid()) {
    if (currentuserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      currentuserid_->clear();
    }
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrganizationUsersList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.OrganizationUsersList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.OrganizationUser Users = 1;
      case 1: {
        if (tag == 10) {
         parse_Users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Users;
        if (input->ExpectTag(18)) goto parse_CurrentUserId;
        break;
      }

      // required string CurrentUserId = 2;
      case 2: {
        if (tag == 18) {
         parse_CurrentUserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currentuserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currentuserid().data(), this->currentuserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currentuserid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.OrganizationUsersList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.OrganizationUsersList)
  return false;
#undef DO_
}

void OrganizationUsersList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.OrganizationUsersList)
  // repeated .Diadoc.Api.Proto.OrganizationUser Users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  // required string CurrentUserId = 2;
  if (has_currentuserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currentuserid().data(), this->currentuserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currentuserid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->currentuserid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.OrganizationUsersList)
}

::google::protobuf::uint8* OrganizationUsersList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.OrganizationUsersList)
  // repeated .Diadoc.Api.Proto.OrganizationUser Users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }

  // required string CurrentUserId = 2;
  if (has_currentuserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currentuserid().data(), this->currentuserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currentuserid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->currentuserid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.OrganizationUsersList)
  return target;
}

int OrganizationUsersList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string CurrentUserId = 2;
    if (has_currentuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currentuserid());
    }

  }
  // repeated .Diadoc.Api.Proto.OrganizationUser Users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrganizationUsersList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrganizationUsersList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrganizationUsersList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrganizationUsersList::MergeFrom(const OrganizationUsersList& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_currentuserid()) {
      set_currentuserid(from.currentuserid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrganizationUsersList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrganizationUsersList::CopyFrom(const OrganizationUsersList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrganizationUsersList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  return true;
}

void OrganizationUsersList::Swap(OrganizationUsersList* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(currentuserid_, other->currentuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrganizationUsersList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrganizationUsersList_descriptor_;
  metadata.reflection = OrganizationUsersList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
