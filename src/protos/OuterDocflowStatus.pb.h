// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OuterDocflowStatus.proto

#ifndef PROTOBUF_OuterDocflowStatus_2eproto__INCLUDED
#define PROTOBUF_OuterDocflowStatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OuterDocflowStatus_2eproto();
void protobuf_AssignDesc_OuterDocflowStatus_2eproto();
void protobuf_ShutdownFile_OuterDocflowStatus_2eproto();

class Status;
class StatusDetail;

enum OuterStatusType {
  UnknownStatus = 0,
  Normal = 1,
  Success = 2,
  Warning = 3,
  Error = 4
};
bool OuterStatusType_IsValid(int value);
const OuterStatusType OuterStatusType_MIN = UnknownStatus;
const OuterStatusType OuterStatusType_MAX = Error;
const int OuterStatusType_ARRAYSIZE = OuterStatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OuterStatusType_descriptor();
inline const ::std::string& OuterStatusType_Name(OuterStatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OuterStatusType_descriptor(), value);
}
inline bool OuterStatusType_Parse(
    const ::std::string& name, OuterStatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OuterStatusType>(
    OuterStatusType_descriptor(), name, value);
}
// ===================================================================

class Status : public ::google::protobuf::Message {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string NamedId = 1;
  inline bool has_namedid() const;
  inline void clear_namedid();
  static const int kNamedIdFieldNumber = 1;
  inline const ::std::string& namedid() const;
  inline void set_namedid(const ::std::string& value);
  inline void set_namedid(const char* value);
  inline void set_namedid(const char* value, size_t size);
  inline ::std::string* mutable_namedid();
  inline ::std::string* release_namedid();
  inline void set_allocated_namedid(::std::string* namedid);

  // required string FriendlyName = 2;
  inline bool has_friendlyname() const;
  inline void clear_friendlyname();
  static const int kFriendlyNameFieldNumber = 2;
  inline const ::std::string& friendlyname() const;
  inline void set_friendlyname(const ::std::string& value);
  inline void set_friendlyname(const char* value);
  inline void set_friendlyname(const char* value, size_t size);
  inline ::std::string* mutable_friendlyname();
  inline ::std::string* release_friendlyname();
  inline void set_allocated_friendlyname(::std::string* friendlyname);

  // required .Diadoc.Api.Proto.OuterStatusType Type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Diadoc::Api::Proto::OuterStatusType type() const;
  inline void set_type(::Diadoc::Api::Proto::OuterStatusType value);

  // optional string Description = 4;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // repeated .Diadoc.Api.Proto.StatusDetail Details = 5;
  inline int details_size() const;
  inline void clear_details();
  static const int kDetailsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::StatusDetail& details(int index) const;
  inline ::Diadoc::Api::Proto::StatusDetail* mutable_details(int index);
  inline ::Diadoc::Api::Proto::StatusDetail* add_details();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::StatusDetail >&
      details() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::StatusDetail >*
      mutable_details();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Status)
 private:
  inline void set_has_namedid();
  inline void clear_has_namedid();
  inline void set_has_friendlyname();
  inline void clear_has_friendlyname();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* namedid_;
  ::std::string* friendlyname_;
  ::std::string* description_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::StatusDetail > details_;
  int type_;
  friend void  protobuf_AddDesc_OuterDocflowStatus_2eproto();
  friend void protobuf_AssignDesc_OuterDocflowStatus_2eproto();
  friend void protobuf_ShutdownFile_OuterDocflowStatus_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class StatusDetail : public ::google::protobuf::Message {
 public:
  StatusDetail();
  virtual ~StatusDetail();

  StatusDetail(const StatusDetail& from);

  inline StatusDetail& operator=(const StatusDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusDetail& default_instance();

  void Swap(StatusDetail* other);

  // implements Message ----------------------------------------------

  StatusDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusDetail& from);
  void MergeFrom(const StatusDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string Text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.StatusDetail)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* code_;
  ::std::string* text_;
  friend void  protobuf_AddDesc_OuterDocflowStatus_2eproto();
  friend void protobuf_AssignDesc_OuterDocflowStatus_2eproto();
  friend void protobuf_ShutdownFile_OuterDocflowStatus_2eproto();

  void InitAsDefaultInstance();
  static StatusDetail* default_instance_;
};
// ===================================================================


// ===================================================================

// Status

// required string NamedId = 1;
inline bool Status::has_namedid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status::set_has_namedid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status::clear_has_namedid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status::clear_namedid() {
  if (namedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    namedid_->clear();
  }
  clear_has_namedid();
}
inline const ::std::string& Status::namedid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Status.NamedId)
  return *namedid_;
}
inline void Status::set_namedid(const ::std::string& value) {
  set_has_namedid();
  if (namedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    namedid_ = new ::std::string;
  }
  namedid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Status.NamedId)
}
inline void Status::set_namedid(const char* value) {
  set_has_namedid();
  if (namedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    namedid_ = new ::std::string;
  }
  namedid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Status.NamedId)
}
inline void Status::set_namedid(const char* value, size_t size) {
  set_has_namedid();
  if (namedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    namedid_ = new ::std::string;
  }
  namedid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Status.NamedId)
}
inline ::std::string* Status::mutable_namedid() {
  set_has_namedid();
  if (namedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    namedid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Status.NamedId)
  return namedid_;
}
inline ::std::string* Status::release_namedid() {
  clear_has_namedid();
  if (namedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = namedid_;
    namedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Status::set_allocated_namedid(::std::string* namedid) {
  if (namedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete namedid_;
  }
  if (namedid) {
    set_has_namedid();
    namedid_ = namedid;
  } else {
    clear_has_namedid();
    namedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Status.NamedId)
}

// required string FriendlyName = 2;
inline bool Status::has_friendlyname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Status::set_has_friendlyname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Status::clear_has_friendlyname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Status::clear_friendlyname() {
  if (friendlyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendlyname_->clear();
  }
  clear_has_friendlyname();
}
inline const ::std::string& Status::friendlyname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Status.FriendlyName)
  return *friendlyname_;
}
inline void Status::set_friendlyname(const ::std::string& value) {
  set_has_friendlyname();
  if (friendlyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendlyname_ = new ::std::string;
  }
  friendlyname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Status.FriendlyName)
}
inline void Status::set_friendlyname(const char* value) {
  set_has_friendlyname();
  if (friendlyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendlyname_ = new ::std::string;
  }
  friendlyname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Status.FriendlyName)
}
inline void Status::set_friendlyname(const char* value, size_t size) {
  set_has_friendlyname();
  if (friendlyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendlyname_ = new ::std::string;
  }
  friendlyname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Status.FriendlyName)
}
inline ::std::string* Status::mutable_friendlyname() {
  set_has_friendlyname();
  if (friendlyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendlyname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Status.FriendlyName)
  return friendlyname_;
}
inline ::std::string* Status::release_friendlyname() {
  clear_has_friendlyname();
  if (friendlyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = friendlyname_;
    friendlyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Status::set_allocated_friendlyname(::std::string* friendlyname) {
  if (friendlyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friendlyname_;
  }
  if (friendlyname) {
    set_has_friendlyname();
    friendlyname_ = friendlyname;
  } else {
    clear_has_friendlyname();
    friendlyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Status.FriendlyName)
}

// required .Diadoc.Api.Proto.OuterStatusType Type = 3;
inline bool Status::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Status::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Status::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Status::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Diadoc::Api::Proto::OuterStatusType Status::type() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Status.Type)
  return static_cast< ::Diadoc::Api::Proto::OuterStatusType >(type_);
}
inline void Status::set_type(::Diadoc::Api::Proto::OuterStatusType value) {
  assert(::Diadoc::Api::Proto::OuterStatusType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Status.Type)
}

// optional string Description = 4;
inline bool Status::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Status::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Status::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Status::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Status::description() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Status.Description)
  return *description_;
}
inline void Status::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Status.Description)
}
inline void Status::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Status.Description)
}
inline void Status::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Status.Description)
}
inline ::std::string* Status::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Status.Description)
  return description_;
}
inline ::std::string* Status::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Status::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Status.Description)
}

// repeated .Diadoc.Api.Proto.StatusDetail Details = 5;
inline int Status::details_size() const {
  return details_.size();
}
inline void Status::clear_details() {
  details_.Clear();
}
inline const ::Diadoc::Api::Proto::StatusDetail& Status::details(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Status.Details)
  return details_.Get(index);
}
inline ::Diadoc::Api::Proto::StatusDetail* Status::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Status.Details)
  return details_.Mutable(index);
}
inline ::Diadoc::Api::Proto::StatusDetail* Status::add_details() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Status.Details)
  return details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::StatusDetail >&
Status::details() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Status.Details)
  return details_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::StatusDetail >*
Status::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Status.Details)
  return &details_;
}

// -------------------------------------------------------------------

// StatusDetail

// optional string Code = 1;
inline bool StatusDetail::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatusDetail::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatusDetail::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatusDetail::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& StatusDetail::code() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.StatusDetail.Code)
  return *code_;
}
inline void StatusDetail::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.StatusDetail.Code)
}
inline void StatusDetail::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.StatusDetail.Code)
}
inline void StatusDetail::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.StatusDetail.Code)
}
inline ::std::string* StatusDetail::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.StatusDetail.Code)
  return code_;
}
inline ::std::string* StatusDetail::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StatusDetail::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.StatusDetail.Code)
}

// optional string Text = 2;
inline bool StatusDetail::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatusDetail::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatusDetail::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatusDetail::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& StatusDetail::text() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.StatusDetail.Text)
  return *text_;
}
inline void StatusDetail::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.StatusDetail.Text)
}
inline void StatusDetail::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.StatusDetail.Text)
}
inline void StatusDetail::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.StatusDetail.Text)
}
inline ::std::string* StatusDetail::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.StatusDetail.Text)
  return text_;
}
inline ::std::string* StatusDetail::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StatusDetail::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.StatusDetail.Text)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Diadoc::Api::Proto::OuterStatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::OuterStatusType>() {
  return ::Diadoc::Api::Proto::OuterStatusType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OuterDocflowStatus_2eproto__INCLUDED
