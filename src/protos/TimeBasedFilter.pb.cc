// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TimeBasedFilter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TimeBasedFilter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* TimeBasedFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeBasedFilter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SortDirection_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TimeBasedFilter_2eproto() {
  protobuf_AddDesc_TimeBasedFilter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TimeBasedFilter.proto");
  GOOGLE_CHECK(file != NULL);
  TimeBasedFilter_descriptor_ = file->message_type(0);
  static const int TimeBasedFilter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBasedFilter, fromtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBasedFilter, totimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBasedFilter, sortdirection_),
  };
  TimeBasedFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeBasedFilter_descriptor_,
      TimeBasedFilter::default_instance_,
      TimeBasedFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBasedFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBasedFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeBasedFilter));
  SortDirection_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TimeBasedFilter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeBasedFilter_descriptor_, &TimeBasedFilter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TimeBasedFilter_2eproto() {
  delete TimeBasedFilter::default_instance_;
  delete TimeBasedFilter_reflection_;
}

void protobuf_AddDesc_TimeBasedFilter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025TimeBasedFilter.proto\022\020Diadoc.Api.Prot"
    "o\032\017Timestamp.proto\"\272\001\n\017TimeBasedFilter\0222"
    "\n\rFromTimestamp\030\001 \001(\0132\033.Diadoc.Api.Proto"
    ".Timestamp\0220\n\013ToTimestamp\030\002 \001(\0132\033.Diadoc"
    ".Api.Proto.Timestamp\022A\n\rSortDirection\030\003 "
    "\001(\0162\037.Diadoc.Api.Proto.SortDirection:\tAs"
    "cending*H\n\rSortDirection\022\030\n\024UnknownSortD"
    "irection\020\000\022\r\n\tAscending\020\001\022\016\n\nDescending\020"
    "\002", 321);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TimeBasedFilter.proto", &protobuf_RegisterTypes);
  TimeBasedFilter::default_instance_ = new TimeBasedFilter();
  TimeBasedFilter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TimeBasedFilter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TimeBasedFilter_2eproto {
  StaticDescriptorInitializer_TimeBasedFilter_2eproto() {
    protobuf_AddDesc_TimeBasedFilter_2eproto();
  }
} static_descriptor_initializer_TimeBasedFilter_2eproto_;
const ::google::protobuf::EnumDescriptor* SortDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortDirection_descriptor_;
}
bool SortDirection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TimeBasedFilter::kFromTimestampFieldNumber;
const int TimeBasedFilter::kToTimestampFieldNumber;
const int TimeBasedFilter::kSortDirectionFieldNumber;
#endif  // !_MSC_VER

TimeBasedFilter::TimeBasedFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.TimeBasedFilter)
}

void TimeBasedFilter::InitAsDefaultInstance() {
  fromtimestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  totimestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
}

TimeBasedFilter::TimeBasedFilter(const TimeBasedFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.TimeBasedFilter)
}

void TimeBasedFilter::SharedCtor() {
  _cached_size_ = 0;
  fromtimestamp_ = NULL;
  totimestamp_ = NULL;
  sortdirection_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeBasedFilter::~TimeBasedFilter() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.TimeBasedFilter)
  SharedDtor();
}

void TimeBasedFilter::SharedDtor() {
  if (this != default_instance_) {
    delete fromtimestamp_;
    delete totimestamp_;
  }
}

void TimeBasedFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeBasedFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeBasedFilter_descriptor_;
}

const TimeBasedFilter& TimeBasedFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TimeBasedFilter_2eproto();
  return *default_instance_;
}

TimeBasedFilter* TimeBasedFilter::default_instance_ = NULL;

TimeBasedFilter* TimeBasedFilter::New() const {
  return new TimeBasedFilter;
}

void TimeBasedFilter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_fromtimestamp()) {
      if (fromtimestamp_ != NULL) fromtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_totimestamp()) {
      if (totimestamp_ != NULL) totimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    sortdirection_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeBasedFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.TimeBasedFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Timestamp FromTimestamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromtimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ToTimestamp;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp ToTimestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_ToTimestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_totimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SortDirection;
        break;
      }

      // optional .Diadoc.Api.Proto.SortDirection SortDirection = 3 [default = Ascending];
      case 3: {
        if (tag == 24) {
         parse_SortDirection:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::SortDirection_IsValid(value)) {
            set_sortdirection(static_cast< ::Diadoc::Api::Proto::SortDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.TimeBasedFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.TimeBasedFilter)
  return false;
#undef DO_
}

void TimeBasedFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.TimeBasedFilter)
  // optional .Diadoc.Api.Proto.Timestamp FromTimestamp = 1;
  if (has_fromtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fromtimestamp(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp ToTimestamp = 2;
  if (has_totimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->totimestamp(), output);
  }

  // optional .Diadoc.Api.Proto.SortDirection SortDirection = 3 [default = Ascending];
  if (has_sortdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sortdirection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.TimeBasedFilter)
}

::google::protobuf::uint8* TimeBasedFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.TimeBasedFilter)
  // optional .Diadoc.Api.Proto.Timestamp FromTimestamp = 1;
  if (has_fromtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fromtimestamp(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp ToTimestamp = 2;
  if (has_totimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->totimestamp(), target);
  }

  // optional .Diadoc.Api.Proto.SortDirection SortDirection = 3 [default = Ascending];
  if (has_sortdirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sortdirection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.TimeBasedFilter)
  return target;
}

int TimeBasedFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Timestamp FromTimestamp = 1;
    if (has_fromtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fromtimestamp());
    }

    // optional .Diadoc.Api.Proto.Timestamp ToTimestamp = 2;
    if (has_totimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->totimestamp());
    }

    // optional .Diadoc.Api.Proto.SortDirection SortDirection = 3 [default = Ascending];
    if (has_sortdirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sortdirection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeBasedFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeBasedFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeBasedFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeBasedFilter::MergeFrom(const TimeBasedFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromtimestamp()) {
      mutable_fromtimestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.fromtimestamp());
    }
    if (from.has_totimestamp()) {
      mutable_totimestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.totimestamp());
    }
    if (from.has_sortdirection()) {
      set_sortdirection(from.sortdirection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeBasedFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeBasedFilter::CopyFrom(const TimeBasedFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeBasedFilter::IsInitialized() const {

  if (has_fromtimestamp()) {
    if (!this->fromtimestamp().IsInitialized()) return false;
  }
  if (has_totimestamp()) {
    if (!this->totimestamp().IsInitialized()) return false;
  }
  return true;
}

void TimeBasedFilter::Swap(TimeBasedFilter* other) {
  if (other != this) {
    std::swap(fromtimestamp_, other->fromtimestamp_);
    std::swap(totimestamp_, other->totimestamp_);
    std::swap(sortdirection_, other->sortdirection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeBasedFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeBasedFilter_descriptor_;
  metadata.reflection = TimeBasedFilter_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
