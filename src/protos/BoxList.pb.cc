// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BoxList.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BoxList.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* BoxList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoxInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrgInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrgInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BoxList_2eproto() {
  protobuf_AddDesc_BoxList_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BoxList.proto");
  GOOGLE_CHECK(file != NULL);
  BoxList_descriptor_ = file->message_type(0);
  static const int BoxList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxList, boxes_),
  };
  BoxList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoxList_descriptor_,
      BoxList::default_instance_,
      BoxList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoxList));
  BoxInfo_descriptor_ = file->message_type(1);
  static const int BoxInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, boxname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, org_),
  };
  BoxInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoxInfo_descriptor_,
      BoxInfo::default_instance_,
      BoxInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoxInfo));
  OrgInfo_descriptor_ = file->message_type(2);
  static const int OrgInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgInfo, inn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgInfo, kpp_),
  };
  OrgInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrgInfo_descriptor_,
      OrgInfo::default_instance_,
      OrgInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrgInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrgInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BoxList_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoxList_descriptor_, &BoxList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoxInfo_descriptor_, &BoxInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrgInfo_descriptor_, &OrgInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BoxList_2eproto() {
  delete BoxList::default_instance_;
  delete BoxList_reflection_;
  delete BoxInfo::default_instance_;
  delete BoxInfo_reflection_;
  delete OrgInfo::default_instance_;
  delete OrgInfo_reflection_;
}

void protobuf_AddDesc_BoxList_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rBoxList.proto\022\020Diadoc.Api.Proto\"3\n\007Box"
    "List\022(\n\005Boxes\030\001 \003(\0132\031.Diadoc.Api.Proto.B"
    "oxInfo\"Q\n\007BoxInfo\022\r\n\005BoxId\030\001 \002(\t\022\017\n\007BoxN"
    "ame\030\002 \002(\t\022&\n\003Org\030\003 \002(\0132\031.Diadoc.Api.Prot"
    "o.OrgInfo\"1\n\007OrgInfo\022\014\n\004Name\030\001 \002(\t\022\013\n\003In"
    "n\030\002 \002(\t\022\013\n\003Kpp\030\003 \002(\t", 220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BoxList.proto", &protobuf_RegisterTypes);
  BoxList::default_instance_ = new BoxList();
  BoxInfo::default_instance_ = new BoxInfo();
  OrgInfo::default_instance_ = new OrgInfo();
  BoxList::default_instance_->InitAsDefaultInstance();
  BoxInfo::default_instance_->InitAsDefaultInstance();
  OrgInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BoxList_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BoxList_2eproto {
  StaticDescriptorInitializer_BoxList_2eproto() {
    protobuf_AddDesc_BoxList_2eproto();
  }
} static_descriptor_initializer_BoxList_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BoxList::kBoxesFieldNumber;
#endif  // !_MSC_VER

BoxList::BoxList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.BoxList)
}

void BoxList::InitAsDefaultInstance() {
}

BoxList::BoxList(const BoxList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.BoxList)
}

void BoxList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoxList::~BoxList() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.BoxList)
  SharedDtor();
}

void BoxList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoxList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxList_descriptor_;
}

const BoxList& BoxList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BoxList_2eproto();
  return *default_instance_;
}

BoxList* BoxList::default_instance_ = NULL;

BoxList* BoxList::New() const {
  return new BoxList;
}

void BoxList::Clear() {
  boxes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoxList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.BoxList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.BoxInfo Boxes = 1;
      case 1: {
        if (tag == 10) {
         parse_Boxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Boxes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.BoxList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.BoxList)
  return false;
#undef DO_
}

void BoxList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.BoxList)
  // repeated .Diadoc.Api.Proto.BoxInfo Boxes = 1;
  for (int i = 0; i < this->boxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->boxes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.BoxList)
}

::google::protobuf::uint8* BoxList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.BoxList)
  // repeated .Diadoc.Api.Proto.BoxInfo Boxes = 1;
  for (int i = 0; i < this->boxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->boxes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.BoxList)
  return target;
}

int BoxList::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.BoxInfo Boxes = 1;
  total_size += 1 * this->boxes_size();
  for (int i = 0; i < this->boxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoxList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoxList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoxList::MergeFrom(const BoxList& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxes_.MergeFrom(from.boxes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoxList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxList::CopyFrom(const BoxList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->boxes())) return false;
  return true;
}

void BoxList::Swap(BoxList* other) {
  if (other != this) {
    boxes_.Swap(&other->boxes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoxList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxList_descriptor_;
  metadata.reflection = BoxList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoxInfo::kBoxIdFieldNumber;
const int BoxInfo::kBoxNameFieldNumber;
const int BoxInfo::kOrgFieldNumber;
#endif  // !_MSC_VER

BoxInfo::BoxInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.BoxInfo)
}

void BoxInfo::InitAsDefaultInstance() {
  org_ = const_cast< ::Diadoc::Api::Proto::OrgInfo*>(&::Diadoc::Api::Proto::OrgInfo::default_instance());
}

BoxInfo::BoxInfo(const BoxInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.BoxInfo)
}

void BoxInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boxname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  org_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoxInfo::~BoxInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.BoxInfo)
  SharedDtor();
}

void BoxInfo::SharedDtor() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (boxname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxname_;
  }
  if (this != default_instance_) {
    delete org_;
  }
}

void BoxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxInfo_descriptor_;
}

const BoxInfo& BoxInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BoxList_2eproto();
  return *default_instance_;
}

BoxInfo* BoxInfo::default_instance_ = NULL;

BoxInfo* BoxInfo::New() const {
  return new BoxInfo;
}

void BoxInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_boxid()) {
      if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boxid_->clear();
      }
    }
    if (has_boxname()) {
      if (boxname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boxname_->clear();
      }
    }
    if (has_org()) {
      if (org_ != NULL) org_->::Diadoc::Api::Proto::OrgInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.BoxInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BoxId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BoxName;
        break;
      }

      // required string BoxName = 2;
      case 2: {
        if (tag == 18) {
         parse_BoxName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxname().data(), this->boxname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Org;
        break;
      }

      // required .Diadoc.Api.Proto.OrgInfo Org = 3;
      case 3: {
        if (tag == 26) {
         parse_Org:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_org()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.BoxInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.BoxInfo)
  return false;
#undef DO_
}

void BoxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.BoxInfo)
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->boxid(), output);
  }

  // required string BoxName = 2;
  if (has_boxname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxname().data(), this->boxname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->boxname(), output);
  }

  // required .Diadoc.Api.Proto.OrgInfo Org = 3;
  if (has_org()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->org(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.BoxInfo)
}

::google::protobuf::uint8* BoxInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.BoxInfo)
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->boxid(), target);
  }

  // required string BoxName = 2;
  if (has_boxname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxname().data(), this->boxname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->boxname(), target);
  }

  // required .Diadoc.Api.Proto.OrgInfo Org = 3;
  if (has_org()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->org(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.BoxInfo)
  return target;
}

int BoxInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BoxId = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

    // required string BoxName = 2;
    if (has_boxname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxname());
    }

    // required .Diadoc.Api.Proto.OrgInfo Org = 3;
    if (has_org()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->org());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoxInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoxInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoxInfo::MergeFrom(const BoxInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_boxname()) {
      set_boxname(from.boxname());
    }
    if (from.has_org()) {
      mutable_org()->::Diadoc::Api::Proto::OrgInfo::MergeFrom(from.org());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoxInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxInfo::CopyFrom(const BoxInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_org()) {
    if (!this->org().IsInitialized()) return false;
  }
  return true;
}

void BoxInfo::Swap(BoxInfo* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(boxname_, other->boxname_);
    std::swap(org_, other->org_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoxInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxInfo_descriptor_;
  metadata.reflection = BoxInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrgInfo::kNameFieldNumber;
const int OrgInfo::kInnFieldNumber;
const int OrgInfo::kKppFieldNumber;
#endif  // !_MSC_VER

OrgInfo::OrgInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.OrgInfo)
}

void OrgInfo::InitAsDefaultInstance() {
}

OrgInfo::OrgInfo(const OrgInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.OrgInfo)
}

void OrgInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kpp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrgInfo::~OrgInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.OrgInfo)
  SharedDtor();
}

void OrgInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inn_;
  }
  if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kpp_;
  }
  if (this != default_instance_) {
  }
}

void OrgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrgInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrgInfo_descriptor_;
}

const OrgInfo& OrgInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BoxList_2eproto();
  return *default_instance_;
}

OrgInfo* OrgInfo::default_instance_ = NULL;

OrgInfo* OrgInfo::New() const {
  return new OrgInfo;
}

void OrgInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_inn()) {
      if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inn_->clear();
      }
    }
    if (has_kpp()) {
      if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        kpp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.OrgInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Inn;
        break;
      }

      // required string Inn = 2;
      case 2: {
        if (tag == 18) {
         parse_Inn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inn().data(), this->inn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Kpp;
        break;
      }

      // required string Kpp = 3;
      case 3: {
        if (tag == 26) {
         parse_Kpp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kpp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->kpp().data(), this->kpp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kpp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.OrgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.OrgInfo)
  return false;
#undef DO_
}

void OrgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.OrgInfo)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string Inn = 2;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inn(), output);
  }

  // required string Kpp = 3;
  if (has_kpp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kpp().data(), this->kpp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kpp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->kpp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.OrgInfo)
}

::google::protobuf::uint8* OrgInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.OrgInfo)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string Inn = 2;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inn(), target);
  }

  // required string Kpp = 3;
  if (has_kpp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kpp().data(), this->kpp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kpp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->kpp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.OrgInfo)
  return target;
}

int OrgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string Inn = 2;
    if (has_inn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inn());
    }

    // required string Kpp = 3;
    if (has_kpp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kpp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrgInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrgInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrgInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrgInfo::MergeFrom(const OrgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_inn()) {
      set_inn(from.inn());
    }
    if (from.has_kpp()) {
      set_kpp(from.kpp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrgInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrgInfo::CopyFrom(const OrgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrgInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OrgInfo::Swap(OrgInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(inn_, other->inn_);
    std::swap(kpp_, other->kpp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrgInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrgInfo_descriptor_;
  metadata.reflection = OrgInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
