// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExternalServiceAuthInfo.proto

#ifndef PROTOBUF_ExternalServiceAuthInfo_2eproto__INCLUDED
#define PROTOBUF_ExternalServiceAuthInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ExternalServiceAuthInfo_2eproto();
void protobuf_AssignDesc_ExternalServiceAuthInfo_2eproto();
void protobuf_ShutdownFile_ExternalServiceAuthInfo_2eproto();

class ExternalServiceAuthInfo;

// ===================================================================

class ExternalServiceAuthInfo : public ::google::protobuf::Message {
 public:
  ExternalServiceAuthInfo();
  virtual ~ExternalServiceAuthInfo();

  ExternalServiceAuthInfo(const ExternalServiceAuthInfo& from);

  inline ExternalServiceAuthInfo& operator=(const ExternalServiceAuthInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExternalServiceAuthInfo& default_instance();

  void Swap(ExternalServiceAuthInfo* other);

  // implements Message ----------------------------------------------

  ExternalServiceAuthInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExternalServiceAuthInfo& from);
  void MergeFrom(const ExternalServiceAuthInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ServiceUserId = 1;
  inline bool has_serviceuserid() const;
  inline void clear_serviceuserid();
  static const int kServiceUserIdFieldNumber = 1;
  inline const ::std::string& serviceuserid() const;
  inline void set_serviceuserid(const ::std::string& value);
  inline void set_serviceuserid(const char* value);
  inline void set_serviceuserid(const char* value, size_t size);
  inline ::std::string* mutable_serviceuserid();
  inline ::std::string* release_serviceuserid();
  inline void set_allocated_serviceuserid(::std::string* serviceuserid);

  // optional string Thumbprint = 2;
  inline bool has_thumbprint() const;
  inline void clear_thumbprint();
  static const int kThumbprintFieldNumber = 2;
  inline const ::std::string& thumbprint() const;
  inline void set_thumbprint(const ::std::string& value);
  inline void set_thumbprint(const char* value);
  inline void set_thumbprint(const char* value, size_t size);
  inline ::std::string* mutable_thumbprint();
  inline ::std::string* release_thumbprint();
  inline void set_allocated_thumbprint(::std::string* thumbprint);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.ExternalServiceAuthInfo)
 private:
  inline void set_has_serviceuserid();
  inline void clear_has_serviceuserid();
  inline void set_has_thumbprint();
  inline void clear_has_thumbprint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* serviceuserid_;
  ::std::string* thumbprint_;
  friend void  protobuf_AddDesc_ExternalServiceAuthInfo_2eproto();
  friend void protobuf_AssignDesc_ExternalServiceAuthInfo_2eproto();
  friend void protobuf_ShutdownFile_ExternalServiceAuthInfo_2eproto();

  void InitAsDefaultInstance();
  static ExternalServiceAuthInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ExternalServiceAuthInfo

// optional string ServiceUserId = 1;
inline bool ExternalServiceAuthInfo::has_serviceuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExternalServiceAuthInfo::set_has_serviceuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExternalServiceAuthInfo::clear_has_serviceuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExternalServiceAuthInfo::clear_serviceuserid() {
  if (serviceuserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceuserid_->clear();
  }
  clear_has_serviceuserid();
}
inline const ::std::string& ExternalServiceAuthInfo::serviceuserid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.ExternalServiceAuthInfo.ServiceUserId)
  return *serviceuserid_;
}
inline void ExternalServiceAuthInfo::set_serviceuserid(const ::std::string& value) {
  set_has_serviceuserid();
  if (serviceuserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceuserid_ = new ::std::string;
  }
  serviceuserid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.ExternalServiceAuthInfo.ServiceUserId)
}
inline void ExternalServiceAuthInfo::set_serviceuserid(const char* value) {
  set_has_serviceuserid();
  if (serviceuserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceuserid_ = new ::std::string;
  }
  serviceuserid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.ExternalServiceAuthInfo.ServiceUserId)
}
inline void ExternalServiceAuthInfo::set_serviceuserid(const char* value, size_t size) {
  set_has_serviceuserid();
  if (serviceuserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceuserid_ = new ::std::string;
  }
  serviceuserid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.ExternalServiceAuthInfo.ServiceUserId)
}
inline ::std::string* ExternalServiceAuthInfo::mutable_serviceuserid() {
  set_has_serviceuserid();
  if (serviceuserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceuserid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.ExternalServiceAuthInfo.ServiceUserId)
  return serviceuserid_;
}
inline ::std::string* ExternalServiceAuthInfo::release_serviceuserid() {
  clear_has_serviceuserid();
  if (serviceuserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serviceuserid_;
    serviceuserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExternalServiceAuthInfo::set_allocated_serviceuserid(::std::string* serviceuserid) {
  if (serviceuserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceuserid_;
  }
  if (serviceuserid) {
    set_has_serviceuserid();
    serviceuserid_ = serviceuserid;
  } else {
    clear_has_serviceuserid();
    serviceuserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.ExternalServiceAuthInfo.ServiceUserId)
}

// optional string Thumbprint = 2;
inline bool ExternalServiceAuthInfo::has_thumbprint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExternalServiceAuthInfo::set_has_thumbprint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExternalServiceAuthInfo::clear_has_thumbprint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExternalServiceAuthInfo::clear_thumbprint() {
  if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_->clear();
  }
  clear_has_thumbprint();
}
inline const ::std::string& ExternalServiceAuthInfo::thumbprint() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.ExternalServiceAuthInfo.Thumbprint)
  return *thumbprint_;
}
inline void ExternalServiceAuthInfo::set_thumbprint(const ::std::string& value) {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  thumbprint_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.ExternalServiceAuthInfo.Thumbprint)
}
inline void ExternalServiceAuthInfo::set_thumbprint(const char* value) {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  thumbprint_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.ExternalServiceAuthInfo.Thumbprint)
}
inline void ExternalServiceAuthInfo::set_thumbprint(const char* value, size_t size) {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  thumbprint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.ExternalServiceAuthInfo.Thumbprint)
}
inline ::std::string* ExternalServiceAuthInfo::mutable_thumbprint() {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.ExternalServiceAuthInfo.Thumbprint)
  return thumbprint_;
}
inline ::std::string* ExternalServiceAuthInfo::release_thumbprint() {
  clear_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = thumbprint_;
    thumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExternalServiceAuthInfo::set_allocated_thumbprint(::std::string* thumbprint) {
  if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumbprint_;
  }
  if (thumbprint) {
    set_has_thumbprint();
    thumbprint_ = thumbprint;
  } else {
    clear_has_thumbprint();
    thumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.ExternalServiceAuthInfo.Thumbprint)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ExternalServiceAuthInfo_2eproto__INCLUDED
