// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResolutionTarget.proto

#ifndef PROTOBUF_ResolutionTarget_2eproto__INCLUDED
#define PROTOBUF_ResolutionTarget_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ResolutionTarget_2eproto();
void protobuf_AssignDesc_ResolutionTarget_2eproto();
void protobuf_ShutdownFile_ResolutionTarget_2eproto();

class ResolutionTarget;

// ===================================================================

class ResolutionTarget : public ::google::protobuf::Message {
 public:
  ResolutionTarget();
  virtual ~ResolutionTarget();

  ResolutionTarget(const ResolutionTarget& from);

  inline ResolutionTarget& operator=(const ResolutionTarget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionTarget& default_instance();

  void Swap(ResolutionTarget* other);

  // implements Message ----------------------------------------------

  ResolutionTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionTarget& from);
  void MergeFrom(const ResolutionTarget& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Department = 1;
  inline bool has_department() const;
  inline void clear_department();
  static const int kDepartmentFieldNumber = 1;
  inline const ::std::string& department() const;
  inline void set_department(const ::std::string& value);
  inline void set_department(const char* value);
  inline void set_department(const char* value, size_t size);
  inline ::std::string* mutable_department();
  inline ::std::string* release_department();
  inline void set_allocated_department(::std::string* department);

  // optional string DepartmentId = 2;
  inline bool has_departmentid() const;
  inline void clear_departmentid();
  static const int kDepartmentIdFieldNumber = 2;
  inline const ::std::string& departmentid() const;
  inline void set_departmentid(const ::std::string& value);
  inline void set_departmentid(const char* value);
  inline void set_departmentid(const char* value, size_t size);
  inline ::std::string* mutable_departmentid();
  inline ::std::string* release_departmentid();
  inline void set_allocated_departmentid(::std::string* departmentid);

  // optional string User = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string UserId = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 4;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.ResolutionTarget)
 private:
  inline void set_has_department();
  inline void clear_has_department();
  inline void set_has_departmentid();
  inline void clear_has_departmentid();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* department_;
  ::std::string* departmentid_;
  ::std::string* user_;
  ::std::string* userid_;
  friend void  protobuf_AddDesc_ResolutionTarget_2eproto();
  friend void protobuf_AssignDesc_ResolutionTarget_2eproto();
  friend void protobuf_ShutdownFile_ResolutionTarget_2eproto();

  void InitAsDefaultInstance();
  static ResolutionTarget* default_instance_;
};
// ===================================================================


// ===================================================================

// ResolutionTarget

// optional string Department = 1;
inline bool ResolutionTarget::has_department() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionTarget::set_has_department() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolutionTarget::clear_has_department() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolutionTarget::clear_department() {
  if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    department_->clear();
  }
  clear_has_department();
}
inline const ::std::string& ResolutionTarget::department() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.ResolutionTarget.Department)
  return *department_;
}
inline void ResolutionTarget::set_department(const ::std::string& value) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    department_ = new ::std::string;
  }
  department_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.ResolutionTarget.Department)
}
inline void ResolutionTarget::set_department(const char* value) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    department_ = new ::std::string;
  }
  department_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.ResolutionTarget.Department)
}
inline void ResolutionTarget::set_department(const char* value, size_t size) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    department_ = new ::std::string;
  }
  department_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.ResolutionTarget.Department)
}
inline ::std::string* ResolutionTarget::mutable_department() {
  set_has_department();
  if (department_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    department_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.ResolutionTarget.Department)
  return department_;
}
inline ::std::string* ResolutionTarget::release_department() {
  clear_has_department();
  if (department_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = department_;
    department_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionTarget::set_allocated_department(::std::string* department) {
  if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete department_;
  }
  if (department) {
    set_has_department();
    department_ = department;
  } else {
    clear_has_department();
    department_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.ResolutionTarget.Department)
}

// optional string DepartmentId = 2;
inline bool ResolutionTarget::has_departmentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolutionTarget::set_has_departmentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolutionTarget::clear_has_departmentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolutionTarget::clear_departmentid() {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_->clear();
  }
  clear_has_departmentid();
}
inline const ::std::string& ResolutionTarget::departmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.ResolutionTarget.DepartmentId)
  return *departmentid_;
}
inline void ResolutionTarget::set_departmentid(const ::std::string& value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.ResolutionTarget.DepartmentId)
}
inline void ResolutionTarget::set_departmentid(const char* value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.ResolutionTarget.DepartmentId)
}
inline void ResolutionTarget::set_departmentid(const char* value, size_t size) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.ResolutionTarget.DepartmentId)
}
inline ::std::string* ResolutionTarget::mutable_departmentid() {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.ResolutionTarget.DepartmentId)
  return departmentid_;
}
inline ::std::string* ResolutionTarget::release_departmentid() {
  clear_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = departmentid_;
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionTarget::set_allocated_departmentid(::std::string* departmentid) {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete departmentid_;
  }
  if (departmentid) {
    set_has_departmentid();
    departmentid_ = departmentid;
  } else {
    clear_has_departmentid();
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.ResolutionTarget.DepartmentId)
}

// optional string User = 3;
inline bool ResolutionTarget::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolutionTarget::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolutionTarget::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolutionTarget::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& ResolutionTarget::user() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.ResolutionTarget.User)
  return *user_;
}
inline void ResolutionTarget::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.ResolutionTarget.User)
}
inline void ResolutionTarget::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.ResolutionTarget.User)
}
inline void ResolutionTarget::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.ResolutionTarget.User)
}
inline ::std::string* ResolutionTarget::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.ResolutionTarget.User)
  return user_;
}
inline ::std::string* ResolutionTarget::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionTarget::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.ResolutionTarget.User)
}

// optional string UserId = 4;
inline bool ResolutionTarget::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolutionTarget::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolutionTarget::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolutionTarget::clear_userid() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& ResolutionTarget::userid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.ResolutionTarget.UserId)
  return *userid_;
}
inline void ResolutionTarget::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.ResolutionTarget.UserId)
}
inline void ResolutionTarget::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.ResolutionTarget.UserId)
}
inline void ResolutionTarget::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.ResolutionTarget.UserId)
}
inline ::std::string* ResolutionTarget::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.ResolutionTarget.UserId)
  return userid_;
}
inline ::std::string* ResolutionTarget::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionTarget::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.ResolutionTarget.UserId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ResolutionTarget_2eproto__INCLUDED
