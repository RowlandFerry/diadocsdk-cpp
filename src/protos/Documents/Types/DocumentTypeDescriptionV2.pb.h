// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Documents/Types/DocumentTypeDescriptionV2.proto

#ifndef PROTOBUF_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto__INCLUDED
#define PROTOBUF_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Documents {
namespace Types {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
void protobuf_AssignDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
void protobuf_ShutdownFile_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();

class DocumentTypeDescriptionV2;
class GetDocumentTypesResponseV2;
class DocumentFunctionV2;
class DocumentVersionV2;
class DocumentWorkflowV2;
class DocumentTitleV2;
class SignerInfoV2;
class DocumentMetadataItemV2;

// ===================================================================

class DocumentTypeDescriptionV2 : public ::google::protobuf::Message {
 public:
  DocumentTypeDescriptionV2();
  virtual ~DocumentTypeDescriptionV2();

  DocumentTypeDescriptionV2(const DocumentTypeDescriptionV2& from);

  inline DocumentTypeDescriptionV2& operator=(const DocumentTypeDescriptionV2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentTypeDescriptionV2& default_instance();

  void Swap(DocumentTypeDescriptionV2* other);

  // implements Message ----------------------------------------------

  DocumentTypeDescriptionV2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentTypeDescriptionV2& from);
  void MergeFrom(const DocumentTypeDescriptionV2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string Title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // repeated int32 SupportedDocflows = 3;
  inline int supporteddocflows_size() const;
  inline void clear_supporteddocflows();
  static const int kSupportedDocflowsFieldNumber = 3;
  inline ::google::protobuf::int32 supporteddocflows(int index) const;
  inline void set_supporteddocflows(int index, ::google::protobuf::int32 value);
  inline void add_supporteddocflows(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      supporteddocflows() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_supporteddocflows();

  // required bool RequiresFnsRegistration = 4;
  inline bool has_requiresfnsregistration() const;
  inline void clear_requiresfnsregistration();
  static const int kRequiresFnsRegistrationFieldNumber = 4;
  inline bool requiresfnsregistration() const;
  inline void set_requiresfnsregistration(bool value);

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2 Functions = 9;
  inline int functions_size() const;
  inline void clear_functions();
  static const int kFunctionsFieldNumber = 9;
  inline const ::Diadoc::Api::Proto::Documents::Types::DocumentFunctionV2& functions(int index) const;
  inline ::Diadoc::Api::Proto::Documents::Types::DocumentFunctionV2* mutable_functions(int index);
  inline ::Diadoc::Api::Proto::Documents::Types::DocumentFunctionV2* add_functions();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentFunctionV2 >&
      functions() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentFunctionV2 >*
      mutable_functions();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_requiresfnsregistration();
  inline void clear_has_requiresfnsregistration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* title_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > supporteddocflows_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentFunctionV2 > functions_;
  bool requiresfnsregistration_;
  friend void  protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_AssignDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();

  void InitAsDefaultInstance();
  static DocumentTypeDescriptionV2* default_instance_;
};
// -------------------------------------------------------------------

class GetDocumentTypesResponseV2 : public ::google::protobuf::Message {
 public:
  GetDocumentTypesResponseV2();
  virtual ~GetDocumentTypesResponseV2();

  GetDocumentTypesResponseV2(const GetDocumentTypesResponseV2& from);

  inline GetDocumentTypesResponseV2& operator=(const GetDocumentTypesResponseV2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDocumentTypesResponseV2& default_instance();

  void Swap(GetDocumentTypesResponseV2* other);

  // implements Message ----------------------------------------------

  GetDocumentTypesResponseV2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDocumentTypesResponseV2& from);
  void MergeFrom(const GetDocumentTypesResponseV2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2 DocumentTypes = 1;
  inline int documenttypes_size() const;
  inline void clear_documenttypes();
  static const int kDocumentTypesFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Documents::Types::DocumentTypeDescriptionV2& documenttypes(int index) const;
  inline ::Diadoc::Api::Proto::Documents::Types::DocumentTypeDescriptionV2* mutable_documenttypes(int index);
  inline ::Diadoc::Api::Proto::Documents::Types::DocumentTypeDescriptionV2* add_documenttypes();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentTypeDescriptionV2 >&
      documenttypes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentTypeDescriptionV2 >*
      mutable_documenttypes();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentTypeDescriptionV2 > documenttypes_;
  friend void  protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_AssignDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();

  void InitAsDefaultInstance();
  static GetDocumentTypesResponseV2* default_instance_;
};
// -------------------------------------------------------------------

class DocumentFunctionV2 : public ::google::protobuf::Message {
 public:
  DocumentFunctionV2();
  virtual ~DocumentFunctionV2();

  DocumentFunctionV2(const DocumentFunctionV2& from);

  inline DocumentFunctionV2& operator=(const DocumentFunctionV2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentFunctionV2& default_instance();

  void Swap(DocumentFunctionV2* other);

  // implements Message ----------------------------------------------

  DocumentFunctionV2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentFunctionV2& from);
  void MergeFrom(const DocumentFunctionV2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentVersionV2 Versions = 2;
  inline int versions_size() const;
  inline void clear_versions();
  static const int kVersionsFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Documents::Types::DocumentVersionV2& versions(int index) const;
  inline ::Diadoc::Api::Proto::Documents::Types::DocumentVersionV2* mutable_versions(int index);
  inline ::Diadoc::Api::Proto::Documents::Types::DocumentVersionV2* add_versions();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentVersionV2 >&
      versions() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentVersionV2 >*
      mutable_versions();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentVersionV2 > versions_;
  friend void  protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_AssignDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();

  void InitAsDefaultInstance();
  static DocumentFunctionV2* default_instance_;
};
// -------------------------------------------------------------------

class DocumentVersionV2 : public ::google::protobuf::Message {
 public:
  DocumentVersionV2();
  virtual ~DocumentVersionV2();

  DocumentVersionV2(const DocumentVersionV2& from);

  inline DocumentVersionV2& operator=(const DocumentVersionV2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentVersionV2& default_instance();

  void Swap(DocumentVersionV2* other);

  // implements Message ----------------------------------------------

  DocumentVersionV2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentVersionV2& from);
  void MergeFrom(const DocumentVersionV2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // required bool SupportsContentPatching = 2;
  inline bool has_supportscontentpatching() const;
  inline void clear_supportscontentpatching();
  static const int kSupportsContentPatchingFieldNumber = 2;
  inline bool supportscontentpatching() const;
  inline void set_supportscontentpatching(bool value);

  // required bool SupportsEncrypting = 3;
  inline bool has_supportsencrypting() const;
  inline void clear_supportsencrypting();
  static const int kSupportsEncryptingFieldNumber = 3;
  inline bool supportsencrypting() const;
  inline void set_supportsencrypting(bool value);

  // required bool SupportsPredefinedRecipientTitle = 7;
  inline bool has_supportspredefinedrecipienttitle() const;
  inline void clear_supportspredefinedrecipienttitle();
  static const int kSupportsPredefinedRecipientTitleFieldNumber = 7;
  inline bool supportspredefinedrecipienttitle() const;
  inline void set_supportspredefinedrecipienttitle(bool value);

  // required bool SupportsAmendmentRequest = 8;
  inline bool has_supportsamendmentrequest() const;
  inline void clear_supportsamendmentrequest();
  static const int kSupportsAmendmentRequestFieldNumber = 8;
  inline bool supportsamendmentrequest() const;
  inline void set_supportsamendmentrequest(bool value);

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTitleV2 Titles = 4;
  inline int titles_size() const;
  inline void clear_titles();
  static const int kTitlesFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Documents::Types::DocumentTitleV2& titles(int index) const;
  inline ::Diadoc::Api::Proto::Documents::Types::DocumentTitleV2* mutable_titles(int index);
  inline ::Diadoc::Api::Proto::Documents::Types::DocumentTitleV2* add_titles();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentTitleV2 >&
      titles() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentTitleV2 >*
      mutable_titles();

  // required bool IsActual = 5;
  inline bool has_isactual() const;
  inline void clear_isactual();
  static const int kIsActualFieldNumber = 5;
  inline bool isactual() const;
  inline void set_isactual(bool value);

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2 Workflows = 6;
  inline int workflows_size() const;
  inline void clear_workflows();
  static const int kWorkflowsFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::Documents::Types::DocumentWorkflowV2& workflows(int index) const;
  inline ::Diadoc::Api::Proto::Documents::Types::DocumentWorkflowV2* mutable_workflows(int index);
  inline ::Diadoc::Api::Proto::Documents::Types::DocumentWorkflowV2* add_workflows();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentWorkflowV2 >&
      workflows() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentWorkflowV2 >*
      mutable_workflows();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_supportscontentpatching();
  inline void clear_has_supportscontentpatching();
  inline void set_has_supportsencrypting();
  inline void clear_has_supportsencrypting();
  inline void set_has_supportspredefinedrecipienttitle();
  inline void clear_has_supportspredefinedrecipienttitle();
  inline void set_has_supportsamendmentrequest();
  inline void clear_has_supportsamendmentrequest();
  inline void set_has_isactual();
  inline void clear_has_isactual();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* version_;
  bool supportscontentpatching_;
  bool supportsencrypting_;
  bool supportspredefinedrecipienttitle_;
  bool supportsamendmentrequest_;
  bool isactual_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentTitleV2 > titles_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentWorkflowV2 > workflows_;
  friend void  protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_AssignDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();

  void InitAsDefaultInstance();
  static DocumentVersionV2* default_instance_;
};
// -------------------------------------------------------------------

class DocumentWorkflowV2 : public ::google::protobuf::Message {
 public:
  DocumentWorkflowV2();
  virtual ~DocumentWorkflowV2();

  DocumentWorkflowV2(const DocumentWorkflowV2& from);

  inline DocumentWorkflowV2& operator=(const DocumentWorkflowV2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentWorkflowV2& default_instance();

  void Swap(DocumentWorkflowV2* other);

  // implements Message ----------------------------------------------

  DocumentWorkflowV2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentWorkflowV2& from);
  void MergeFrom(const DocumentWorkflowV2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required bool IsDefault = 2;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 2;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  bool isdefault_;
  friend void  protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_AssignDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();

  void InitAsDefaultInstance();
  static DocumentWorkflowV2* default_instance_;
};
// -------------------------------------------------------------------

class DocumentTitleV2 : public ::google::protobuf::Message {
 public:
  DocumentTitleV2();
  virtual ~DocumentTitleV2();

  DocumentTitleV2(const DocumentTitleV2& from);

  inline DocumentTitleV2& operator=(const DocumentTitleV2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentTitleV2& default_instance();

  void Swap(DocumentTitleV2* other);

  // implements Message ----------------------------------------------

  DocumentTitleV2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentTitleV2& from);
  void MergeFrom(const DocumentTitleV2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Index = 7;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 7;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required bool IsFormal = 1;
  inline bool has_isformal() const;
  inline void clear_isformal();
  static const int kIsFormalFieldNumber = 1;
  inline bool isformal() const;
  inline void set_isformal(bool value);

  // optional string XsdUrl = 2;
  inline bool has_xsdurl() const;
  inline void clear_xsdurl();
  static const int kXsdUrlFieldNumber = 2;
  inline const ::std::string& xsdurl() const;
  inline void set_xsdurl(const ::std::string& value);
  inline void set_xsdurl(const char* value);
  inline void set_xsdurl(const char* value, size_t size);
  inline ::std::string* mutable_xsdurl();
  inline ::std::string* release_xsdurl();
  inline void set_allocated_xsdurl(::std::string* xsdurl);

  // optional string UserDataXsdUrl = 5;
  inline bool has_userdataxsdurl() const;
  inline void clear_userdataxsdurl();
  static const int kUserDataXsdUrlFieldNumber = 5;
  inline const ::std::string& userdataxsdurl() const;
  inline void set_userdataxsdurl(const ::std::string& value);
  inline void set_userdataxsdurl(const char* value);
  inline void set_userdataxsdurl(const char* value, size_t size);
  inline ::std::string* mutable_userdataxsdurl();
  inline ::std::string* release_userdataxsdurl();
  inline void set_allocated_userdataxsdurl(::std::string* userdataxsdurl);

  // required .Diadoc.Api.Proto.Documents.Types.SignerInfoV2 SignerInfo = 6;
  inline bool has_signerinfo() const;
  inline void clear_signerinfo();
  static const int kSignerInfoFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::Documents::Types::SignerInfoV2& signerinfo() const;
  inline ::Diadoc::Api::Proto::Documents::Types::SignerInfoV2* mutable_signerinfo();
  inline ::Diadoc::Api::Proto::Documents::Types::SignerInfoV2* release_signerinfo();
  inline void set_allocated_signerinfo(::Diadoc::Api::Proto::Documents::Types::SignerInfoV2* signerinfo);

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2 MetadataItems = 3;
  inline int metadataitems_size() const;
  inline void clear_metadataitems();
  static const int kMetadataItemsFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2& metadataitems(int index) const;
  inline ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2* mutable_metadataitems(int index);
  inline ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2* add_metadataitems();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2 >&
      metadataitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2 >*
      mutable_metadataitems();

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2 EncryptedMetadataItems = 4;
  inline int encryptedmetadataitems_size() const;
  inline void clear_encryptedmetadataitems();
  static const int kEncryptedMetadataItemsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2& encryptedmetadataitems(int index) const;
  inline ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2* mutable_encryptedmetadataitems(int index);
  inline ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2* add_encryptedmetadataitems();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2 >&
      encryptedmetadataitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2 >*
      mutable_encryptedmetadataitems();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_isformal();
  inline void clear_has_isformal();
  inline void set_has_xsdurl();
  inline void clear_has_xsdurl();
  inline void set_has_userdataxsdurl();
  inline void clear_has_userdataxsdurl();
  inline void set_has_signerinfo();
  inline void clear_has_signerinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 index_;
  bool isformal_;
  ::std::string* xsdurl_;
  ::std::string* userdataxsdurl_;
  ::Diadoc::Api::Proto::Documents::Types::SignerInfoV2* signerinfo_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2 > metadataitems_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2 > encryptedmetadataitems_;
  friend void  protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_AssignDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();

  void InitAsDefaultInstance();
  static DocumentTitleV2* default_instance_;
};
// -------------------------------------------------------------------

class SignerInfoV2 : public ::google::protobuf::Message {
 public:
  SignerInfoV2();
  virtual ~SignerInfoV2();

  SignerInfoV2(const SignerInfoV2& from);

  inline SignerInfoV2& operator=(const SignerInfoV2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignerInfoV2& default_instance();

  void Swap(SignerInfoV2* other);

  // implements Message ----------------------------------------------

  SignerInfoV2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignerInfoV2& from);
  void MergeFrom(const SignerInfoV2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 SignerType = 1;
  inline bool has_signertype() const;
  inline void clear_signertype();
  static const int kSignerTypeFieldNumber = 1;
  inline ::google::protobuf::int32 signertype() const;
  inline void set_signertype(::google::protobuf::int32 value);

  // required int32 ExtendedDocumentTitleType = 2 [default = -1];
  inline bool has_extendeddocumenttitletype() const;
  inline void clear_extendeddocumenttitletype();
  static const int kExtendedDocumentTitleTypeFieldNumber = 2;
  inline ::google::protobuf::int32 extendeddocumenttitletype() const;
  inline void set_extendeddocumenttitletype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.Types.SignerInfoV2)
 private:
  inline void set_has_signertype();
  inline void clear_has_signertype();
  inline void set_has_extendeddocumenttitletype();
  inline void clear_has_extendeddocumenttitletype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 signertype_;
  ::google::protobuf::int32 extendeddocumenttitletype_;
  friend void  protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_AssignDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();

  void InitAsDefaultInstance();
  static SignerInfoV2* default_instance_;
};
// -------------------------------------------------------------------

class DocumentMetadataItemV2 : public ::google::protobuf::Message {
 public:
  DocumentMetadataItemV2();
  virtual ~DocumentMetadataItemV2();

  DocumentMetadataItemV2(const DocumentMetadataItemV2& from);

  inline DocumentMetadataItemV2& operator=(const DocumentMetadataItemV2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentMetadataItemV2& default_instance();

  void Swap(DocumentMetadataItemV2* other);

  // implements Message ----------------------------------------------

  DocumentMetadataItemV2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentMetadataItemV2& from);
  void MergeFrom(const DocumentMetadataItemV2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 Type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required bool IsRequired = 3;
  inline bool has_isrequired() const;
  inline void clear_isrequired();
  static const int kIsRequiredFieldNumber = 3;
  inline bool isrequired() const;
  inline void set_isrequired(bool value);

  // required int32 Source = 4;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 4;
  inline ::google::protobuf::int32 source() const;
  inline void set_source(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_isrequired();
  inline void clear_has_isrequired();
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::int32 type_;
  bool isrequired_;
  ::google::protobuf::int32 source_;
  friend void  protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_AssignDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();

  void InitAsDefaultInstance();
  static DocumentMetadataItemV2* default_instance_;
};
// ===================================================================


// ===================================================================

// DocumentTypeDescriptionV2

// required string Name = 1;
inline bool DocumentTypeDescriptionV2::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentTypeDescriptionV2::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentTypeDescriptionV2::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentTypeDescriptionV2::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DocumentTypeDescriptionV2::name() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Name)
  return *name_;
}
inline void DocumentTypeDescriptionV2::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Name)
}
inline void DocumentTypeDescriptionV2::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Name)
}
inline void DocumentTypeDescriptionV2::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Name)
}
inline ::std::string* DocumentTypeDescriptionV2::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Name)
  return name_;
}
inline ::std::string* DocumentTypeDescriptionV2::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentTypeDescriptionV2::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Name)
}

// required string Title = 2;
inline bool DocumentTypeDescriptionV2::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentTypeDescriptionV2::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentTypeDescriptionV2::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentTypeDescriptionV2::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& DocumentTypeDescriptionV2::title() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Title)
  return *title_;
}
inline void DocumentTypeDescriptionV2::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Title)
}
inline void DocumentTypeDescriptionV2::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Title)
}
inline void DocumentTypeDescriptionV2::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Title)
}
inline ::std::string* DocumentTypeDescriptionV2::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Title)
  return title_;
}
inline ::std::string* DocumentTypeDescriptionV2::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentTypeDescriptionV2::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Title)
}

// repeated int32 SupportedDocflows = 3;
inline int DocumentTypeDescriptionV2::supporteddocflows_size() const {
  return supporteddocflows_.size();
}
inline void DocumentTypeDescriptionV2::clear_supporteddocflows() {
  supporteddocflows_.Clear();
}
inline ::google::protobuf::int32 DocumentTypeDescriptionV2::supporteddocflows(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.SupportedDocflows)
  return supporteddocflows_.Get(index);
}
inline void DocumentTypeDescriptionV2::set_supporteddocflows(int index, ::google::protobuf::int32 value) {
  supporteddocflows_.Set(index, value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.SupportedDocflows)
}
inline void DocumentTypeDescriptionV2::add_supporteddocflows(::google::protobuf::int32 value) {
  supporteddocflows_.Add(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.SupportedDocflows)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DocumentTypeDescriptionV2::supporteddocflows() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.SupportedDocflows)
  return supporteddocflows_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DocumentTypeDescriptionV2::mutable_supporteddocflows() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.SupportedDocflows)
  return &supporteddocflows_;
}

// required bool RequiresFnsRegistration = 4;
inline bool DocumentTypeDescriptionV2::has_requiresfnsregistration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentTypeDescriptionV2::set_has_requiresfnsregistration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentTypeDescriptionV2::clear_has_requiresfnsregistration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentTypeDescriptionV2::clear_requiresfnsregistration() {
  requiresfnsregistration_ = false;
  clear_has_requiresfnsregistration();
}
inline bool DocumentTypeDescriptionV2::requiresfnsregistration() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.RequiresFnsRegistration)
  return requiresfnsregistration_;
}
inline void DocumentTypeDescriptionV2::set_requiresfnsregistration(bool value) {
  set_has_requiresfnsregistration();
  requiresfnsregistration_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.RequiresFnsRegistration)
}

// repeated .Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2 Functions = 9;
inline int DocumentTypeDescriptionV2::functions_size() const {
  return functions_.size();
}
inline void DocumentTypeDescriptionV2::clear_functions() {
  functions_.Clear();
}
inline const ::Diadoc::Api::Proto::Documents::Types::DocumentFunctionV2& DocumentTypeDescriptionV2::functions(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Functions)
  return functions_.Get(index);
}
inline ::Diadoc::Api::Proto::Documents::Types::DocumentFunctionV2* DocumentTypeDescriptionV2::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Functions)
  return functions_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Documents::Types::DocumentFunctionV2* DocumentTypeDescriptionV2::add_functions() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Functions)
  return functions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentFunctionV2 >&
DocumentTypeDescriptionV2::functions() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Functions)
  return functions_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentFunctionV2 >*
DocumentTypeDescriptionV2::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2.Functions)
  return &functions_;
}

// -------------------------------------------------------------------

// GetDocumentTypesResponseV2

// repeated .Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2 DocumentTypes = 1;
inline int GetDocumentTypesResponseV2::documenttypes_size() const {
  return documenttypes_.size();
}
inline void GetDocumentTypesResponseV2::clear_documenttypes() {
  documenttypes_.Clear();
}
inline const ::Diadoc::Api::Proto::Documents::Types::DocumentTypeDescriptionV2& GetDocumentTypesResponseV2::documenttypes(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2.DocumentTypes)
  return documenttypes_.Get(index);
}
inline ::Diadoc::Api::Proto::Documents::Types::DocumentTypeDescriptionV2* GetDocumentTypesResponseV2::mutable_documenttypes(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2.DocumentTypes)
  return documenttypes_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Documents::Types::DocumentTypeDescriptionV2* GetDocumentTypesResponseV2::add_documenttypes() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2.DocumentTypes)
  return documenttypes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentTypeDescriptionV2 >&
GetDocumentTypesResponseV2::documenttypes() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2.DocumentTypes)
  return documenttypes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentTypeDescriptionV2 >*
GetDocumentTypesResponseV2::mutable_documenttypes() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2.DocumentTypes)
  return &documenttypes_;
}

// -------------------------------------------------------------------

// DocumentFunctionV2

// required string Name = 1;
inline bool DocumentFunctionV2::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentFunctionV2::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentFunctionV2::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentFunctionV2::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DocumentFunctionV2::name() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2.Name)
  return *name_;
}
inline void DocumentFunctionV2::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2.Name)
}
inline void DocumentFunctionV2::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2.Name)
}
inline void DocumentFunctionV2::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2.Name)
}
inline ::std::string* DocumentFunctionV2::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2.Name)
  return name_;
}
inline ::std::string* DocumentFunctionV2::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentFunctionV2::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2.Name)
}

// repeated .Diadoc.Api.Proto.Documents.Types.DocumentVersionV2 Versions = 2;
inline int DocumentFunctionV2::versions_size() const {
  return versions_.size();
}
inline void DocumentFunctionV2::clear_versions() {
  versions_.Clear();
}
inline const ::Diadoc::Api::Proto::Documents::Types::DocumentVersionV2& DocumentFunctionV2::versions(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2.Versions)
  return versions_.Get(index);
}
inline ::Diadoc::Api::Proto::Documents::Types::DocumentVersionV2* DocumentFunctionV2::mutable_versions(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2.Versions)
  return versions_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Documents::Types::DocumentVersionV2* DocumentFunctionV2::add_versions() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2.Versions)
  return versions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentVersionV2 >&
DocumentFunctionV2::versions() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2.Versions)
  return versions_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentVersionV2 >*
DocumentFunctionV2::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2.Versions)
  return &versions_;
}

// -------------------------------------------------------------------

// DocumentVersionV2

// required string Version = 1;
inline bool DocumentVersionV2::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentVersionV2::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentVersionV2::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentVersionV2::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& DocumentVersionV2::version() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Version)
  return *version_;
}
inline void DocumentVersionV2::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Version)
}
inline void DocumentVersionV2::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Version)
}
inline void DocumentVersionV2::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Version)
}
inline ::std::string* DocumentVersionV2::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Version)
  return version_;
}
inline ::std::string* DocumentVersionV2::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentVersionV2::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Version)
}

// required bool SupportsContentPatching = 2;
inline bool DocumentVersionV2::has_supportscontentpatching() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentVersionV2::set_has_supportscontentpatching() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentVersionV2::clear_has_supportscontentpatching() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentVersionV2::clear_supportscontentpatching() {
  supportscontentpatching_ = false;
  clear_has_supportscontentpatching();
}
inline bool DocumentVersionV2::supportscontentpatching() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.SupportsContentPatching)
  return supportscontentpatching_;
}
inline void DocumentVersionV2::set_supportscontentpatching(bool value) {
  set_has_supportscontentpatching();
  supportscontentpatching_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.SupportsContentPatching)
}

// required bool SupportsEncrypting = 3;
inline bool DocumentVersionV2::has_supportsencrypting() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentVersionV2::set_has_supportsencrypting() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentVersionV2::clear_has_supportsencrypting() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentVersionV2::clear_supportsencrypting() {
  supportsencrypting_ = false;
  clear_has_supportsencrypting();
}
inline bool DocumentVersionV2::supportsencrypting() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.SupportsEncrypting)
  return supportsencrypting_;
}
inline void DocumentVersionV2::set_supportsencrypting(bool value) {
  set_has_supportsencrypting();
  supportsencrypting_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.SupportsEncrypting)
}

// required bool SupportsPredefinedRecipientTitle = 7;
inline bool DocumentVersionV2::has_supportspredefinedrecipienttitle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentVersionV2::set_has_supportspredefinedrecipienttitle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentVersionV2::clear_has_supportspredefinedrecipienttitle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentVersionV2::clear_supportspredefinedrecipienttitle() {
  supportspredefinedrecipienttitle_ = false;
  clear_has_supportspredefinedrecipienttitle();
}
inline bool DocumentVersionV2::supportspredefinedrecipienttitle() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.SupportsPredefinedRecipientTitle)
  return supportspredefinedrecipienttitle_;
}
inline void DocumentVersionV2::set_supportspredefinedrecipienttitle(bool value) {
  set_has_supportspredefinedrecipienttitle();
  supportspredefinedrecipienttitle_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.SupportsPredefinedRecipientTitle)
}

// required bool SupportsAmendmentRequest = 8;
inline bool DocumentVersionV2::has_supportsamendmentrequest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentVersionV2::set_has_supportsamendmentrequest() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentVersionV2::clear_has_supportsamendmentrequest() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentVersionV2::clear_supportsamendmentrequest() {
  supportsamendmentrequest_ = false;
  clear_has_supportsamendmentrequest();
}
inline bool DocumentVersionV2::supportsamendmentrequest() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.SupportsAmendmentRequest)
  return supportsamendmentrequest_;
}
inline void DocumentVersionV2::set_supportsamendmentrequest(bool value) {
  set_has_supportsamendmentrequest();
  supportsamendmentrequest_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.SupportsAmendmentRequest)
}

// repeated .Diadoc.Api.Proto.Documents.Types.DocumentTitleV2 Titles = 4;
inline int DocumentVersionV2::titles_size() const {
  return titles_.size();
}
inline void DocumentVersionV2::clear_titles() {
  titles_.Clear();
}
inline const ::Diadoc::Api::Proto::Documents::Types::DocumentTitleV2& DocumentVersionV2::titles(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Titles)
  return titles_.Get(index);
}
inline ::Diadoc::Api::Proto::Documents::Types::DocumentTitleV2* DocumentVersionV2::mutable_titles(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Titles)
  return titles_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Documents::Types::DocumentTitleV2* DocumentVersionV2::add_titles() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Titles)
  return titles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentTitleV2 >&
DocumentVersionV2::titles() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Titles)
  return titles_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentTitleV2 >*
DocumentVersionV2::mutable_titles() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Titles)
  return &titles_;
}

// required bool IsActual = 5;
inline bool DocumentVersionV2::has_isactual() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DocumentVersionV2::set_has_isactual() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DocumentVersionV2::clear_has_isactual() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DocumentVersionV2::clear_isactual() {
  isactual_ = false;
  clear_has_isactual();
}
inline bool DocumentVersionV2::isactual() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.IsActual)
  return isactual_;
}
inline void DocumentVersionV2::set_isactual(bool value) {
  set_has_isactual();
  isactual_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.IsActual)
}

// repeated .Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2 Workflows = 6;
inline int DocumentVersionV2::workflows_size() const {
  return workflows_.size();
}
inline void DocumentVersionV2::clear_workflows() {
  workflows_.Clear();
}
inline const ::Diadoc::Api::Proto::Documents::Types::DocumentWorkflowV2& DocumentVersionV2::workflows(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Workflows)
  return workflows_.Get(index);
}
inline ::Diadoc::Api::Proto::Documents::Types::DocumentWorkflowV2* DocumentVersionV2::mutable_workflows(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Workflows)
  return workflows_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Documents::Types::DocumentWorkflowV2* DocumentVersionV2::add_workflows() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Workflows)
  return workflows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentWorkflowV2 >&
DocumentVersionV2::workflows() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Workflows)
  return workflows_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentWorkflowV2 >*
DocumentVersionV2::mutable_workflows() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2.Workflows)
  return &workflows_;
}

// -------------------------------------------------------------------

// DocumentWorkflowV2

// required int32 Id = 1;
inline bool DocumentWorkflowV2::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentWorkflowV2::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentWorkflowV2::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentWorkflowV2::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DocumentWorkflowV2::id() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2.Id)
  return id_;
}
inline void DocumentWorkflowV2::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2.Id)
}

// required bool IsDefault = 2;
inline bool DocumentWorkflowV2::has_isdefault() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentWorkflowV2::set_has_isdefault() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentWorkflowV2::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentWorkflowV2::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool DocumentWorkflowV2::isdefault() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2.IsDefault)
  return isdefault_;
}
inline void DocumentWorkflowV2::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2.IsDefault)
}

// -------------------------------------------------------------------

// DocumentTitleV2

// required int32 Index = 7;
inline bool DocumentTitleV2::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentTitleV2::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentTitleV2::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentTitleV2::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 DocumentTitleV2::index() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.Index)
  return index_;
}
inline void DocumentTitleV2::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.Index)
}

// required bool IsFormal = 1;
inline bool DocumentTitleV2::has_isformal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentTitleV2::set_has_isformal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentTitleV2::clear_has_isformal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentTitleV2::clear_isformal() {
  isformal_ = false;
  clear_has_isformal();
}
inline bool DocumentTitleV2::isformal() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.IsFormal)
  return isformal_;
}
inline void DocumentTitleV2::set_isformal(bool value) {
  set_has_isformal();
  isformal_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.IsFormal)
}

// optional string XsdUrl = 2;
inline bool DocumentTitleV2::has_xsdurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentTitleV2::set_has_xsdurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentTitleV2::clear_has_xsdurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentTitleV2::clear_xsdurl() {
  if (xsdurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xsdurl_->clear();
  }
  clear_has_xsdurl();
}
inline const ::std::string& DocumentTitleV2::xsdurl() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.XsdUrl)
  return *xsdurl_;
}
inline void DocumentTitleV2::set_xsdurl(const ::std::string& value) {
  set_has_xsdurl();
  if (xsdurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xsdurl_ = new ::std::string;
  }
  xsdurl_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.XsdUrl)
}
inline void DocumentTitleV2::set_xsdurl(const char* value) {
  set_has_xsdurl();
  if (xsdurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xsdurl_ = new ::std::string;
  }
  xsdurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.XsdUrl)
}
inline void DocumentTitleV2::set_xsdurl(const char* value, size_t size) {
  set_has_xsdurl();
  if (xsdurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xsdurl_ = new ::std::string;
  }
  xsdurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.XsdUrl)
}
inline ::std::string* DocumentTitleV2::mutable_xsdurl() {
  set_has_xsdurl();
  if (xsdurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xsdurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.XsdUrl)
  return xsdurl_;
}
inline ::std::string* DocumentTitleV2::release_xsdurl() {
  clear_has_xsdurl();
  if (xsdurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = xsdurl_;
    xsdurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentTitleV2::set_allocated_xsdurl(::std::string* xsdurl) {
  if (xsdurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xsdurl_;
  }
  if (xsdurl) {
    set_has_xsdurl();
    xsdurl_ = xsdurl;
  } else {
    clear_has_xsdurl();
    xsdurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.XsdUrl)
}

// optional string UserDataXsdUrl = 5;
inline bool DocumentTitleV2::has_userdataxsdurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentTitleV2::set_has_userdataxsdurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentTitleV2::clear_has_userdataxsdurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentTitleV2::clear_userdataxsdurl() {
  if (userdataxsdurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdataxsdurl_->clear();
  }
  clear_has_userdataxsdurl();
}
inline const ::std::string& DocumentTitleV2::userdataxsdurl() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.UserDataXsdUrl)
  return *userdataxsdurl_;
}
inline void DocumentTitleV2::set_userdataxsdurl(const ::std::string& value) {
  set_has_userdataxsdurl();
  if (userdataxsdurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdataxsdurl_ = new ::std::string;
  }
  userdataxsdurl_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.UserDataXsdUrl)
}
inline void DocumentTitleV2::set_userdataxsdurl(const char* value) {
  set_has_userdataxsdurl();
  if (userdataxsdurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdataxsdurl_ = new ::std::string;
  }
  userdataxsdurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.UserDataXsdUrl)
}
inline void DocumentTitleV2::set_userdataxsdurl(const char* value, size_t size) {
  set_has_userdataxsdurl();
  if (userdataxsdurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdataxsdurl_ = new ::std::string;
  }
  userdataxsdurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.UserDataXsdUrl)
}
inline ::std::string* DocumentTitleV2::mutable_userdataxsdurl() {
  set_has_userdataxsdurl();
  if (userdataxsdurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdataxsdurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.UserDataXsdUrl)
  return userdataxsdurl_;
}
inline ::std::string* DocumentTitleV2::release_userdataxsdurl() {
  clear_has_userdataxsdurl();
  if (userdataxsdurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userdataxsdurl_;
    userdataxsdurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentTitleV2::set_allocated_userdataxsdurl(::std::string* userdataxsdurl) {
  if (userdataxsdurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userdataxsdurl_;
  }
  if (userdataxsdurl) {
    set_has_userdataxsdurl();
    userdataxsdurl_ = userdataxsdurl;
  } else {
    clear_has_userdataxsdurl();
    userdataxsdurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.UserDataXsdUrl)
}

// required .Diadoc.Api.Proto.Documents.Types.SignerInfoV2 SignerInfo = 6;
inline bool DocumentTitleV2::has_signerinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentTitleV2::set_has_signerinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentTitleV2::clear_has_signerinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentTitleV2::clear_signerinfo() {
  if (signerinfo_ != NULL) signerinfo_->::Diadoc::Api::Proto::Documents::Types::SignerInfoV2::Clear();
  clear_has_signerinfo();
}
inline const ::Diadoc::Api::Proto::Documents::Types::SignerInfoV2& DocumentTitleV2::signerinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.SignerInfo)
  return signerinfo_ != NULL ? *signerinfo_ : *default_instance_->signerinfo_;
}
inline ::Diadoc::Api::Proto::Documents::Types::SignerInfoV2* DocumentTitleV2::mutable_signerinfo() {
  set_has_signerinfo();
  if (signerinfo_ == NULL) signerinfo_ = new ::Diadoc::Api::Proto::Documents::Types::SignerInfoV2;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.SignerInfo)
  return signerinfo_;
}
inline ::Diadoc::Api::Proto::Documents::Types::SignerInfoV2* DocumentTitleV2::release_signerinfo() {
  clear_has_signerinfo();
  ::Diadoc::Api::Proto::Documents::Types::SignerInfoV2* temp = signerinfo_;
  signerinfo_ = NULL;
  return temp;
}
inline void DocumentTitleV2::set_allocated_signerinfo(::Diadoc::Api::Proto::Documents::Types::SignerInfoV2* signerinfo) {
  delete signerinfo_;
  signerinfo_ = signerinfo;
  if (signerinfo) {
    set_has_signerinfo();
  } else {
    clear_has_signerinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.SignerInfo)
}

// repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2 MetadataItems = 3;
inline int DocumentTitleV2::metadataitems_size() const {
  return metadataitems_.size();
}
inline void DocumentTitleV2::clear_metadataitems() {
  metadataitems_.Clear();
}
inline const ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2& DocumentTitleV2::metadataitems(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.MetadataItems)
  return metadataitems_.Get(index);
}
inline ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2* DocumentTitleV2::mutable_metadataitems(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.MetadataItems)
  return metadataitems_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2* DocumentTitleV2::add_metadataitems() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.MetadataItems)
  return metadataitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2 >&
DocumentTitleV2::metadataitems() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.MetadataItems)
  return metadataitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2 >*
DocumentTitleV2::mutable_metadataitems() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.MetadataItems)
  return &metadataitems_;
}

// repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2 EncryptedMetadataItems = 4;
inline int DocumentTitleV2::encryptedmetadataitems_size() const {
  return encryptedmetadataitems_.size();
}
inline void DocumentTitleV2::clear_encryptedmetadataitems() {
  encryptedmetadataitems_.Clear();
}
inline const ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2& DocumentTitleV2::encryptedmetadataitems(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.EncryptedMetadataItems)
  return encryptedmetadataitems_.Get(index);
}
inline ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2* DocumentTitleV2::mutable_encryptedmetadataitems(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.EncryptedMetadataItems)
  return encryptedmetadataitems_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2* DocumentTitleV2::add_encryptedmetadataitems() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.EncryptedMetadataItems)
  return encryptedmetadataitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2 >&
DocumentTitleV2::encryptedmetadataitems() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.EncryptedMetadataItems)
  return encryptedmetadataitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemV2 >*
DocumentTitleV2::mutable_encryptedmetadataitems() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2.EncryptedMetadataItems)
  return &encryptedmetadataitems_;
}

// -------------------------------------------------------------------

// SignerInfoV2

// required int32 SignerType = 1;
inline bool SignerInfoV2::has_signertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignerInfoV2::set_has_signertype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignerInfoV2::clear_has_signertype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignerInfoV2::clear_signertype() {
  signertype_ = 0;
  clear_has_signertype();
}
inline ::google::protobuf::int32 SignerInfoV2::signertype() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.SignerInfoV2.SignerType)
  return signertype_;
}
inline void SignerInfoV2::set_signertype(::google::protobuf::int32 value) {
  set_has_signertype();
  signertype_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.SignerInfoV2.SignerType)
}

// required int32 ExtendedDocumentTitleType = 2 [default = -1];
inline bool SignerInfoV2::has_extendeddocumenttitletype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignerInfoV2::set_has_extendeddocumenttitletype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignerInfoV2::clear_has_extendeddocumenttitletype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignerInfoV2::clear_extendeddocumenttitletype() {
  extendeddocumenttitletype_ = -1;
  clear_has_extendeddocumenttitletype();
}
inline ::google::protobuf::int32 SignerInfoV2::extendeddocumenttitletype() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.SignerInfoV2.ExtendedDocumentTitleType)
  return extendeddocumenttitletype_;
}
inline void SignerInfoV2::set_extendeddocumenttitletype(::google::protobuf::int32 value) {
  set_has_extendeddocumenttitletype();
  extendeddocumenttitletype_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.SignerInfoV2.ExtendedDocumentTitleType)
}

// -------------------------------------------------------------------

// DocumentMetadataItemV2

// required string Id = 1;
inline bool DocumentMetadataItemV2::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentMetadataItemV2::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentMetadataItemV2::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentMetadataItemV2::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& DocumentMetadataItemV2::id() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2.Id)
  return *id_;
}
inline void DocumentMetadataItemV2::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2.Id)
}
inline void DocumentMetadataItemV2::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2.Id)
}
inline void DocumentMetadataItemV2::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2.Id)
}
inline ::std::string* DocumentMetadataItemV2::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2.Id)
  return id_;
}
inline ::std::string* DocumentMetadataItemV2::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentMetadataItemV2::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2.Id)
}

// required int32 Type = 2;
inline bool DocumentMetadataItemV2::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentMetadataItemV2::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentMetadataItemV2::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentMetadataItemV2::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 DocumentMetadataItemV2::type() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2.Type)
  return type_;
}
inline void DocumentMetadataItemV2::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2.Type)
}

// required bool IsRequired = 3;
inline bool DocumentMetadataItemV2::has_isrequired() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentMetadataItemV2::set_has_isrequired() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentMetadataItemV2::clear_has_isrequired() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentMetadataItemV2::clear_isrequired() {
  isrequired_ = false;
  clear_has_isrequired();
}
inline bool DocumentMetadataItemV2::isrequired() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2.IsRequired)
  return isrequired_;
}
inline void DocumentMetadataItemV2::set_isrequired(bool value) {
  set_has_isrequired();
  isrequired_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2.IsRequired)
}

// required int32 Source = 4;
inline bool DocumentMetadataItemV2::has_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentMetadataItemV2::set_has_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentMetadataItemV2::clear_has_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentMetadataItemV2::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::google::protobuf::int32 DocumentMetadataItemV2::source() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2.Source)
  return source_;
}
inline void DocumentMetadataItemV2::set_source(::google::protobuf::int32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2.Source)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Types
}  // namespace Documents
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto__INCLUDED
