// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Documents/Types/DocumentTypeDescriptionV2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Documents/Types/DocumentTypeDescriptionV2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Documents {
namespace Types {

namespace {

const ::google::protobuf::Descriptor* DocumentTypeDescriptionV2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentTypeDescriptionV2_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDocumentTypesResponseV2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDocumentTypesResponseV2_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentFunctionV2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentFunctionV2_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentVersionV2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentVersionV2_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentWorkflowV2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentWorkflowV2_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentTitleV2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentTitleV2_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignerInfoV2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignerInfoV2_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentMetadataItemV2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentMetadataItemV2_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto() {
  protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Documents/Types/DocumentTypeDescriptionV2.proto");
  GOOGLE_CHECK(file != NULL);
  DocumentTypeDescriptionV2_descriptor_ = file->message_type(0);
  static const int DocumentTypeDescriptionV2_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTypeDescriptionV2, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTypeDescriptionV2, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTypeDescriptionV2, supporteddocflows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTypeDescriptionV2, requiresfnsregistration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTypeDescriptionV2, functions_),
  };
  DocumentTypeDescriptionV2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentTypeDescriptionV2_descriptor_,
      DocumentTypeDescriptionV2::default_instance_,
      DocumentTypeDescriptionV2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTypeDescriptionV2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTypeDescriptionV2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentTypeDescriptionV2));
  GetDocumentTypesResponseV2_descriptor_ = file->message_type(1);
  static const int GetDocumentTypesResponseV2_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocumentTypesResponseV2, documenttypes_),
  };
  GetDocumentTypesResponseV2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDocumentTypesResponseV2_descriptor_,
      GetDocumentTypesResponseV2::default_instance_,
      GetDocumentTypesResponseV2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocumentTypesResponseV2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocumentTypesResponseV2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDocumentTypesResponseV2));
  DocumentFunctionV2_descriptor_ = file->message_type(2);
  static const int DocumentFunctionV2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFunctionV2, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFunctionV2, versions_),
  };
  DocumentFunctionV2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentFunctionV2_descriptor_,
      DocumentFunctionV2::default_instance_,
      DocumentFunctionV2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFunctionV2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFunctionV2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentFunctionV2));
  DocumentVersionV2_descriptor_ = file->message_type(3);
  static const int DocumentVersionV2_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersionV2, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersionV2, supportscontentpatching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersionV2, supportsencrypting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersionV2, supportspredefinedrecipienttitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersionV2, supportsamendmentrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersionV2, titles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersionV2, isactual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersionV2, workflows_),
  };
  DocumentVersionV2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentVersionV2_descriptor_,
      DocumentVersionV2::default_instance_,
      DocumentVersionV2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersionV2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersionV2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentVersionV2));
  DocumentWorkflowV2_descriptor_ = file->message_type(4);
  static const int DocumentWorkflowV2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWorkflowV2, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWorkflowV2, isdefault_),
  };
  DocumentWorkflowV2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentWorkflowV2_descriptor_,
      DocumentWorkflowV2::default_instance_,
      DocumentWorkflowV2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWorkflowV2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWorkflowV2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentWorkflowV2));
  DocumentTitleV2_descriptor_ = file->message_type(5);
  static const int DocumentTitleV2_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitleV2, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitleV2, isformal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitleV2, xsdurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitleV2, userdataxsdurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitleV2, signerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitleV2, metadataitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitleV2, encryptedmetadataitems_),
  };
  DocumentTitleV2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentTitleV2_descriptor_,
      DocumentTitleV2::default_instance_,
      DocumentTitleV2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitleV2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitleV2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentTitleV2));
  SignerInfoV2_descriptor_ = file->message_type(6);
  static const int SignerInfoV2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignerInfoV2, signertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignerInfoV2, extendeddocumenttitletype_),
  };
  SignerInfoV2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignerInfoV2_descriptor_,
      SignerInfoV2::default_instance_,
      SignerInfoV2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignerInfoV2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignerInfoV2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignerInfoV2));
  DocumentMetadataItemV2_descriptor_ = file->message_type(7);
  static const int DocumentMetadataItemV2_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetadataItemV2, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetadataItemV2, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetadataItemV2, isrequired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetadataItemV2, source_),
  };
  DocumentMetadataItemV2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentMetadataItemV2_descriptor_,
      DocumentMetadataItemV2::default_instance_,
      DocumentMetadataItemV2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetadataItemV2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetadataItemV2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentMetadataItemV2));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentTypeDescriptionV2_descriptor_, &DocumentTypeDescriptionV2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDocumentTypesResponseV2_descriptor_, &GetDocumentTypesResponseV2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentFunctionV2_descriptor_, &DocumentFunctionV2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentVersionV2_descriptor_, &DocumentVersionV2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentWorkflowV2_descriptor_, &DocumentWorkflowV2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentTitleV2_descriptor_, &DocumentTitleV2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignerInfoV2_descriptor_, &SignerInfoV2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentMetadataItemV2_descriptor_, &DocumentMetadataItemV2::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto() {
  delete DocumentTypeDescriptionV2::default_instance_;
  delete DocumentTypeDescriptionV2_reflection_;
  delete GetDocumentTypesResponseV2::default_instance_;
  delete GetDocumentTypesResponseV2_reflection_;
  delete DocumentFunctionV2::default_instance_;
  delete DocumentFunctionV2_reflection_;
  delete DocumentVersionV2::default_instance_;
  delete DocumentVersionV2_reflection_;
  delete DocumentWorkflowV2::default_instance_;
  delete DocumentWorkflowV2_reflection_;
  delete DocumentTitleV2::default_instance_;
  delete DocumentTitleV2_reflection_;
  delete SignerInfoV2::default_instance_;
  delete SignerInfoV2_reflection_;
  delete DocumentMetadataItemV2::default_instance_;
  delete DocumentMetadataItemV2_reflection_;
}

void protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n/Documents/Types/DocumentTypeDescriptio"
    "nV2.proto\022 Diadoc.Api.Proto.Documents.Ty"
    "pes\"\275\001\n\031DocumentTypeDescriptionV2\022\014\n\004Nam"
    "e\030\001 \002(\t\022\r\n\005Title\030\002 \002(\t\022\031\n\021SupportedDocfl"
    "ows\030\003 \003(\005\022\037\n\027RequiresFnsRegistration\030\004 \002"
    "(\010\022G\n\tFunctions\030\t \003(\01324.Diadoc.Api.Proto"
    ".Documents.Types.DocumentFunctionV2\"p\n\032G"
    "etDocumentTypesResponseV2\022R\n\rDocumentTyp"
    "es\030\001 \003(\0132;.Diadoc.Api.Proto.Documents.Ty"
    "pes.DocumentTypeDescriptionV2\"i\n\022Documen"
    "tFunctionV2\022\014\n\004Name\030\001 \002(\t\022E\n\010Versions\030\002 "
    "\003(\01323.Diadoc.Api.Proto.Documents.Types.D"
    "ocumentVersionV2\"\313\002\n\021DocumentVersionV2\022\017"
    "\n\007Version\030\001 \002(\t\022\037\n\027SupportsContentPatchi"
    "ng\030\002 \002(\010\022\032\n\022SupportsEncrypting\030\003 \002(\010\022(\n "
    "SupportsPredefinedRecipientTitle\030\007 \002(\010\022 "
    "\n\030SupportsAmendmentRequest\030\010 \002(\010\022A\n\006Titl"
    "es\030\004 \003(\01321.Diadoc.Api.Proto.Documents.Ty"
    "pes.DocumentTitleV2\022\020\n\010IsActual\030\005 \002(\010\022G\n"
    "\tWorkflows\030\006 \003(\01324.Diadoc.Api.Proto.Docu"
    "ments.Types.DocumentWorkflowV2\"3\n\022Docume"
    "ntWorkflowV2\022\n\n\002Id\030\001 \002(\005\022\021\n\tIsDefault\030\002 "
    "\002(\010\"\311\002\n\017DocumentTitleV2\022\r\n\005Index\030\007 \002(\005\022\020"
    "\n\010IsFormal\030\001 \002(\010\022\016\n\006XsdUrl\030\002 \001(\t\022\026\n\016User"
    "DataXsdUrl\030\005 \001(\t\022B\n\nSignerInfo\030\006 \002(\0132..D"
    "iadoc.Api.Proto.Documents.Types.SignerIn"
    "foV2\022O\n\rMetadataItems\030\003 \003(\01328.Diadoc.Api"
    ".Proto.Documents.Types.DocumentMetadataI"
    "temV2\022X\n\026EncryptedMetadataItems\030\004 \003(\01328."
    "Diadoc.Api.Proto.Documents.Types.Documen"
    "tMetadataItemV2\"I\n\014SignerInfoV2\022\022\n\nSigne"
    "rType\030\001 \002(\005\022%\n\031ExtendedDocumentTitleType"
    "\030\002 \002(\005:\002-1\"V\n\026DocumentMetadataItemV2\022\n\n\002"
    "Id\030\001 \002(\t\022\014\n\004Type\030\002 \002(\005\022\022\n\nIsRequired\030\003 \002"
    "(\010\022\016\n\006Source\030\004 \002(\005", 1378);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Documents/Types/DocumentTypeDescriptionV2.proto", &protobuf_RegisterTypes);
  DocumentTypeDescriptionV2::default_instance_ = new DocumentTypeDescriptionV2();
  GetDocumentTypesResponseV2::default_instance_ = new GetDocumentTypesResponseV2();
  DocumentFunctionV2::default_instance_ = new DocumentFunctionV2();
  DocumentVersionV2::default_instance_ = new DocumentVersionV2();
  DocumentWorkflowV2::default_instance_ = new DocumentWorkflowV2();
  DocumentTitleV2::default_instance_ = new DocumentTitleV2();
  SignerInfoV2::default_instance_ = new SignerInfoV2();
  DocumentMetadataItemV2::default_instance_ = new DocumentMetadataItemV2();
  DocumentTypeDescriptionV2::default_instance_->InitAsDefaultInstance();
  GetDocumentTypesResponseV2::default_instance_->InitAsDefaultInstance();
  DocumentFunctionV2::default_instance_->InitAsDefaultInstance();
  DocumentVersionV2::default_instance_->InitAsDefaultInstance();
  DocumentWorkflowV2::default_instance_->InitAsDefaultInstance();
  DocumentTitleV2::default_instance_->InitAsDefaultInstance();
  SignerInfoV2::default_instance_->InitAsDefaultInstance();
  DocumentMetadataItemV2::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto {
  StaticDescriptorInitializer_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto() {
    protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  }
} static_descriptor_initializer_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DocumentTypeDescriptionV2::kNameFieldNumber;
const int DocumentTypeDescriptionV2::kTitleFieldNumber;
const int DocumentTypeDescriptionV2::kSupportedDocflowsFieldNumber;
const int DocumentTypeDescriptionV2::kRequiresFnsRegistrationFieldNumber;
const int DocumentTypeDescriptionV2::kFunctionsFieldNumber;
#endif  // !_MSC_VER

DocumentTypeDescriptionV2::DocumentTypeDescriptionV2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2)
}

void DocumentTypeDescriptionV2::InitAsDefaultInstance() {
}

DocumentTypeDescriptionV2::DocumentTypeDescriptionV2(const DocumentTypeDescriptionV2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2)
}

void DocumentTypeDescriptionV2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requiresfnsregistration_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentTypeDescriptionV2::~DocumentTypeDescriptionV2() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2)
  SharedDtor();
}

void DocumentTypeDescriptionV2::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void DocumentTypeDescriptionV2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentTypeDescriptionV2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentTypeDescriptionV2_descriptor_;
}

const DocumentTypeDescriptionV2& DocumentTypeDescriptionV2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  return *default_instance_;
}

DocumentTypeDescriptionV2* DocumentTypeDescriptionV2::default_instance_ = NULL;

DocumentTypeDescriptionV2* DocumentTypeDescriptionV2::New() const {
  return new DocumentTypeDescriptionV2;
}

void DocumentTypeDescriptionV2::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    requiresfnsregistration_ = false;
  }
  supporteddocflows_.Clear();
  functions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentTypeDescriptionV2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Title;
        break;
      }

      // required string Title = 2;
      case 2: {
        if (tag == 18) {
         parse_Title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SupportedDocflows;
        break;
      }

      // repeated int32 SupportedDocflows = 3;
      case 3: {
        if (tag == 24) {
         parse_SupportedDocflows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_supporteddocflows())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_supporteddocflows())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SupportedDocflows;
        if (input->ExpectTag(32)) goto parse_RequiresFnsRegistration;
        break;
      }

      // required bool RequiresFnsRegistration = 4;
      case 4: {
        if (tag == 32) {
         parse_RequiresFnsRegistration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requiresfnsregistration_)));
          set_has_requiresfnsregistration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Functions;
        break;
      }

      // repeated .Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2 Functions = 9;
      case 9: {
        if (tag == 74) {
         parse_Functions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_functions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Functions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2)
  return false;
#undef DO_
}

void DocumentTypeDescriptionV2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string Title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // repeated int32 SupportedDocflows = 3;
  for (int i = 0; i < this->supporteddocflows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->supporteddocflows(i), output);
  }

  // required bool RequiresFnsRegistration = 4;
  if (has_requiresfnsregistration()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->requiresfnsregistration(), output);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2 Functions = 9;
  for (int i = 0; i < this->functions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->functions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2)
}

::google::protobuf::uint8* DocumentTypeDescriptionV2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string Title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // repeated int32 SupportedDocflows = 3;
  for (int i = 0; i < this->supporteddocflows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->supporteddocflows(i), target);
  }

  // required bool RequiresFnsRegistration = 4;
  if (has_requiresfnsregistration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->requiresfnsregistration(), target);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2 Functions = 9;
  for (int i = 0; i < this->functions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->functions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2)
  return target;
}

int DocumentTypeDescriptionV2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string Title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required bool RequiresFnsRegistration = 4;
    if (has_requiresfnsregistration()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 SupportedDocflows = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->supporteddocflows_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->supporteddocflows(i));
    }
    total_size += 1 * this->supporteddocflows_size() + data_size;
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2 Functions = 9;
  total_size += 1 * this->functions_size();
  for (int i = 0; i < this->functions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->functions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentTypeDescriptionV2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentTypeDescriptionV2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentTypeDescriptionV2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentTypeDescriptionV2::MergeFrom(const DocumentTypeDescriptionV2& from) {
  GOOGLE_CHECK_NE(&from, this);
  supporteddocflows_.MergeFrom(from.supporteddocflows_);
  functions_.MergeFrom(from.functions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_requiresfnsregistration()) {
      set_requiresfnsregistration(from.requiresfnsregistration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentTypeDescriptionV2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentTypeDescriptionV2::CopyFrom(const DocumentTypeDescriptionV2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentTypeDescriptionV2::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->functions())) return false;
  return true;
}

void DocumentTypeDescriptionV2::Swap(DocumentTypeDescriptionV2* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(title_, other->title_);
    supporteddocflows_.Swap(&other->supporteddocflows_);
    std::swap(requiresfnsregistration_, other->requiresfnsregistration_);
    functions_.Swap(&other->functions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentTypeDescriptionV2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentTypeDescriptionV2_descriptor_;
  metadata.reflection = DocumentTypeDescriptionV2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDocumentTypesResponseV2::kDocumentTypesFieldNumber;
#endif  // !_MSC_VER

GetDocumentTypesResponseV2::GetDocumentTypesResponseV2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2)
}

void GetDocumentTypesResponseV2::InitAsDefaultInstance() {
}

GetDocumentTypesResponseV2::GetDocumentTypesResponseV2(const GetDocumentTypesResponseV2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2)
}

void GetDocumentTypesResponseV2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDocumentTypesResponseV2::~GetDocumentTypesResponseV2() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2)
  SharedDtor();
}

void GetDocumentTypesResponseV2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDocumentTypesResponseV2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDocumentTypesResponseV2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDocumentTypesResponseV2_descriptor_;
}

const GetDocumentTypesResponseV2& GetDocumentTypesResponseV2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  return *default_instance_;
}

GetDocumentTypesResponseV2* GetDocumentTypesResponseV2::default_instance_ = NULL;

GetDocumentTypesResponseV2* GetDocumentTypesResponseV2::New() const {
  return new GetDocumentTypesResponseV2;
}

void GetDocumentTypesResponseV2::Clear() {
  documenttypes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDocumentTypesResponseV2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2 DocumentTypes = 1;
      case 1: {
        if (tag == 10) {
         parse_DocumentTypes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documenttypes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DocumentTypes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2)
  return false;
#undef DO_
}

void GetDocumentTypesResponseV2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2)
  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2 DocumentTypes = 1;
  for (int i = 0; i < this->documenttypes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documenttypes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2)
}

::google::protobuf::uint8* GetDocumentTypesResponseV2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2)
  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2 DocumentTypes = 1;
  for (int i = 0; i < this->documenttypes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documenttypes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponseV2)
  return target;
}

int GetDocumentTypesResponseV2::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTypeDescriptionV2 DocumentTypes = 1;
  total_size += 1 * this->documenttypes_size();
  for (int i = 0; i < this->documenttypes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documenttypes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDocumentTypesResponseV2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDocumentTypesResponseV2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDocumentTypesResponseV2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDocumentTypesResponseV2::MergeFrom(const GetDocumentTypesResponseV2& from) {
  GOOGLE_CHECK_NE(&from, this);
  documenttypes_.MergeFrom(from.documenttypes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDocumentTypesResponseV2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDocumentTypesResponseV2::CopyFrom(const GetDocumentTypesResponseV2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocumentTypesResponseV2::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->documenttypes())) return false;
  return true;
}

void GetDocumentTypesResponseV2::Swap(GetDocumentTypesResponseV2* other) {
  if (other != this) {
    documenttypes_.Swap(&other->documenttypes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDocumentTypesResponseV2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDocumentTypesResponseV2_descriptor_;
  metadata.reflection = GetDocumentTypesResponseV2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentFunctionV2::kNameFieldNumber;
const int DocumentFunctionV2::kVersionsFieldNumber;
#endif  // !_MSC_VER

DocumentFunctionV2::DocumentFunctionV2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2)
}

void DocumentFunctionV2::InitAsDefaultInstance() {
}

DocumentFunctionV2::DocumentFunctionV2(const DocumentFunctionV2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2)
}

void DocumentFunctionV2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentFunctionV2::~DocumentFunctionV2() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2)
  SharedDtor();
}

void DocumentFunctionV2::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DocumentFunctionV2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentFunctionV2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentFunctionV2_descriptor_;
}

const DocumentFunctionV2& DocumentFunctionV2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  return *default_instance_;
}

DocumentFunctionV2* DocumentFunctionV2::default_instance_ = NULL;

DocumentFunctionV2* DocumentFunctionV2::New() const {
  return new DocumentFunctionV2;
}

void DocumentFunctionV2::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentFunctionV2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Versions;
        break;
      }

      // repeated .Diadoc.Api.Proto.Documents.Types.DocumentVersionV2 Versions = 2;
      case 2: {
        if (tag == 18) {
         parse_Versions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_versions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Versions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2)
  return false;
#undef DO_
}

void DocumentFunctionV2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentVersionV2 Versions = 2;
  for (int i = 0; i < this->versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->versions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2)
}

::google::protobuf::uint8* DocumentFunctionV2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentVersionV2 Versions = 2;
  for (int i = 0; i < this->versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->versions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.DocumentFunctionV2)
  return target;
}

int DocumentFunctionV2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentVersionV2 Versions = 2;
  total_size += 1 * this->versions_size();
  for (int i = 0; i < this->versions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->versions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentFunctionV2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentFunctionV2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentFunctionV2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentFunctionV2::MergeFrom(const DocumentFunctionV2& from) {
  GOOGLE_CHECK_NE(&from, this);
  versions_.MergeFrom(from.versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentFunctionV2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentFunctionV2::CopyFrom(const DocumentFunctionV2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentFunctionV2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->versions())) return false;
  return true;
}

void DocumentFunctionV2::Swap(DocumentFunctionV2* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    versions_.Swap(&other->versions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentFunctionV2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentFunctionV2_descriptor_;
  metadata.reflection = DocumentFunctionV2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentVersionV2::kVersionFieldNumber;
const int DocumentVersionV2::kSupportsContentPatchingFieldNumber;
const int DocumentVersionV2::kSupportsEncryptingFieldNumber;
const int DocumentVersionV2::kSupportsPredefinedRecipientTitleFieldNumber;
const int DocumentVersionV2::kSupportsAmendmentRequestFieldNumber;
const int DocumentVersionV2::kTitlesFieldNumber;
const int DocumentVersionV2::kIsActualFieldNumber;
const int DocumentVersionV2::kWorkflowsFieldNumber;
#endif  // !_MSC_VER

DocumentVersionV2::DocumentVersionV2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2)
}

void DocumentVersionV2::InitAsDefaultInstance() {
}

DocumentVersionV2::DocumentVersionV2(const DocumentVersionV2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2)
}

void DocumentVersionV2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supportscontentpatching_ = false;
  supportsencrypting_ = false;
  supportspredefinedrecipienttitle_ = false;
  supportsamendmentrequest_ = false;
  isactual_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentVersionV2::~DocumentVersionV2() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2)
  SharedDtor();
}

void DocumentVersionV2::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void DocumentVersionV2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentVersionV2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentVersionV2_descriptor_;
}

const DocumentVersionV2& DocumentVersionV2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  return *default_instance_;
}

DocumentVersionV2* DocumentVersionV2::default_instance_ = NULL;

DocumentVersionV2* DocumentVersionV2::New() const {
  return new DocumentVersionV2;
}

void DocumentVersionV2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DocumentVersionV2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(supportscontentpatching_, isactual_);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  titles_.Clear();
  workflows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentVersionV2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SupportsContentPatching;
        break;
      }

      // required bool SupportsContentPatching = 2;
      case 2: {
        if (tag == 16) {
         parse_SupportsContentPatching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supportscontentpatching_)));
          set_has_supportscontentpatching();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SupportsEncrypting;
        break;
      }

      // required bool SupportsEncrypting = 3;
      case 3: {
        if (tag == 24) {
         parse_SupportsEncrypting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supportsencrypting_)));
          set_has_supportsencrypting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Titles;
        break;
      }

      // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTitleV2 Titles = 4;
      case 4: {
        if (tag == 34) {
         parse_Titles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Titles;
        if (input->ExpectTag(40)) goto parse_IsActual;
        break;
      }

      // required bool IsActual = 5;
      case 5: {
        if (tag == 40) {
         parse_IsActual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactual_)));
          set_has_isactual();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Workflows;
        break;
      }

      // repeated .Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2 Workflows = 6;
      case 6: {
        if (tag == 50) {
         parse_Workflows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_workflows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Workflows;
        if (input->ExpectTag(56)) goto parse_SupportsPredefinedRecipientTitle;
        break;
      }

      // required bool SupportsPredefinedRecipientTitle = 7;
      case 7: {
        if (tag == 56) {
         parse_SupportsPredefinedRecipientTitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supportspredefinedrecipienttitle_)));
          set_has_supportspredefinedrecipienttitle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_SupportsAmendmentRequest;
        break;
      }

      // required bool SupportsAmendmentRequest = 8;
      case 8: {
        if (tag == 64) {
         parse_SupportsAmendmentRequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supportsamendmentrequest_)));
          set_has_supportsamendmentrequest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2)
  return false;
#undef DO_
}

void DocumentVersionV2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2)
  // required string Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // required bool SupportsContentPatching = 2;
  if (has_supportscontentpatching()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->supportscontentpatching(), output);
  }

  // required bool SupportsEncrypting = 3;
  if (has_supportsencrypting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->supportsencrypting(), output);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTitleV2 Titles = 4;
  for (int i = 0; i < this->titles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->titles(i), output);
  }

  // required bool IsActual = 5;
  if (has_isactual()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isactual(), output);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2 Workflows = 6;
  for (int i = 0; i < this->workflows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->workflows(i), output);
  }

  // required bool SupportsPredefinedRecipientTitle = 7;
  if (has_supportspredefinedrecipienttitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->supportspredefinedrecipienttitle(), output);
  }

  // required bool SupportsAmendmentRequest = 8;
  if (has_supportsamendmentrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->supportsamendmentrequest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2)
}

::google::protobuf::uint8* DocumentVersionV2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2)
  // required string Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // required bool SupportsContentPatching = 2;
  if (has_supportscontentpatching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->supportscontentpatching(), target);
  }

  // required bool SupportsEncrypting = 3;
  if (has_supportsencrypting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->supportsencrypting(), target);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTitleV2 Titles = 4;
  for (int i = 0; i < this->titles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->titles(i), target);
  }

  // required bool IsActual = 5;
  if (has_isactual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isactual(), target);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2 Workflows = 6;
  for (int i = 0; i < this->workflows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->workflows(i), target);
  }

  // required bool SupportsPredefinedRecipientTitle = 7;
  if (has_supportspredefinedrecipienttitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->supportspredefinedrecipienttitle(), target);
  }

  // required bool SupportsAmendmentRequest = 8;
  if (has_supportsamendmentrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->supportsamendmentrequest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.DocumentVersionV2)
  return target;
}

int DocumentVersionV2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required bool SupportsContentPatching = 2;
    if (has_supportscontentpatching()) {
      total_size += 1 + 1;
    }

    // required bool SupportsEncrypting = 3;
    if (has_supportsencrypting()) {
      total_size += 1 + 1;
    }

    // required bool SupportsPredefinedRecipientTitle = 7;
    if (has_supportspredefinedrecipienttitle()) {
      total_size += 1 + 1;
    }

    // required bool SupportsAmendmentRequest = 8;
    if (has_supportsamendmentrequest()) {
      total_size += 1 + 1;
    }

    // required bool IsActual = 5;
    if (has_isactual()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTitleV2 Titles = 4;
  total_size += 1 * this->titles_size();
  for (int i = 0; i < this->titles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titles(i));
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2 Workflows = 6;
  total_size += 1 * this->workflows_size();
  for (int i = 0; i < this->workflows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->workflows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentVersionV2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentVersionV2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentVersionV2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentVersionV2::MergeFrom(const DocumentVersionV2& from) {
  GOOGLE_CHECK_NE(&from, this);
  titles_.MergeFrom(from.titles_);
  workflows_.MergeFrom(from.workflows_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_supportscontentpatching()) {
      set_supportscontentpatching(from.supportscontentpatching());
    }
    if (from.has_supportsencrypting()) {
      set_supportsencrypting(from.supportsencrypting());
    }
    if (from.has_supportspredefinedrecipienttitle()) {
      set_supportspredefinedrecipienttitle(from.supportspredefinedrecipienttitle());
    }
    if (from.has_supportsamendmentrequest()) {
      set_supportsamendmentrequest(from.supportsamendmentrequest());
    }
    if (from.has_isactual()) {
      set_isactual(from.isactual());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentVersionV2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentVersionV2::CopyFrom(const DocumentVersionV2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentVersionV2::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->titles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->workflows())) return false;
  return true;
}

void DocumentVersionV2::Swap(DocumentVersionV2* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(supportscontentpatching_, other->supportscontentpatching_);
    std::swap(supportsencrypting_, other->supportsencrypting_);
    std::swap(supportspredefinedrecipienttitle_, other->supportspredefinedrecipienttitle_);
    std::swap(supportsamendmentrequest_, other->supportsamendmentrequest_);
    titles_.Swap(&other->titles_);
    std::swap(isactual_, other->isactual_);
    workflows_.Swap(&other->workflows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentVersionV2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentVersionV2_descriptor_;
  metadata.reflection = DocumentVersionV2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentWorkflowV2::kIdFieldNumber;
const int DocumentWorkflowV2::kIsDefaultFieldNumber;
#endif  // !_MSC_VER

DocumentWorkflowV2::DocumentWorkflowV2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2)
}

void DocumentWorkflowV2::InitAsDefaultInstance() {
}

DocumentWorkflowV2::DocumentWorkflowV2(const DocumentWorkflowV2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2)
}

void DocumentWorkflowV2::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  isdefault_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentWorkflowV2::~DocumentWorkflowV2() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2)
  SharedDtor();
}

void DocumentWorkflowV2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DocumentWorkflowV2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentWorkflowV2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentWorkflowV2_descriptor_;
}

const DocumentWorkflowV2& DocumentWorkflowV2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  return *default_instance_;
}

DocumentWorkflowV2* DocumentWorkflowV2::default_instance_ = NULL;

DocumentWorkflowV2* DocumentWorkflowV2::New() const {
  return new DocumentWorkflowV2;
}

void DocumentWorkflowV2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DocumentWorkflowV2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, isdefault_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentWorkflowV2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 2;
      case 2: {
        if (tag == 16) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2)
  return false;
#undef DO_
}

void DocumentWorkflowV2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2)
  // required int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bool IsDefault = 2;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isdefault(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2)
}

::google::protobuf::uint8* DocumentWorkflowV2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2)
  // required int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bool IsDefault = 2;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isdefault(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.DocumentWorkflowV2)
  return target;
}

int DocumentWorkflowV2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool IsDefault = 2;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentWorkflowV2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentWorkflowV2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentWorkflowV2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentWorkflowV2::MergeFrom(const DocumentWorkflowV2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentWorkflowV2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentWorkflowV2::CopyFrom(const DocumentWorkflowV2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentWorkflowV2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DocumentWorkflowV2::Swap(DocumentWorkflowV2* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentWorkflowV2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentWorkflowV2_descriptor_;
  metadata.reflection = DocumentWorkflowV2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentTitleV2::kIndexFieldNumber;
const int DocumentTitleV2::kIsFormalFieldNumber;
const int DocumentTitleV2::kXsdUrlFieldNumber;
const int DocumentTitleV2::kUserDataXsdUrlFieldNumber;
const int DocumentTitleV2::kSignerInfoFieldNumber;
const int DocumentTitleV2::kMetadataItemsFieldNumber;
const int DocumentTitleV2::kEncryptedMetadataItemsFieldNumber;
#endif  // !_MSC_VER

DocumentTitleV2::DocumentTitleV2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2)
}

void DocumentTitleV2::InitAsDefaultInstance() {
  signerinfo_ = const_cast< ::Diadoc::Api::Proto::Documents::Types::SignerInfoV2*>(&::Diadoc::Api::Proto::Documents::Types::SignerInfoV2::default_instance());
}

DocumentTitleV2::DocumentTitleV2(const DocumentTitleV2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2)
}

void DocumentTitleV2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0;
  isformal_ = false;
  xsdurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userdataxsdurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentTitleV2::~DocumentTitleV2() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2)
  SharedDtor();
}

void DocumentTitleV2::SharedDtor() {
  if (xsdurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xsdurl_;
  }
  if (userdataxsdurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userdataxsdurl_;
  }
  if (this != default_instance_) {
    delete signerinfo_;
  }
}

void DocumentTitleV2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentTitleV2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentTitleV2_descriptor_;
}

const DocumentTitleV2& DocumentTitleV2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  return *default_instance_;
}

DocumentTitleV2* DocumentTitleV2::default_instance_ = NULL;

DocumentTitleV2* DocumentTitleV2::New() const {
  return new DocumentTitleV2;
}

void DocumentTitleV2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DocumentTitleV2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(index_, isformal_);
    if (has_xsdurl()) {
      if (xsdurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        xsdurl_->clear();
      }
    }
    if (has_userdataxsdurl()) {
      if (userdataxsdurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userdataxsdurl_->clear();
      }
    }
    if (has_signerinfo()) {
      if (signerinfo_ != NULL) signerinfo_->::Diadoc::Api::Proto::Documents::Types::SignerInfoV2::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  metadataitems_.Clear();
  encryptedmetadataitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentTitleV2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool IsFormal = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isformal_)));
          set_has_isformal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_XsdUrl;
        break;
      }

      // optional string XsdUrl = 2;
      case 2: {
        if (tag == 18) {
         parse_XsdUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xsdurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xsdurl().data(), this->xsdurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xsdurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MetadataItems;
        break;
      }

      // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2 MetadataItems = 3;
      case 3: {
        if (tag == 26) {
         parse_MetadataItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metadataitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MetadataItems;
        if (input->ExpectTag(34)) goto parse_EncryptedMetadataItems;
        break;
      }

      // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2 EncryptedMetadataItems = 4;
      case 4: {
        if (tag == 34) {
         parse_EncryptedMetadataItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_encryptedmetadataitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_EncryptedMetadataItems;
        if (input->ExpectTag(42)) goto parse_UserDataXsdUrl;
        break;
      }

      // optional string UserDataXsdUrl = 5;
      case 5: {
        if (tag == 42) {
         parse_UserDataXsdUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdataxsdurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userdataxsdurl().data(), this->userdataxsdurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userdataxsdurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SignerInfo;
        break;
      }

      // required .Diadoc.Api.Proto.Documents.Types.SignerInfoV2 SignerInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_SignerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Index;
        break;
      }

      // required int32 Index = 7;
      case 7: {
        if (tag == 56) {
         parse_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2)
  return false;
#undef DO_
}

void DocumentTitleV2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2)
  // required bool IsFormal = 1;
  if (has_isformal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isformal(), output);
  }

  // optional string XsdUrl = 2;
  if (has_xsdurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xsdurl().data(), this->xsdurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xsdurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->xsdurl(), output);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2 MetadataItems = 3;
  for (int i = 0; i < this->metadataitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->metadataitems(i), output);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2 EncryptedMetadataItems = 4;
  for (int i = 0; i < this->encryptedmetadataitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->encryptedmetadataitems(i), output);
  }

  // optional string UserDataXsdUrl = 5;
  if (has_userdataxsdurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userdataxsdurl().data(), this->userdataxsdurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userdataxsdurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->userdataxsdurl(), output);
  }

  // required .Diadoc.Api.Proto.Documents.Types.SignerInfoV2 SignerInfo = 6;
  if (has_signerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->signerinfo(), output);
  }

  // required int32 Index = 7;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2)
}

::google::protobuf::uint8* DocumentTitleV2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2)
  // required bool IsFormal = 1;
  if (has_isformal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isformal(), target);
  }

  // optional string XsdUrl = 2;
  if (has_xsdurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xsdurl().data(), this->xsdurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xsdurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->xsdurl(), target);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2 MetadataItems = 3;
  for (int i = 0; i < this->metadataitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->metadataitems(i), target);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2 EncryptedMetadataItems = 4;
  for (int i = 0; i < this->encryptedmetadataitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->encryptedmetadataitems(i), target);
  }

  // optional string UserDataXsdUrl = 5;
  if (has_userdataxsdurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userdataxsdurl().data(), this->userdataxsdurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userdataxsdurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userdataxsdurl(), target);
  }

  // required .Diadoc.Api.Proto.Documents.Types.SignerInfoV2 SignerInfo = 6;
  if (has_signerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->signerinfo(), target);
  }

  // required int32 Index = 7;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.DocumentTitleV2)
  return target;
}

int DocumentTitleV2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Index = 7;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required bool IsFormal = 1;
    if (has_isformal()) {
      total_size += 1 + 1;
    }

    // optional string XsdUrl = 2;
    if (has_xsdurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xsdurl());
    }

    // optional string UserDataXsdUrl = 5;
    if (has_userdataxsdurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdataxsdurl());
    }

    // required .Diadoc.Api.Proto.Documents.Types.SignerInfoV2 SignerInfo = 6;
    if (has_signerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signerinfo());
    }

  }
  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2 MetadataItems = 3;
  total_size += 1 * this->metadataitems_size();
  for (int i = 0; i < this->metadataitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metadataitems(i));
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2 EncryptedMetadataItems = 4;
  total_size += 1 * this->encryptedmetadataitems_size();
  for (int i = 0; i < this->encryptedmetadataitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->encryptedmetadataitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentTitleV2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentTitleV2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentTitleV2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentTitleV2::MergeFrom(const DocumentTitleV2& from) {
  GOOGLE_CHECK_NE(&from, this);
  metadataitems_.MergeFrom(from.metadataitems_);
  encryptedmetadataitems_.MergeFrom(from.encryptedmetadataitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_isformal()) {
      set_isformal(from.isformal());
    }
    if (from.has_xsdurl()) {
      set_xsdurl(from.xsdurl());
    }
    if (from.has_userdataxsdurl()) {
      set_userdataxsdurl(from.userdataxsdurl());
    }
    if (from.has_signerinfo()) {
      mutable_signerinfo()->::Diadoc::Api::Proto::Documents::Types::SignerInfoV2::MergeFrom(from.signerinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentTitleV2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentTitleV2::CopyFrom(const DocumentTitleV2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentTitleV2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (has_signerinfo()) {
    if (!this->signerinfo().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->metadataitems())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->encryptedmetadataitems())) return false;
  return true;
}

void DocumentTitleV2::Swap(DocumentTitleV2* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(isformal_, other->isformal_);
    std::swap(xsdurl_, other->xsdurl_);
    std::swap(userdataxsdurl_, other->userdataxsdurl_);
    std::swap(signerinfo_, other->signerinfo_);
    metadataitems_.Swap(&other->metadataitems_);
    encryptedmetadataitems_.Swap(&other->encryptedmetadataitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentTitleV2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentTitleV2_descriptor_;
  metadata.reflection = DocumentTitleV2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignerInfoV2::kSignerTypeFieldNumber;
const int SignerInfoV2::kExtendedDocumentTitleTypeFieldNumber;
#endif  // !_MSC_VER

SignerInfoV2::SignerInfoV2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.SignerInfoV2)
}

void SignerInfoV2::InitAsDefaultInstance() {
}

SignerInfoV2::SignerInfoV2(const SignerInfoV2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.SignerInfoV2)
}

void SignerInfoV2::SharedCtor() {
  _cached_size_ = 0;
  signertype_ = 0;
  extendeddocumenttitletype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignerInfoV2::~SignerInfoV2() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.SignerInfoV2)
  SharedDtor();
}

void SignerInfoV2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignerInfoV2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignerInfoV2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignerInfoV2_descriptor_;
}

const SignerInfoV2& SignerInfoV2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  return *default_instance_;
}

SignerInfoV2* SignerInfoV2::default_instance_ = NULL;

SignerInfoV2* SignerInfoV2::New() const {
  return new SignerInfoV2;
}

void SignerInfoV2::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    signertype_ = 0;
    extendeddocumenttitletype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignerInfoV2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.SignerInfoV2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 SignerType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signertype_)));
          set_has_signertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ExtendedDocumentTitleType;
        break;
      }

      // required int32 ExtendedDocumentTitleType = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_ExtendedDocumentTitleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extendeddocumenttitletype_)));
          set_has_extendeddocumenttitletype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.SignerInfoV2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.SignerInfoV2)
  return false;
#undef DO_
}

void SignerInfoV2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.SignerInfoV2)
  // required int32 SignerType = 1;
  if (has_signertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->signertype(), output);
  }

  // required int32 ExtendedDocumentTitleType = 2 [default = -1];
  if (has_extendeddocumenttitletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->extendeddocumenttitletype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.SignerInfoV2)
}

::google::protobuf::uint8* SignerInfoV2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.SignerInfoV2)
  // required int32 SignerType = 1;
  if (has_signertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->signertype(), target);
  }

  // required int32 ExtendedDocumentTitleType = 2 [default = -1];
  if (has_extendeddocumenttitletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->extendeddocumenttitletype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.SignerInfoV2)
  return target;
}

int SignerInfoV2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 SignerType = 1;
    if (has_signertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signertype());
    }

    // required int32 ExtendedDocumentTitleType = 2 [default = -1];
    if (has_extendeddocumenttitletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extendeddocumenttitletype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignerInfoV2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignerInfoV2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignerInfoV2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignerInfoV2::MergeFrom(const SignerInfoV2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signertype()) {
      set_signertype(from.signertype());
    }
    if (from.has_extendeddocumenttitletype()) {
      set_extendeddocumenttitletype(from.extendeddocumenttitletype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignerInfoV2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignerInfoV2::CopyFrom(const SignerInfoV2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignerInfoV2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SignerInfoV2::Swap(SignerInfoV2* other) {
  if (other != this) {
    std::swap(signertype_, other->signertype_);
    std::swap(extendeddocumenttitletype_, other->extendeddocumenttitletype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignerInfoV2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignerInfoV2_descriptor_;
  metadata.reflection = SignerInfoV2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentMetadataItemV2::kIdFieldNumber;
const int DocumentMetadataItemV2::kTypeFieldNumber;
const int DocumentMetadataItemV2::kIsRequiredFieldNumber;
const int DocumentMetadataItemV2::kSourceFieldNumber;
#endif  // !_MSC_VER

DocumentMetadataItemV2::DocumentMetadataItemV2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2)
}

void DocumentMetadataItemV2::InitAsDefaultInstance() {
}

DocumentMetadataItemV2::DocumentMetadataItemV2(const DocumentMetadataItemV2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2)
}

void DocumentMetadataItemV2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  isrequired_ = false;
  source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentMetadataItemV2::~DocumentMetadataItemV2() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2)
  SharedDtor();
}

void DocumentMetadataItemV2::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void DocumentMetadataItemV2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentMetadataItemV2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentMetadataItemV2_descriptor_;
}

const DocumentMetadataItemV2& DocumentMetadataItemV2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescriptionV2_2eproto();
  return *default_instance_;
}

DocumentMetadataItemV2* DocumentMetadataItemV2::default_instance_ = NULL;

DocumentMetadataItemV2* DocumentMetadataItemV2::New() const {
  return new DocumentMetadataItemV2;
}

void DocumentMetadataItemV2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DocumentMetadataItemV2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, source_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentMetadataItemV2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required int32 Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsRequired;
        break;
      }

      // required bool IsRequired = 3;
      case 3: {
        if (tag == 24) {
         parse_IsRequired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrequired_)));
          set_has_isrequired();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Source;
        break;
      }

      // required int32 Source = 4;
      case 4: {
        if (tag == 32) {
         parse_Source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2)
  return false;
#undef DO_
}

void DocumentMetadataItemV2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2)
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required int32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required bool IsRequired = 3;
  if (has_isrequired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isrequired(), output);
  }

  // required int32 Source = 4;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2)
}

::google::protobuf::uint8* DocumentMetadataItemV2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2)
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required bool IsRequired = 3;
  if (has_isrequired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isrequired(), target);
  }

  // required int32 Source = 4;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemV2)
  return target;
}

int DocumentMetadataItemV2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required bool IsRequired = 3;
    if (has_isrequired()) {
      total_size += 1 + 1;
    }

    // required int32 Source = 4;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentMetadataItemV2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentMetadataItemV2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentMetadataItemV2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentMetadataItemV2::MergeFrom(const DocumentMetadataItemV2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isrequired()) {
      set_isrequired(from.isrequired());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentMetadataItemV2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentMetadataItemV2::CopyFrom(const DocumentMetadataItemV2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentMetadataItemV2::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DocumentMetadataItemV2::Swap(DocumentMetadataItemV2* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(isrequired_, other->isrequired_);
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentMetadataItemV2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentMetadataItemV2_descriptor_;
  metadata.reflection = DocumentMetadataItemV2_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Types
}  // namespace Documents
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
