// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Documents/DocumentProtocol.proto

#ifndef PROTOBUF_Documents_2fDocumentProtocol_2eproto__INCLUDED
#define PROTOBUF_Documents_2fDocumentProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Documents {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Documents_2fDocumentProtocol_2eproto();
void protobuf_AssignDesc_Documents_2fDocumentProtocol_2eproto();
void protobuf_ShutdownFile_Documents_2fDocumentProtocol_2eproto();

class DocumentProtocol;

// ===================================================================

class DocumentProtocol : public ::google::protobuf::Message {
 public:
  DocumentProtocol();
  virtual ~DocumentProtocol();

  DocumentProtocol(const DocumentProtocol& from);

  inline DocumentProtocol& operator=(const DocumentProtocol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentProtocol& default_instance();

  void Swap(DocumentProtocol* other);

  // implements Message ----------------------------------------------

  DocumentProtocol* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentProtocol& from);
  void MergeFrom(const DocumentProtocol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes PrintForm = 1;
  inline bool has_printform() const;
  inline void clear_printform();
  static const int kPrintFormFieldNumber = 1;
  inline const ::std::string& printform() const;
  inline void set_printform(const ::std::string& value);
  inline void set_printform(const char* value);
  inline void set_printform(const void* value, size_t size);
  inline ::std::string* mutable_printform();
  inline ::std::string* release_printform();
  inline void set_allocated_printform(::std::string* printform);

  // required bytes Signature = 2;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 2;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.DocumentProtocol)
 private:
  inline void set_has_printform();
  inline void clear_has_printform();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* printform_;
  ::std::string* signature_;
  friend void  protobuf_AddDesc_Documents_2fDocumentProtocol_2eproto();
  friend void protobuf_AssignDesc_Documents_2fDocumentProtocol_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fDocumentProtocol_2eproto();

  void InitAsDefaultInstance();
  static DocumentProtocol* default_instance_;
};
// ===================================================================


// ===================================================================

// DocumentProtocol

// required bytes PrintForm = 1;
inline bool DocumentProtocol::has_printform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentProtocol::set_has_printform() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentProtocol::clear_has_printform() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentProtocol::clear_printform() {
  if (printform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    printform_->clear();
  }
  clear_has_printform();
}
inline const ::std::string& DocumentProtocol::printform() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.DocumentProtocol.PrintForm)
  return *printform_;
}
inline void DocumentProtocol::set_printform(const ::std::string& value) {
  set_has_printform();
  if (printform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    printform_ = new ::std::string;
  }
  printform_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.DocumentProtocol.PrintForm)
}
inline void DocumentProtocol::set_printform(const char* value) {
  set_has_printform();
  if (printform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    printform_ = new ::std::string;
  }
  printform_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.DocumentProtocol.PrintForm)
}
inline void DocumentProtocol::set_printform(const void* value, size_t size) {
  set_has_printform();
  if (printform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    printform_ = new ::std::string;
  }
  printform_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.DocumentProtocol.PrintForm)
}
inline ::std::string* DocumentProtocol::mutable_printform() {
  set_has_printform();
  if (printform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    printform_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.DocumentProtocol.PrintForm)
  return printform_;
}
inline ::std::string* DocumentProtocol::release_printform() {
  clear_has_printform();
  if (printform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = printform_;
    printform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentProtocol::set_allocated_printform(::std::string* printform) {
  if (printform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete printform_;
  }
  if (printform) {
    set_has_printform();
    printform_ = printform;
  } else {
    clear_has_printform();
    printform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.DocumentProtocol.PrintForm)
}

// required bytes Signature = 2;
inline bool DocumentProtocol::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentProtocol::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentProtocol::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentProtocol::clear_signature() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& DocumentProtocol::signature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.DocumentProtocol.Signature)
  return *signature_;
}
inline void DocumentProtocol::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.DocumentProtocol.Signature)
}
inline void DocumentProtocol::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.DocumentProtocol.Signature)
}
inline void DocumentProtocol::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.DocumentProtocol.Signature)
}
inline ::std::string* DocumentProtocol::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.DocumentProtocol.Signature)
  return signature_;
}
inline ::std::string* DocumentProtocol::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentProtocol::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.DocumentProtocol.Signature)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Documents
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Documents_2fDocumentProtocol_2eproto__INCLUDED
