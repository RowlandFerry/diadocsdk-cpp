// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Documents/DetectTitleResponse.proto

#ifndef PROTOBUF_Documents_2fDetectTitleResponse_2eproto__INCLUDED
#define PROTOBUF_Documents_2fDetectTitleResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Events/DiadocMessage-PostApi.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Documents {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Documents_2fDetectTitleResponse_2eproto();
void protobuf_AssignDesc_Documents_2fDetectTitleResponse_2eproto();
void protobuf_ShutdownFile_Documents_2fDetectTitleResponse_2eproto();

class DetectTitleResponse;
class DetectedDocumentTitle;

// ===================================================================

class DetectTitleResponse : public ::google::protobuf::Message {
 public:
  DetectTitleResponse();
  virtual ~DetectTitleResponse();

  DetectTitleResponse(const DetectTitleResponse& from);

  inline DetectTitleResponse& operator=(const DetectTitleResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectTitleResponse& default_instance();

  void Swap(DetectTitleResponse* other);

  // implements Message ----------------------------------------------

  DetectTitleResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectTitleResponse& from);
  void MergeFrom(const DetectTitleResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.Documents.DetectedDocumentTitle DocumentTitles = 1;
  inline int documenttitles_size() const;
  inline void clear_documenttitles();
  static const int kDocumentTitlesFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Documents::DetectedDocumentTitle& documenttitles(int index) const;
  inline ::Diadoc::Api::Proto::Documents::DetectedDocumentTitle* mutable_documenttitles(int index);
  inline ::Diadoc::Api::Proto::Documents::DetectedDocumentTitle* add_documenttitles();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::DetectedDocumentTitle >&
      documenttitles() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::DetectedDocumentTitle >*
      mutable_documenttitles();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.DetectTitleResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::DetectedDocumentTitle > documenttitles_;
  friend void  protobuf_AddDesc_Documents_2fDetectTitleResponse_2eproto();
  friend void protobuf_AssignDesc_Documents_2fDetectTitleResponse_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fDetectTitleResponse_2eproto();

  void InitAsDefaultInstance();
  static DetectTitleResponse* default_instance_;
};
// -------------------------------------------------------------------

class DetectedDocumentTitle : public ::google::protobuf::Message {
 public:
  DetectedDocumentTitle();
  virtual ~DetectedDocumentTitle();

  DetectedDocumentTitle(const DetectedDocumentTitle& from);

  inline DetectedDocumentTitle& operator=(const DetectedDocumentTitle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectedDocumentTitle& default_instance();

  void Swap(DetectedDocumentTitle* other);

  // implements Message ----------------------------------------------

  DetectedDocumentTitle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectedDocumentTitle& from);
  void MergeFrom(const DetectedDocumentTitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string TypeNamedId = 1;
  inline bool has_typenamedid() const;
  inline void clear_typenamedid();
  static const int kTypeNamedIdFieldNumber = 1;
  inline const ::std::string& typenamedid() const;
  inline void set_typenamedid(const ::std::string& value);
  inline void set_typenamedid(const char* value);
  inline void set_typenamedid(const char* value, size_t size);
  inline ::std::string* mutable_typenamedid();
  inline ::std::string* release_typenamedid();
  inline void set_allocated_typenamedid(::std::string* typenamedid);

  // required string Function = 2;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 2;
  inline const ::std::string& function() const;
  inline void set_function(const ::std::string& value);
  inline void set_function(const char* value);
  inline void set_function(const char* value, size_t size);
  inline ::std::string* mutable_function();
  inline ::std::string* release_function();
  inline void set_allocated_function(::std::string* function);

  // required string Version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // required int32 TitleIndex = 4;
  inline bool has_titleindex() const;
  inline void clear_titleindex();
  static const int kTitleIndexFieldNumber = 4;
  inline ::google::protobuf::int32 titleindex() const;
  inline void set_titleindex(::google::protobuf::int32 value);

  // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 5;
  inline int metadata_size() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Events::MetadataItem& metadata(int index) const;
  inline ::Diadoc::Api::Proto::Events::MetadataItem* mutable_metadata(int index);
  inline ::Diadoc::Api::Proto::Events::MetadataItem* add_metadata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >&
      metadata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >*
      mutable_metadata();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.DetectedDocumentTitle)
 private:
  inline void set_has_typenamedid();
  inline void clear_has_typenamedid();
  inline void set_has_function();
  inline void clear_has_function();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_titleindex();
  inline void clear_has_titleindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* typenamedid_;
  ::std::string* function_;
  ::std::string* version_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem > metadata_;
  ::google::protobuf::int32 titleindex_;
  friend void  protobuf_AddDesc_Documents_2fDetectTitleResponse_2eproto();
  friend void protobuf_AssignDesc_Documents_2fDetectTitleResponse_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fDetectTitleResponse_2eproto();

  void InitAsDefaultInstance();
  static DetectedDocumentTitle* default_instance_;
};
// ===================================================================


// ===================================================================

// DetectTitleResponse

// repeated .Diadoc.Api.Proto.Documents.DetectedDocumentTitle DocumentTitles = 1;
inline int DetectTitleResponse::documenttitles_size() const {
  return documenttitles_.size();
}
inline void DetectTitleResponse::clear_documenttitles() {
  documenttitles_.Clear();
}
inline const ::Diadoc::Api::Proto::Documents::DetectedDocumentTitle& DetectTitleResponse::documenttitles(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.DetectTitleResponse.DocumentTitles)
  return documenttitles_.Get(index);
}
inline ::Diadoc::Api::Proto::Documents::DetectedDocumentTitle* DetectTitleResponse::mutable_documenttitles(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.DetectTitleResponse.DocumentTitles)
  return documenttitles_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Documents::DetectedDocumentTitle* DetectTitleResponse::add_documenttitles() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Documents.DetectTitleResponse.DocumentTitles)
  return documenttitles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::DetectedDocumentTitle >&
DetectTitleResponse::documenttitles() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Documents.DetectTitleResponse.DocumentTitles)
  return documenttitles_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Documents::DetectedDocumentTitle >*
DetectTitleResponse::mutable_documenttitles() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Documents.DetectTitleResponse.DocumentTitles)
  return &documenttitles_;
}

// -------------------------------------------------------------------

// DetectedDocumentTitle

// required string TypeNamedId = 1;
inline bool DetectedDocumentTitle::has_typenamedid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectedDocumentTitle::set_has_typenamedid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectedDocumentTitle::clear_has_typenamedid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectedDocumentTitle::clear_typenamedid() {
  if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_->clear();
  }
  clear_has_typenamedid();
}
inline const ::std::string& DetectedDocumentTitle::typenamedid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.TypeNamedId)
  return *typenamedid_;
}
inline void DetectedDocumentTitle::set_typenamedid(const ::std::string& value) {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  typenamedid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.TypeNamedId)
}
inline void DetectedDocumentTitle::set_typenamedid(const char* value) {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  typenamedid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.TypeNamedId)
}
inline void DetectedDocumentTitle::set_typenamedid(const char* value, size_t size) {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  typenamedid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.TypeNamedId)
}
inline ::std::string* DetectedDocumentTitle::mutable_typenamedid() {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.TypeNamedId)
  return typenamedid_;
}
inline ::std::string* DetectedDocumentTitle::release_typenamedid() {
  clear_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = typenamedid_;
    typenamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DetectedDocumentTitle::set_allocated_typenamedid(::std::string* typenamedid) {
  if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typenamedid_;
  }
  if (typenamedid) {
    set_has_typenamedid();
    typenamedid_ = typenamedid;
  } else {
    clear_has_typenamedid();
    typenamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.TypeNamedId)
}

// required string Function = 2;
inline bool DetectedDocumentTitle::has_function() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectedDocumentTitle::set_has_function() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectedDocumentTitle::clear_has_function() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectedDocumentTitle::clear_function() {
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_->clear();
  }
  clear_has_function();
}
inline const ::std::string& DetectedDocumentTitle::function() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Function)
  return *function_;
}
inline void DetectedDocumentTitle::set_function(const ::std::string& value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Function)
}
inline void DetectedDocumentTitle::set_function(const char* value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Function)
}
inline void DetectedDocumentTitle::set_function(const char* value, size_t size) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Function)
}
inline ::std::string* DetectedDocumentTitle::mutable_function() {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Function)
  return function_;
}
inline ::std::string* DetectedDocumentTitle::release_function() {
  clear_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = function_;
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DetectedDocumentTitle::set_allocated_function(::std::string* function) {
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (function) {
    set_has_function();
    function_ = function;
  } else {
    clear_has_function();
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Function)
}

// required string Version = 3;
inline bool DetectedDocumentTitle::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectedDocumentTitle::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectedDocumentTitle::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectedDocumentTitle::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& DetectedDocumentTitle::version() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Version)
  return *version_;
}
inline void DetectedDocumentTitle::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Version)
}
inline void DetectedDocumentTitle::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Version)
}
inline void DetectedDocumentTitle::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Version)
}
inline ::std::string* DetectedDocumentTitle::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Version)
  return version_;
}
inline ::std::string* DetectedDocumentTitle::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DetectedDocumentTitle::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Version)
}

// required int32 TitleIndex = 4;
inline bool DetectedDocumentTitle::has_titleindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectedDocumentTitle::set_has_titleindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetectedDocumentTitle::clear_has_titleindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetectedDocumentTitle::clear_titleindex() {
  titleindex_ = 0;
  clear_has_titleindex();
}
inline ::google::protobuf::int32 DetectedDocumentTitle::titleindex() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.TitleIndex)
  return titleindex_;
}
inline void DetectedDocumentTitle::set_titleindex(::google::protobuf::int32 value) {
  set_has_titleindex();
  titleindex_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.TitleIndex)
}

// repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 5;
inline int DetectedDocumentTitle::metadata_size() const {
  return metadata_.size();
}
inline void DetectedDocumentTitle::clear_metadata() {
  metadata_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::MetadataItem& DetectedDocumentTitle::metadata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Metadata)
  return metadata_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::MetadataItem* DetectedDocumentTitle::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Metadata)
  return metadata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::MetadataItem* DetectedDocumentTitle::add_metadata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Metadata)
  return metadata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >&
DetectedDocumentTitle::metadata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Metadata)
  return metadata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >*
DetectedDocumentTitle::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Documents.DetectedDocumentTitle.Metadata)
  return &metadata_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Documents
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Documents_2fDetectTitleResponse_2eproto__INCLUDED
