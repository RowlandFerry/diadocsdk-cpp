// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Documents/BilateralDocument.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Documents/BilateralDocument.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Documents {
namespace BilateralDocument {

namespace {

const ::google::protobuf::Descriptor* TrustConnectionRequestMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrustConnectionRequestMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* BasicDocumentMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasicDocumentMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* PriceListMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PriceListMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContractMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContractMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* SupplementaryAgreementMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SupplementaryAgreementMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* BilateralDocumentMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BilateralDocumentMetadata_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BilateralDocumentStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Documents_2fBilateralDocument_2eproto() {
  protobuf_AddDesc_Documents_2fBilateralDocument_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Documents/BilateralDocument.proto");
  GOOGLE_CHECK(file != NULL);
  TrustConnectionRequestMetadata_descriptor_ = file->message_type(0);
  static const int TrustConnectionRequestMetadata_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestMetadata, trustconnectionrequeststatus_),
  };
  TrustConnectionRequestMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrustConnectionRequestMetadata_descriptor_,
      TrustConnectionRequestMetadata::default_instance_,
      TrustConnectionRequestMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrustConnectionRequestMetadata));
  BasicDocumentMetadata_descriptor_ = file->message_type(1);
  static const int BasicDocumentMetadata_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentMetadata, documentstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentMetadata, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentMetadata, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentMetadata, grounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentMetadata, receiptstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentMetadata, revisiondate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentMetadata, revisionnumber_),
  };
  BasicDocumentMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BasicDocumentMetadata_descriptor_,
      BasicDocumentMetadata::default_instance_,
      BasicDocumentMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BasicDocumentMetadata));
  PriceListMetadata_descriptor_ = file->message_type(2);
  static const int PriceListMetadata_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListMetadata, documentstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListMetadata, pricelisteffectivedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListMetadata, contractdocumentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListMetadata, contractdocumentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListMetadata, receiptstatus_),
  };
  PriceListMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PriceListMetadata_descriptor_,
      PriceListMetadata::default_instance_,
      PriceListMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PriceListMetadata));
  ContractMetadata_descriptor_ = file->message_type(3);
  static const int ContractMetadata_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, documentstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, contractprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, contracttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, receiptstatus_),
  };
  ContractMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContractMetadata_descriptor_,
      ContractMetadata::default_instance_,
      ContractMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContractMetadata));
  SupplementaryAgreementMetadata_descriptor_ = file->message_type(4);
  static const int SupplementaryAgreementMetadata_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementMetadata, documentstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementMetadata, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementMetadata, contracttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementMetadata, contractnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementMetadata, contractdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementMetadata, receiptstatus_),
  };
  SupplementaryAgreementMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SupplementaryAgreementMetadata_descriptor_,
      SupplementaryAgreementMetadata::default_instance_,
      SupplementaryAgreementMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SupplementaryAgreementMetadata));
  BilateralDocumentMetadata_descriptor_ = file->message_type(5);
  static const int BilateralDocumentMetadata_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocumentMetadata, documentstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocumentMetadata, receiptstatus_),
  };
  BilateralDocumentMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BilateralDocumentMetadata_descriptor_,
      BilateralDocumentMetadata::default_instance_,
      BilateralDocumentMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocumentMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocumentMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BilateralDocumentMetadata));
  BilateralDocumentStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Documents_2fBilateralDocument_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrustConnectionRequestMetadata_descriptor_, &TrustConnectionRequestMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BasicDocumentMetadata_descriptor_, &BasicDocumentMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PriceListMetadata_descriptor_, &PriceListMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContractMetadata_descriptor_, &ContractMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SupplementaryAgreementMetadata_descriptor_, &SupplementaryAgreementMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BilateralDocumentMetadata_descriptor_, &BilateralDocumentMetadata::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Documents_2fBilateralDocument_2eproto() {
  delete TrustConnectionRequestMetadata::default_instance_;
  delete TrustConnectionRequestMetadata_reflection_;
  delete BasicDocumentMetadata::default_instance_;
  delete BasicDocumentMetadata_reflection_;
  delete PriceListMetadata::default_instance_;
  delete PriceListMetadata_reflection_;
  delete ContractMetadata::default_instance_;
  delete ContractMetadata_reflection_;
  delete SupplementaryAgreementMetadata::default_instance_;
  delete SupplementaryAgreementMetadata_reflection_;
  delete BilateralDocumentMetadata::default_instance_;
  delete BilateralDocumentMetadata_reflection_;
}

void protobuf_AddDesc_Documents_2fBilateralDocument_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::Documents::protobuf_AddDesc_Documents_2fReceiptStatus_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!Documents/BilateralDocument.proto\022,Dia"
    "doc.Api.Proto.Documents.BilateralDocumen"
    "t\032\035Documents/ReceiptStatus.proto\"\256\001\n\036Tru"
    "stConnectionRequestMetadata\022\213\001\n\034TrustCon"
    "nectionRequestStatus\030\001 \001(\0162E.Diadoc.Api."
    "Proto.Documents.BilateralDocument.Bilate"
    "ralDocumentStatus:\036UnknownBilateralDocum"
    "entStatus\"\311\002\n\025BasicDocumentMetadata\022}\n\016D"
    "ocumentStatus\030\001 \001(\0162E.Diadoc.Api.Proto.D"
    "ocuments.BilateralDocument.BilateralDocu"
    "mentStatus:\036UnknownBilateralDocumentStat"
    "us\022\r\n\005Total\030\002 \002(\t\022\013\n\003Vat\030\003 \001(\t\022\017\n\007Ground"
    "s\030\004 \001(\t\022V\n\rReceiptStatus\030\005 \001(\0162).Diadoc."
    "Api.Proto.Documents.ReceiptStatus:\024Unkno"
    "wnReceiptStatus\022\024\n\014RevisionDate\030\006 \001(\t\022\026\n"
    "\016RevisionNumber\030\007 \001(\t\"\310\002\n\021PriceListMetad"
    "ata\022}\n\016DocumentStatus\030\001 \001(\0162E.Diadoc.Api"
    ".Proto.Documents.BilateralDocument.Bilat"
    "eralDocumentStatus:\036UnknownBilateralDocu"
    "mentStatus\022\036\n\026PriceListEffectiveDate\030\002 \001"
    "(\t\022\034\n\024ContractDocumentDate\030\003 \001(\t\022\036\n\026Cont"
    "ractDocumentNumber\030\004 \001(\t\022V\n\rReceiptStatu"
    "s\030\005 \001(\0162).Diadoc.Api.Proto.Documents.Rec"
    "eiptStatus:\024UnknownReceiptStatus\"\226\002\n\020Con"
    "tractMetadata\022}\n\016DocumentStatus\030\001 \001(\0162E."
    "Diadoc.Api.Proto.Documents.BilateralDocu"
    "ment.BilateralDocumentStatus:\036UnknownBil"
    "ateralDocumentStatus\022\025\n\rContractPrice\030\002 "
    "\001(\t\022\024\n\014ContractType\030\003 \001(\t\022V\n\rReceiptStat"
    "us\030\004 \001(\0162).Diadoc.Api.Proto.Documents.Re"
    "ceiptStatus:\024UnknownReceiptStatus\"\312\002\n\036Su"
    "pplementaryAgreementMetadata\022}\n\016Document"
    "Status\030\001 \001(\0162E.Diadoc.Api.Proto.Document"
    "s.BilateralDocument.BilateralDocumentSta"
    "tus:\036UnknownBilateralDocumentStatus\022\r\n\005T"
    "otal\030\002 \001(\t\022\024\n\014ContractType\030\003 \001(\t\022\026\n\016Cont"
    "ractNumber\030\004 \002(\t\022\024\n\014ContractDate\030\005 \002(\t\022V"
    "\n\rReceiptStatus\030\006 \001(\0162).Diadoc.Api.Proto"
    ".Documents.ReceiptStatus:\024UnknownReceipt"
    "Status\"\362\001\n\031BilateralDocumentMetadata\022}\n\016"
    "DocumentStatus\030\001 \001(\0162E.Diadoc.Api.Proto."
    "Documents.BilateralDocument.BilateralDoc"
    "umentStatus:\036UnknownBilateralDocumentSta"
    "tus\022V\n\rReceiptStatus\030\002 \001(\0162).Diadoc.Api."
    "Proto.Documents.ReceiptStatus:\024UnknownRe"
    "ceiptStatus*\232\006\n\027BilateralDocumentStatus\022"
    "\"\n\036UnknownBilateralDocumentStatus\020\000\022(\n$O"
    "utboundWaitingForRecipientSignature\020\001\022\"\n"
    "\036OutboundWithRecipientSignature\020\002\022+\n\'Out"
    "boundWithRecipientPartiallySignature\020\023\022-"
    "\n)OutboundRecipientSignatureRequestRejec"
    "ted\020\003\022%\n!OutboundWaitingForSenderSignatu"
    "re\020\n\022\"\n\036OutboundInvalidSenderSignature\020\013"
    "\022\'\n#InboundWaitingForRecipientSignature\020"
    "\004\022!\n\035InboundWithRecipientSignature\020\005\022*\n&"
    "InboundWithRecipientPartiallySignature\020\024"
    "\022,\n(InboundRecipientSignatureRequestReje"
    "cted\020\006\022$\n InboundInvalidRecipientSignatu"
    "re\020\014\022(\n$InternalWaitingForRecipientSigna"
    "ture\020\007\022\"\n\036InternalWithRecipientSignature"
    "\020\010\022+\n\'InternalWithRecipientPartiallySign"
    "ature\020\025\022-\n)InternalRecipientSignatureReq"
    "uestRejected\020\t\022%\n!InternalWaitingForSend"
    "erSignature\020\r\022\"\n\036InternalInvalidSenderSi"
    "gnature\020\016\022%\n!InternalInvalidRecipientSig"
    "nature\020\017", 2608);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Documents/BilateralDocument.proto", &protobuf_RegisterTypes);
  TrustConnectionRequestMetadata::default_instance_ = new TrustConnectionRequestMetadata();
  BasicDocumentMetadata::default_instance_ = new BasicDocumentMetadata();
  PriceListMetadata::default_instance_ = new PriceListMetadata();
  ContractMetadata::default_instance_ = new ContractMetadata();
  SupplementaryAgreementMetadata::default_instance_ = new SupplementaryAgreementMetadata();
  BilateralDocumentMetadata::default_instance_ = new BilateralDocumentMetadata();
  TrustConnectionRequestMetadata::default_instance_->InitAsDefaultInstance();
  BasicDocumentMetadata::default_instance_->InitAsDefaultInstance();
  PriceListMetadata::default_instance_->InitAsDefaultInstance();
  ContractMetadata::default_instance_->InitAsDefaultInstance();
  SupplementaryAgreementMetadata::default_instance_->InitAsDefaultInstance();
  BilateralDocumentMetadata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Documents_2fBilateralDocument_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Documents_2fBilateralDocument_2eproto {
  StaticDescriptorInitializer_Documents_2fBilateralDocument_2eproto() {
    protobuf_AddDesc_Documents_2fBilateralDocument_2eproto();
  }
} static_descriptor_initializer_Documents_2fBilateralDocument_2eproto_;
const ::google::protobuf::EnumDescriptor* BilateralDocumentStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BilateralDocumentStatus_descriptor_;
}
bool BilateralDocumentStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TrustConnectionRequestMetadata::kTrustConnectionRequestStatusFieldNumber;
#endif  // !_MSC_VER

TrustConnectionRequestMetadata::TrustConnectionRequestMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata)
}

void TrustConnectionRequestMetadata::InitAsDefaultInstance() {
}

TrustConnectionRequestMetadata::TrustConnectionRequestMetadata(const TrustConnectionRequestMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata)
}

void TrustConnectionRequestMetadata::SharedCtor() {
  _cached_size_ = 0;
  trustconnectionrequeststatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrustConnectionRequestMetadata::~TrustConnectionRequestMetadata() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata)
  SharedDtor();
}

void TrustConnectionRequestMetadata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrustConnectionRequestMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrustConnectionRequestMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrustConnectionRequestMetadata_descriptor_;
}

const TrustConnectionRequestMetadata& TrustConnectionRequestMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fBilateralDocument_2eproto();
  return *default_instance_;
}

TrustConnectionRequestMetadata* TrustConnectionRequestMetadata::default_instance_ = NULL;

TrustConnectionRequestMetadata* TrustConnectionRequestMetadata::New() const {
  return new TrustConnectionRequestMetadata;
}

void TrustConnectionRequestMetadata::Clear() {
  trustconnectionrequeststatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrustConnectionRequestMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus TrustConnectionRequestStatus = 1 [default = UnknownBilateralDocumentStatus];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus_IsValid(value)) {
            set_trustconnectionrequeststatus(static_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata)
  return false;
#undef DO_
}

void TrustConnectionRequestMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata)
  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus TrustConnectionRequestStatus = 1 [default = UnknownBilateralDocumentStatus];
  if (has_trustconnectionrequeststatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->trustconnectionrequeststatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata)
}

::google::protobuf::uint8* TrustConnectionRequestMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata)
  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus TrustConnectionRequestStatus = 1 [default = UnknownBilateralDocumentStatus];
  if (has_trustconnectionrequeststatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->trustconnectionrequeststatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata)
  return target;
}

int TrustConnectionRequestMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus TrustConnectionRequestStatus = 1 [default = UnknownBilateralDocumentStatus];
    if (has_trustconnectionrequeststatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trustconnectionrequeststatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrustConnectionRequestMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrustConnectionRequestMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrustConnectionRequestMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrustConnectionRequestMetadata::MergeFrom(const TrustConnectionRequestMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trustconnectionrequeststatus()) {
      set_trustconnectionrequeststatus(from.trustconnectionrequeststatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrustConnectionRequestMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrustConnectionRequestMetadata::CopyFrom(const TrustConnectionRequestMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustConnectionRequestMetadata::IsInitialized() const {

  return true;
}

void TrustConnectionRequestMetadata::Swap(TrustConnectionRequestMetadata* other) {
  if (other != this) {
    std::swap(trustconnectionrequeststatus_, other->trustconnectionrequeststatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrustConnectionRequestMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrustConnectionRequestMetadata_descriptor_;
  metadata.reflection = TrustConnectionRequestMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BasicDocumentMetadata::kDocumentStatusFieldNumber;
const int BasicDocumentMetadata::kTotalFieldNumber;
const int BasicDocumentMetadata::kVatFieldNumber;
const int BasicDocumentMetadata::kGroundsFieldNumber;
const int BasicDocumentMetadata::kReceiptStatusFieldNumber;
const int BasicDocumentMetadata::kRevisionDateFieldNumber;
const int BasicDocumentMetadata::kRevisionNumberFieldNumber;
#endif  // !_MSC_VER

BasicDocumentMetadata::BasicDocumentMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata)
}

void BasicDocumentMetadata::InitAsDefaultInstance() {
}

BasicDocumentMetadata::BasicDocumentMetadata(const BasicDocumentMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata)
}

void BasicDocumentMetadata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documentstatus_ = 0;
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiptstatus_ = 0;
  revisiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revisionnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicDocumentMetadata::~BasicDocumentMetadata() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata)
  SharedDtor();
}

void BasicDocumentMetadata::SharedDtor() {
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grounds_;
  }
  if (revisiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete revisiondate_;
  }
  if (revisionnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete revisionnumber_;
  }
  if (this != default_instance_) {
  }
}

void BasicDocumentMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicDocumentMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicDocumentMetadata_descriptor_;
}

const BasicDocumentMetadata& BasicDocumentMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fBilateralDocument_2eproto();
  return *default_instance_;
}

BasicDocumentMetadata* BasicDocumentMetadata::default_instance_ = NULL;

BasicDocumentMetadata* BasicDocumentMetadata::New() const {
  return new BasicDocumentMetadata;
}

void BasicDocumentMetadata::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BasicDocumentMetadata*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(documentstatus_, receiptstatus_);
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        total_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vat_->clear();
      }
    }
    if (has_grounds()) {
      if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grounds_->clear();
      }
    }
    if (has_revisiondate()) {
      if (revisiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        revisiondate_->clear();
      }
    }
    if (has_revisionnumber()) {
      if (revisionnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        revisionnumber_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BasicDocumentMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus_IsValid(value)) {
            set_documentstatus(static_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Total;
        break;
      }

      // required string Total = 2;
      case 2: {
        if (tag == 18) {
         parse_Total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "total");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Vat;
        break;
      }

      // optional string Vat = 3;
      case 3: {
        if (tag == 26) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Grounds;
        break;
      }

      // optional string Grounds = 4;
      case 4: {
        if (tag == 34) {
         parse_Grounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grounds()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grounds().data(), this->grounds().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grounds");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ReceiptStatus;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 5 [default = UnknownReceiptStatus];
      case 5: {
        if (tag == 40) {
         parse_ReceiptStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::ReceiptStatus_IsValid(value)) {
            set_receiptstatus(static_cast< ::Diadoc::Api::Proto::Documents::ReceiptStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RevisionDate;
        break;
      }

      // optional string RevisionDate = 6;
      case 6: {
        if (tag == 50) {
         parse_RevisionDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revisiondate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->revisiondate().data(), this->revisiondate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revisiondate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_RevisionNumber;
        break;
      }

      // optional string RevisionNumber = 7;
      case 7: {
        if (tag == 58) {
         parse_RevisionNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revisionnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->revisionnumber().data(), this->revisionnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revisionnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata)
  return false;
#undef DO_
}

void BasicDocumentMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata)
  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
  if (has_documentstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->documentstatus(), output);
  }

  // required string Total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->total(), output);
  }

  // optional string Vat = 3;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vat(), output);
  }

  // optional string Grounds = 4;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grounds");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->grounds(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 5 [default = UnknownReceiptStatus];
  if (has_receiptstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->receiptstatus(), output);
  }

  // optional string RevisionDate = 6;
  if (has_revisiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revisiondate().data(), this->revisiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revisiondate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->revisiondate(), output);
  }

  // optional string RevisionNumber = 7;
  if (has_revisionnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revisionnumber().data(), this->revisionnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revisionnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->revisionnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata)
}

::google::protobuf::uint8* BasicDocumentMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata)
  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
  if (has_documentstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->documentstatus(), target);
  }

  // required string Total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->total(), target);
  }

  // optional string Vat = 3;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vat(), target);
  }

  // optional string Grounds = 4;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grounds");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->grounds(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 5 [default = UnknownReceiptStatus];
  if (has_receiptstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->receiptstatus(), target);
  }

  // optional string RevisionDate = 6;
  if (has_revisiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revisiondate().data(), this->revisiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revisiondate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->revisiondate(), target);
  }

  // optional string RevisionNumber = 7;
  if (has_revisionnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revisionnumber().data(), this->revisionnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revisionnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->revisionnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata)
  return target;
}

int BasicDocumentMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
    if (has_documentstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->documentstatus());
    }

    // required string Total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

    // optional string Vat = 3;
    if (has_vat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

    // optional string Grounds = 4;
    if (has_grounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grounds());
    }

    // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 5 [default = UnknownReceiptStatus];
    if (has_receiptstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->receiptstatus());
    }

    // optional string RevisionDate = 6;
    if (has_revisiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->revisiondate());
    }

    // optional string RevisionNumber = 7;
    if (has_revisionnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->revisionnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicDocumentMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BasicDocumentMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BasicDocumentMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BasicDocumentMetadata::MergeFrom(const BasicDocumentMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentstatus()) {
      set_documentstatus(from.documentstatus());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
    if (from.has_grounds()) {
      set_grounds(from.grounds());
    }
    if (from.has_receiptstatus()) {
      set_receiptstatus(from.receiptstatus());
    }
    if (from.has_revisiondate()) {
      set_revisiondate(from.revisiondate());
    }
    if (from.has_revisionnumber()) {
      set_revisionnumber(from.revisionnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BasicDocumentMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicDocumentMetadata::CopyFrom(const BasicDocumentMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicDocumentMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void BasicDocumentMetadata::Swap(BasicDocumentMetadata* other) {
  if (other != this) {
    std::swap(documentstatus_, other->documentstatus_);
    std::swap(total_, other->total_);
    std::swap(vat_, other->vat_);
    std::swap(grounds_, other->grounds_);
    std::swap(receiptstatus_, other->receiptstatus_);
    std::swap(revisiondate_, other->revisiondate_);
    std::swap(revisionnumber_, other->revisionnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BasicDocumentMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasicDocumentMetadata_descriptor_;
  metadata.reflection = BasicDocumentMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PriceListMetadata::kDocumentStatusFieldNumber;
const int PriceListMetadata::kPriceListEffectiveDateFieldNumber;
const int PriceListMetadata::kContractDocumentDateFieldNumber;
const int PriceListMetadata::kContractDocumentNumberFieldNumber;
const int PriceListMetadata::kReceiptStatusFieldNumber;
#endif  // !_MSC_VER

PriceListMetadata::PriceListMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata)
}

void PriceListMetadata::InitAsDefaultInstance() {
}

PriceListMetadata::PriceListMetadata(const PriceListMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata)
}

void PriceListMetadata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documentstatus_ = 0;
  pricelisteffectivedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractdocumentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractdocumentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiptstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriceListMetadata::~PriceListMetadata() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata)
  SharedDtor();
}

void PriceListMetadata::SharedDtor() {
  if (pricelisteffectivedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pricelisteffectivedate_;
  }
  if (contractdocumentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractdocumentdate_;
  }
  if (contractdocumentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractdocumentnumber_;
  }
  if (this != default_instance_) {
  }
}

void PriceListMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriceListMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceListMetadata_descriptor_;
}

const PriceListMetadata& PriceListMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fBilateralDocument_2eproto();
  return *default_instance_;
}

PriceListMetadata* PriceListMetadata::default_instance_ = NULL;

PriceListMetadata* PriceListMetadata::New() const {
  return new PriceListMetadata;
}

void PriceListMetadata::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PriceListMetadata*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(documentstatus_, receiptstatus_);
    if (has_pricelisteffectivedate()) {
      if (pricelisteffectivedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pricelisteffectivedate_->clear();
      }
    }
    if (has_contractdocumentdate()) {
      if (contractdocumentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractdocumentdate_->clear();
      }
    }
    if (has_contractdocumentnumber()) {
      if (contractdocumentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractdocumentnumber_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PriceListMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus_IsValid(value)) {
            set_documentstatus(static_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PriceListEffectiveDate;
        break;
      }

      // optional string PriceListEffectiveDate = 2;
      case 2: {
        if (tag == 18) {
         parse_PriceListEffectiveDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricelisteffectivedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pricelisteffectivedate().data(), this->pricelisteffectivedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pricelisteffectivedate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ContractDocumentDate;
        break;
      }

      // optional string ContractDocumentDate = 3;
      case 3: {
        if (tag == 26) {
         parse_ContractDocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractdocumentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractdocumentdate().data(), this->contractdocumentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractdocumentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ContractDocumentNumber;
        break;
      }

      // optional string ContractDocumentNumber = 4;
      case 4: {
        if (tag == 34) {
         parse_ContractDocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractdocumentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractdocumentnumber().data(), this->contractdocumentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractdocumentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ReceiptStatus;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 5 [default = UnknownReceiptStatus];
      case 5: {
        if (tag == 40) {
         parse_ReceiptStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::ReceiptStatus_IsValid(value)) {
            set_receiptstatus(static_cast< ::Diadoc::Api::Proto::Documents::ReceiptStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata)
  return false;
#undef DO_
}

void PriceListMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata)
  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
  if (has_documentstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->documentstatus(), output);
  }

  // optional string PriceListEffectiveDate = 2;
  if (has_pricelisteffectivedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricelisteffectivedate().data(), this->pricelisteffectivedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pricelisteffectivedate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pricelisteffectivedate(), output);
  }

  // optional string ContractDocumentDate = 3;
  if (has_contractdocumentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractdocumentdate().data(), this->contractdocumentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractdocumentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->contractdocumentdate(), output);
  }

  // optional string ContractDocumentNumber = 4;
  if (has_contractdocumentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractdocumentnumber().data(), this->contractdocumentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractdocumentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->contractdocumentnumber(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 5 [default = UnknownReceiptStatus];
  if (has_receiptstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->receiptstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata)
}

::google::protobuf::uint8* PriceListMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata)
  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
  if (has_documentstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->documentstatus(), target);
  }

  // optional string PriceListEffectiveDate = 2;
  if (has_pricelisteffectivedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricelisteffectivedate().data(), this->pricelisteffectivedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pricelisteffectivedate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pricelisteffectivedate(), target);
  }

  // optional string ContractDocumentDate = 3;
  if (has_contractdocumentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractdocumentdate().data(), this->contractdocumentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractdocumentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->contractdocumentdate(), target);
  }

  // optional string ContractDocumentNumber = 4;
  if (has_contractdocumentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractdocumentnumber().data(), this->contractdocumentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractdocumentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->contractdocumentnumber(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 5 [default = UnknownReceiptStatus];
  if (has_receiptstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->receiptstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata)
  return target;
}

int PriceListMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
    if (has_documentstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->documentstatus());
    }

    // optional string PriceListEffectiveDate = 2;
    if (has_pricelisteffectivedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricelisteffectivedate());
    }

    // optional string ContractDocumentDate = 3;
    if (has_contractdocumentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractdocumentdate());
    }

    // optional string ContractDocumentNumber = 4;
    if (has_contractdocumentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractdocumentnumber());
    }

    // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 5 [default = UnknownReceiptStatus];
    if (has_receiptstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->receiptstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriceListMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PriceListMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PriceListMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PriceListMetadata::MergeFrom(const PriceListMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentstatus()) {
      set_documentstatus(from.documentstatus());
    }
    if (from.has_pricelisteffectivedate()) {
      set_pricelisteffectivedate(from.pricelisteffectivedate());
    }
    if (from.has_contractdocumentdate()) {
      set_contractdocumentdate(from.contractdocumentdate());
    }
    if (from.has_contractdocumentnumber()) {
      set_contractdocumentnumber(from.contractdocumentnumber());
    }
    if (from.has_receiptstatus()) {
      set_receiptstatus(from.receiptstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PriceListMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceListMetadata::CopyFrom(const PriceListMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceListMetadata::IsInitialized() const {

  return true;
}

void PriceListMetadata::Swap(PriceListMetadata* other) {
  if (other != this) {
    std::swap(documentstatus_, other->documentstatus_);
    std::swap(pricelisteffectivedate_, other->pricelisteffectivedate_);
    std::swap(contractdocumentdate_, other->contractdocumentdate_);
    std::swap(contractdocumentnumber_, other->contractdocumentnumber_);
    std::swap(receiptstatus_, other->receiptstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PriceListMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PriceListMetadata_descriptor_;
  metadata.reflection = PriceListMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContractMetadata::kDocumentStatusFieldNumber;
const int ContractMetadata::kContractPriceFieldNumber;
const int ContractMetadata::kContractTypeFieldNumber;
const int ContractMetadata::kReceiptStatusFieldNumber;
#endif  // !_MSC_VER

ContractMetadata::ContractMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata)
}

void ContractMetadata::InitAsDefaultInstance() {
}

ContractMetadata::ContractMetadata(const ContractMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata)
}

void ContractMetadata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documentstatus_ = 0;
  contractprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contracttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiptstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContractMetadata::~ContractMetadata() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata)
  SharedDtor();
}

void ContractMetadata::SharedDtor() {
  if (contractprice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractprice_;
  }
  if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contracttype_;
  }
  if (this != default_instance_) {
  }
}

void ContractMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContractMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContractMetadata_descriptor_;
}

const ContractMetadata& ContractMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fBilateralDocument_2eproto();
  return *default_instance_;
}

ContractMetadata* ContractMetadata::default_instance_ = NULL;

ContractMetadata* ContractMetadata::New() const {
  return new ContractMetadata;
}

void ContractMetadata::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ContractMetadata*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(documentstatus_, receiptstatus_);
    if (has_contractprice()) {
      if (contractprice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractprice_->clear();
      }
    }
    if (has_contracttype()) {
      if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contracttype_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContractMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus_IsValid(value)) {
            set_documentstatus(static_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ContractPrice;
        break;
      }

      // optional string ContractPrice = 2;
      case 2: {
        if (tag == 18) {
         parse_ContractPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractprice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractprice().data(), this->contractprice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractprice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ContractType;
        break;
      }

      // optional string ContractType = 3;
      case 3: {
        if (tag == 26) {
         parse_ContractType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contracttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contracttype().data(), this->contracttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contracttype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ReceiptStatus;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 4 [default = UnknownReceiptStatus];
      case 4: {
        if (tag == 32) {
         parse_ReceiptStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::ReceiptStatus_IsValid(value)) {
            set_receiptstatus(static_cast< ::Diadoc::Api::Proto::Documents::ReceiptStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata)
  return false;
#undef DO_
}

void ContractMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata)
  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
  if (has_documentstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->documentstatus(), output);
  }

  // optional string ContractPrice = 2;
  if (has_contractprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractprice().data(), this->contractprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractprice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->contractprice(), output);
  }

  // optional string ContractType = 3;
  if (has_contracttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contracttype().data(), this->contracttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contracttype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->contracttype(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 4 [default = UnknownReceiptStatus];
  if (has_receiptstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->receiptstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata)
}

::google::protobuf::uint8* ContractMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata)
  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
  if (has_documentstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->documentstatus(), target);
  }

  // optional string ContractPrice = 2;
  if (has_contractprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractprice().data(), this->contractprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractprice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contractprice(), target);
  }

  // optional string ContractType = 3;
  if (has_contracttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contracttype().data(), this->contracttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contracttype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->contracttype(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 4 [default = UnknownReceiptStatus];
  if (has_receiptstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->receiptstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata)
  return target;
}

int ContractMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
    if (has_documentstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->documentstatus());
    }

    // optional string ContractPrice = 2;
    if (has_contractprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractprice());
    }

    // optional string ContractType = 3;
    if (has_contracttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contracttype());
    }

    // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 4 [default = UnknownReceiptStatus];
    if (has_receiptstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->receiptstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContractMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContractMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContractMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContractMetadata::MergeFrom(const ContractMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentstatus()) {
      set_documentstatus(from.documentstatus());
    }
    if (from.has_contractprice()) {
      set_contractprice(from.contractprice());
    }
    if (from.has_contracttype()) {
      set_contracttype(from.contracttype());
    }
    if (from.has_receiptstatus()) {
      set_receiptstatus(from.receiptstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContractMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractMetadata::CopyFrom(const ContractMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractMetadata::IsInitialized() const {

  return true;
}

void ContractMetadata::Swap(ContractMetadata* other) {
  if (other != this) {
    std::swap(documentstatus_, other->documentstatus_);
    std::swap(contractprice_, other->contractprice_);
    std::swap(contracttype_, other->contracttype_);
    std::swap(receiptstatus_, other->receiptstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContractMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContractMetadata_descriptor_;
  metadata.reflection = ContractMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SupplementaryAgreementMetadata::kDocumentStatusFieldNumber;
const int SupplementaryAgreementMetadata::kTotalFieldNumber;
const int SupplementaryAgreementMetadata::kContractTypeFieldNumber;
const int SupplementaryAgreementMetadata::kContractNumberFieldNumber;
const int SupplementaryAgreementMetadata::kContractDateFieldNumber;
const int SupplementaryAgreementMetadata::kReceiptStatusFieldNumber;
#endif  // !_MSC_VER

SupplementaryAgreementMetadata::SupplementaryAgreementMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.BilateralDocument.SupplementaryAgreementMetadata)
}

void SupplementaryAgreementMetadata::InitAsDefaultInstance() {
}

SupplementaryAgreementMetadata::SupplementaryAgreementMetadata(const SupplementaryAgreementMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.BilateralDocument.SupplementaryAgreementMetadata)
}

void SupplementaryAgreementMetadata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documentstatus_ = 0;
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contracttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiptstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SupplementaryAgreementMetadata::~SupplementaryAgreementMetadata() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.BilateralDocument.SupplementaryAgreementMetadata)
  SharedDtor();
}

void SupplementaryAgreementMetadata::SharedDtor() {
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contracttype_;
  }
  if (contractnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractnumber_;
  }
  if (contractdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractdate_;
  }
  if (this != default_instance_) {
  }
}

void SupplementaryAgreementMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SupplementaryAgreementMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SupplementaryAgreementMetadata_descriptor_;
}

const SupplementaryAgreementMetadata& SupplementaryAgreementMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fBilateralDocument_2eproto();
  return *default_instance_;
}

SupplementaryAgreementMetadata* SupplementaryAgreementMetadata::default_instance_ = NULL;

SupplementaryAgreementMetadata* SupplementaryAgreementMetadata::New() const {
  return new SupplementaryAgreementMetadata;
}

void SupplementaryAgreementMetadata::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SupplementaryAgreementMetadata*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(documentstatus_, receiptstatus_);
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        total_->clear();
      }
    }
    if (has_contracttype()) {
      if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contracttype_->clear();
      }
    }
    if (has_contractnumber()) {
      if (contractnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractnumber_->clear();
      }
    }
    if (has_contractdate()) {
      if (contractdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractdate_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SupplementaryAgreementMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.BilateralDocument.SupplementaryAgreementMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus_IsValid(value)) {
            set_documentstatus(static_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Total;
        break;
      }

      // optional string Total = 2;
      case 2: {
        if (tag == 18) {
         parse_Total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "total");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ContractType;
        break;
      }

      // optional string ContractType = 3;
      case 3: {
        if (tag == 26) {
         parse_ContractType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contracttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contracttype().data(), this->contracttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contracttype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ContractNumber;
        break;
      }

      // required string ContractNumber = 4;
      case 4: {
        if (tag == 34) {
         parse_ContractNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractnumber().data(), this->contractnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ContractDate;
        break;
      }

      // required string ContractDate = 5;
      case 5: {
        if (tag == 42) {
         parse_ContractDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractdate().data(), this->contractdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ReceiptStatus;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 6 [default = UnknownReceiptStatus];
      case 6: {
        if (tag == 48) {
         parse_ReceiptStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::ReceiptStatus_IsValid(value)) {
            set_receiptstatus(static_cast< ::Diadoc::Api::Proto::Documents::ReceiptStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.BilateralDocument.SupplementaryAgreementMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.BilateralDocument.SupplementaryAgreementMetadata)
  return false;
#undef DO_
}

void SupplementaryAgreementMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.BilateralDocument.SupplementaryAgreementMetadata)
  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
  if (has_documentstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->documentstatus(), output);
  }

  // optional string Total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->total(), output);
  }

  // optional string ContractType = 3;
  if (has_contracttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contracttype().data(), this->contracttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contracttype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->contracttype(), output);
  }

  // required string ContractNumber = 4;
  if (has_contractnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractnumber().data(), this->contractnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->contractnumber(), output);
  }

  // required string ContractDate = 5;
  if (has_contractdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractdate().data(), this->contractdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->contractdate(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 6 [default = UnknownReceiptStatus];
  if (has_receiptstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->receiptstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.BilateralDocument.SupplementaryAgreementMetadata)
}

::google::protobuf::uint8* SupplementaryAgreementMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.BilateralDocument.SupplementaryAgreementMetadata)
  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
  if (has_documentstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->documentstatus(), target);
  }

  // optional string Total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->total(), target);
  }

  // optional string ContractType = 3;
  if (has_contracttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contracttype().data(), this->contracttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contracttype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->contracttype(), target);
  }

  // required string ContractNumber = 4;
  if (has_contractnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractnumber().data(), this->contractnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->contractnumber(), target);
  }

  // required string ContractDate = 5;
  if (has_contractdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractdate().data(), this->contractdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->contractdate(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 6 [default = UnknownReceiptStatus];
  if (has_receiptstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->receiptstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.BilateralDocument.SupplementaryAgreementMetadata)
  return target;
}

int SupplementaryAgreementMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
    if (has_documentstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->documentstatus());
    }

    // optional string Total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

    // optional string ContractType = 3;
    if (has_contracttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contracttype());
    }

    // required string ContractNumber = 4;
    if (has_contractnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractnumber());
    }

    // required string ContractDate = 5;
    if (has_contractdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractdate());
    }

    // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 6 [default = UnknownReceiptStatus];
    if (has_receiptstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->receiptstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SupplementaryAgreementMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SupplementaryAgreementMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SupplementaryAgreementMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SupplementaryAgreementMetadata::MergeFrom(const SupplementaryAgreementMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentstatus()) {
      set_documentstatus(from.documentstatus());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_contracttype()) {
      set_contracttype(from.contracttype());
    }
    if (from.has_contractnumber()) {
      set_contractnumber(from.contractnumber());
    }
    if (from.has_contractdate()) {
      set_contractdate(from.contractdate());
    }
    if (from.has_receiptstatus()) {
      set_receiptstatus(from.receiptstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SupplementaryAgreementMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupplementaryAgreementMetadata::CopyFrom(const SupplementaryAgreementMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupplementaryAgreementMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;

  return true;
}

void SupplementaryAgreementMetadata::Swap(SupplementaryAgreementMetadata* other) {
  if (other != this) {
    std::swap(documentstatus_, other->documentstatus_);
    std::swap(total_, other->total_);
    std::swap(contracttype_, other->contracttype_);
    std::swap(contractnumber_, other->contractnumber_);
    std::swap(contractdate_, other->contractdate_);
    std::swap(receiptstatus_, other->receiptstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SupplementaryAgreementMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SupplementaryAgreementMetadata_descriptor_;
  metadata.reflection = SupplementaryAgreementMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BilateralDocumentMetadata::kDocumentStatusFieldNumber;
const int BilateralDocumentMetadata::kReceiptStatusFieldNumber;
#endif  // !_MSC_VER

BilateralDocumentMetadata::BilateralDocumentMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata)
}

void BilateralDocumentMetadata::InitAsDefaultInstance() {
}

BilateralDocumentMetadata::BilateralDocumentMetadata(const BilateralDocumentMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata)
}

void BilateralDocumentMetadata::SharedCtor() {
  _cached_size_ = 0;
  documentstatus_ = 0;
  receiptstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BilateralDocumentMetadata::~BilateralDocumentMetadata() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata)
  SharedDtor();
}

void BilateralDocumentMetadata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BilateralDocumentMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BilateralDocumentMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BilateralDocumentMetadata_descriptor_;
}

const BilateralDocumentMetadata& BilateralDocumentMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fBilateralDocument_2eproto();
  return *default_instance_;
}

BilateralDocumentMetadata* BilateralDocumentMetadata::default_instance_ = NULL;

BilateralDocumentMetadata* BilateralDocumentMetadata::New() const {
  return new BilateralDocumentMetadata;
}

void BilateralDocumentMetadata::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BilateralDocumentMetadata*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(documentstatus_, receiptstatus_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BilateralDocumentMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus_IsValid(value)) {
            set_documentstatus(static_cast< ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReceiptStatus;
        break;
      }

      // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 2 [default = UnknownReceiptStatus];
      case 2: {
        if (tag == 16) {
         parse_ReceiptStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::ReceiptStatus_IsValid(value)) {
            set_receiptstatus(static_cast< ::Diadoc::Api::Proto::Documents::ReceiptStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata)
  return false;
#undef DO_
}

void BilateralDocumentMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata)
  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
  if (has_documentstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->documentstatus(), output);
  }

  // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 2 [default = UnknownReceiptStatus];
  if (has_receiptstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->receiptstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata)
}

::google::protobuf::uint8* BilateralDocumentMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata)
  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
  if (has_documentstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->documentstatus(), target);
  }

  // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 2 [default = UnknownReceiptStatus];
  if (has_receiptstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->receiptstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata)
  return target;
}

int BilateralDocumentMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentStatus DocumentStatus = 1 [default = UnknownBilateralDocumentStatus];
    if (has_documentstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->documentstatus());
    }

    // optional .Diadoc.Api.Proto.Documents.ReceiptStatus ReceiptStatus = 2 [default = UnknownReceiptStatus];
    if (has_receiptstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->receiptstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BilateralDocumentMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BilateralDocumentMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BilateralDocumentMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BilateralDocumentMetadata::MergeFrom(const BilateralDocumentMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentstatus()) {
      set_documentstatus(from.documentstatus());
    }
    if (from.has_receiptstatus()) {
      set_receiptstatus(from.receiptstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BilateralDocumentMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BilateralDocumentMetadata::CopyFrom(const BilateralDocumentMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BilateralDocumentMetadata::IsInitialized() const {

  return true;
}

void BilateralDocumentMetadata::Swap(BilateralDocumentMetadata* other) {
  if (other != this) {
    std::swap(documentstatus_, other->documentstatus_);
    std::swap(receiptstatus_, other->receiptstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BilateralDocumentMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BilateralDocumentMetadata_descriptor_;
  metadata.reflection = BilateralDocumentMetadata_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BilateralDocument
}  // namespace Documents
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
