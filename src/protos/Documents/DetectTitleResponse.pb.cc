// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Documents/DetectTitleResponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Documents/DetectTitleResponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Documents {

namespace {

const ::google::protobuf::Descriptor* DetectTitleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectTitleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectedDocumentTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectedDocumentTitle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Documents_2fDetectTitleResponse_2eproto() {
  protobuf_AddDesc_Documents_2fDetectTitleResponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Documents/DetectTitleResponse.proto");
  GOOGLE_CHECK(file != NULL);
  DetectTitleResponse_descriptor_ = file->message_type(0);
  static const int DetectTitleResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectTitleResponse, documenttitles_),
  };
  DetectTitleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectTitleResponse_descriptor_,
      DetectTitleResponse::default_instance_,
      DetectTitleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectTitleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectTitleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectTitleResponse));
  DetectedDocumentTitle_descriptor_ = file->message_type(1);
  static const int DetectedDocumentTitle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedDocumentTitle, typenamedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedDocumentTitle, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedDocumentTitle, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedDocumentTitle, titleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedDocumentTitle, metadata_),
  };
  DetectedDocumentTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectedDocumentTitle_descriptor_,
      DetectedDocumentTitle::default_instance_,
      DetectedDocumentTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedDocumentTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedDocumentTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectedDocumentTitle));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Documents_2fDetectTitleResponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectTitleResponse_descriptor_, &DetectTitleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectedDocumentTitle_descriptor_, &DetectedDocumentTitle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Documents_2fDetectTitleResponse_2eproto() {
  delete DetectTitleResponse::default_instance_;
  delete DetectTitleResponse_reflection_;
  delete DetectedDocumentTitle::default_instance_;
  delete DetectedDocumentTitle_reflection_;
}

void protobuf_AddDesc_Documents_2fDetectTitleResponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::Events::protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#Documents/DetectTitleResponse.proto\022\032D"
    "iadoc.Api.Proto.Documents\032\"Events/Diadoc"
    "Message-PostApi.proto\"`\n\023DetectTitleResp"
    "onse\022I\n\016DocumentTitles\030\001 \003(\01321.Diadoc.Ap"
    "i.Proto.Documents.DetectedDocumentTitle\""
    "\234\001\n\025DetectedDocumentTitle\022\023\n\013TypeNamedId"
    "\030\001 \002(\t\022\020\n\010Function\030\002 \002(\t\022\017\n\007Version\030\003 \002("
    "\t\022\022\n\nTitleIndex\030\004 \002(\005\0227\n\010Metadata\030\005 \003(\0132"
    "%.Diadoc.Api.Proto.Events.MetadataItem", 358);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Documents/DetectTitleResponse.proto", &protobuf_RegisterTypes);
  DetectTitleResponse::default_instance_ = new DetectTitleResponse();
  DetectedDocumentTitle::default_instance_ = new DetectedDocumentTitle();
  DetectTitleResponse::default_instance_->InitAsDefaultInstance();
  DetectedDocumentTitle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Documents_2fDetectTitleResponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Documents_2fDetectTitleResponse_2eproto {
  StaticDescriptorInitializer_Documents_2fDetectTitleResponse_2eproto() {
    protobuf_AddDesc_Documents_2fDetectTitleResponse_2eproto();
  }
} static_descriptor_initializer_Documents_2fDetectTitleResponse_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DetectTitleResponse::kDocumentTitlesFieldNumber;
#endif  // !_MSC_VER

DetectTitleResponse::DetectTitleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.DetectTitleResponse)
}

void DetectTitleResponse::InitAsDefaultInstance() {
}

DetectTitleResponse::DetectTitleResponse(const DetectTitleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.DetectTitleResponse)
}

void DetectTitleResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectTitleResponse::~DetectTitleResponse() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.DetectTitleResponse)
  SharedDtor();
}

void DetectTitleResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DetectTitleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectTitleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectTitleResponse_descriptor_;
}

const DetectTitleResponse& DetectTitleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fDetectTitleResponse_2eproto();
  return *default_instance_;
}

DetectTitleResponse* DetectTitleResponse::default_instance_ = NULL;

DetectTitleResponse* DetectTitleResponse::New() const {
  return new DetectTitleResponse;
}

void DetectTitleResponse::Clear() {
  documenttitles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectTitleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.DetectTitleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Documents.DetectedDocumentTitle DocumentTitles = 1;
      case 1: {
        if (tag == 10) {
         parse_DocumentTitles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documenttitles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DocumentTitles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.DetectTitleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.DetectTitleResponse)
  return false;
#undef DO_
}

void DetectTitleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.DetectTitleResponse)
  // repeated .Diadoc.Api.Proto.Documents.DetectedDocumentTitle DocumentTitles = 1;
  for (int i = 0; i < this->documenttitles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documenttitles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.DetectTitleResponse)
}

::google::protobuf::uint8* DetectTitleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.DetectTitleResponse)
  // repeated .Diadoc.Api.Proto.Documents.DetectedDocumentTitle DocumentTitles = 1;
  for (int i = 0; i < this->documenttitles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documenttitles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.DetectTitleResponse)
  return target;
}

int DetectTitleResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.Documents.DetectedDocumentTitle DocumentTitles = 1;
  total_size += 1 * this->documenttitles_size();
  for (int i = 0; i < this->documenttitles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documenttitles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectTitleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectTitleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectTitleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectTitleResponse::MergeFrom(const DetectTitleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  documenttitles_.MergeFrom(from.documenttitles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectTitleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectTitleResponse::CopyFrom(const DetectTitleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectTitleResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->documenttitles())) return false;
  return true;
}

void DetectTitleResponse::Swap(DetectTitleResponse* other) {
  if (other != this) {
    documenttitles_.Swap(&other->documenttitles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectTitleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectTitleResponse_descriptor_;
  metadata.reflection = DetectTitleResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetectedDocumentTitle::kTypeNamedIdFieldNumber;
const int DetectedDocumentTitle::kFunctionFieldNumber;
const int DetectedDocumentTitle::kVersionFieldNumber;
const int DetectedDocumentTitle::kTitleIndexFieldNumber;
const int DetectedDocumentTitle::kMetadataFieldNumber;
#endif  // !_MSC_VER

DetectedDocumentTitle::DetectedDocumentTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.DetectedDocumentTitle)
}

void DetectedDocumentTitle::InitAsDefaultInstance() {
}

DetectedDocumentTitle::DetectedDocumentTitle(const DetectedDocumentTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.DetectedDocumentTitle)
}

void DetectedDocumentTitle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  typenamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  titleindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectedDocumentTitle::~DetectedDocumentTitle() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.DetectedDocumentTitle)
  SharedDtor();
}

void DetectedDocumentTitle::SharedDtor() {
  if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typenamedid_;
  }
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void DetectedDocumentTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedDocumentTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedDocumentTitle_descriptor_;
}

const DetectedDocumentTitle& DetectedDocumentTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fDetectTitleResponse_2eproto();
  return *default_instance_;
}

DetectedDocumentTitle* DetectedDocumentTitle::default_instance_ = NULL;

DetectedDocumentTitle* DetectedDocumentTitle::New() const {
  return new DetectedDocumentTitle;
}

void DetectedDocumentTitle::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_typenamedid()) {
      if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        typenamedid_->clear();
      }
    }
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        function_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    titleindex_ = 0;
  }
  metadata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectedDocumentTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.DetectedDocumentTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string TypeNamedId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typenamedid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->typenamedid().data(), this->typenamedid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "typenamedid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Function;
        break;
      }

      // required string Function = 2;
      case 2: {
        if (tag == 18) {
         parse_Function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "function");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Version;
        break;
      }

      // required string Version = 3;
      case 3: {
        if (tag == 26) {
         parse_Version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TitleIndex;
        break;
      }

      // required int32 TitleIndex = 4;
      case 4: {
        if (tag == 32) {
         parse_TitleIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleindex_)));
          set_has_titleindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Metadata;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 5;
      case 5: {
        if (tag == 42) {
         parse_Metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Metadata;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.DetectedDocumentTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.DetectedDocumentTitle)
  return false;
#undef DO_
}

void DetectedDocumentTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.DetectedDocumentTitle)
  // required string TypeNamedId = 1;
  if (has_typenamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typenamedid().data(), this->typenamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typenamedid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->typenamedid(), output);
  }

  // required string Function = 2;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->function(), output);
  }

  // required string Version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // required int32 TitleIndex = 4;
  if (has_titleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->titleindex(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 5;
  for (int i = 0; i < this->metadata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->metadata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.DetectedDocumentTitle)
}

::google::protobuf::uint8* DetectedDocumentTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.DetectedDocumentTitle)
  // required string TypeNamedId = 1;
  if (has_typenamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typenamedid().data(), this->typenamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typenamedid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->typenamedid(), target);
  }

  // required string Function = 2;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->function(), target);
  }

  // required string Version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // required int32 TitleIndex = 4;
  if (has_titleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->titleindex(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 5;
  for (int i = 0; i < this->metadata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->metadata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.DetectedDocumentTitle)
  return target;
}

int DetectedDocumentTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string TypeNamedId = 1;
    if (has_typenamedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typenamedid());
    }

    // required string Function = 2;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function());
    }

    // required string Version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required int32 TitleIndex = 4;
    if (has_titleindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleindex());
    }

  }
  // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 5;
  total_size += 1 * this->metadata_size();
  for (int i = 0; i < this->metadata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metadata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedDocumentTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectedDocumentTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectedDocumentTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectedDocumentTitle::MergeFrom(const DetectedDocumentTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  metadata_.MergeFrom(from.metadata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typenamedid()) {
      set_typenamedid(from.typenamedid());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_titleindex()) {
      set_titleindex(from.titleindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectedDocumentTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedDocumentTitle::CopyFrom(const DetectedDocumentTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedDocumentTitle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->metadata())) return false;
  return true;
}

void DetectedDocumentTitle::Swap(DetectedDocumentTitle* other) {
  if (other != this) {
    std::swap(typenamedid_, other->typenamedid_);
    std::swap(function_, other->function_);
    std::swap(version_, other->version_);
    std::swap(titleindex_, other->titleindex_);
    metadata_.Swap(&other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectedDocumentTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectedDocumentTitle_descriptor_;
  metadata.reflection = DetectedDocumentTitle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Documents
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
