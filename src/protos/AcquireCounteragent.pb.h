// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AcquireCounteragent.proto

#ifndef PROTOBUF_AcquireCounteragent_2eproto__INCLUDED
#define PROTOBUF_AcquireCounteragent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Events/DiadocMessage-PostApi.pb.h"
#include "DocumentId.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AcquireCounteragent_2eproto();
void protobuf_AssignDesc_AcquireCounteragent_2eproto();
void protobuf_ShutdownFile_AcquireCounteragent_2eproto();

class AcquireCounteragentRequest;
class InvitationDocument;
class AcquireCounteragentResult;

// ===================================================================

class AcquireCounteragentRequest : public ::google::protobuf::Message {
 public:
  AcquireCounteragentRequest();
  virtual ~AcquireCounteragentRequest();

  AcquireCounteragentRequest(const AcquireCounteragentRequest& from);

  inline AcquireCounteragentRequest& operator=(const AcquireCounteragentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcquireCounteragentRequest& default_instance();

  void Swap(AcquireCounteragentRequest* other);

  // implements Message ----------------------------------------------

  AcquireCounteragentRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcquireCounteragentRequest& from);
  void MergeFrom(const AcquireCounteragentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string OrgId = 1;
  inline bool has_orgid() const;
  inline void clear_orgid();
  static const int kOrgIdFieldNumber = 1;
  inline const ::std::string& orgid() const;
  inline void set_orgid(const ::std::string& value);
  inline void set_orgid(const char* value);
  inline void set_orgid(const char* value, size_t size);
  inline ::std::string* mutable_orgid();
  inline ::std::string* release_orgid();
  inline void set_allocated_orgid(::std::string* orgid);

  // optional string Inn = 2;
  inline bool has_inn() const;
  inline void clear_inn();
  static const int kInnFieldNumber = 2;
  inline const ::std::string& inn() const;
  inline void set_inn(const ::std::string& value);
  inline void set_inn(const char* value);
  inline void set_inn(const char* value, size_t size);
  inline ::std::string* mutable_inn();
  inline ::std::string* release_inn();
  inline void set_allocated_inn(::std::string* inn);

  // optional string MessageToCounteragent = 3;
  inline bool has_messagetocounteragent() const;
  inline void clear_messagetocounteragent();
  static const int kMessageToCounteragentFieldNumber = 3;
  inline const ::std::string& messagetocounteragent() const;
  inline void set_messagetocounteragent(const ::std::string& value);
  inline void set_messagetocounteragent(const char* value);
  inline void set_messagetocounteragent(const char* value, size_t size);
  inline ::std::string* mutable_messagetocounteragent();
  inline ::std::string* release_messagetocounteragent();
  inline void set_allocated_messagetocounteragent(::std::string* messagetocounteragent);

  // optional .Diadoc.Api.Proto.InvitationDocument InvitationDocument = 4;
  inline bool has_invitationdocument() const;
  inline void clear_invitationdocument();
  static const int kInvitationDocumentFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::InvitationDocument& invitationdocument() const;
  inline ::Diadoc::Api::Proto::InvitationDocument* mutable_invitationdocument();
  inline ::Diadoc::Api::Proto::InvitationDocument* release_invitationdocument();
  inline void set_allocated_invitationdocument(::Diadoc::Api::Proto::InvitationDocument* invitationdocument);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.AcquireCounteragentRequest)
 private:
  inline void set_has_orgid();
  inline void clear_has_orgid();
  inline void set_has_inn();
  inline void clear_has_inn();
  inline void set_has_messagetocounteragent();
  inline void clear_has_messagetocounteragent();
  inline void set_has_invitationdocument();
  inline void clear_has_invitationdocument();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* orgid_;
  ::std::string* inn_;
  ::std::string* messagetocounteragent_;
  ::Diadoc::Api::Proto::InvitationDocument* invitationdocument_;
  friend void  protobuf_AddDesc_AcquireCounteragent_2eproto();
  friend void protobuf_AssignDesc_AcquireCounteragent_2eproto();
  friend void protobuf_ShutdownFile_AcquireCounteragent_2eproto();

  void InitAsDefaultInstance();
  static AcquireCounteragentRequest* default_instance_;
};
// -------------------------------------------------------------------

class InvitationDocument : public ::google::protobuf::Message {
 public:
  InvitationDocument();
  virtual ~InvitationDocument();

  InvitationDocument(const InvitationDocument& from);

  inline InvitationDocument& operator=(const InvitationDocument& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvitationDocument& default_instance();

  void Swap(InvitationDocument* other);

  // implements Message ----------------------------------------------

  InvitationDocument* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvitationDocument& from);
  void MergeFrom(const InvitationDocument& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // required string FileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional bool SignatureRequested = 3 [default = false];
  inline bool has_signaturerequested() const;
  inline void clear_signaturerequested();
  static const int kSignatureRequestedFieldNumber = 3;
  inline bool signaturerequested() const;
  inline void set_signaturerequested(bool value);

  // optional string Type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.InvitationDocument)
 private:
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_signaturerequested();
  inline void clear_has_signaturerequested();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::std::string* filename_;
  ::std::string* type_;
  bool signaturerequested_;
  friend void  protobuf_AddDesc_AcquireCounteragent_2eproto();
  friend void protobuf_AssignDesc_AcquireCounteragent_2eproto();
  friend void protobuf_ShutdownFile_AcquireCounteragent_2eproto();

  void InitAsDefaultInstance();
  static InvitationDocument* default_instance_;
};
// -------------------------------------------------------------------

class AcquireCounteragentResult : public ::google::protobuf::Message {
 public:
  AcquireCounteragentResult();
  virtual ~AcquireCounteragentResult();

  AcquireCounteragentResult(const AcquireCounteragentResult& from);

  inline AcquireCounteragentResult& operator=(const AcquireCounteragentResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcquireCounteragentResult& default_instance();

  void Swap(AcquireCounteragentResult* other);

  // implements Message ----------------------------------------------

  AcquireCounteragentResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcquireCounteragentResult& from);
  void MergeFrom(const AcquireCounteragentResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string OrgId = 1;
  inline bool has_orgid() const;
  inline void clear_orgid();
  static const int kOrgIdFieldNumber = 1;
  inline const ::std::string& orgid() const;
  inline void set_orgid(const ::std::string& value);
  inline void set_orgid(const char* value);
  inline void set_orgid(const char* value, size_t size);
  inline ::std::string* mutable_orgid();
  inline ::std::string* release_orgid();
  inline void set_allocated_orgid(::std::string* orgid);

  // optional .Diadoc.Api.Proto.DocumentId InvitationDocumentId = 2;
  inline bool has_invitationdocumentid() const;
  inline void clear_invitationdocumentid();
  static const int kInvitationDocumentIdFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::DocumentId& invitationdocumentid() const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_invitationdocumentid();
  inline ::Diadoc::Api::Proto::DocumentId* release_invitationdocumentid();
  inline void set_allocated_invitationdocumentid(::Diadoc::Api::Proto::DocumentId* invitationdocumentid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.AcquireCounteragentResult)
 private:
  inline void set_has_orgid();
  inline void clear_has_orgid();
  inline void set_has_invitationdocumentid();
  inline void clear_has_invitationdocumentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* orgid_;
  ::Diadoc::Api::Proto::DocumentId* invitationdocumentid_;
  friend void  protobuf_AddDesc_AcquireCounteragent_2eproto();
  friend void protobuf_AssignDesc_AcquireCounteragent_2eproto();
  friend void protobuf_ShutdownFile_AcquireCounteragent_2eproto();

  void InitAsDefaultInstance();
  static AcquireCounteragentResult* default_instance_;
};
// ===================================================================


// ===================================================================

// AcquireCounteragentRequest

// optional string OrgId = 1;
inline bool AcquireCounteragentRequest::has_orgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcquireCounteragentRequest::set_has_orgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcquireCounteragentRequest::clear_has_orgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcquireCounteragentRequest::clear_orgid() {
  if (orgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgid_->clear();
  }
  clear_has_orgid();
}
inline const ::std::string& AcquireCounteragentRequest::orgid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.AcquireCounteragentRequest.OrgId)
  return *orgid_;
}
inline void AcquireCounteragentRequest::set_orgid(const ::std::string& value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.AcquireCounteragentRequest.OrgId)
}
inline void AcquireCounteragentRequest::set_orgid(const char* value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.AcquireCounteragentRequest.OrgId)
}
inline void AcquireCounteragentRequest::set_orgid(const char* value, size_t size) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.AcquireCounteragentRequest.OrgId)
}
inline ::std::string* AcquireCounteragentRequest::mutable_orgid() {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.AcquireCounteragentRequest.OrgId)
  return orgid_;
}
inline ::std::string* AcquireCounteragentRequest::release_orgid() {
  clear_has_orgid();
  if (orgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = orgid_;
    orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcquireCounteragentRequest::set_allocated_orgid(::std::string* orgid) {
  if (orgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgid_;
  }
  if (orgid) {
    set_has_orgid();
    orgid_ = orgid;
  } else {
    clear_has_orgid();
    orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.AcquireCounteragentRequest.OrgId)
}

// optional string Inn = 2;
inline bool AcquireCounteragentRequest::has_inn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AcquireCounteragentRequest::set_has_inn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AcquireCounteragentRequest::clear_has_inn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AcquireCounteragentRequest::clear_inn() {
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_->clear();
  }
  clear_has_inn();
}
inline const ::std::string& AcquireCounteragentRequest::inn() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.AcquireCounteragentRequest.Inn)
  return *inn_;
}
inline void AcquireCounteragentRequest::set_inn(const ::std::string& value) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.AcquireCounteragentRequest.Inn)
}
inline void AcquireCounteragentRequest::set_inn(const char* value) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.AcquireCounteragentRequest.Inn)
}
inline void AcquireCounteragentRequest::set_inn(const char* value, size_t size) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.AcquireCounteragentRequest.Inn)
}
inline ::std::string* AcquireCounteragentRequest::mutable_inn() {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.AcquireCounteragentRequest.Inn)
  return inn_;
}
inline ::std::string* AcquireCounteragentRequest::release_inn() {
  clear_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inn_;
    inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcquireCounteragentRequest::set_allocated_inn(::std::string* inn) {
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inn_;
  }
  if (inn) {
    set_has_inn();
    inn_ = inn;
  } else {
    clear_has_inn();
    inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.AcquireCounteragentRequest.Inn)
}

// optional string MessageToCounteragent = 3;
inline bool AcquireCounteragentRequest::has_messagetocounteragent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AcquireCounteragentRequest::set_has_messagetocounteragent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AcquireCounteragentRequest::clear_has_messagetocounteragent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AcquireCounteragentRequest::clear_messagetocounteragent() {
  if (messagetocounteragent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetocounteragent_->clear();
  }
  clear_has_messagetocounteragent();
}
inline const ::std::string& AcquireCounteragentRequest::messagetocounteragent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.AcquireCounteragentRequest.MessageToCounteragent)
  return *messagetocounteragent_;
}
inline void AcquireCounteragentRequest::set_messagetocounteragent(const ::std::string& value) {
  set_has_messagetocounteragent();
  if (messagetocounteragent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetocounteragent_ = new ::std::string;
  }
  messagetocounteragent_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.AcquireCounteragentRequest.MessageToCounteragent)
}
inline void AcquireCounteragentRequest::set_messagetocounteragent(const char* value) {
  set_has_messagetocounteragent();
  if (messagetocounteragent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetocounteragent_ = new ::std::string;
  }
  messagetocounteragent_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.AcquireCounteragentRequest.MessageToCounteragent)
}
inline void AcquireCounteragentRequest::set_messagetocounteragent(const char* value, size_t size) {
  set_has_messagetocounteragent();
  if (messagetocounteragent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetocounteragent_ = new ::std::string;
  }
  messagetocounteragent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.AcquireCounteragentRequest.MessageToCounteragent)
}
inline ::std::string* AcquireCounteragentRequest::mutable_messagetocounteragent() {
  set_has_messagetocounteragent();
  if (messagetocounteragent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetocounteragent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.AcquireCounteragentRequest.MessageToCounteragent)
  return messagetocounteragent_;
}
inline ::std::string* AcquireCounteragentRequest::release_messagetocounteragent() {
  clear_has_messagetocounteragent();
  if (messagetocounteragent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = messagetocounteragent_;
    messagetocounteragent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcquireCounteragentRequest::set_allocated_messagetocounteragent(::std::string* messagetocounteragent) {
  if (messagetocounteragent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagetocounteragent_;
  }
  if (messagetocounteragent) {
    set_has_messagetocounteragent();
    messagetocounteragent_ = messagetocounteragent;
  } else {
    clear_has_messagetocounteragent();
    messagetocounteragent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.AcquireCounteragentRequest.MessageToCounteragent)
}

// optional .Diadoc.Api.Proto.InvitationDocument InvitationDocument = 4;
inline bool AcquireCounteragentRequest::has_invitationdocument() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AcquireCounteragentRequest::set_has_invitationdocument() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AcquireCounteragentRequest::clear_has_invitationdocument() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AcquireCounteragentRequest::clear_invitationdocument() {
  if (invitationdocument_ != NULL) invitationdocument_->::Diadoc::Api::Proto::InvitationDocument::Clear();
  clear_has_invitationdocument();
}
inline const ::Diadoc::Api::Proto::InvitationDocument& AcquireCounteragentRequest::invitationdocument() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.AcquireCounteragentRequest.InvitationDocument)
  return invitationdocument_ != NULL ? *invitationdocument_ : *default_instance_->invitationdocument_;
}
inline ::Diadoc::Api::Proto::InvitationDocument* AcquireCounteragentRequest::mutable_invitationdocument() {
  set_has_invitationdocument();
  if (invitationdocument_ == NULL) invitationdocument_ = new ::Diadoc::Api::Proto::InvitationDocument;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.AcquireCounteragentRequest.InvitationDocument)
  return invitationdocument_;
}
inline ::Diadoc::Api::Proto::InvitationDocument* AcquireCounteragentRequest::release_invitationdocument() {
  clear_has_invitationdocument();
  ::Diadoc::Api::Proto::InvitationDocument* temp = invitationdocument_;
  invitationdocument_ = NULL;
  return temp;
}
inline void AcquireCounteragentRequest::set_allocated_invitationdocument(::Diadoc::Api::Proto::InvitationDocument* invitationdocument) {
  delete invitationdocument_;
  invitationdocument_ = invitationdocument;
  if (invitationdocument) {
    set_has_invitationdocument();
  } else {
    clear_has_invitationdocument();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.AcquireCounteragentRequest.InvitationDocument)
}

// -------------------------------------------------------------------

// InvitationDocument

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
inline bool InvitationDocument::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InvitationDocument::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InvitationDocument::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InvitationDocument::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& InvitationDocument::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.InvitationDocument.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* InvitationDocument::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.InvitationDocument.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* InvitationDocument::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void InvitationDocument::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.InvitationDocument.SignedContent)
}

// required string FileName = 2;
inline bool InvitationDocument::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InvitationDocument::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InvitationDocument::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InvitationDocument::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& InvitationDocument::filename() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.InvitationDocument.FileName)
  return *filename_;
}
inline void InvitationDocument::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.InvitationDocument.FileName)
}
inline void InvitationDocument::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.InvitationDocument.FileName)
}
inline void InvitationDocument::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.InvitationDocument.FileName)
}
inline ::std::string* InvitationDocument::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.InvitationDocument.FileName)
  return filename_;
}
inline ::std::string* InvitationDocument::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InvitationDocument::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.InvitationDocument.FileName)
}

// optional bool SignatureRequested = 3 [default = false];
inline bool InvitationDocument::has_signaturerequested() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InvitationDocument::set_has_signaturerequested() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InvitationDocument::clear_has_signaturerequested() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InvitationDocument::clear_signaturerequested() {
  signaturerequested_ = false;
  clear_has_signaturerequested();
}
inline bool InvitationDocument::signaturerequested() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.InvitationDocument.SignatureRequested)
  return signaturerequested_;
}
inline void InvitationDocument::set_signaturerequested(bool value) {
  set_has_signaturerequested();
  signaturerequested_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.InvitationDocument.SignatureRequested)
}

// optional string Type = 4;
inline bool InvitationDocument::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InvitationDocument::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InvitationDocument::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InvitationDocument::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& InvitationDocument::type() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.InvitationDocument.Type)
  return *type_;
}
inline void InvitationDocument::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.InvitationDocument.Type)
}
inline void InvitationDocument::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.InvitationDocument.Type)
}
inline void InvitationDocument::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.InvitationDocument.Type)
}
inline ::std::string* InvitationDocument::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.InvitationDocument.Type)
  return type_;
}
inline ::std::string* InvitationDocument::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InvitationDocument::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.InvitationDocument.Type)
}

// -------------------------------------------------------------------

// AcquireCounteragentResult

// required string OrgId = 1;
inline bool AcquireCounteragentResult::has_orgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcquireCounteragentResult::set_has_orgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcquireCounteragentResult::clear_has_orgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcquireCounteragentResult::clear_orgid() {
  if (orgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgid_->clear();
  }
  clear_has_orgid();
}
inline const ::std::string& AcquireCounteragentResult::orgid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.AcquireCounteragentResult.OrgId)
  return *orgid_;
}
inline void AcquireCounteragentResult::set_orgid(const ::std::string& value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.AcquireCounteragentResult.OrgId)
}
inline void AcquireCounteragentResult::set_orgid(const char* value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.AcquireCounteragentResult.OrgId)
}
inline void AcquireCounteragentResult::set_orgid(const char* value, size_t size) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.AcquireCounteragentResult.OrgId)
}
inline ::std::string* AcquireCounteragentResult::mutable_orgid() {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.AcquireCounteragentResult.OrgId)
  return orgid_;
}
inline ::std::string* AcquireCounteragentResult::release_orgid() {
  clear_has_orgid();
  if (orgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = orgid_;
    orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcquireCounteragentResult::set_allocated_orgid(::std::string* orgid) {
  if (orgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgid_;
  }
  if (orgid) {
    set_has_orgid();
    orgid_ = orgid;
  } else {
    clear_has_orgid();
    orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.AcquireCounteragentResult.OrgId)
}

// optional .Diadoc.Api.Proto.DocumentId InvitationDocumentId = 2;
inline bool AcquireCounteragentResult::has_invitationdocumentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AcquireCounteragentResult::set_has_invitationdocumentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AcquireCounteragentResult::clear_has_invitationdocumentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AcquireCounteragentResult::clear_invitationdocumentid() {
  if (invitationdocumentid_ != NULL) invitationdocumentid_->::Diadoc::Api::Proto::DocumentId::Clear();
  clear_has_invitationdocumentid();
}
inline const ::Diadoc::Api::Proto::DocumentId& AcquireCounteragentResult::invitationdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.AcquireCounteragentResult.InvitationDocumentId)
  return invitationdocumentid_ != NULL ? *invitationdocumentid_ : *default_instance_->invitationdocumentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* AcquireCounteragentResult::mutable_invitationdocumentid() {
  set_has_invitationdocumentid();
  if (invitationdocumentid_ == NULL) invitationdocumentid_ = new ::Diadoc::Api::Proto::DocumentId;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.AcquireCounteragentResult.InvitationDocumentId)
  return invitationdocumentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* AcquireCounteragentResult::release_invitationdocumentid() {
  clear_has_invitationdocumentid();
  ::Diadoc::Api::Proto::DocumentId* temp = invitationdocumentid_;
  invitationdocumentid_ = NULL;
  return temp;
}
inline void AcquireCounteragentResult::set_allocated_invitationdocumentid(::Diadoc::Api::Proto::DocumentId* invitationdocumentid) {
  delete invitationdocumentid_;
  invitationdocumentid_ = invitationdocumentid;
  if (invitationdocumentid) {
    set_has_invitationdocumentid();
  } else {
    clear_has_invitationdocumentid();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.AcquireCounteragentResult.InvitationDocumentId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AcquireCounteragent_2eproto__INCLUDED
