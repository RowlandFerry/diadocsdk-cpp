// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Organizations/BlockStatus.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Organizations/BlockStatus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Organizations {

namespace {

const ::google::protobuf::Descriptor* BlockStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockStatus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Organizations_2fBlockStatus_2eproto() {
  protobuf_AddDesc_Organizations_2fBlockStatus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Organizations/BlockStatus.proto");
  GOOGLE_CHECK(file != NULL);
  BlockStatus_descriptor_ = file->message_type(0);
  static const int BlockStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockStatus, manualblockstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockStatus, autoblockstatus_),
  };
  BlockStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockStatus_descriptor_,
      BlockStatus::default_instance_,
      BlockStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockStatus));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Organizations_2fBlockStatus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockStatus_descriptor_, &BlockStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Organizations_2fBlockStatus_2eproto() {
  delete BlockStatus::default_instance_;
  delete BlockStatus_reflection_;
}

void protobuf_AddDesc_Organizations_2fBlockStatus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::Organizations::protobuf_AddDesc_Organizations_2fManualBlockStatus_2eproto();
  ::Diadoc::Api::Proto::Organizations::protobuf_AddDesc_Organizations_2fAutoBlockStatus_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037Organizations/BlockStatus.proto\022\036Diado"
    "c.Api.Proto.Organizations\032%Organizations"
    "/ManualBlockStatus.proto\032#Organizations/"
    "AutoBlockStatus.proto\"\245\001\n\013BlockStatus\022L\n"
    "\021ManualBlockStatus\030\001 \002(\01321.Diadoc.Api.Pr"
    "oto.Organizations.ManualBlockStatus\022H\n\017A"
    "utoBlockStatus\030\002 \002(\0132/.Diadoc.Api.Proto."
    "Organizations.AutoBlockStatus", 309);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Organizations/BlockStatus.proto", &protobuf_RegisterTypes);
  BlockStatus::default_instance_ = new BlockStatus();
  BlockStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Organizations_2fBlockStatus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Organizations_2fBlockStatus_2eproto {
  StaticDescriptorInitializer_Organizations_2fBlockStatus_2eproto() {
    protobuf_AddDesc_Organizations_2fBlockStatus_2eproto();
  }
} static_descriptor_initializer_Organizations_2fBlockStatus_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BlockStatus::kManualBlockStatusFieldNumber;
const int BlockStatus::kAutoBlockStatusFieldNumber;
#endif  // !_MSC_VER

BlockStatus::BlockStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Organizations.BlockStatus)
}

void BlockStatus::InitAsDefaultInstance() {
  manualblockstatus_ = const_cast< ::Diadoc::Api::Proto::Organizations::ManualBlockStatus*>(&::Diadoc::Api::Proto::Organizations::ManualBlockStatus::default_instance());
  autoblockstatus_ = const_cast< ::Diadoc::Api::Proto::Organizations::AutoBlockStatus*>(&::Diadoc::Api::Proto::Organizations::AutoBlockStatus::default_instance());
}

BlockStatus::BlockStatus(const BlockStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Organizations.BlockStatus)
}

void BlockStatus::SharedCtor() {
  _cached_size_ = 0;
  manualblockstatus_ = NULL;
  autoblockstatus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockStatus::~BlockStatus() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Organizations.BlockStatus)
  SharedDtor();
}

void BlockStatus::SharedDtor() {
  if (this != default_instance_) {
    delete manualblockstatus_;
    delete autoblockstatus_;
  }
}

void BlockStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockStatus_descriptor_;
}

const BlockStatus& BlockStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Organizations_2fBlockStatus_2eproto();
  return *default_instance_;
}

BlockStatus* BlockStatus::default_instance_ = NULL;

BlockStatus* BlockStatus::New() const {
  return new BlockStatus;
}

void BlockStatus::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_manualblockstatus()) {
      if (manualblockstatus_ != NULL) manualblockstatus_->::Diadoc::Api::Proto::Organizations::ManualBlockStatus::Clear();
    }
    if (has_autoblockstatus()) {
      if (autoblockstatus_ != NULL) autoblockstatus_->::Diadoc::Api::Proto::Organizations::AutoBlockStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Organizations.BlockStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Organizations.ManualBlockStatus ManualBlockStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manualblockstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AutoBlockStatus;
        break;
      }

      // required .Diadoc.Api.Proto.Organizations.AutoBlockStatus AutoBlockStatus = 2;
      case 2: {
        if (tag == 18) {
         parse_AutoBlockStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autoblockstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Organizations.BlockStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Organizations.BlockStatus)
  return false;
#undef DO_
}

void BlockStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Organizations.BlockStatus)
  // required .Diadoc.Api.Proto.Organizations.ManualBlockStatus ManualBlockStatus = 1;
  if (has_manualblockstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manualblockstatus(), output);
  }

  // required .Diadoc.Api.Proto.Organizations.AutoBlockStatus AutoBlockStatus = 2;
  if (has_autoblockstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->autoblockstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Organizations.BlockStatus)
}

::google::protobuf::uint8* BlockStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Organizations.BlockStatus)
  // required .Diadoc.Api.Proto.Organizations.ManualBlockStatus ManualBlockStatus = 1;
  if (has_manualblockstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manualblockstatus(), target);
  }

  // required .Diadoc.Api.Proto.Organizations.AutoBlockStatus AutoBlockStatus = 2;
  if (has_autoblockstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->autoblockstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Organizations.BlockStatus)
  return target;
}

int BlockStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Organizations.ManualBlockStatus ManualBlockStatus = 1;
    if (has_manualblockstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manualblockstatus());
    }

    // required .Diadoc.Api.Proto.Organizations.AutoBlockStatus AutoBlockStatus = 2;
    if (has_autoblockstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->autoblockstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockStatus::MergeFrom(const BlockStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manualblockstatus()) {
      mutable_manualblockstatus()->::Diadoc::Api::Proto::Organizations::ManualBlockStatus::MergeFrom(from.manualblockstatus());
    }
    if (from.has_autoblockstatus()) {
      mutable_autoblockstatus()->::Diadoc::Api::Proto::Organizations::AutoBlockStatus::MergeFrom(from.autoblockstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockStatus::CopyFrom(const BlockStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_manualblockstatus()) {
    if (!this->manualblockstatus().IsInitialized()) return false;
  }
  if (has_autoblockstatus()) {
    if (!this->autoblockstatus().IsInitialized()) return false;
  }
  return true;
}

void BlockStatus::Swap(BlockStatus* other) {
  if (other != this) {
    std::swap(manualblockstatus_, other->manualblockstatus_);
    std::swap(autoblockstatus_, other->autoblockstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockStatus_descriptor_;
  metadata.reflection = BlockStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Organizations
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
