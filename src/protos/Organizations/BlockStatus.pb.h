// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Organizations/BlockStatus.proto

#ifndef PROTOBUF_Organizations_2fBlockStatus_2eproto__INCLUDED
#define PROTOBUF_Organizations_2fBlockStatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Organizations/ManualBlockStatus.pb.h"
#include "Organizations/AutoBlockStatus.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Organizations {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Organizations_2fBlockStatus_2eproto();
void protobuf_AssignDesc_Organizations_2fBlockStatus_2eproto();
void protobuf_ShutdownFile_Organizations_2fBlockStatus_2eproto();

class BlockStatus;

// ===================================================================

class BlockStatus : public ::google::protobuf::Message {
 public:
  BlockStatus();
  virtual ~BlockStatus();

  BlockStatus(const BlockStatus& from);

  inline BlockStatus& operator=(const BlockStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockStatus& default_instance();

  void Swap(BlockStatus* other);

  // implements Message ----------------------------------------------

  BlockStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockStatus& from);
  void MergeFrom(const BlockStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Organizations.ManualBlockStatus ManualBlockStatus = 1;
  inline bool has_manualblockstatus() const;
  inline void clear_manualblockstatus();
  static const int kManualBlockStatusFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Organizations::ManualBlockStatus& manualblockstatus() const;
  inline ::Diadoc::Api::Proto::Organizations::ManualBlockStatus* mutable_manualblockstatus();
  inline ::Diadoc::Api::Proto::Organizations::ManualBlockStatus* release_manualblockstatus();
  inline void set_allocated_manualblockstatus(::Diadoc::Api::Proto::Organizations::ManualBlockStatus* manualblockstatus);

  // required .Diadoc.Api.Proto.Organizations.AutoBlockStatus AutoBlockStatus = 2;
  inline bool has_autoblockstatus() const;
  inline void clear_autoblockstatus();
  static const int kAutoBlockStatusFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Organizations::AutoBlockStatus& autoblockstatus() const;
  inline ::Diadoc::Api::Proto::Organizations::AutoBlockStatus* mutable_autoblockstatus();
  inline ::Diadoc::Api::Proto::Organizations::AutoBlockStatus* release_autoblockstatus();
  inline void set_allocated_autoblockstatus(::Diadoc::Api::Proto::Organizations::AutoBlockStatus* autoblockstatus);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Organizations.BlockStatus)
 private:
  inline void set_has_manualblockstatus();
  inline void clear_has_manualblockstatus();
  inline void set_has_autoblockstatus();
  inline void clear_has_autoblockstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Organizations::ManualBlockStatus* manualblockstatus_;
  ::Diadoc::Api::Proto::Organizations::AutoBlockStatus* autoblockstatus_;
  friend void  protobuf_AddDesc_Organizations_2fBlockStatus_2eproto();
  friend void protobuf_AssignDesc_Organizations_2fBlockStatus_2eproto();
  friend void protobuf_ShutdownFile_Organizations_2fBlockStatus_2eproto();

  void InitAsDefaultInstance();
  static BlockStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// BlockStatus

// required .Diadoc.Api.Proto.Organizations.ManualBlockStatus ManualBlockStatus = 1;
inline bool BlockStatus::has_manualblockstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockStatus::set_has_manualblockstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockStatus::clear_has_manualblockstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockStatus::clear_manualblockstatus() {
  if (manualblockstatus_ != NULL) manualblockstatus_->::Diadoc::Api::Proto::Organizations::ManualBlockStatus::Clear();
  clear_has_manualblockstatus();
}
inline const ::Diadoc::Api::Proto::Organizations::ManualBlockStatus& BlockStatus::manualblockstatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organizations.BlockStatus.ManualBlockStatus)
  return manualblockstatus_ != NULL ? *manualblockstatus_ : *default_instance_->manualblockstatus_;
}
inline ::Diadoc::Api::Proto::Organizations::ManualBlockStatus* BlockStatus::mutable_manualblockstatus() {
  set_has_manualblockstatus();
  if (manualblockstatus_ == NULL) manualblockstatus_ = new ::Diadoc::Api::Proto::Organizations::ManualBlockStatus;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organizations.BlockStatus.ManualBlockStatus)
  return manualblockstatus_;
}
inline ::Diadoc::Api::Proto::Organizations::ManualBlockStatus* BlockStatus::release_manualblockstatus() {
  clear_has_manualblockstatus();
  ::Diadoc::Api::Proto::Organizations::ManualBlockStatus* temp = manualblockstatus_;
  manualblockstatus_ = NULL;
  return temp;
}
inline void BlockStatus::set_allocated_manualblockstatus(::Diadoc::Api::Proto::Organizations::ManualBlockStatus* manualblockstatus) {
  delete manualblockstatus_;
  manualblockstatus_ = manualblockstatus;
  if (manualblockstatus) {
    set_has_manualblockstatus();
  } else {
    clear_has_manualblockstatus();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Organizations.BlockStatus.ManualBlockStatus)
}

// required .Diadoc.Api.Proto.Organizations.AutoBlockStatus AutoBlockStatus = 2;
inline bool BlockStatus::has_autoblockstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockStatus::set_has_autoblockstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockStatus::clear_has_autoblockstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockStatus::clear_autoblockstatus() {
  if (autoblockstatus_ != NULL) autoblockstatus_->::Diadoc::Api::Proto::Organizations::AutoBlockStatus::Clear();
  clear_has_autoblockstatus();
}
inline const ::Diadoc::Api::Proto::Organizations::AutoBlockStatus& BlockStatus::autoblockstatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organizations.BlockStatus.AutoBlockStatus)
  return autoblockstatus_ != NULL ? *autoblockstatus_ : *default_instance_->autoblockstatus_;
}
inline ::Diadoc::Api::Proto::Organizations::AutoBlockStatus* BlockStatus::mutable_autoblockstatus() {
  set_has_autoblockstatus();
  if (autoblockstatus_ == NULL) autoblockstatus_ = new ::Diadoc::Api::Proto::Organizations::AutoBlockStatus;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organizations.BlockStatus.AutoBlockStatus)
  return autoblockstatus_;
}
inline ::Diadoc::Api::Proto::Organizations::AutoBlockStatus* BlockStatus::release_autoblockstatus() {
  clear_has_autoblockstatus();
  ::Diadoc::Api::Proto::Organizations::AutoBlockStatus* temp = autoblockstatus_;
  autoblockstatus_ = NULL;
  return temp;
}
inline void BlockStatus::set_allocated_autoblockstatus(::Diadoc::Api::Proto::Organizations::AutoBlockStatus* autoblockstatus) {
  delete autoblockstatus_;
  autoblockstatus_ = autoblockstatus;
  if (autoblockstatus) {
    set_has_autoblockstatus();
  } else {
    clear_has_autoblockstatus();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Organizations.BlockStatus.AutoBlockStatus)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Organizations
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Organizations_2fBlockStatus_2eproto__INCLUDED
