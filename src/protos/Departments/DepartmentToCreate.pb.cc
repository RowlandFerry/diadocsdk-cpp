// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Departments/DepartmentToCreate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Departments/DepartmentToCreate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Departments {

namespace {

const ::google::protobuf::Descriptor* DepartmentToCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepartmentToCreate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Departments_2fDepartmentToCreate_2eproto() {
  protobuf_AddDesc_Departments_2fDepartmentToCreate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Departments/DepartmentToCreate.proto");
  GOOGLE_CHECK(file != NULL);
  DepartmentToCreate_descriptor_ = file->message_type(0);
  static const int DepartmentToCreate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentToCreate, parentdepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentToCreate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentToCreate, abbreviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentToCreate, kpp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentToCreate, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentToCreate, routing_),
  };
  DepartmentToCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepartmentToCreate_descriptor_,
      DepartmentToCreate::default_instance_,
      DepartmentToCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentToCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentToCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepartmentToCreate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Departments_2fDepartmentToCreate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepartmentToCreate_descriptor_, &DepartmentToCreate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Departments_2fDepartmentToCreate_2eproto() {
  delete DepartmentToCreate::default_instance_;
  delete DepartmentToCreate_reflection_;
}

void protobuf_AddDesc_Departments_2fDepartmentToCreate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Address_2eproto();
  ::Diadoc::Api::Proto::Departments::protobuf_AddDesc_Departments_2fRouting_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$Departments/DepartmentToCreate.proto\022\034"
    "Diadoc.Api.Proto.Departments\032\rAddress.pr"
    "oto\032\031Departments/Routing.proto\"\305\001\n\022Depar"
    "tmentToCreate\022\032\n\022ParentDepartmentId\030\001 \001("
    "\t\022\014\n\004Name\030\002 \002(\t\022\024\n\014Abbreviation\030\003 \002(\t\022\013\n"
    "\003Kpp\030\004 \001(\t\022*\n\007Address\030\005 \001(\0132\031.Diadoc.Api"
    ".Proto.Address\0226\n\007Routing\030\006 \002(\0132%.Diadoc"
    ".Api.Proto.Departments.Routing", 310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Departments/DepartmentToCreate.proto", &protobuf_RegisterTypes);
  DepartmentToCreate::default_instance_ = new DepartmentToCreate();
  DepartmentToCreate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Departments_2fDepartmentToCreate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Departments_2fDepartmentToCreate_2eproto {
  StaticDescriptorInitializer_Departments_2fDepartmentToCreate_2eproto() {
    protobuf_AddDesc_Departments_2fDepartmentToCreate_2eproto();
  }
} static_descriptor_initializer_Departments_2fDepartmentToCreate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DepartmentToCreate::kParentDepartmentIdFieldNumber;
const int DepartmentToCreate::kNameFieldNumber;
const int DepartmentToCreate::kAbbreviationFieldNumber;
const int DepartmentToCreate::kKppFieldNumber;
const int DepartmentToCreate::kAddressFieldNumber;
const int DepartmentToCreate::kRoutingFieldNumber;
#endif  // !_MSC_VER

DepartmentToCreate::DepartmentToCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Departments.DepartmentToCreate)
}

void DepartmentToCreate::InitAsDefaultInstance() {
  address_ = const_cast< ::Diadoc::Api::Proto::Address*>(&::Diadoc::Api::Proto::Address::default_instance());
  routing_ = const_cast< ::Diadoc::Api::Proto::Departments::Routing*>(&::Diadoc::Api::Proto::Departments::Routing::default_instance());
}

DepartmentToCreate::DepartmentToCreate(const DepartmentToCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Departments.DepartmentToCreate)
}

void DepartmentToCreate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parentdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abbreviation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kpp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_ = NULL;
  routing_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepartmentToCreate::~DepartmentToCreate() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Departments.DepartmentToCreate)
  SharedDtor();
}

void DepartmentToCreate::SharedDtor() {
  if (parentdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parentdepartmentid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (abbreviation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abbreviation_;
  }
  if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kpp_;
  }
  if (this != default_instance_) {
    delete address_;
    delete routing_;
  }
}

void DepartmentToCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepartmentToCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepartmentToCreate_descriptor_;
}

const DepartmentToCreate& DepartmentToCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Departments_2fDepartmentToCreate_2eproto();
  return *default_instance_;
}

DepartmentToCreate* DepartmentToCreate::default_instance_ = NULL;

DepartmentToCreate* DepartmentToCreate::New() const {
  return new DepartmentToCreate;
}

void DepartmentToCreate::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_parentdepartmentid()) {
      if (parentdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parentdepartmentid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_abbreviation()) {
      if (abbreviation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        abbreviation_->clear();
      }
    }
    if (has_kpp()) {
      if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        kpp_->clear();
      }
    }
    if (has_address()) {
      if (address_ != NULL) address_->::Diadoc::Api::Proto::Address::Clear();
    }
    if (has_routing()) {
      if (routing_ != NULL) routing_->::Diadoc::Api::Proto::Departments::Routing::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepartmentToCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Departments.DepartmentToCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ParentDepartmentId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentdepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parentdepartmentid().data(), this->parentdepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parentdepartmentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Abbreviation;
        break;
      }

      // required string Abbreviation = 3;
      case 3: {
        if (tag == 26) {
         parse_Abbreviation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abbreviation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->abbreviation().data(), this->abbreviation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "abbreviation");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Kpp;
        break;
      }

      // optional string Kpp = 4;
      case 4: {
        if (tag == 34) {
         parse_Kpp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kpp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->kpp().data(), this->kpp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kpp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Address;
        break;
      }

      // optional .Diadoc.Api.Proto.Address Address = 5;
      case 5: {
        if (tag == 42) {
         parse_Address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Routing;
        break;
      }

      // required .Diadoc.Api.Proto.Departments.Routing Routing = 6;
      case 6: {
        if (tag == 50) {
         parse_Routing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Departments.DepartmentToCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Departments.DepartmentToCreate)
  return false;
#undef DO_
}

void DepartmentToCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Departments.DepartmentToCreate)
  // optional string ParentDepartmentId = 1;
  if (has_parentdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parentdepartmentid().data(), this->parentdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parentdepartmentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parentdepartmentid(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string Abbreviation = 3;
  if (has_abbreviation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abbreviation().data(), this->abbreviation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abbreviation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->abbreviation(), output);
  }

  // optional string Kpp = 4;
  if (has_kpp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kpp().data(), this->kpp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kpp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->kpp(), output);
  }

  // optional .Diadoc.Api.Proto.Address Address = 5;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->address(), output);
  }

  // required .Diadoc.Api.Proto.Departments.Routing Routing = 6;
  if (has_routing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->routing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Departments.DepartmentToCreate)
}

::google::protobuf::uint8* DepartmentToCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Departments.DepartmentToCreate)
  // optional string ParentDepartmentId = 1;
  if (has_parentdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parentdepartmentid().data(), this->parentdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parentdepartmentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parentdepartmentid(), target);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string Abbreviation = 3;
  if (has_abbreviation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abbreviation().data(), this->abbreviation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "abbreviation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->abbreviation(), target);
  }

  // optional string Kpp = 4;
  if (has_kpp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kpp().data(), this->kpp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kpp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->kpp(), target);
  }

  // optional .Diadoc.Api.Proto.Address Address = 5;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->address(), target);
  }

  // required .Diadoc.Api.Proto.Departments.Routing Routing = 6;
  if (has_routing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->routing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Departments.DepartmentToCreate)
  return target;
}

int DepartmentToCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ParentDepartmentId = 1;
    if (has_parentdepartmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentdepartmentid());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string Abbreviation = 3;
    if (has_abbreviation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abbreviation());
    }

    // optional string Kpp = 4;
    if (has_kpp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kpp());
    }

    // optional .Diadoc.Api.Proto.Address Address = 5;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

    // required .Diadoc.Api.Proto.Departments.Routing Routing = 6;
    if (has_routing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->routing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepartmentToCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepartmentToCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepartmentToCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepartmentToCreate::MergeFrom(const DepartmentToCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parentdepartmentid()) {
      set_parentdepartmentid(from.parentdepartmentid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_abbreviation()) {
      set_abbreviation(from.abbreviation());
    }
    if (from.has_kpp()) {
      set_kpp(from.kpp());
    }
    if (from.has_address()) {
      mutable_address()->::Diadoc::Api::Proto::Address::MergeFrom(from.address());
    }
    if (from.has_routing()) {
      mutable_routing()->::Diadoc::Api::Proto::Departments::Routing::MergeFrom(from.routing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepartmentToCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepartmentToCreate::CopyFrom(const DepartmentToCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepartmentToCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000026) != 0x00000026) return false;

  if (has_address()) {
    if (!this->address().IsInitialized()) return false;
  }
  if (has_routing()) {
    if (!this->routing().IsInitialized()) return false;
  }
  return true;
}

void DepartmentToCreate::Swap(DepartmentToCreate* other) {
  if (other != this) {
    std::swap(parentdepartmentid_, other->parentdepartmentid_);
    std::swap(name_, other->name_);
    std::swap(abbreviation_, other->abbreviation_);
    std::swap(kpp_, other->kpp_);
    std::swap(address_, other->address_);
    std::swap(routing_, other->routing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepartmentToCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepartmentToCreate_descriptor_;
  metadata.reflection = DepartmentToCreate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Departments
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
