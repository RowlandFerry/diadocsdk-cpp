// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Departments/DepartmentToUpdate.proto

#ifndef PROTOBUF_Departments_2fDepartmentToUpdate_2eproto__INCLUDED
#define PROTOBUF_Departments_2fDepartmentToUpdate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Address.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Departments {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Departments_2fDepartmentToUpdate_2eproto();
void protobuf_AssignDesc_Departments_2fDepartmentToUpdate_2eproto();
void protobuf_ShutdownFile_Departments_2fDepartmentToUpdate_2eproto();

class DepartmentToUpdate;
class ParentDepartmentPatch;
class DepartmentNamingPatch;
class DepartmentKppPatch;
class DepartmentAddressPatch;
class DepartmentRoutingPatch;

// ===================================================================

class DepartmentToUpdate : public ::google::protobuf::Message {
 public:
  DepartmentToUpdate();
  virtual ~DepartmentToUpdate();

  DepartmentToUpdate(const DepartmentToUpdate& from);

  inline DepartmentToUpdate& operator=(const DepartmentToUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DepartmentToUpdate& default_instance();

  void Swap(DepartmentToUpdate* other);

  // implements Message ----------------------------------------------

  DepartmentToUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DepartmentToUpdate& from);
  void MergeFrom(const DepartmentToUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Departments.ParentDepartmentPatch ParentDepartment = 1;
  inline bool has_parentdepartment() const;
  inline void clear_parentdepartment();
  static const int kParentDepartmentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Departments::ParentDepartmentPatch& parentdepartment() const;
  inline ::Diadoc::Api::Proto::Departments::ParentDepartmentPatch* mutable_parentdepartment();
  inline ::Diadoc::Api::Proto::Departments::ParentDepartmentPatch* release_parentdepartment();
  inline void set_allocated_parentdepartment(::Diadoc::Api::Proto::Departments::ParentDepartmentPatch* parentdepartment);

  // optional .Diadoc.Api.Proto.Departments.DepartmentNamingPatch DepartmentNaming = 2;
  inline bool has_departmentnaming() const;
  inline void clear_departmentnaming();
  static const int kDepartmentNamingFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Departments::DepartmentNamingPatch& departmentnaming() const;
  inline ::Diadoc::Api::Proto::Departments::DepartmentNamingPatch* mutable_departmentnaming();
  inline ::Diadoc::Api::Proto::Departments::DepartmentNamingPatch* release_departmentnaming();
  inline void set_allocated_departmentnaming(::Diadoc::Api::Proto::Departments::DepartmentNamingPatch* departmentnaming);

  // optional .Diadoc.Api.Proto.Departments.DepartmentKppPatch Kpp = 3;
  inline bool has_kpp() const;
  inline void clear_kpp();
  static const int kKppFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Departments::DepartmentKppPatch& kpp() const;
  inline ::Diadoc::Api::Proto::Departments::DepartmentKppPatch* mutable_kpp();
  inline ::Diadoc::Api::Proto::Departments::DepartmentKppPatch* release_kpp();
  inline void set_allocated_kpp(::Diadoc::Api::Proto::Departments::DepartmentKppPatch* kpp);

  // optional .Diadoc.Api.Proto.Departments.DepartmentAddressPatch Address = 4;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Departments::DepartmentAddressPatch& address() const;
  inline ::Diadoc::Api::Proto::Departments::DepartmentAddressPatch* mutable_address();
  inline ::Diadoc::Api::Proto::Departments::DepartmentAddressPatch* release_address();
  inline void set_allocated_address(::Diadoc::Api::Proto::Departments::DepartmentAddressPatch* address);

  // optional .Diadoc.Api.Proto.Departments.DepartmentRoutingPatch Routing = 5;
  inline bool has_routing() const;
  inline void clear_routing();
  static const int kRoutingFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Departments::DepartmentRoutingPatch& routing() const;
  inline ::Diadoc::Api::Proto::Departments::DepartmentRoutingPatch* mutable_routing();
  inline ::Diadoc::Api::Proto::Departments::DepartmentRoutingPatch* release_routing();
  inline void set_allocated_routing(::Diadoc::Api::Proto::Departments::DepartmentRoutingPatch* routing);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Departments.DepartmentToUpdate)
 private:
  inline void set_has_parentdepartment();
  inline void clear_has_parentdepartment();
  inline void set_has_departmentnaming();
  inline void clear_has_departmentnaming();
  inline void set_has_kpp();
  inline void clear_has_kpp();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_routing();
  inline void clear_has_routing();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Departments::ParentDepartmentPatch* parentdepartment_;
  ::Diadoc::Api::Proto::Departments::DepartmentNamingPatch* departmentnaming_;
  ::Diadoc::Api::Proto::Departments::DepartmentKppPatch* kpp_;
  ::Diadoc::Api::Proto::Departments::DepartmentAddressPatch* address_;
  ::Diadoc::Api::Proto::Departments::DepartmentRoutingPatch* routing_;
  friend void  protobuf_AddDesc_Departments_2fDepartmentToUpdate_2eproto();
  friend void protobuf_AssignDesc_Departments_2fDepartmentToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Departments_2fDepartmentToUpdate_2eproto();

  void InitAsDefaultInstance();
  static DepartmentToUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ParentDepartmentPatch : public ::google::protobuf::Message {
 public:
  ParentDepartmentPatch();
  virtual ~ParentDepartmentPatch();

  ParentDepartmentPatch(const ParentDepartmentPatch& from);

  inline ParentDepartmentPatch& operator=(const ParentDepartmentPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParentDepartmentPatch& default_instance();

  void Swap(ParentDepartmentPatch* other);

  // implements Message ----------------------------------------------

  ParentDepartmentPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParentDepartmentPatch& from);
  void MergeFrom(const ParentDepartmentPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ParentDepartmentId = 1;
  inline bool has_parentdepartmentid() const;
  inline void clear_parentdepartmentid();
  static const int kParentDepartmentIdFieldNumber = 1;
  inline const ::std::string& parentdepartmentid() const;
  inline void set_parentdepartmentid(const ::std::string& value);
  inline void set_parentdepartmentid(const char* value);
  inline void set_parentdepartmentid(const char* value, size_t size);
  inline ::std::string* mutable_parentdepartmentid();
  inline ::std::string* release_parentdepartmentid();
  inline void set_allocated_parentdepartmentid(::std::string* parentdepartmentid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Departments.ParentDepartmentPatch)
 private:
  inline void set_has_parentdepartmentid();
  inline void clear_has_parentdepartmentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* parentdepartmentid_;
  friend void  protobuf_AddDesc_Departments_2fDepartmentToUpdate_2eproto();
  friend void protobuf_AssignDesc_Departments_2fDepartmentToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Departments_2fDepartmentToUpdate_2eproto();

  void InitAsDefaultInstance();
  static ParentDepartmentPatch* default_instance_;
};
// -------------------------------------------------------------------

class DepartmentNamingPatch : public ::google::protobuf::Message {
 public:
  DepartmentNamingPatch();
  virtual ~DepartmentNamingPatch();

  DepartmentNamingPatch(const DepartmentNamingPatch& from);

  inline DepartmentNamingPatch& operator=(const DepartmentNamingPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DepartmentNamingPatch& default_instance();

  void Swap(DepartmentNamingPatch* other);

  // implements Message ----------------------------------------------

  DepartmentNamingPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DepartmentNamingPatch& from);
  void MergeFrom(const DepartmentNamingPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string Abbreviation = 2;
  inline bool has_abbreviation() const;
  inline void clear_abbreviation();
  static const int kAbbreviationFieldNumber = 2;
  inline const ::std::string& abbreviation() const;
  inline void set_abbreviation(const ::std::string& value);
  inline void set_abbreviation(const char* value);
  inline void set_abbreviation(const char* value, size_t size);
  inline ::std::string* mutable_abbreviation();
  inline ::std::string* release_abbreviation();
  inline void set_allocated_abbreviation(::std::string* abbreviation);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Departments.DepartmentNamingPatch)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_abbreviation();
  inline void clear_has_abbreviation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* abbreviation_;
  friend void  protobuf_AddDesc_Departments_2fDepartmentToUpdate_2eproto();
  friend void protobuf_AssignDesc_Departments_2fDepartmentToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Departments_2fDepartmentToUpdate_2eproto();

  void InitAsDefaultInstance();
  static DepartmentNamingPatch* default_instance_;
};
// -------------------------------------------------------------------

class DepartmentKppPatch : public ::google::protobuf::Message {
 public:
  DepartmentKppPatch();
  virtual ~DepartmentKppPatch();

  DepartmentKppPatch(const DepartmentKppPatch& from);

  inline DepartmentKppPatch& operator=(const DepartmentKppPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DepartmentKppPatch& default_instance();

  void Swap(DepartmentKppPatch* other);

  // implements Message ----------------------------------------------

  DepartmentKppPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DepartmentKppPatch& from);
  void MergeFrom(const DepartmentKppPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Kpp = 1;
  inline bool has_kpp() const;
  inline void clear_kpp();
  static const int kKppFieldNumber = 1;
  inline const ::std::string& kpp() const;
  inline void set_kpp(const ::std::string& value);
  inline void set_kpp(const char* value);
  inline void set_kpp(const char* value, size_t size);
  inline ::std::string* mutable_kpp();
  inline ::std::string* release_kpp();
  inline void set_allocated_kpp(::std::string* kpp);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Departments.DepartmentKppPatch)
 private:
  inline void set_has_kpp();
  inline void clear_has_kpp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* kpp_;
  friend void  protobuf_AddDesc_Departments_2fDepartmentToUpdate_2eproto();
  friend void protobuf_AssignDesc_Departments_2fDepartmentToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Departments_2fDepartmentToUpdate_2eproto();

  void InitAsDefaultInstance();
  static DepartmentKppPatch* default_instance_;
};
// -------------------------------------------------------------------

class DepartmentAddressPatch : public ::google::protobuf::Message {
 public:
  DepartmentAddressPatch();
  virtual ~DepartmentAddressPatch();

  DepartmentAddressPatch(const DepartmentAddressPatch& from);

  inline DepartmentAddressPatch& operator=(const DepartmentAddressPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DepartmentAddressPatch& default_instance();

  void Swap(DepartmentAddressPatch* other);

  // implements Message ----------------------------------------------

  DepartmentAddressPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DepartmentAddressPatch& from);
  void MergeFrom(const DepartmentAddressPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Address Address = 1;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Address& address() const;
  inline ::Diadoc::Api::Proto::Address* mutable_address();
  inline ::Diadoc::Api::Proto::Address* release_address();
  inline void set_allocated_address(::Diadoc::Api::Proto::Address* address);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Departments.DepartmentAddressPatch)
 private:
  inline void set_has_address();
  inline void clear_has_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Address* address_;
  friend void  protobuf_AddDesc_Departments_2fDepartmentToUpdate_2eproto();
  friend void protobuf_AssignDesc_Departments_2fDepartmentToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Departments_2fDepartmentToUpdate_2eproto();

  void InitAsDefaultInstance();
  static DepartmentAddressPatch* default_instance_;
};
// -------------------------------------------------------------------

class DepartmentRoutingPatch : public ::google::protobuf::Message {
 public:
  DepartmentRoutingPatch();
  virtual ~DepartmentRoutingPatch();

  DepartmentRoutingPatch(const DepartmentRoutingPatch& from);

  inline DepartmentRoutingPatch& operator=(const DepartmentRoutingPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DepartmentRoutingPatch& default_instance();

  void Swap(DepartmentRoutingPatch* other);

  // implements Message ----------------------------------------------

  DepartmentRoutingPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DepartmentRoutingPatch& from);
  void MergeFrom(const DepartmentRoutingPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Kpp = 1;
  inline bool has_kpp() const;
  inline void clear_kpp();
  static const int kKppFieldNumber = 1;
  inline bool kpp() const;
  inline void set_kpp(bool value);

  // required bool Address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline bool address() const;
  inline void set_address(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Departments.DepartmentRoutingPatch)
 private:
  inline void set_has_kpp();
  inline void clear_has_kpp();
  inline void set_has_address();
  inline void clear_has_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool kpp_;
  bool address_;
  friend void  protobuf_AddDesc_Departments_2fDepartmentToUpdate_2eproto();
  friend void protobuf_AssignDesc_Departments_2fDepartmentToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Departments_2fDepartmentToUpdate_2eproto();

  void InitAsDefaultInstance();
  static DepartmentRoutingPatch* default_instance_;
};
// ===================================================================


// ===================================================================

// DepartmentToUpdate

// optional .Diadoc.Api.Proto.Departments.ParentDepartmentPatch ParentDepartment = 1;
inline bool DepartmentToUpdate::has_parentdepartment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DepartmentToUpdate::set_has_parentdepartment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DepartmentToUpdate::clear_has_parentdepartment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DepartmentToUpdate::clear_parentdepartment() {
  if (parentdepartment_ != NULL) parentdepartment_->::Diadoc::Api::Proto::Departments::ParentDepartmentPatch::Clear();
  clear_has_parentdepartment();
}
inline const ::Diadoc::Api::Proto::Departments::ParentDepartmentPatch& DepartmentToUpdate::parentdepartment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Departments.DepartmentToUpdate.ParentDepartment)
  return parentdepartment_ != NULL ? *parentdepartment_ : *default_instance_->parentdepartment_;
}
inline ::Diadoc::Api::Proto::Departments::ParentDepartmentPatch* DepartmentToUpdate::mutable_parentdepartment() {
  set_has_parentdepartment();
  if (parentdepartment_ == NULL) parentdepartment_ = new ::Diadoc::Api::Proto::Departments::ParentDepartmentPatch;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Departments.DepartmentToUpdate.ParentDepartment)
  return parentdepartment_;
}
inline ::Diadoc::Api::Proto::Departments::ParentDepartmentPatch* DepartmentToUpdate::release_parentdepartment() {
  clear_has_parentdepartment();
  ::Diadoc::Api::Proto::Departments::ParentDepartmentPatch* temp = parentdepartment_;
  parentdepartment_ = NULL;
  return temp;
}
inline void DepartmentToUpdate::set_allocated_parentdepartment(::Diadoc::Api::Proto::Departments::ParentDepartmentPatch* parentdepartment) {
  delete parentdepartment_;
  parentdepartment_ = parentdepartment;
  if (parentdepartment) {
    set_has_parentdepartment();
  } else {
    clear_has_parentdepartment();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Departments.DepartmentToUpdate.ParentDepartment)
}

// optional .Diadoc.Api.Proto.Departments.DepartmentNamingPatch DepartmentNaming = 2;
inline bool DepartmentToUpdate::has_departmentnaming() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DepartmentToUpdate::set_has_departmentnaming() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DepartmentToUpdate::clear_has_departmentnaming() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DepartmentToUpdate::clear_departmentnaming() {
  if (departmentnaming_ != NULL) departmentnaming_->::Diadoc::Api::Proto::Departments::DepartmentNamingPatch::Clear();
  clear_has_departmentnaming();
}
inline const ::Diadoc::Api::Proto::Departments::DepartmentNamingPatch& DepartmentToUpdate::departmentnaming() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Departments.DepartmentToUpdate.DepartmentNaming)
  return departmentnaming_ != NULL ? *departmentnaming_ : *default_instance_->departmentnaming_;
}
inline ::Diadoc::Api::Proto::Departments::DepartmentNamingPatch* DepartmentToUpdate::mutable_departmentnaming() {
  set_has_departmentnaming();
  if (departmentnaming_ == NULL) departmentnaming_ = new ::Diadoc::Api::Proto::Departments::DepartmentNamingPatch;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Departments.DepartmentToUpdate.DepartmentNaming)
  return departmentnaming_;
}
inline ::Diadoc::Api::Proto::Departments::DepartmentNamingPatch* DepartmentToUpdate::release_departmentnaming() {
  clear_has_departmentnaming();
  ::Diadoc::Api::Proto::Departments::DepartmentNamingPatch* temp = departmentnaming_;
  departmentnaming_ = NULL;
  return temp;
}
inline void DepartmentToUpdate::set_allocated_departmentnaming(::Diadoc::Api::Proto::Departments::DepartmentNamingPatch* departmentnaming) {
  delete departmentnaming_;
  departmentnaming_ = departmentnaming;
  if (departmentnaming) {
    set_has_departmentnaming();
  } else {
    clear_has_departmentnaming();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Departments.DepartmentToUpdate.DepartmentNaming)
}

// optional .Diadoc.Api.Proto.Departments.DepartmentKppPatch Kpp = 3;
inline bool DepartmentToUpdate::has_kpp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DepartmentToUpdate::set_has_kpp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DepartmentToUpdate::clear_has_kpp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DepartmentToUpdate::clear_kpp() {
  if (kpp_ != NULL) kpp_->::Diadoc::Api::Proto::Departments::DepartmentKppPatch::Clear();
  clear_has_kpp();
}
inline const ::Diadoc::Api::Proto::Departments::DepartmentKppPatch& DepartmentToUpdate::kpp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Departments.DepartmentToUpdate.Kpp)
  return kpp_ != NULL ? *kpp_ : *default_instance_->kpp_;
}
inline ::Diadoc::Api::Proto::Departments::DepartmentKppPatch* DepartmentToUpdate::mutable_kpp() {
  set_has_kpp();
  if (kpp_ == NULL) kpp_ = new ::Diadoc::Api::Proto::Departments::DepartmentKppPatch;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Departments.DepartmentToUpdate.Kpp)
  return kpp_;
}
inline ::Diadoc::Api::Proto::Departments::DepartmentKppPatch* DepartmentToUpdate::release_kpp() {
  clear_has_kpp();
  ::Diadoc::Api::Proto::Departments::DepartmentKppPatch* temp = kpp_;
  kpp_ = NULL;
  return temp;
}
inline void DepartmentToUpdate::set_allocated_kpp(::Diadoc::Api::Proto::Departments::DepartmentKppPatch* kpp) {
  delete kpp_;
  kpp_ = kpp;
  if (kpp) {
    set_has_kpp();
  } else {
    clear_has_kpp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Departments.DepartmentToUpdate.Kpp)
}

// optional .Diadoc.Api.Proto.Departments.DepartmentAddressPatch Address = 4;
inline bool DepartmentToUpdate::has_address() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DepartmentToUpdate::set_has_address() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DepartmentToUpdate::clear_has_address() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DepartmentToUpdate::clear_address() {
  if (address_ != NULL) address_->::Diadoc::Api::Proto::Departments::DepartmentAddressPatch::Clear();
  clear_has_address();
}
inline const ::Diadoc::Api::Proto::Departments::DepartmentAddressPatch& DepartmentToUpdate::address() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Departments.DepartmentToUpdate.Address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::Diadoc::Api::Proto::Departments::DepartmentAddressPatch* DepartmentToUpdate::mutable_address() {
  set_has_address();
  if (address_ == NULL) address_ = new ::Diadoc::Api::Proto::Departments::DepartmentAddressPatch;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Departments.DepartmentToUpdate.Address)
  return address_;
}
inline ::Diadoc::Api::Proto::Departments::DepartmentAddressPatch* DepartmentToUpdate::release_address() {
  clear_has_address();
  ::Diadoc::Api::Proto::Departments::DepartmentAddressPatch* temp = address_;
  address_ = NULL;
  return temp;
}
inline void DepartmentToUpdate::set_allocated_address(::Diadoc::Api::Proto::Departments::DepartmentAddressPatch* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Departments.DepartmentToUpdate.Address)
}

// optional .Diadoc.Api.Proto.Departments.DepartmentRoutingPatch Routing = 5;
inline bool DepartmentToUpdate::has_routing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DepartmentToUpdate::set_has_routing() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DepartmentToUpdate::clear_has_routing() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DepartmentToUpdate::clear_routing() {
  if (routing_ != NULL) routing_->::Diadoc::Api::Proto::Departments::DepartmentRoutingPatch::Clear();
  clear_has_routing();
}
inline const ::Diadoc::Api::Proto::Departments::DepartmentRoutingPatch& DepartmentToUpdate::routing() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Departments.DepartmentToUpdate.Routing)
  return routing_ != NULL ? *routing_ : *default_instance_->routing_;
}
inline ::Diadoc::Api::Proto::Departments::DepartmentRoutingPatch* DepartmentToUpdate::mutable_routing() {
  set_has_routing();
  if (routing_ == NULL) routing_ = new ::Diadoc::Api::Proto::Departments::DepartmentRoutingPatch;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Departments.DepartmentToUpdate.Routing)
  return routing_;
}
inline ::Diadoc::Api::Proto::Departments::DepartmentRoutingPatch* DepartmentToUpdate::release_routing() {
  clear_has_routing();
  ::Diadoc::Api::Proto::Departments::DepartmentRoutingPatch* temp = routing_;
  routing_ = NULL;
  return temp;
}
inline void DepartmentToUpdate::set_allocated_routing(::Diadoc::Api::Proto::Departments::DepartmentRoutingPatch* routing) {
  delete routing_;
  routing_ = routing;
  if (routing) {
    set_has_routing();
  } else {
    clear_has_routing();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Departments.DepartmentToUpdate.Routing)
}

// -------------------------------------------------------------------

// ParentDepartmentPatch

// required string ParentDepartmentId = 1;
inline bool ParentDepartmentPatch::has_parentdepartmentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParentDepartmentPatch::set_has_parentdepartmentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParentDepartmentPatch::clear_has_parentdepartmentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParentDepartmentPatch::clear_parentdepartmentid() {
  if (parentdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentdepartmentid_->clear();
  }
  clear_has_parentdepartmentid();
}
inline const ::std::string& ParentDepartmentPatch::parentdepartmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Departments.ParentDepartmentPatch.ParentDepartmentId)
  return *parentdepartmentid_;
}
inline void ParentDepartmentPatch::set_parentdepartmentid(const ::std::string& value) {
  set_has_parentdepartmentid();
  if (parentdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentdepartmentid_ = new ::std::string;
  }
  parentdepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Departments.ParentDepartmentPatch.ParentDepartmentId)
}
inline void ParentDepartmentPatch::set_parentdepartmentid(const char* value) {
  set_has_parentdepartmentid();
  if (parentdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentdepartmentid_ = new ::std::string;
  }
  parentdepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Departments.ParentDepartmentPatch.ParentDepartmentId)
}
inline void ParentDepartmentPatch::set_parentdepartmentid(const char* value, size_t size) {
  set_has_parentdepartmentid();
  if (parentdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentdepartmentid_ = new ::std::string;
  }
  parentdepartmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Departments.ParentDepartmentPatch.ParentDepartmentId)
}
inline ::std::string* ParentDepartmentPatch::mutable_parentdepartmentid() {
  set_has_parentdepartmentid();
  if (parentdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentdepartmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Departments.ParentDepartmentPatch.ParentDepartmentId)
  return parentdepartmentid_;
}
inline ::std::string* ParentDepartmentPatch::release_parentdepartmentid() {
  clear_has_parentdepartmentid();
  if (parentdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parentdepartmentid_;
    parentdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParentDepartmentPatch::set_allocated_parentdepartmentid(::std::string* parentdepartmentid) {
  if (parentdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parentdepartmentid_;
  }
  if (parentdepartmentid) {
    set_has_parentdepartmentid();
    parentdepartmentid_ = parentdepartmentid;
  } else {
    clear_has_parentdepartmentid();
    parentdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Departments.ParentDepartmentPatch.ParentDepartmentId)
}

// -------------------------------------------------------------------

// DepartmentNamingPatch

// required string Name = 1;
inline bool DepartmentNamingPatch::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DepartmentNamingPatch::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DepartmentNamingPatch::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DepartmentNamingPatch::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DepartmentNamingPatch::name() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Departments.DepartmentNamingPatch.Name)
  return *name_;
}
inline void DepartmentNamingPatch::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Departments.DepartmentNamingPatch.Name)
}
inline void DepartmentNamingPatch::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Departments.DepartmentNamingPatch.Name)
}
inline void DepartmentNamingPatch::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Departments.DepartmentNamingPatch.Name)
}
inline ::std::string* DepartmentNamingPatch::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Departments.DepartmentNamingPatch.Name)
  return name_;
}
inline ::std::string* DepartmentNamingPatch::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DepartmentNamingPatch::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Departments.DepartmentNamingPatch.Name)
}

// required string Abbreviation = 2;
inline bool DepartmentNamingPatch::has_abbreviation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DepartmentNamingPatch::set_has_abbreviation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DepartmentNamingPatch::clear_has_abbreviation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DepartmentNamingPatch::clear_abbreviation() {
  if (abbreviation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abbreviation_->clear();
  }
  clear_has_abbreviation();
}
inline const ::std::string& DepartmentNamingPatch::abbreviation() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Departments.DepartmentNamingPatch.Abbreviation)
  return *abbreviation_;
}
inline void DepartmentNamingPatch::set_abbreviation(const ::std::string& value) {
  set_has_abbreviation();
  if (abbreviation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abbreviation_ = new ::std::string;
  }
  abbreviation_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Departments.DepartmentNamingPatch.Abbreviation)
}
inline void DepartmentNamingPatch::set_abbreviation(const char* value) {
  set_has_abbreviation();
  if (abbreviation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abbreviation_ = new ::std::string;
  }
  abbreviation_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Departments.DepartmentNamingPatch.Abbreviation)
}
inline void DepartmentNamingPatch::set_abbreviation(const char* value, size_t size) {
  set_has_abbreviation();
  if (abbreviation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abbreviation_ = new ::std::string;
  }
  abbreviation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Departments.DepartmentNamingPatch.Abbreviation)
}
inline ::std::string* DepartmentNamingPatch::mutable_abbreviation() {
  set_has_abbreviation();
  if (abbreviation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abbreviation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Departments.DepartmentNamingPatch.Abbreviation)
  return abbreviation_;
}
inline ::std::string* DepartmentNamingPatch::release_abbreviation() {
  clear_has_abbreviation();
  if (abbreviation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = abbreviation_;
    abbreviation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DepartmentNamingPatch::set_allocated_abbreviation(::std::string* abbreviation) {
  if (abbreviation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abbreviation_;
  }
  if (abbreviation) {
    set_has_abbreviation();
    abbreviation_ = abbreviation;
  } else {
    clear_has_abbreviation();
    abbreviation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Departments.DepartmentNamingPatch.Abbreviation)
}

// -------------------------------------------------------------------

// DepartmentKppPatch

// optional string Kpp = 1;
inline bool DepartmentKppPatch::has_kpp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DepartmentKppPatch::set_has_kpp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DepartmentKppPatch::clear_has_kpp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DepartmentKppPatch::clear_kpp() {
  if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_->clear();
  }
  clear_has_kpp();
}
inline const ::std::string& DepartmentKppPatch::kpp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Departments.DepartmentKppPatch.Kpp)
  return *kpp_;
}
inline void DepartmentKppPatch::set_kpp(const ::std::string& value) {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  kpp_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Departments.DepartmentKppPatch.Kpp)
}
inline void DepartmentKppPatch::set_kpp(const char* value) {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  kpp_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Departments.DepartmentKppPatch.Kpp)
}
inline void DepartmentKppPatch::set_kpp(const char* value, size_t size) {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  kpp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Departments.DepartmentKppPatch.Kpp)
}
inline ::std::string* DepartmentKppPatch::mutable_kpp() {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Departments.DepartmentKppPatch.Kpp)
  return kpp_;
}
inline ::std::string* DepartmentKppPatch::release_kpp() {
  clear_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = kpp_;
    kpp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DepartmentKppPatch::set_allocated_kpp(::std::string* kpp) {
  if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kpp_;
  }
  if (kpp) {
    set_has_kpp();
    kpp_ = kpp;
  } else {
    clear_has_kpp();
    kpp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Departments.DepartmentKppPatch.Kpp)
}

// -------------------------------------------------------------------

// DepartmentAddressPatch

// optional .Diadoc.Api.Proto.Address Address = 1;
inline bool DepartmentAddressPatch::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DepartmentAddressPatch::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DepartmentAddressPatch::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DepartmentAddressPatch::clear_address() {
  if (address_ != NULL) address_->::Diadoc::Api::Proto::Address::Clear();
  clear_has_address();
}
inline const ::Diadoc::Api::Proto::Address& DepartmentAddressPatch::address() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Departments.DepartmentAddressPatch.Address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::Diadoc::Api::Proto::Address* DepartmentAddressPatch::mutable_address() {
  set_has_address();
  if (address_ == NULL) address_ = new ::Diadoc::Api::Proto::Address;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Departments.DepartmentAddressPatch.Address)
  return address_;
}
inline ::Diadoc::Api::Proto::Address* DepartmentAddressPatch::release_address() {
  clear_has_address();
  ::Diadoc::Api::Proto::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline void DepartmentAddressPatch::set_allocated_address(::Diadoc::Api::Proto::Address* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Departments.DepartmentAddressPatch.Address)
}

// -------------------------------------------------------------------

// DepartmentRoutingPatch

// required bool Kpp = 1;
inline bool DepartmentRoutingPatch::has_kpp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DepartmentRoutingPatch::set_has_kpp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DepartmentRoutingPatch::clear_has_kpp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DepartmentRoutingPatch::clear_kpp() {
  kpp_ = false;
  clear_has_kpp();
}
inline bool DepartmentRoutingPatch::kpp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Departments.DepartmentRoutingPatch.Kpp)
  return kpp_;
}
inline void DepartmentRoutingPatch::set_kpp(bool value) {
  set_has_kpp();
  kpp_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Departments.DepartmentRoutingPatch.Kpp)
}

// required bool Address = 2;
inline bool DepartmentRoutingPatch::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DepartmentRoutingPatch::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DepartmentRoutingPatch::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DepartmentRoutingPatch::clear_address() {
  address_ = false;
  clear_has_address();
}
inline bool DepartmentRoutingPatch::address() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Departments.DepartmentRoutingPatch.Address)
  return address_;
}
inline void DepartmentRoutingPatch::set_address(bool value) {
  set_has_address();
  address_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Departments.DepartmentRoutingPatch.Address)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Departments
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Departments_2fDepartmentToUpdate_2eproto__INCLUDED
