// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Employees/Employee.proto

#ifndef PROTOBUF_Employees_2fEmployee_2eproto__INCLUDED
#define PROTOBUF_Employees_2fEmployee_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "User.pb.h"
#include "OrganizationUserPermissions.pb.h"
#include "Timestamp.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Employees {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Employees_2fEmployee_2eproto();
void protobuf_AssignDesc_Employees_2fEmployee_2eproto();
void protobuf_ShutdownFile_Employees_2fEmployee_2eproto();

class Employee;
class EmployeePermissions;
class EmployeeAction;
class EmployeeList;

// ===================================================================

class Employee : public ::google::protobuf::Message {
 public:
  Employee();
  virtual ~Employee();

  Employee(const Employee& from);

  inline Employee& operator=(const Employee& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Employee& default_instance();

  void Swap(Employee* other);

  // implements Message ----------------------------------------------

  Employee* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Employee& from);
  void MergeFrom(const Employee& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.UserV2 User = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::UserV2& user() const;
  inline ::Diadoc::Api::Proto::UserV2* mutable_user();
  inline ::Diadoc::Api::Proto::UserV2* release_user();
  inline void set_allocated_user(::Diadoc::Api::Proto::UserV2* user);

  // required .Diadoc.Api.Proto.Employees.EmployeePermissions Permissions = 2;
  inline bool has_permissions() const;
  inline void clear_permissions();
  static const int kPermissionsFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Employees::EmployeePermissions& permissions() const;
  inline ::Diadoc::Api::Proto::Employees::EmployeePermissions* mutable_permissions();
  inline ::Diadoc::Api::Proto::Employees::EmployeePermissions* release_permissions();
  inline void set_allocated_permissions(::Diadoc::Api::Proto::Employees::EmployeePermissions* permissions);

  // required string Position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const char* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // required bool CanBeInvitedForChat = 4;
  inline bool has_canbeinvitedforchat() const;
  inline void clear_canbeinvitedforchat();
  static const int kCanBeInvitedForChatFieldNumber = 4;
  inline bool canbeinvitedforchat() const;
  inline void set_canbeinvitedforchat(bool value);

  // optional .Diadoc.Api.Proto.Timestamp CreationTimestamp = 5;
  inline bool has_creationtimestamp() const;
  inline void clear_creationtimestamp();
  static const int kCreationTimestampFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Timestamp& creationtimestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_creationtimestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_creationtimestamp();
  inline void set_allocated_creationtimestamp(::Diadoc::Api::Proto::Timestamp* creationtimestamp);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.Employee)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_permissions();
  inline void clear_has_permissions();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_canbeinvitedforchat();
  inline void clear_has_canbeinvitedforchat();
  inline void set_has_creationtimestamp();
  inline void clear_has_creationtimestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::UserV2* user_;
  ::Diadoc::Api::Proto::Employees::EmployeePermissions* permissions_;
  ::std::string* position_;
  ::Diadoc::Api::Proto::Timestamp* creationtimestamp_;
  bool canbeinvitedforchat_;
  friend void  protobuf_AddDesc_Employees_2fEmployee_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployee_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployee_2eproto();

  void InitAsDefaultInstance();
  static Employee* default_instance_;
};
// -------------------------------------------------------------------

class EmployeePermissions : public ::google::protobuf::Message {
 public:
  EmployeePermissions();
  virtual ~EmployeePermissions();

  EmployeePermissions(const EmployeePermissions& from);

  inline EmployeePermissions& operator=(const EmployeePermissions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeePermissions& default_instance();

  void Swap(EmployeePermissions* other);

  // implements Message ----------------------------------------------

  EmployeePermissions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeePermissions& from);
  void MergeFrom(const EmployeePermissions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string UserDepartmentId = 1;
  inline bool has_userdepartmentid() const;
  inline void clear_userdepartmentid();
  static const int kUserDepartmentIdFieldNumber = 1;
  inline const ::std::string& userdepartmentid() const;
  inline void set_userdepartmentid(const ::std::string& value);
  inline void set_userdepartmentid(const char* value);
  inline void set_userdepartmentid(const char* value, size_t size);
  inline ::std::string* mutable_userdepartmentid();
  inline ::std::string* release_userdepartmentid();
  inline void set_allocated_userdepartmentid(::std::string* userdepartmentid);

  // required bool IsAdministrator = 2;
  inline bool has_isadministrator() const;
  inline void clear_isadministrator();
  static const int kIsAdministratorFieldNumber = 2;
  inline bool isadministrator() const;
  inline void set_isadministrator(bool value);

  // required .Diadoc.Api.Proto.DocumentAccessLevel DocumentAccessLevel = 3 [default = UnknownDocumentAccessLevel];
  inline bool has_documentaccesslevel() const;
  inline void clear_documentaccesslevel();
  static const int kDocumentAccessLevelFieldNumber = 3;
  inline ::Diadoc::Api::Proto::DocumentAccessLevel documentaccesslevel() const;
  inline void set_documentaccesslevel(::Diadoc::Api::Proto::DocumentAccessLevel value);

  // repeated string SelectedDepartmentIds = 4;
  inline int selecteddepartmentids_size() const;
  inline void clear_selecteddepartmentids();
  static const int kSelectedDepartmentIdsFieldNumber = 4;
  inline const ::std::string& selecteddepartmentids(int index) const;
  inline ::std::string* mutable_selecteddepartmentids(int index);
  inline void set_selecteddepartmentids(int index, const ::std::string& value);
  inline void set_selecteddepartmentids(int index, const char* value);
  inline void set_selecteddepartmentids(int index, const char* value, size_t size);
  inline ::std::string* add_selecteddepartmentids();
  inline void add_selecteddepartmentids(const ::std::string& value);
  inline void add_selecteddepartmentids(const char* value);
  inline void add_selecteddepartmentids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& selecteddepartmentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_selecteddepartmentids();

  // repeated .Diadoc.Api.Proto.Employees.EmployeeAction Actions = 5;
  inline int actions_size() const;
  inline void clear_actions();
  static const int kActionsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Employees::EmployeeAction& actions(int index) const;
  inline ::Diadoc::Api::Proto::Employees::EmployeeAction* mutable_actions(int index);
  inline ::Diadoc::Api::Proto::Employees::EmployeeAction* add_actions();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::EmployeeAction >&
      actions() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::EmployeeAction >*
      mutable_actions();

  // optional .Diadoc.Api.Proto.AuthorizationPermission AuthorizationPermission = 6;
  inline bool has_authorizationpermission() const;
  inline void clear_authorizationpermission();
  static const int kAuthorizationPermissionFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::AuthorizationPermission& authorizationpermission() const;
  inline ::Diadoc::Api::Proto::AuthorizationPermission* mutable_authorizationpermission();
  inline ::Diadoc::Api::Proto::AuthorizationPermission* release_authorizationpermission();
  inline void set_allocated_authorizationpermission(::Diadoc::Api::Proto::AuthorizationPermission* authorizationpermission);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.EmployeePermissions)
 private:
  inline void set_has_userdepartmentid();
  inline void clear_has_userdepartmentid();
  inline void set_has_isadministrator();
  inline void clear_has_isadministrator();
  inline void set_has_documentaccesslevel();
  inline void clear_has_documentaccesslevel();
  inline void set_has_authorizationpermission();
  inline void clear_has_authorizationpermission();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* userdepartmentid_;
  bool isadministrator_;
  int documentaccesslevel_;
  ::google::protobuf::RepeatedPtrField< ::std::string> selecteddepartmentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::EmployeeAction > actions_;
  ::Diadoc::Api::Proto::AuthorizationPermission* authorizationpermission_;
  friend void  protobuf_AddDesc_Employees_2fEmployee_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployee_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployee_2eproto();

  void InitAsDefaultInstance();
  static EmployeePermissions* default_instance_;
};
// -------------------------------------------------------------------

class EmployeeAction : public ::google::protobuf::Message {
 public:
  EmployeeAction();
  virtual ~EmployeeAction();

  EmployeeAction(const EmployeeAction& from);

  inline EmployeeAction& operator=(const EmployeeAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeeAction& default_instance();

  void Swap(EmployeeAction* other);

  // implements Message ----------------------------------------------

  EmployeeAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeeAction& from);
  void MergeFrom(const EmployeeAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bool IsAllowed = 2;
  inline bool has_isallowed() const;
  inline void clear_isallowed();
  static const int kIsAllowedFieldNumber = 2;
  inline bool isallowed() const;
  inline void set_isallowed(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.EmployeeAction)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_isallowed();
  inline void clear_has_isallowed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  bool isallowed_;
  friend void  protobuf_AddDesc_Employees_2fEmployee_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployee_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployee_2eproto();

  void InitAsDefaultInstance();
  static EmployeeAction* default_instance_;
};
// -------------------------------------------------------------------

class EmployeeList : public ::google::protobuf::Message {
 public:
  EmployeeList();
  virtual ~EmployeeList();

  EmployeeList(const EmployeeList& from);

  inline EmployeeList& operator=(const EmployeeList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeeList& default_instance();

  void Swap(EmployeeList* other);

  // implements Message ----------------------------------------------

  EmployeeList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeeList& from);
  void MergeFrom(const EmployeeList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.Employees.Employee Employees = 1;
  inline int employees_size() const;
  inline void clear_employees();
  static const int kEmployeesFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Employees::Employee& employees(int index) const;
  inline ::Diadoc::Api::Proto::Employees::Employee* mutable_employees(int index);
  inline ::Diadoc::Api::Proto::Employees::Employee* add_employees();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::Employee >&
      employees() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::Employee >*
      mutable_employees();

  // required int32 TotalCount = 2;
  inline bool has_totalcount() const;
  inline void clear_totalcount();
  static const int kTotalCountFieldNumber = 2;
  inline ::google::protobuf::int32 totalcount() const;
  inline void set_totalcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.EmployeeList)
 private:
  inline void set_has_totalcount();
  inline void clear_has_totalcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::Employee > employees_;
  ::google::protobuf::int32 totalcount_;
  friend void  protobuf_AddDesc_Employees_2fEmployee_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployee_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployee_2eproto();

  void InitAsDefaultInstance();
  static EmployeeList* default_instance_;
};
// ===================================================================


// ===================================================================

// Employee

// required .Diadoc.Api.Proto.UserV2 User = 1;
inline bool Employee::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Employee::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Employee::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Employee::clear_user() {
  if (user_ != NULL) user_->::Diadoc::Api::Proto::UserV2::Clear();
  clear_has_user();
}
inline const ::Diadoc::Api::Proto::UserV2& Employee::user() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.Employee.User)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::Diadoc::Api::Proto::UserV2* Employee::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::Diadoc::Api::Proto::UserV2;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.Employee.User)
  return user_;
}
inline ::Diadoc::Api::Proto::UserV2* Employee::release_user() {
  clear_has_user();
  ::Diadoc::Api::Proto::UserV2* temp = user_;
  user_ = NULL;
  return temp;
}
inline void Employee::set_allocated_user(::Diadoc::Api::Proto::UserV2* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.Employee.User)
}

// required .Diadoc.Api.Proto.Employees.EmployeePermissions Permissions = 2;
inline bool Employee::has_permissions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Employee::set_has_permissions() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Employee::clear_has_permissions() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Employee::clear_permissions() {
  if (permissions_ != NULL) permissions_->::Diadoc::Api::Proto::Employees::EmployeePermissions::Clear();
  clear_has_permissions();
}
inline const ::Diadoc::Api::Proto::Employees::EmployeePermissions& Employee::permissions() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.Employee.Permissions)
  return permissions_ != NULL ? *permissions_ : *default_instance_->permissions_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeePermissions* Employee::mutable_permissions() {
  set_has_permissions();
  if (permissions_ == NULL) permissions_ = new ::Diadoc::Api::Proto::Employees::EmployeePermissions;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.Employee.Permissions)
  return permissions_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeePermissions* Employee::release_permissions() {
  clear_has_permissions();
  ::Diadoc::Api::Proto::Employees::EmployeePermissions* temp = permissions_;
  permissions_ = NULL;
  return temp;
}
inline void Employee::set_allocated_permissions(::Diadoc::Api::Proto::Employees::EmployeePermissions* permissions) {
  delete permissions_;
  permissions_ = permissions;
  if (permissions) {
    set_has_permissions();
  } else {
    clear_has_permissions();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.Employee.Permissions)
}

// required string Position = 3;
inline bool Employee::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Employee::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Employee::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Employee::clear_position() {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& Employee::position() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.Employee.Position)
  return *position_;
}
inline void Employee::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.Employee.Position)
}
inline void Employee::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Employees.Employee.Position)
}
inline void Employee::set_position(const char* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Employees.Employee.Position)
}
inline ::std::string* Employee::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.Employee.Position)
  return position_;
}
inline ::std::string* Employee::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Employee::set_allocated_position(::std::string* position) {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (position) {
    set_has_position();
    position_ = position;
  } else {
    clear_has_position();
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.Employee.Position)
}

// required bool CanBeInvitedForChat = 4;
inline bool Employee::has_canbeinvitedforchat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Employee::set_has_canbeinvitedforchat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Employee::clear_has_canbeinvitedforchat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Employee::clear_canbeinvitedforchat() {
  canbeinvitedforchat_ = false;
  clear_has_canbeinvitedforchat();
}
inline bool Employee::canbeinvitedforchat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.Employee.CanBeInvitedForChat)
  return canbeinvitedforchat_;
}
inline void Employee::set_canbeinvitedforchat(bool value) {
  set_has_canbeinvitedforchat();
  canbeinvitedforchat_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.Employee.CanBeInvitedForChat)
}

// optional .Diadoc.Api.Proto.Timestamp CreationTimestamp = 5;
inline bool Employee::has_creationtimestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Employee::set_has_creationtimestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Employee::clear_has_creationtimestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Employee::clear_creationtimestamp() {
  if (creationtimestamp_ != NULL) creationtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_creationtimestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& Employee::creationtimestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.Employee.CreationTimestamp)
  return creationtimestamp_ != NULL ? *creationtimestamp_ : *default_instance_->creationtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* Employee::mutable_creationtimestamp() {
  set_has_creationtimestamp();
  if (creationtimestamp_ == NULL) creationtimestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.Employee.CreationTimestamp)
  return creationtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* Employee::release_creationtimestamp() {
  clear_has_creationtimestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = creationtimestamp_;
  creationtimestamp_ = NULL;
  return temp;
}
inline void Employee::set_allocated_creationtimestamp(::Diadoc::Api::Proto::Timestamp* creationtimestamp) {
  delete creationtimestamp_;
  creationtimestamp_ = creationtimestamp;
  if (creationtimestamp) {
    set_has_creationtimestamp();
  } else {
    clear_has_creationtimestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.Employee.CreationTimestamp)
}

// -------------------------------------------------------------------

// EmployeePermissions

// required string UserDepartmentId = 1;
inline bool EmployeePermissions::has_userdepartmentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmployeePermissions::set_has_userdepartmentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmployeePermissions::clear_has_userdepartmentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmployeePermissions::clear_userdepartmentid() {
  if (userdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdepartmentid_->clear();
  }
  clear_has_userdepartmentid();
}
inline const ::std::string& EmployeePermissions::userdepartmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeePermissions.UserDepartmentId)
  return *userdepartmentid_;
}
inline void EmployeePermissions::set_userdepartmentid(const ::std::string& value) {
  set_has_userdepartmentid();
  if (userdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdepartmentid_ = new ::std::string;
  }
  userdepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeePermissions.UserDepartmentId)
}
inline void EmployeePermissions::set_userdepartmentid(const char* value) {
  set_has_userdepartmentid();
  if (userdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdepartmentid_ = new ::std::string;
  }
  userdepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Employees.EmployeePermissions.UserDepartmentId)
}
inline void EmployeePermissions::set_userdepartmentid(const char* value, size_t size) {
  set_has_userdepartmentid();
  if (userdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdepartmentid_ = new ::std::string;
  }
  userdepartmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Employees.EmployeePermissions.UserDepartmentId)
}
inline ::std::string* EmployeePermissions::mutable_userdepartmentid() {
  set_has_userdepartmentid();
  if (userdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdepartmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeePermissions.UserDepartmentId)
  return userdepartmentid_;
}
inline ::std::string* EmployeePermissions::release_userdepartmentid() {
  clear_has_userdepartmentid();
  if (userdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userdepartmentid_;
    userdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmployeePermissions::set_allocated_userdepartmentid(::std::string* userdepartmentid) {
  if (userdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userdepartmentid_;
  }
  if (userdepartmentid) {
    set_has_userdepartmentid();
    userdepartmentid_ = userdepartmentid;
  } else {
    clear_has_userdepartmentid();
    userdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeePermissions.UserDepartmentId)
}

// required bool IsAdministrator = 2;
inline bool EmployeePermissions::has_isadministrator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmployeePermissions::set_has_isadministrator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmployeePermissions::clear_has_isadministrator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmployeePermissions::clear_isadministrator() {
  isadministrator_ = false;
  clear_has_isadministrator();
}
inline bool EmployeePermissions::isadministrator() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeePermissions.IsAdministrator)
  return isadministrator_;
}
inline void EmployeePermissions::set_isadministrator(bool value) {
  set_has_isadministrator();
  isadministrator_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeePermissions.IsAdministrator)
}

// required .Diadoc.Api.Proto.DocumentAccessLevel DocumentAccessLevel = 3 [default = UnknownDocumentAccessLevel];
inline bool EmployeePermissions::has_documentaccesslevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmployeePermissions::set_has_documentaccesslevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmployeePermissions::clear_has_documentaccesslevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmployeePermissions::clear_documentaccesslevel() {
  documentaccesslevel_ = -1;
  clear_has_documentaccesslevel();
}
inline ::Diadoc::Api::Proto::DocumentAccessLevel EmployeePermissions::documentaccesslevel() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeePermissions.DocumentAccessLevel)
  return static_cast< ::Diadoc::Api::Proto::DocumentAccessLevel >(documentaccesslevel_);
}
inline void EmployeePermissions::set_documentaccesslevel(::Diadoc::Api::Proto::DocumentAccessLevel value) {
  assert(::Diadoc::Api::Proto::DocumentAccessLevel_IsValid(value));
  set_has_documentaccesslevel();
  documentaccesslevel_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeePermissions.DocumentAccessLevel)
}

// repeated string SelectedDepartmentIds = 4;
inline int EmployeePermissions::selecteddepartmentids_size() const {
  return selecteddepartmentids_.size();
}
inline void EmployeePermissions::clear_selecteddepartmentids() {
  selecteddepartmentids_.Clear();
}
inline const ::std::string& EmployeePermissions::selecteddepartmentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeePermissions.SelectedDepartmentIds)
  return selecteddepartmentids_.Get(index);
}
inline ::std::string* EmployeePermissions::mutable_selecteddepartmentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeePermissions.SelectedDepartmentIds)
  return selecteddepartmentids_.Mutable(index);
}
inline void EmployeePermissions::set_selecteddepartmentids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeePermissions.SelectedDepartmentIds)
  selecteddepartmentids_.Mutable(index)->assign(value);
}
inline void EmployeePermissions::set_selecteddepartmentids(int index, const char* value) {
  selecteddepartmentids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Employees.EmployeePermissions.SelectedDepartmentIds)
}
inline void EmployeePermissions::set_selecteddepartmentids(int index, const char* value, size_t size) {
  selecteddepartmentids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Employees.EmployeePermissions.SelectedDepartmentIds)
}
inline ::std::string* EmployeePermissions::add_selecteddepartmentids() {
  return selecteddepartmentids_.Add();
}
inline void EmployeePermissions::add_selecteddepartmentids(const ::std::string& value) {
  selecteddepartmentids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Employees.EmployeePermissions.SelectedDepartmentIds)
}
inline void EmployeePermissions::add_selecteddepartmentids(const char* value) {
  selecteddepartmentids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Employees.EmployeePermissions.SelectedDepartmentIds)
}
inline void EmployeePermissions::add_selecteddepartmentids(const char* value, size_t size) {
  selecteddepartmentids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Employees.EmployeePermissions.SelectedDepartmentIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EmployeePermissions::selecteddepartmentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Employees.EmployeePermissions.SelectedDepartmentIds)
  return selecteddepartmentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EmployeePermissions::mutable_selecteddepartmentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Employees.EmployeePermissions.SelectedDepartmentIds)
  return &selecteddepartmentids_;
}

// repeated .Diadoc.Api.Proto.Employees.EmployeeAction Actions = 5;
inline int EmployeePermissions::actions_size() const {
  return actions_.size();
}
inline void EmployeePermissions::clear_actions() {
  actions_.Clear();
}
inline const ::Diadoc::Api::Proto::Employees::EmployeeAction& EmployeePermissions::actions(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeePermissions.Actions)
  return actions_.Get(index);
}
inline ::Diadoc::Api::Proto::Employees::EmployeeAction* EmployeePermissions::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeePermissions.Actions)
  return actions_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Employees::EmployeeAction* EmployeePermissions::add_actions() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Employees.EmployeePermissions.Actions)
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::EmployeeAction >&
EmployeePermissions::actions() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Employees.EmployeePermissions.Actions)
  return actions_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::EmployeeAction >*
EmployeePermissions::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Employees.EmployeePermissions.Actions)
  return &actions_;
}

// optional .Diadoc.Api.Proto.AuthorizationPermission AuthorizationPermission = 6;
inline bool EmployeePermissions::has_authorizationpermission() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EmployeePermissions::set_has_authorizationpermission() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EmployeePermissions::clear_has_authorizationpermission() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EmployeePermissions::clear_authorizationpermission() {
  if (authorizationpermission_ != NULL) authorizationpermission_->::Diadoc::Api::Proto::AuthorizationPermission::Clear();
  clear_has_authorizationpermission();
}
inline const ::Diadoc::Api::Proto::AuthorizationPermission& EmployeePermissions::authorizationpermission() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeePermissions.AuthorizationPermission)
  return authorizationpermission_ != NULL ? *authorizationpermission_ : *default_instance_->authorizationpermission_;
}
inline ::Diadoc::Api::Proto::AuthorizationPermission* EmployeePermissions::mutable_authorizationpermission() {
  set_has_authorizationpermission();
  if (authorizationpermission_ == NULL) authorizationpermission_ = new ::Diadoc::Api::Proto::AuthorizationPermission;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeePermissions.AuthorizationPermission)
  return authorizationpermission_;
}
inline ::Diadoc::Api::Proto::AuthorizationPermission* EmployeePermissions::release_authorizationpermission() {
  clear_has_authorizationpermission();
  ::Diadoc::Api::Proto::AuthorizationPermission* temp = authorizationpermission_;
  authorizationpermission_ = NULL;
  return temp;
}
inline void EmployeePermissions::set_allocated_authorizationpermission(::Diadoc::Api::Proto::AuthorizationPermission* authorizationpermission) {
  delete authorizationpermission_;
  authorizationpermission_ = authorizationpermission;
  if (authorizationpermission) {
    set_has_authorizationpermission();
  } else {
    clear_has_authorizationpermission();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeePermissions.AuthorizationPermission)
}

// -------------------------------------------------------------------

// EmployeeAction

// required string Name = 1;
inline bool EmployeeAction::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmployeeAction::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmployeeAction::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmployeeAction::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& EmployeeAction::name() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeAction.Name)
  return *name_;
}
inline void EmployeeAction::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeeAction.Name)
}
inline void EmployeeAction::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Employees.EmployeeAction.Name)
}
inline void EmployeeAction::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Employees.EmployeeAction.Name)
}
inline ::std::string* EmployeeAction::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeAction.Name)
  return name_;
}
inline ::std::string* EmployeeAction::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmployeeAction::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeeAction.Name)
}

// required bool IsAllowed = 2;
inline bool EmployeeAction::has_isallowed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmployeeAction::set_has_isallowed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmployeeAction::clear_has_isallowed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmployeeAction::clear_isallowed() {
  isallowed_ = false;
  clear_has_isallowed();
}
inline bool EmployeeAction::isallowed() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeAction.IsAllowed)
  return isallowed_;
}
inline void EmployeeAction::set_isallowed(bool value) {
  set_has_isallowed();
  isallowed_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeeAction.IsAllowed)
}

// -------------------------------------------------------------------

// EmployeeList

// repeated .Diadoc.Api.Proto.Employees.Employee Employees = 1;
inline int EmployeeList::employees_size() const {
  return employees_.size();
}
inline void EmployeeList::clear_employees() {
  employees_.Clear();
}
inline const ::Diadoc::Api::Proto::Employees::Employee& EmployeeList::employees(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeList.Employees)
  return employees_.Get(index);
}
inline ::Diadoc::Api::Proto::Employees::Employee* EmployeeList::mutable_employees(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeList.Employees)
  return employees_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Employees::Employee* EmployeeList::add_employees() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Employees.EmployeeList.Employees)
  return employees_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::Employee >&
EmployeeList::employees() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Employees.EmployeeList.Employees)
  return employees_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Employees::Employee >*
EmployeeList::mutable_employees() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Employees.EmployeeList.Employees)
  return &employees_;
}

// required int32 TotalCount = 2;
inline bool EmployeeList::has_totalcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmployeeList::set_has_totalcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmployeeList::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmployeeList::clear_totalcount() {
  totalcount_ = 0;
  clear_has_totalcount();
}
inline ::google::protobuf::int32 EmployeeList::totalcount() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeList.TotalCount)
  return totalcount_;
}
inline void EmployeeList::set_totalcount(::google::protobuf::int32 value) {
  set_has_totalcount();
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeeList.TotalCount)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Employees
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Employees_2fEmployee_2eproto__INCLUDED
