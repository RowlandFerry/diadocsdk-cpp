// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Employees/EmployeeToCreate.proto

#ifndef PROTOBUF_Employees_2fEmployeeToCreate_2eproto__INCLUDED
#define PROTOBUF_Employees_2fEmployeeToCreate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "User.pb.h"
#include "Employees/Employee.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Employees {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Employees_2fEmployeeToCreate_2eproto();
void protobuf_AssignDesc_Employees_2fEmployeeToCreate_2eproto();
void protobuf_ShutdownFile_Employees_2fEmployeeToCreate_2eproto();

class EmployeeToCreate;
class EmployeeToCreateCredentials;
class EmployeeToCreateByLogin;
class EmployeeToCreateByCertificate;

// ===================================================================

class EmployeeToCreate : public ::google::protobuf::Message {
 public:
  EmployeeToCreate();
  virtual ~EmployeeToCreate();

  EmployeeToCreate(const EmployeeToCreate& from);

  inline EmployeeToCreate& operator=(const EmployeeToCreate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeeToCreate& default_instance();

  void Swap(EmployeeToCreate* other);

  // implements Message ----------------------------------------------

  EmployeeToCreate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeeToCreate& from);
  void MergeFrom(const EmployeeToCreate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials Credentials = 1;
  inline bool has_credentials() const;
  inline void clear_credentials();
  static const int kCredentialsFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials& credentials() const;
  inline ::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials* mutable_credentials();
  inline ::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials* release_credentials();
  inline void set_allocated_credentials(::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials* credentials);

  // optional string Position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const char* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // required bool CanBeInvitedForChat = 3;
  inline bool has_canbeinvitedforchat() const;
  inline void clear_canbeinvitedforchat();
  static const int kCanBeInvitedForChatFieldNumber = 3;
  inline bool canbeinvitedforchat() const;
  inline void set_canbeinvitedforchat(bool value);

  // required .Diadoc.Api.Proto.Employees.EmployeePermissions Permissions = 4;
  inline bool has_permissions() const;
  inline void clear_permissions();
  static const int kPermissionsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Employees::EmployeePermissions& permissions() const;
  inline ::Diadoc::Api::Proto::Employees::EmployeePermissions* mutable_permissions();
  inline ::Diadoc::Api::Proto::Employees::EmployeePermissions* release_permissions();
  inline void set_allocated_permissions(::Diadoc::Api::Proto::Employees::EmployeePermissions* permissions);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.EmployeeToCreate)
 private:
  inline void set_has_credentials();
  inline void clear_has_credentials();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_canbeinvitedforchat();
  inline void clear_has_canbeinvitedforchat();
  inline void set_has_permissions();
  inline void clear_has_permissions();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials* credentials_;
  ::std::string* position_;
  ::Diadoc::Api::Proto::Employees::EmployeePermissions* permissions_;
  bool canbeinvitedforchat_;
  friend void  protobuf_AddDesc_Employees_2fEmployeeToCreate_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployeeToCreate_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployeeToCreate_2eproto();

  void InitAsDefaultInstance();
  static EmployeeToCreate* default_instance_;
};
// -------------------------------------------------------------------

class EmployeeToCreateCredentials : public ::google::protobuf::Message {
 public:
  EmployeeToCreateCredentials();
  virtual ~EmployeeToCreateCredentials();

  EmployeeToCreateCredentials(const EmployeeToCreateCredentials& from);

  inline EmployeeToCreateCredentials& operator=(const EmployeeToCreateCredentials& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeeToCreateCredentials& default_instance();

  void Swap(EmployeeToCreateCredentials* other);

  // implements Message ----------------------------------------------

  EmployeeToCreateCredentials* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeeToCreateCredentials& from);
  void MergeFrom(const EmployeeToCreateCredentials& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin Login = 1;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin& login() const;
  inline ::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin* mutable_login();
  inline ::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin* release_login();
  inline void set_allocated_login(::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin* login);

  // optional .Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate Certificate = 2;
  inline bool has_certificate() const;
  inline void clear_certificate();
  static const int kCertificateFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate& certificate() const;
  inline ::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate* mutable_certificate();
  inline ::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate* release_certificate();
  inline void set_allocated_certificate(::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate* certificate);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials)
 private:
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_certificate();
  inline void clear_has_certificate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin* login_;
  ::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate* certificate_;
  friend void  protobuf_AddDesc_Employees_2fEmployeeToCreate_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployeeToCreate_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployeeToCreate_2eproto();

  void InitAsDefaultInstance();
  static EmployeeToCreateCredentials* default_instance_;
};
// -------------------------------------------------------------------

class EmployeeToCreateByLogin : public ::google::protobuf::Message {
 public:
  EmployeeToCreateByLogin();
  virtual ~EmployeeToCreateByLogin();

  EmployeeToCreateByLogin(const EmployeeToCreateByLogin& from);

  inline EmployeeToCreateByLogin& operator=(const EmployeeToCreateByLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeeToCreateByLogin& default_instance();

  void Swap(EmployeeToCreateByLogin* other);

  // implements Message ----------------------------------------------

  EmployeeToCreateByLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeeToCreateByLogin& from);
  void MergeFrom(const EmployeeToCreateByLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Login = 1;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 1;
  inline const ::std::string& login() const;
  inline void set_login(const ::std::string& value);
  inline void set_login(const char* value);
  inline void set_login(const char* value, size_t size);
  inline ::std::string* mutable_login();
  inline ::std::string* release_login();
  inline void set_allocated_login(::std::string* login);

  // optional .Diadoc.Api.Proto.FullName FullName = 2;
  inline bool has_fullname() const;
  inline void clear_fullname();
  static const int kFullNameFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::FullName& fullname() const;
  inline ::Diadoc::Api::Proto::FullName* mutable_fullname();
  inline ::Diadoc::Api::Proto::FullName* release_fullname();
  inline void set_allocated_fullname(::Diadoc::Api::Proto::FullName* fullname);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin)
 private:
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_fullname();
  inline void clear_has_fullname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* login_;
  ::Diadoc::Api::Proto::FullName* fullname_;
  friend void  protobuf_AddDesc_Employees_2fEmployeeToCreate_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployeeToCreate_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployeeToCreate_2eproto();

  void InitAsDefaultInstance();
  static EmployeeToCreateByLogin* default_instance_;
};
// -------------------------------------------------------------------

class EmployeeToCreateByCertificate : public ::google::protobuf::Message {
 public:
  EmployeeToCreateByCertificate();
  virtual ~EmployeeToCreateByCertificate();

  EmployeeToCreateByCertificate(const EmployeeToCreateByCertificate& from);

  inline EmployeeToCreateByCertificate& operator=(const EmployeeToCreateByCertificate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmployeeToCreateByCertificate& default_instance();

  void Swap(EmployeeToCreateByCertificate* other);

  // implements Message ----------------------------------------------

  EmployeeToCreateByCertificate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmployeeToCreateByCertificate& from);
  void MergeFrom(const EmployeeToCreateByCertificate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string AccessBasis = 2;
  inline bool has_accessbasis() const;
  inline void clear_accessbasis();
  static const int kAccessBasisFieldNumber = 2;
  inline const ::std::string& accessbasis() const;
  inline void set_accessbasis(const ::std::string& value);
  inline void set_accessbasis(const char* value);
  inline void set_accessbasis(const char* value, size_t size);
  inline ::std::string* mutable_accessbasis();
  inline ::std::string* release_accessbasis();
  inline void set_allocated_accessbasis(::std::string* accessbasis);

  // optional string Email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_accessbasis();
  inline void clear_has_accessbasis();
  inline void set_has_email();
  inline void clear_has_email();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  ::std::string* accessbasis_;
  ::std::string* email_;
  friend void  protobuf_AddDesc_Employees_2fEmployeeToCreate_2eproto();
  friend void protobuf_AssignDesc_Employees_2fEmployeeToCreate_2eproto();
  friend void protobuf_ShutdownFile_Employees_2fEmployeeToCreate_2eproto();

  void InitAsDefaultInstance();
  static EmployeeToCreateByCertificate* default_instance_;
};
// ===================================================================


// ===================================================================

// EmployeeToCreate

// required .Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials Credentials = 1;
inline bool EmployeeToCreate::has_credentials() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmployeeToCreate::set_has_credentials() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmployeeToCreate::clear_has_credentials() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmployeeToCreate::clear_credentials() {
  if (credentials_ != NULL) credentials_->::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials::Clear();
  clear_has_credentials();
}
inline const ::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials& EmployeeToCreate::credentials() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeToCreate.Credentials)
  return credentials_ != NULL ? *credentials_ : *default_instance_->credentials_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials* EmployeeToCreate::mutable_credentials() {
  set_has_credentials();
  if (credentials_ == NULL) credentials_ = new ::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeToCreate.Credentials)
  return credentials_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials* EmployeeToCreate::release_credentials() {
  clear_has_credentials();
  ::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials* temp = credentials_;
  credentials_ = NULL;
  return temp;
}
inline void EmployeeToCreate::set_allocated_credentials(::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials* credentials) {
  delete credentials_;
  credentials_ = credentials;
  if (credentials) {
    set_has_credentials();
  } else {
    clear_has_credentials();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeeToCreate.Credentials)
}

// optional string Position = 2;
inline bool EmployeeToCreate::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmployeeToCreate::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmployeeToCreate::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmployeeToCreate::clear_position() {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& EmployeeToCreate::position() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeToCreate.Position)
  return *position_;
}
inline void EmployeeToCreate::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeeToCreate.Position)
}
inline void EmployeeToCreate::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Employees.EmployeeToCreate.Position)
}
inline void EmployeeToCreate::set_position(const char* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Employees.EmployeeToCreate.Position)
}
inline ::std::string* EmployeeToCreate::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeToCreate.Position)
  return position_;
}
inline ::std::string* EmployeeToCreate::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmployeeToCreate::set_allocated_position(::std::string* position) {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (position) {
    set_has_position();
    position_ = position;
  } else {
    clear_has_position();
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeeToCreate.Position)
}

// required bool CanBeInvitedForChat = 3;
inline bool EmployeeToCreate::has_canbeinvitedforchat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmployeeToCreate::set_has_canbeinvitedforchat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmployeeToCreate::clear_has_canbeinvitedforchat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmployeeToCreate::clear_canbeinvitedforchat() {
  canbeinvitedforchat_ = false;
  clear_has_canbeinvitedforchat();
}
inline bool EmployeeToCreate::canbeinvitedforchat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeToCreate.CanBeInvitedForChat)
  return canbeinvitedforchat_;
}
inline void EmployeeToCreate::set_canbeinvitedforchat(bool value) {
  set_has_canbeinvitedforchat();
  canbeinvitedforchat_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeeToCreate.CanBeInvitedForChat)
}

// required .Diadoc.Api.Proto.Employees.EmployeePermissions Permissions = 4;
inline bool EmployeeToCreate::has_permissions() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmployeeToCreate::set_has_permissions() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmployeeToCreate::clear_has_permissions() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmployeeToCreate::clear_permissions() {
  if (permissions_ != NULL) permissions_->::Diadoc::Api::Proto::Employees::EmployeePermissions::Clear();
  clear_has_permissions();
}
inline const ::Diadoc::Api::Proto::Employees::EmployeePermissions& EmployeeToCreate::permissions() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeToCreate.Permissions)
  return permissions_ != NULL ? *permissions_ : *default_instance_->permissions_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeePermissions* EmployeeToCreate::mutable_permissions() {
  set_has_permissions();
  if (permissions_ == NULL) permissions_ = new ::Diadoc::Api::Proto::Employees::EmployeePermissions;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeToCreate.Permissions)
  return permissions_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeePermissions* EmployeeToCreate::release_permissions() {
  clear_has_permissions();
  ::Diadoc::Api::Proto::Employees::EmployeePermissions* temp = permissions_;
  permissions_ = NULL;
  return temp;
}
inline void EmployeeToCreate::set_allocated_permissions(::Diadoc::Api::Proto::Employees::EmployeePermissions* permissions) {
  delete permissions_;
  permissions_ = permissions;
  if (permissions) {
    set_has_permissions();
  } else {
    clear_has_permissions();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeeToCreate.Permissions)
}

// -------------------------------------------------------------------

// EmployeeToCreateCredentials

// optional .Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin Login = 1;
inline bool EmployeeToCreateCredentials::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmployeeToCreateCredentials::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmployeeToCreateCredentials::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmployeeToCreateCredentials::clear_login() {
  if (login_ != NULL) login_->::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin::Clear();
  clear_has_login();
}
inline const ::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin& EmployeeToCreateCredentials::login() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials.Login)
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin* EmployeeToCreateCredentials::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials.Login)
  return login_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin* EmployeeToCreateCredentials::release_login() {
  clear_has_login();
  ::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin* temp = login_;
  login_ = NULL;
  return temp;
}
inline void EmployeeToCreateCredentials::set_allocated_login(::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials.Login)
}

// optional .Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate Certificate = 2;
inline bool EmployeeToCreateCredentials::has_certificate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmployeeToCreateCredentials::set_has_certificate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmployeeToCreateCredentials::clear_has_certificate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmployeeToCreateCredentials::clear_certificate() {
  if (certificate_ != NULL) certificate_->::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate::Clear();
  clear_has_certificate();
}
inline const ::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate& EmployeeToCreateCredentials::certificate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials.Certificate)
  return certificate_ != NULL ? *certificate_ : *default_instance_->certificate_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate* EmployeeToCreateCredentials::mutable_certificate() {
  set_has_certificate();
  if (certificate_ == NULL) certificate_ = new ::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials.Certificate)
  return certificate_;
}
inline ::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate* EmployeeToCreateCredentials::release_certificate() {
  clear_has_certificate();
  ::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate* temp = certificate_;
  certificate_ = NULL;
  return temp;
}
inline void EmployeeToCreateCredentials::set_allocated_certificate(::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate* certificate) {
  delete certificate_;
  certificate_ = certificate;
  if (certificate) {
    set_has_certificate();
  } else {
    clear_has_certificate();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials.Certificate)
}

// -------------------------------------------------------------------

// EmployeeToCreateByLogin

// required string Login = 1;
inline bool EmployeeToCreateByLogin::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmployeeToCreateByLogin::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmployeeToCreateByLogin::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmployeeToCreateByLogin::clear_login() {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_->clear();
  }
  clear_has_login();
}
inline const ::std::string& EmployeeToCreateByLogin::login() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin.Login)
  return *login_;
}
inline void EmployeeToCreateByLogin::set_login(const ::std::string& value) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  login_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin.Login)
}
inline void EmployeeToCreateByLogin::set_login(const char* value) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  login_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin.Login)
}
inline void EmployeeToCreateByLogin::set_login(const char* value, size_t size) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  login_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin.Login)
}
inline ::std::string* EmployeeToCreateByLogin::mutable_login() {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin.Login)
  return login_;
}
inline ::std::string* EmployeeToCreateByLogin::release_login() {
  clear_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = login_;
    login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmployeeToCreateByLogin::set_allocated_login(::std::string* login) {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_;
  }
  if (login) {
    set_has_login();
    login_ = login;
  } else {
    clear_has_login();
    login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin.Login)
}

// optional .Diadoc.Api.Proto.FullName FullName = 2;
inline bool EmployeeToCreateByLogin::has_fullname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmployeeToCreateByLogin::set_has_fullname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmployeeToCreateByLogin::clear_has_fullname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmployeeToCreateByLogin::clear_fullname() {
  if (fullname_ != NULL) fullname_->::Diadoc::Api::Proto::FullName::Clear();
  clear_has_fullname();
}
inline const ::Diadoc::Api::Proto::FullName& EmployeeToCreateByLogin::fullname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin.FullName)
  return fullname_ != NULL ? *fullname_ : *default_instance_->fullname_;
}
inline ::Diadoc::Api::Proto::FullName* EmployeeToCreateByLogin::mutable_fullname() {
  set_has_fullname();
  if (fullname_ == NULL) fullname_ = new ::Diadoc::Api::Proto::FullName;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin.FullName)
  return fullname_;
}
inline ::Diadoc::Api::Proto::FullName* EmployeeToCreateByLogin::release_fullname() {
  clear_has_fullname();
  ::Diadoc::Api::Proto::FullName* temp = fullname_;
  fullname_ = NULL;
  return temp;
}
inline void EmployeeToCreateByLogin::set_allocated_fullname(::Diadoc::Api::Proto::FullName* fullname) {
  delete fullname_;
  fullname_ = fullname;
  if (fullname) {
    set_has_fullname();
  } else {
    clear_has_fullname();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin.FullName)
}

// -------------------------------------------------------------------

// EmployeeToCreateByCertificate

// required bytes Content = 1;
inline bool EmployeeToCreateByCertificate::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmployeeToCreateByCertificate::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmployeeToCreateByCertificate::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmployeeToCreateByCertificate::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& EmployeeToCreateByCertificate::content() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.Content)
  return *content_;
}
inline void EmployeeToCreateByCertificate::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.Content)
}
inline void EmployeeToCreateByCertificate::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.Content)
}
inline void EmployeeToCreateByCertificate::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.Content)
}
inline ::std::string* EmployeeToCreateByCertificate::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.Content)
  return content_;
}
inline ::std::string* EmployeeToCreateByCertificate::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmployeeToCreateByCertificate::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.Content)
}

// optional string AccessBasis = 2;
inline bool EmployeeToCreateByCertificate::has_accessbasis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmployeeToCreateByCertificate::set_has_accessbasis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmployeeToCreateByCertificate::clear_has_accessbasis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmployeeToCreateByCertificate::clear_accessbasis() {
  if (accessbasis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accessbasis_->clear();
  }
  clear_has_accessbasis();
}
inline const ::std::string& EmployeeToCreateByCertificate::accessbasis() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.AccessBasis)
  return *accessbasis_;
}
inline void EmployeeToCreateByCertificate::set_accessbasis(const ::std::string& value) {
  set_has_accessbasis();
  if (accessbasis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accessbasis_ = new ::std::string;
  }
  accessbasis_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.AccessBasis)
}
inline void EmployeeToCreateByCertificate::set_accessbasis(const char* value) {
  set_has_accessbasis();
  if (accessbasis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accessbasis_ = new ::std::string;
  }
  accessbasis_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.AccessBasis)
}
inline void EmployeeToCreateByCertificate::set_accessbasis(const char* value, size_t size) {
  set_has_accessbasis();
  if (accessbasis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accessbasis_ = new ::std::string;
  }
  accessbasis_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.AccessBasis)
}
inline ::std::string* EmployeeToCreateByCertificate::mutable_accessbasis() {
  set_has_accessbasis();
  if (accessbasis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accessbasis_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.AccessBasis)
  return accessbasis_;
}
inline ::std::string* EmployeeToCreateByCertificate::release_accessbasis() {
  clear_has_accessbasis();
  if (accessbasis_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accessbasis_;
    accessbasis_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmployeeToCreateByCertificate::set_allocated_accessbasis(::std::string* accessbasis) {
  if (accessbasis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accessbasis_;
  }
  if (accessbasis) {
    set_has_accessbasis();
    accessbasis_ = accessbasis;
  } else {
    clear_has_accessbasis();
    accessbasis_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.AccessBasis)
}

// optional string Email = 3;
inline bool EmployeeToCreateByCertificate::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmployeeToCreateByCertificate::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmployeeToCreateByCertificate::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmployeeToCreateByCertificate::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& EmployeeToCreateByCertificate::email() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.Email)
  return *email_;
}
inline void EmployeeToCreateByCertificate::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.Email)
}
inline void EmployeeToCreateByCertificate::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.Email)
}
inline void EmployeeToCreateByCertificate::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.Email)
}
inline ::std::string* EmployeeToCreateByCertificate::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.Email)
  return email_;
}
inline ::std::string* EmployeeToCreateByCertificate::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmployeeToCreateByCertificate::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate.Email)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Employees
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Employees_2fEmployeeToCreate_2eproto__INCLUDED
