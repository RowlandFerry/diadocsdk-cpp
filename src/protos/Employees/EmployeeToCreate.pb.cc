// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Employees/EmployeeToCreate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Employees/EmployeeToCreate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Employees {

namespace {

const ::google::protobuf::Descriptor* EmployeeToCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmployeeToCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmployeeToCreateCredentials_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmployeeToCreateCredentials_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmployeeToCreateByLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmployeeToCreateByLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmployeeToCreateByCertificate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmployeeToCreateByCertificate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Employees_2fEmployeeToCreate_2eproto() {
  protobuf_AddDesc_Employees_2fEmployeeToCreate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Employees/EmployeeToCreate.proto");
  GOOGLE_CHECK(file != NULL);
  EmployeeToCreate_descriptor_ = file->message_type(0);
  static const int EmployeeToCreate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreate, credentials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreate, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreate, canbeinvitedforchat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreate, permissions_),
  };
  EmployeeToCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmployeeToCreate_descriptor_,
      EmployeeToCreate::default_instance_,
      EmployeeToCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmployeeToCreate));
  EmployeeToCreateCredentials_descriptor_ = file->message_type(1);
  static const int EmployeeToCreateCredentials_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreateCredentials, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreateCredentials, certificate_),
  };
  EmployeeToCreateCredentials_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmployeeToCreateCredentials_descriptor_,
      EmployeeToCreateCredentials::default_instance_,
      EmployeeToCreateCredentials_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreateCredentials, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreateCredentials, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmployeeToCreateCredentials));
  EmployeeToCreateByLogin_descriptor_ = file->message_type(2);
  static const int EmployeeToCreateByLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreateByLogin, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreateByLogin, fullname_),
  };
  EmployeeToCreateByLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmployeeToCreateByLogin_descriptor_,
      EmployeeToCreateByLogin::default_instance_,
      EmployeeToCreateByLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreateByLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreateByLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmployeeToCreateByLogin));
  EmployeeToCreateByCertificate_descriptor_ = file->message_type(3);
  static const int EmployeeToCreateByCertificate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreateByCertificate, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreateByCertificate, accessbasis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreateByCertificate, email_),
  };
  EmployeeToCreateByCertificate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmployeeToCreateByCertificate_descriptor_,
      EmployeeToCreateByCertificate::default_instance_,
      EmployeeToCreateByCertificate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreateByCertificate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmployeeToCreateByCertificate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmployeeToCreateByCertificate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Employees_2fEmployeeToCreate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmployeeToCreate_descriptor_, &EmployeeToCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmployeeToCreateCredentials_descriptor_, &EmployeeToCreateCredentials::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmployeeToCreateByLogin_descriptor_, &EmployeeToCreateByLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmployeeToCreateByCertificate_descriptor_, &EmployeeToCreateByCertificate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Employees_2fEmployeeToCreate_2eproto() {
  delete EmployeeToCreate::default_instance_;
  delete EmployeeToCreate_reflection_;
  delete EmployeeToCreateCredentials::default_instance_;
  delete EmployeeToCreateCredentials_reflection_;
  delete EmployeeToCreateByLogin::default_instance_;
  delete EmployeeToCreateByLogin_reflection_;
  delete EmployeeToCreateByCertificate::default_instance_;
  delete EmployeeToCreateByCertificate_reflection_;
}

void protobuf_AddDesc_Employees_2fEmployeeToCreate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_User_2eproto();
  ::Diadoc::Api::Proto::Employees::protobuf_AddDesc_Employees_2fEmployee_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n Employees/EmployeeToCreate.proto\022\032Diad"
    "oc.Api.Proto.Employees\032\nUser.proto\032\030Empl"
    "oyees/Employee.proto\"\325\001\n\020EmployeeToCreat"
    "e\022L\n\013Credentials\030\001 \002(\01327.Diadoc.Api.Prot"
    "o.Employees.EmployeeToCreateCredentials\022"
    "\020\n\010Position\030\002 \001(\t\022\033\n\023CanBeInvitedForChat"
    "\030\003 \002(\010\022D\n\013Permissions\030\004 \002(\0132/.Diadoc.Api"
    ".Proto.Employees.EmployeePermissions\"\261\001\n"
    "\033EmployeeToCreateCredentials\022B\n\005Login\030\001 "
    "\001(\01323.Diadoc.Api.Proto.Employees.Employe"
    "eToCreateByLogin\022N\n\013Certificate\030\002 \001(\01329."
    "Diadoc.Api.Proto.Employees.EmployeeToCre"
    "ateByCertificate\"V\n\027EmployeeToCreateByLo"
    "gin\022\r\n\005Login\030\001 \002(\t\022,\n\010FullName\030\002 \001(\0132\032.D"
    "iadoc.Api.Proto.FullName\"T\n\035EmployeeToCr"
    "eateByCertificate\022\017\n\007Content\030\001 \002(\014\022\023\n\013Ac"
    "cessBasis\030\002 \001(\t\022\r\n\005Email\030\003 \001(\t", 670);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Employees/EmployeeToCreate.proto", &protobuf_RegisterTypes);
  EmployeeToCreate::default_instance_ = new EmployeeToCreate();
  EmployeeToCreateCredentials::default_instance_ = new EmployeeToCreateCredentials();
  EmployeeToCreateByLogin::default_instance_ = new EmployeeToCreateByLogin();
  EmployeeToCreateByCertificate::default_instance_ = new EmployeeToCreateByCertificate();
  EmployeeToCreate::default_instance_->InitAsDefaultInstance();
  EmployeeToCreateCredentials::default_instance_->InitAsDefaultInstance();
  EmployeeToCreateByLogin::default_instance_->InitAsDefaultInstance();
  EmployeeToCreateByCertificate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Employees_2fEmployeeToCreate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Employees_2fEmployeeToCreate_2eproto {
  StaticDescriptorInitializer_Employees_2fEmployeeToCreate_2eproto() {
    protobuf_AddDesc_Employees_2fEmployeeToCreate_2eproto();
  }
} static_descriptor_initializer_Employees_2fEmployeeToCreate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EmployeeToCreate::kCredentialsFieldNumber;
const int EmployeeToCreate::kPositionFieldNumber;
const int EmployeeToCreate::kCanBeInvitedForChatFieldNumber;
const int EmployeeToCreate::kPermissionsFieldNumber;
#endif  // !_MSC_VER

EmployeeToCreate::EmployeeToCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Employees.EmployeeToCreate)
}

void EmployeeToCreate::InitAsDefaultInstance() {
  credentials_ = const_cast< ::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials*>(&::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials::default_instance());
  permissions_ = const_cast< ::Diadoc::Api::Proto::Employees::EmployeePermissions*>(&::Diadoc::Api::Proto::Employees::EmployeePermissions::default_instance());
}

EmployeeToCreate::EmployeeToCreate(const EmployeeToCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Employees.EmployeeToCreate)
}

void EmployeeToCreate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  credentials_ = NULL;
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canbeinvitedforchat_ = false;
  permissions_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmployeeToCreate::~EmployeeToCreate() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Employees.EmployeeToCreate)
  SharedDtor();
}

void EmployeeToCreate::SharedDtor() {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (this != default_instance_) {
    delete credentials_;
    delete permissions_;
  }
}

void EmployeeToCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmployeeToCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmployeeToCreate_descriptor_;
}

const EmployeeToCreate& EmployeeToCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Employees_2fEmployeeToCreate_2eproto();
  return *default_instance_;
}

EmployeeToCreate* EmployeeToCreate::default_instance_ = NULL;

EmployeeToCreate* EmployeeToCreate::New() const {
  return new EmployeeToCreate;
}

void EmployeeToCreate::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_credentials()) {
      if (credentials_ != NULL) credentials_->::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials::Clear();
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
    canbeinvitedforchat_ = false;
    if (has_permissions()) {
      if (permissions_ != NULL) permissions_->::Diadoc::Api::Proto::Employees::EmployeePermissions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmployeeToCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Employees.EmployeeToCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials Credentials = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_credentials()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Position;
        break;
      }

      // optional string Position = 2;
      case 2: {
        if (tag == 18) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CanBeInvitedForChat;
        break;
      }

      // required bool CanBeInvitedForChat = 3;
      case 3: {
        if (tag == 24) {
         parse_CanBeInvitedForChat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbeinvitedforchat_)));
          set_has_canbeinvitedforchat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Permissions;
        break;
      }

      // required .Diadoc.Api.Proto.Employees.EmployeePermissions Permissions = 4;
      case 4: {
        if (tag == 34) {
         parse_Permissions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_permissions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Employees.EmployeeToCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Employees.EmployeeToCreate)
  return false;
#undef DO_
}

void EmployeeToCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Employees.EmployeeToCreate)
  // required .Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials Credentials = 1;
  if (has_credentials()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->credentials(), output);
  }

  // optional string Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->position(), output);
  }

  // required bool CanBeInvitedForChat = 3;
  if (has_canbeinvitedforchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->canbeinvitedforchat(), output);
  }

  // required .Diadoc.Api.Proto.Employees.EmployeePermissions Permissions = 4;
  if (has_permissions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->permissions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Employees.EmployeeToCreate)
}

::google::protobuf::uint8* EmployeeToCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Employees.EmployeeToCreate)
  // required .Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials Credentials = 1;
  if (has_credentials()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->credentials(), target);
  }

  // optional string Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->position(), target);
  }

  // required bool CanBeInvitedForChat = 3;
  if (has_canbeinvitedforchat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->canbeinvitedforchat(), target);
  }

  // required .Diadoc.Api.Proto.Employees.EmployeePermissions Permissions = 4;
  if (has_permissions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->permissions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Employees.EmployeeToCreate)
  return target;
}

int EmployeeToCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials Credentials = 1;
    if (has_credentials()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->credentials());
    }

    // optional string Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // required bool CanBeInvitedForChat = 3;
    if (has_canbeinvitedforchat()) {
      total_size += 1 + 1;
    }

    // required .Diadoc.Api.Proto.Employees.EmployeePermissions Permissions = 4;
    if (has_permissions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->permissions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmployeeToCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmployeeToCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmployeeToCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmployeeToCreate::MergeFrom(const EmployeeToCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_credentials()) {
      mutable_credentials()->::Diadoc::Api::Proto::Employees::EmployeeToCreateCredentials::MergeFrom(from.credentials());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_canbeinvitedforchat()) {
      set_canbeinvitedforchat(from.canbeinvitedforchat());
    }
    if (from.has_permissions()) {
      mutable_permissions()->::Diadoc::Api::Proto::Employees::EmployeePermissions::MergeFrom(from.permissions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmployeeToCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmployeeToCreate::CopyFrom(const EmployeeToCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmployeeToCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_credentials()) {
    if (!this->credentials().IsInitialized()) return false;
  }
  if (has_permissions()) {
    if (!this->permissions().IsInitialized()) return false;
  }
  return true;
}

void EmployeeToCreate::Swap(EmployeeToCreate* other) {
  if (other != this) {
    std::swap(credentials_, other->credentials_);
    std::swap(position_, other->position_);
    std::swap(canbeinvitedforchat_, other->canbeinvitedforchat_);
    std::swap(permissions_, other->permissions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmployeeToCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmployeeToCreate_descriptor_;
  metadata.reflection = EmployeeToCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmployeeToCreateCredentials::kLoginFieldNumber;
const int EmployeeToCreateCredentials::kCertificateFieldNumber;
#endif  // !_MSC_VER

EmployeeToCreateCredentials::EmployeeToCreateCredentials()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials)
}

void EmployeeToCreateCredentials::InitAsDefaultInstance() {
  login_ = const_cast< ::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin*>(&::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin::default_instance());
  certificate_ = const_cast< ::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate*>(&::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate::default_instance());
}

EmployeeToCreateCredentials::EmployeeToCreateCredentials(const EmployeeToCreateCredentials& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials)
}

void EmployeeToCreateCredentials::SharedCtor() {
  _cached_size_ = 0;
  login_ = NULL;
  certificate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmployeeToCreateCredentials::~EmployeeToCreateCredentials() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials)
  SharedDtor();
}

void EmployeeToCreateCredentials::SharedDtor() {
  if (this != default_instance_) {
    delete login_;
    delete certificate_;
  }
}

void EmployeeToCreateCredentials::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmployeeToCreateCredentials::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmployeeToCreateCredentials_descriptor_;
}

const EmployeeToCreateCredentials& EmployeeToCreateCredentials::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Employees_2fEmployeeToCreate_2eproto();
  return *default_instance_;
}

EmployeeToCreateCredentials* EmployeeToCreateCredentials::default_instance_ = NULL;

EmployeeToCreateCredentials* EmployeeToCreateCredentials::New() const {
  return new EmployeeToCreateCredentials;
}

void EmployeeToCreateCredentials::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_login()) {
      if (login_ != NULL) login_->::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin::Clear();
    }
    if (has_certificate()) {
      if (certificate_ != NULL) certificate_->::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmployeeToCreateCredentials::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin Login = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Certificate;
        break;
      }

      // optional .Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate Certificate = 2;
      case 2: {
        if (tag == 18) {
         parse_Certificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_certificate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials)
  return false;
#undef DO_
}

void EmployeeToCreateCredentials::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials)
  // optional .Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin Login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->login(), output);
  }

  // optional .Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate Certificate = 2;
  if (has_certificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->certificate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials)
}

::google::protobuf::uint8* EmployeeToCreateCredentials::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials)
  // optional .Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin Login = 1;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->login(), target);
  }

  // optional .Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate Certificate = 2;
  if (has_certificate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->certificate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Employees.EmployeeToCreateCredentials)
  return target;
}

int EmployeeToCreateCredentials::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin Login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

    // optional .Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate Certificate = 2;
    if (has_certificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->certificate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmployeeToCreateCredentials::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmployeeToCreateCredentials* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmployeeToCreateCredentials*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmployeeToCreateCredentials::MergeFrom(const EmployeeToCreateCredentials& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      mutable_login()->::Diadoc::Api::Proto::Employees::EmployeeToCreateByLogin::MergeFrom(from.login());
    }
    if (from.has_certificate()) {
      mutable_certificate()->::Diadoc::Api::Proto::Employees::EmployeeToCreateByCertificate::MergeFrom(from.certificate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmployeeToCreateCredentials::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmployeeToCreateCredentials::CopyFrom(const EmployeeToCreateCredentials& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmployeeToCreateCredentials::IsInitialized() const {

  if (has_login()) {
    if (!this->login().IsInitialized()) return false;
  }
  if (has_certificate()) {
    if (!this->certificate().IsInitialized()) return false;
  }
  return true;
}

void EmployeeToCreateCredentials::Swap(EmployeeToCreateCredentials* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(certificate_, other->certificate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmployeeToCreateCredentials::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmployeeToCreateCredentials_descriptor_;
  metadata.reflection = EmployeeToCreateCredentials_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmployeeToCreateByLogin::kLoginFieldNumber;
const int EmployeeToCreateByLogin::kFullNameFieldNumber;
#endif  // !_MSC_VER

EmployeeToCreateByLogin::EmployeeToCreateByLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin)
}

void EmployeeToCreateByLogin::InitAsDefaultInstance() {
  fullname_ = const_cast< ::Diadoc::Api::Proto::FullName*>(&::Diadoc::Api::Proto::FullName::default_instance());
}

EmployeeToCreateByLogin::EmployeeToCreateByLogin(const EmployeeToCreateByLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin)
}

void EmployeeToCreateByLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullname_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmployeeToCreateByLogin::~EmployeeToCreateByLogin() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin)
  SharedDtor();
}

void EmployeeToCreateByLogin::SharedDtor() {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_;
  }
  if (this != default_instance_) {
    delete fullname_;
  }
}

void EmployeeToCreateByLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmployeeToCreateByLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmployeeToCreateByLogin_descriptor_;
}

const EmployeeToCreateByLogin& EmployeeToCreateByLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Employees_2fEmployeeToCreate_2eproto();
  return *default_instance_;
}

EmployeeToCreateByLogin* EmployeeToCreateByLogin::default_instance_ = NULL;

EmployeeToCreateByLogin* EmployeeToCreateByLogin::New() const {
  return new EmployeeToCreateByLogin;
}

void EmployeeToCreateByLogin::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_->clear();
      }
    }
    if (has_fullname()) {
      if (fullname_ != NULL) fullname_->::Diadoc::Api::Proto::FullName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmployeeToCreateByLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Login = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FullName;
        break;
      }

      // optional .Diadoc.Api.Proto.FullName FullName = 2;
      case 2: {
        if (tag == 18) {
         parse_FullName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fullname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin)
  return false;
#undef DO_
}

void EmployeeToCreateByLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin)
  // required string Login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->login(), output);
  }

  // optional .Diadoc.Api.Proto.FullName FullName = 2;
  if (has_fullname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fullname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin)
}

::google::protobuf::uint8* EmployeeToCreateByLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin)
  // required string Login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login(), target);
  }

  // optional .Diadoc.Api.Proto.FullName FullName = 2;
  if (has_fullname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fullname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Employees.EmployeeToCreateByLogin)
  return target;
}

int EmployeeToCreateByLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

    // optional .Diadoc.Api.Proto.FullName FullName = 2;
    if (has_fullname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fullname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmployeeToCreateByLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmployeeToCreateByLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmployeeToCreateByLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmployeeToCreateByLogin::MergeFrom(const EmployeeToCreateByLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_fullname()) {
      mutable_fullname()->::Diadoc::Api::Proto::FullName::MergeFrom(from.fullname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmployeeToCreateByLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmployeeToCreateByLogin::CopyFrom(const EmployeeToCreateByLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmployeeToCreateByLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fullname()) {
    if (!this->fullname().IsInitialized()) return false;
  }
  return true;
}

void EmployeeToCreateByLogin::Swap(EmployeeToCreateByLogin* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(fullname_, other->fullname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmployeeToCreateByLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmployeeToCreateByLogin_descriptor_;
  metadata.reflection = EmployeeToCreateByLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmployeeToCreateByCertificate::kContentFieldNumber;
const int EmployeeToCreateByCertificate::kAccessBasisFieldNumber;
const int EmployeeToCreateByCertificate::kEmailFieldNumber;
#endif  // !_MSC_VER

EmployeeToCreateByCertificate::EmployeeToCreateByCertificate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate)
}

void EmployeeToCreateByCertificate::InitAsDefaultInstance() {
}

EmployeeToCreateByCertificate::EmployeeToCreateByCertificate(const EmployeeToCreateByCertificate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate)
}

void EmployeeToCreateByCertificate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accessbasis_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmployeeToCreateByCertificate::~EmployeeToCreateByCertificate() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate)
  SharedDtor();
}

void EmployeeToCreateByCertificate::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (accessbasis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accessbasis_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void EmployeeToCreateByCertificate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmployeeToCreateByCertificate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmployeeToCreateByCertificate_descriptor_;
}

const EmployeeToCreateByCertificate& EmployeeToCreateByCertificate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Employees_2fEmployeeToCreate_2eproto();
  return *default_instance_;
}

EmployeeToCreateByCertificate* EmployeeToCreateByCertificate::default_instance_ = NULL;

EmployeeToCreateByCertificate* EmployeeToCreateByCertificate::New() const {
  return new EmployeeToCreateByCertificate;
}

void EmployeeToCreateByCertificate::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_accessbasis()) {
      if (accessbasis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accessbasis_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmployeeToCreateByCertificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AccessBasis;
        break;
      }

      // optional string AccessBasis = 2;
      case 2: {
        if (tag == 18) {
         parse_AccessBasis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accessbasis()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accessbasis().data(), this->accessbasis().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accessbasis");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Email;
        break;
      }

      // optional string Email = 3;
      case 3: {
        if (tag == 26) {
         parse_Email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate)
  return false;
#undef DO_
}

void EmployeeToCreateByCertificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate)
  // required bytes Content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  // optional string AccessBasis = 2;
  if (has_accessbasis()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accessbasis().data(), this->accessbasis().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accessbasis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->accessbasis(), output);
  }

  // optional string Email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate)
}

::google::protobuf::uint8* EmployeeToCreateByCertificate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate)
  // required bytes Content = 1;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // optional string AccessBasis = 2;
  if (has_accessbasis()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accessbasis().data(), this->accessbasis().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accessbasis");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accessbasis(), target);
  }

  // optional string Email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Employees.EmployeeToCreateByCertificate)
  return target;
}

int EmployeeToCreateByCertificate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional string AccessBasis = 2;
    if (has_accessbasis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accessbasis());
    }

    // optional string Email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmployeeToCreateByCertificate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmployeeToCreateByCertificate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmployeeToCreateByCertificate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmployeeToCreateByCertificate::MergeFrom(const EmployeeToCreateByCertificate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_accessbasis()) {
      set_accessbasis(from.accessbasis());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmployeeToCreateByCertificate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmployeeToCreateByCertificate::CopyFrom(const EmployeeToCreateByCertificate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmployeeToCreateByCertificate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EmployeeToCreateByCertificate::Swap(EmployeeToCreateByCertificate* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(accessbasis_, other->accessbasis_);
    std::swap(email_, other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmployeeToCreateByCertificate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmployeeToCreateByCertificate_descriptor_;
  metadata.reflection = EmployeeToCreateByCertificate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Employees
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
