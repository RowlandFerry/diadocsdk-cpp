// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrganizationUser.proto

#ifndef PROTOBUF_OrganizationUser_2eproto__INCLUDED
#define PROTOBUF_OrganizationUser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "OrganizationUserPermissions.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OrganizationUser_2eproto();
void protobuf_AssignDesc_OrganizationUser_2eproto();
void protobuf_ShutdownFile_OrganizationUser_2eproto();

class OrganizationUser;
class OrganizationUsersList;

// ===================================================================

class OrganizationUser : public ::google::protobuf::Message {
 public:
  OrganizationUser();
  virtual ~OrganizationUser();

  OrganizationUser(const OrganizationUser& from);

  inline OrganizationUser& operator=(const OrganizationUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrganizationUser& default_instance();

  void Swap(OrganizationUser* other);

  // implements Message ----------------------------------------------

  OrganizationUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrganizationUser& from);
  void MergeFrom(const OrganizationUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .Diadoc.Api.Proto.OrganizationUserPermissions Permissions = 3;
  inline bool has_permissions() const;
  inline void clear_permissions();
  static const int kPermissionsFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::OrganizationUserPermissions& permissions() const;
  inline ::Diadoc::Api::Proto::OrganizationUserPermissions* mutable_permissions();
  inline ::Diadoc::Api::Proto::OrganizationUserPermissions* release_permissions();
  inline void set_allocated_permissions(::Diadoc::Api::Proto::OrganizationUserPermissions* permissions);

  // required string Position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const char* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.OrganizationUser)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_permissions();
  inline void clear_has_permissions();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::Diadoc::Api::Proto::OrganizationUserPermissions* permissions_;
  ::std::string* position_;
  friend void  protobuf_AddDesc_OrganizationUser_2eproto();
  friend void protobuf_AssignDesc_OrganizationUser_2eproto();
  friend void protobuf_ShutdownFile_OrganizationUser_2eproto();

  void InitAsDefaultInstance();
  static OrganizationUser* default_instance_;
};
// -------------------------------------------------------------------

class OrganizationUsersList : public ::google::protobuf::Message {
 public:
  OrganizationUsersList();
  virtual ~OrganizationUsersList();

  OrganizationUsersList(const OrganizationUsersList& from);

  inline OrganizationUsersList& operator=(const OrganizationUsersList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrganizationUsersList& default_instance();

  void Swap(OrganizationUsersList* other);

  // implements Message ----------------------------------------------

  OrganizationUsersList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrganizationUsersList& from);
  void MergeFrom(const OrganizationUsersList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.OrganizationUser Users = 1;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::OrganizationUser& users(int index) const;
  inline ::Diadoc::Api::Proto::OrganizationUser* mutable_users(int index);
  inline ::Diadoc::Api::Proto::OrganizationUser* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::OrganizationUser >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::OrganizationUser >*
      mutable_users();

  // required string CurrentUserId = 2;
  inline bool has_currentuserid() const;
  inline void clear_currentuserid();
  static const int kCurrentUserIdFieldNumber = 2;
  inline const ::std::string& currentuserid() const;
  inline void set_currentuserid(const ::std::string& value);
  inline void set_currentuserid(const char* value);
  inline void set_currentuserid(const char* value, size_t size);
  inline ::std::string* mutable_currentuserid();
  inline ::std::string* release_currentuserid();
  inline void set_allocated_currentuserid(::std::string* currentuserid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.OrganizationUsersList)
 private:
  inline void set_has_currentuserid();
  inline void clear_has_currentuserid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::OrganizationUser > users_;
  ::std::string* currentuserid_;
  friend void  protobuf_AddDesc_OrganizationUser_2eproto();
  friend void protobuf_AssignDesc_OrganizationUser_2eproto();
  friend void protobuf_ShutdownFile_OrganizationUser_2eproto();

  void InitAsDefaultInstance();
  static OrganizationUsersList* default_instance_;
};
// ===================================================================


// ===================================================================

// OrganizationUser

// required string Id = 1;
inline bool OrganizationUser::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrganizationUser::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrganizationUser::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrganizationUser::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& OrganizationUser::id() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationUser.Id)
  return *id_;
}
inline void OrganizationUser::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.OrganizationUser.Id)
}
inline void OrganizationUser::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.OrganizationUser.Id)
}
inline void OrganizationUser::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.OrganizationUser.Id)
}
inline ::std::string* OrganizationUser::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.OrganizationUser.Id)
  return id_;
}
inline ::std::string* OrganizationUser::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OrganizationUser::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.OrganizationUser.Id)
}

// required string Name = 2;
inline bool OrganizationUser::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrganizationUser::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrganizationUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrganizationUser::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OrganizationUser::name() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationUser.Name)
  return *name_;
}
inline void OrganizationUser::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.OrganizationUser.Name)
}
inline void OrganizationUser::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.OrganizationUser.Name)
}
inline void OrganizationUser::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.OrganizationUser.Name)
}
inline ::std::string* OrganizationUser::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.OrganizationUser.Name)
  return name_;
}
inline ::std::string* OrganizationUser::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OrganizationUser::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.OrganizationUser.Name)
}

// required .Diadoc.Api.Proto.OrganizationUserPermissions Permissions = 3;
inline bool OrganizationUser::has_permissions() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrganizationUser::set_has_permissions() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrganizationUser::clear_has_permissions() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrganizationUser::clear_permissions() {
  if (permissions_ != NULL) permissions_->::Diadoc::Api::Proto::OrganizationUserPermissions::Clear();
  clear_has_permissions();
}
inline const ::Diadoc::Api::Proto::OrganizationUserPermissions& OrganizationUser::permissions() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationUser.Permissions)
  return permissions_ != NULL ? *permissions_ : *default_instance_->permissions_;
}
inline ::Diadoc::Api::Proto::OrganizationUserPermissions* OrganizationUser::mutable_permissions() {
  set_has_permissions();
  if (permissions_ == NULL) permissions_ = new ::Diadoc::Api::Proto::OrganizationUserPermissions;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.OrganizationUser.Permissions)
  return permissions_;
}
inline ::Diadoc::Api::Proto::OrganizationUserPermissions* OrganizationUser::release_permissions() {
  clear_has_permissions();
  ::Diadoc::Api::Proto::OrganizationUserPermissions* temp = permissions_;
  permissions_ = NULL;
  return temp;
}
inline void OrganizationUser::set_allocated_permissions(::Diadoc::Api::Proto::OrganizationUserPermissions* permissions) {
  delete permissions_;
  permissions_ = permissions;
  if (permissions) {
    set_has_permissions();
  } else {
    clear_has_permissions();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.OrganizationUser.Permissions)
}

// required string Position = 4;
inline bool OrganizationUser::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrganizationUser::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrganizationUser::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrganizationUser::clear_position() {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& OrganizationUser::position() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationUser.Position)
  return *position_;
}
inline void OrganizationUser::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.OrganizationUser.Position)
}
inline void OrganizationUser::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.OrganizationUser.Position)
}
inline void OrganizationUser::set_position(const char* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.OrganizationUser.Position)
}
inline ::std::string* OrganizationUser::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.OrganizationUser.Position)
  return position_;
}
inline ::std::string* OrganizationUser::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OrganizationUser::set_allocated_position(::std::string* position) {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (position) {
    set_has_position();
    position_ = position;
  } else {
    clear_has_position();
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.OrganizationUser.Position)
}

// -------------------------------------------------------------------

// OrganizationUsersList

// repeated .Diadoc.Api.Proto.OrganizationUser Users = 1;
inline int OrganizationUsersList::users_size() const {
  return users_.size();
}
inline void OrganizationUsersList::clear_users() {
  users_.Clear();
}
inline const ::Diadoc::Api::Proto::OrganizationUser& OrganizationUsersList::users(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationUsersList.Users)
  return users_.Get(index);
}
inline ::Diadoc::Api::Proto::OrganizationUser* OrganizationUsersList::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.OrganizationUsersList.Users)
  return users_.Mutable(index);
}
inline ::Diadoc::Api::Proto::OrganizationUser* OrganizationUsersList::add_users() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.OrganizationUsersList.Users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::OrganizationUser >&
OrganizationUsersList::users() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.OrganizationUsersList.Users)
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::OrganizationUser >*
OrganizationUsersList::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.OrganizationUsersList.Users)
  return &users_;
}

// required string CurrentUserId = 2;
inline bool OrganizationUsersList::has_currentuserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrganizationUsersList::set_has_currentuserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrganizationUsersList::clear_has_currentuserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrganizationUsersList::clear_currentuserid() {
  if (currentuserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currentuserid_->clear();
  }
  clear_has_currentuserid();
}
inline const ::std::string& OrganizationUsersList::currentuserid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationUsersList.CurrentUserId)
  return *currentuserid_;
}
inline void OrganizationUsersList::set_currentuserid(const ::std::string& value) {
  set_has_currentuserid();
  if (currentuserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currentuserid_ = new ::std::string;
  }
  currentuserid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.OrganizationUsersList.CurrentUserId)
}
inline void OrganizationUsersList::set_currentuserid(const char* value) {
  set_has_currentuserid();
  if (currentuserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currentuserid_ = new ::std::string;
  }
  currentuserid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.OrganizationUsersList.CurrentUserId)
}
inline void OrganizationUsersList::set_currentuserid(const char* value, size_t size) {
  set_has_currentuserid();
  if (currentuserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currentuserid_ = new ::std::string;
  }
  currentuserid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.OrganizationUsersList.CurrentUserId)
}
inline ::std::string* OrganizationUsersList::mutable_currentuserid() {
  set_has_currentuserid();
  if (currentuserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currentuserid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.OrganizationUsersList.CurrentUserId)
  return currentuserid_;
}
inline ::std::string* OrganizationUsersList::release_currentuserid() {
  clear_has_currentuserid();
  if (currentuserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = currentuserid_;
    currentuserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OrganizationUsersList::set_allocated_currentuserid(::std::string* currentuserid) {
  if (currentuserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currentuserid_;
  }
  if (currentuserid) {
    set_has_currentuserid();
    currentuserid_ = currentuserid;
  } else {
    clear_has_currentuserid();
    currentuserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.OrganizationUsersList.CurrentUserId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OrganizationUser_2eproto__INCLUDED
