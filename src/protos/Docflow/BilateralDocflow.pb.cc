// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/BilateralDocflow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Docflow/BilateralDocflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

namespace {

const ::google::protobuf::Descriptor* BilateralDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BilateralDocflow_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Docflow_2fBilateralDocflow_2eproto() {
  protobuf_AddDesc_Docflow_2fBilateralDocflow_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Docflow/BilateralDocflow.proto");
  GOOGLE_CHECK(file != NULL);
  BilateralDocflow_descriptor_ = file->message_type(0);
  static const int BilateralDocflow_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocflow, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocflow, receiptdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocflow, recipientsignaturedocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocflow, recipientsignaturerejectiondocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocflow, isreceiptrequested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocflow, isrecipientsignaturerequested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocflow, isdocumentsignedbyrecipient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocflow, isdocumentrejectedbyrecipient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocflow, candocumentbereceipted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocflow, candocumentbesignedbysender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocflow, candocumentbesignedorrejectedbyrecipient_),
  };
  BilateralDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BilateralDocflow_descriptor_,
      BilateralDocflow::default_instance_,
      BilateralDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BilateralDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BilateralDocflow));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Docflow_2fBilateralDocflow_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BilateralDocflow_descriptor_, &BilateralDocflow::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Docflow_2fBilateralDocflow_2eproto() {
  delete BilateralDocflow::default_instance_;
  delete BilateralDocflow_reflection_;
}

void protobuf_AddDesc_Docflow_2fBilateralDocflow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fReceiptDocflow_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fRecipientSignatureDocflow_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fRecipientSignatureRejectionDocflow_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036Docflow/BilateralDocflow.proto\022\030Diadoc"
    ".Api.Proto.Docflow\032\034Docflow/ReceiptDocfl"
    "ow.proto\032\'Docflow/RecipientSignatureDocf"
    "low.proto\0320Docflow/RecipientSignatureRej"
    "ectionDocflow.proto\"\260\004\n\020BilateralDocflow"
    "\022\022\n\nIsFinished\030\001 \001(\010\022@\n\016ReceiptDocflow\030\002"
    " \001(\0132(.Diadoc.Api.Proto.Docflow.ReceiptD"
    "ocflow\022V\n\031RecipientSignatureDocflow\030\003 \001("
    "\01323.Diadoc.Api.Proto.Docflow.RecipientSi"
    "gnatureDocflow\022h\n\"RecipientSignatureReje"
    "ctionDocflow\030\004 \001(\0132<.Diadoc.Api.Proto.Do"
    "cflow.RecipientSignatureRejectionDocflow"
    "\022\032\n\022IsReceiptRequested\030\005 \001(\010\022%\n\035IsRecipi"
    "entSignatureRequested\030\006 \001(\010\022#\n\033IsDocumen"
    "tSignedByRecipient\030\007 \001(\010\022%\n\035IsDocumentRe"
    "jectedByRecipient\030\010 \001(\010\022\036\n\026CanDocumentBe"
    "Receipted\030\t \001(\010\022#\n\033CanDocumentBeSignedBy"
    "Sender\030\n \001(\010\0220\n(CanDocumentBeSignedOrRej"
    "ectedByRecipient\030\013 \001(\010", 742);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Docflow/BilateralDocflow.proto", &protobuf_RegisterTypes);
  BilateralDocflow::default_instance_ = new BilateralDocflow();
  BilateralDocflow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Docflow_2fBilateralDocflow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Docflow_2fBilateralDocflow_2eproto {
  StaticDescriptorInitializer_Docflow_2fBilateralDocflow_2eproto() {
    protobuf_AddDesc_Docflow_2fBilateralDocflow_2eproto();
  }
} static_descriptor_initializer_Docflow_2fBilateralDocflow_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BilateralDocflow::kIsFinishedFieldNumber;
const int BilateralDocflow::kReceiptDocflowFieldNumber;
const int BilateralDocflow::kRecipientSignatureDocflowFieldNumber;
const int BilateralDocflow::kRecipientSignatureRejectionDocflowFieldNumber;
const int BilateralDocflow::kIsReceiptRequestedFieldNumber;
const int BilateralDocflow::kIsRecipientSignatureRequestedFieldNumber;
const int BilateralDocflow::kIsDocumentSignedByRecipientFieldNumber;
const int BilateralDocflow::kIsDocumentRejectedByRecipientFieldNumber;
const int BilateralDocflow::kCanDocumentBeReceiptedFieldNumber;
const int BilateralDocflow::kCanDocumentBeSignedBySenderFieldNumber;
const int BilateralDocflow::kCanDocumentBeSignedOrRejectedByRecipientFieldNumber;
#endif  // !_MSC_VER

BilateralDocflow::BilateralDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.BilateralDocflow)
}

void BilateralDocflow::InitAsDefaultInstance() {
  receiptdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::ReceiptDocflow*>(&::Diadoc::Api::Proto::Docflow::ReceiptDocflow::default_instance());
  recipientsignaturedocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::RecipientSignatureDocflow*>(&::Diadoc::Api::Proto::Docflow::RecipientSignatureDocflow::default_instance());
  recipientsignaturerejectiondocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow*>(&::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow::default_instance());
}

BilateralDocflow::BilateralDocflow(const BilateralDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.BilateralDocflow)
}

void BilateralDocflow::SharedCtor() {
  _cached_size_ = 0;
  isfinished_ = false;
  receiptdocflow_ = NULL;
  recipientsignaturedocflow_ = NULL;
  recipientsignaturerejectiondocflow_ = NULL;
  isreceiptrequested_ = false;
  isrecipientsignaturerequested_ = false;
  isdocumentsignedbyrecipient_ = false;
  isdocumentrejectedbyrecipient_ = false;
  candocumentbereceipted_ = false;
  candocumentbesignedbysender_ = false;
  candocumentbesignedorrejectedbyrecipient_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BilateralDocflow::~BilateralDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.BilateralDocflow)
  SharedDtor();
}

void BilateralDocflow::SharedDtor() {
  if (this != default_instance_) {
    delete receiptdocflow_;
    delete recipientsignaturedocflow_;
    delete recipientsignaturerejectiondocflow_;
  }
}

void BilateralDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BilateralDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BilateralDocflow_descriptor_;
}

const BilateralDocflow& BilateralDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fBilateralDocflow_2eproto();
  return *default_instance_;
}

BilateralDocflow* BilateralDocflow::default_instance_ = NULL;

BilateralDocflow* BilateralDocflow::New() const {
  return new BilateralDocflow;
}

void BilateralDocflow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BilateralDocflow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(isfinished_, isdocumentrejectedbyrecipient_);
    if (has_receiptdocflow()) {
      if (receiptdocflow_ != NULL) receiptdocflow_->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::Clear();
    }
    if (has_recipientsignaturedocflow()) {
      if (recipientsignaturedocflow_ != NULL) recipientsignaturedocflow_->::Diadoc::Api::Proto::Docflow::RecipientSignatureDocflow::Clear();
    }
    if (has_recipientsignaturerejectiondocflow()) {
      if (recipientsignaturerejectiondocflow_ != NULL) recipientsignaturerejectiondocflow_->::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow::Clear();
    }
  }
  ZR_(candocumentbereceipted_, candocumentbesignedorrejectedbyrecipient_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BilateralDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.BilateralDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ReceiptDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
      case 2: {
        if (tag == 18) {
         parse_ReceiptDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiptdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RecipientSignatureDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureDocflow RecipientSignatureDocflow = 3;
      case 3: {
        if (tag == 26) {
         parse_RecipientSignatureDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recipientsignaturedocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RecipientSignatureRejectionDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 4;
      case 4: {
        if (tag == 34) {
         parse_RecipientSignatureRejectionDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recipientsignaturerejectiondocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsReceiptRequested;
        break;
      }

      // optional bool IsReceiptRequested = 5;
      case 5: {
        if (tag == 40) {
         parse_IsReceiptRequested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreceiptrequested_)));
          set_has_isreceiptrequested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsRecipientSignatureRequested;
        break;
      }

      // optional bool IsRecipientSignatureRequested = 6;
      case 6: {
        if (tag == 48) {
         parse_IsRecipientSignatureRequested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecipientsignaturerequested_)));
          set_has_isrecipientsignaturerequested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_IsDocumentSignedByRecipient;
        break;
      }

      // optional bool IsDocumentSignedByRecipient = 7;
      case 7: {
        if (tag == 56) {
         parse_IsDocumentSignedByRecipient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdocumentsignedbyrecipient_)));
          set_has_isdocumentsignedbyrecipient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_IsDocumentRejectedByRecipient;
        break;
      }

      // optional bool IsDocumentRejectedByRecipient = 8;
      case 8: {
        if (tag == 64) {
         parse_IsDocumentRejectedByRecipient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdocumentrejectedbyrecipient_)));
          set_has_isdocumentrejectedbyrecipient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_CanDocumentBeReceipted;
        break;
      }

      // optional bool CanDocumentBeReceipted = 9;
      case 9: {
        if (tag == 72) {
         parse_CanDocumentBeReceipted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &candocumentbereceipted_)));
          set_has_candocumentbereceipted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_CanDocumentBeSignedBySender;
        break;
      }

      // optional bool CanDocumentBeSignedBySender = 10;
      case 10: {
        if (tag == 80) {
         parse_CanDocumentBeSignedBySender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &candocumentbesignedbysender_)));
          set_has_candocumentbesignedbysender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_CanDocumentBeSignedOrRejectedByRecipient;
        break;
      }

      // optional bool CanDocumentBeSignedOrRejectedByRecipient = 11;
      case 11: {
        if (tag == 88) {
         parse_CanDocumentBeSignedOrRejectedByRecipient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &candocumentbesignedorrejectedbyrecipient_)));
          set_has_candocumentbesignedorrejectedbyrecipient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.BilateralDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.BilateralDocflow)
  return false;
#undef DO_
}

void BilateralDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.BilateralDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
  if (has_receiptdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->receiptdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureDocflow RecipientSignatureDocflow = 3;
  if (has_recipientsignaturedocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->recipientsignaturedocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 4;
  if (has_recipientsignaturerejectiondocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recipientsignaturerejectiondocflow(), output);
  }

  // optional bool IsReceiptRequested = 5;
  if (has_isreceiptrequested()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isreceiptrequested(), output);
  }

  // optional bool IsRecipientSignatureRequested = 6;
  if (has_isrecipientsignaturerequested()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isrecipientsignaturerequested(), output);
  }

  // optional bool IsDocumentSignedByRecipient = 7;
  if (has_isdocumentsignedbyrecipient()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isdocumentsignedbyrecipient(), output);
  }

  // optional bool IsDocumentRejectedByRecipient = 8;
  if (has_isdocumentrejectedbyrecipient()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isdocumentrejectedbyrecipient(), output);
  }

  // optional bool CanDocumentBeReceipted = 9;
  if (has_candocumentbereceipted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->candocumentbereceipted(), output);
  }

  // optional bool CanDocumentBeSignedBySender = 10;
  if (has_candocumentbesignedbysender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->candocumentbesignedbysender(), output);
  }

  // optional bool CanDocumentBeSignedOrRejectedByRecipient = 11;
  if (has_candocumentbesignedorrejectedbyrecipient()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->candocumentbesignedorrejectedbyrecipient(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.BilateralDocflow)
}

::google::protobuf::uint8* BilateralDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.BilateralDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
  if (has_receiptdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->receiptdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureDocflow RecipientSignatureDocflow = 3;
  if (has_recipientsignaturedocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->recipientsignaturedocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 4;
  if (has_recipientsignaturerejectiondocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recipientsignaturerejectiondocflow(), target);
  }

  // optional bool IsReceiptRequested = 5;
  if (has_isreceiptrequested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isreceiptrequested(), target);
  }

  // optional bool IsRecipientSignatureRequested = 6;
  if (has_isrecipientsignaturerequested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isrecipientsignaturerequested(), target);
  }

  // optional bool IsDocumentSignedByRecipient = 7;
  if (has_isdocumentsignedbyrecipient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isdocumentsignedbyrecipient(), target);
  }

  // optional bool IsDocumentRejectedByRecipient = 8;
  if (has_isdocumentrejectedbyrecipient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isdocumentrejectedbyrecipient(), target);
  }

  // optional bool CanDocumentBeReceipted = 9;
  if (has_candocumentbereceipted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->candocumentbereceipted(), target);
  }

  // optional bool CanDocumentBeSignedBySender = 10;
  if (has_candocumentbesignedbysender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->candocumentbesignedbysender(), target);
  }

  // optional bool CanDocumentBeSignedOrRejectedByRecipient = 11;
  if (has_candocumentbesignedorrejectedbyrecipient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->candocumentbesignedorrejectedbyrecipient(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.BilateralDocflow)
  return target;
}

int BilateralDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
    if (has_receiptdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiptdocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureDocflow RecipientSignatureDocflow = 3;
    if (has_recipientsignaturedocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recipientsignaturedocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 4;
    if (has_recipientsignaturerejectiondocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recipientsignaturerejectiondocflow());
    }

    // optional bool IsReceiptRequested = 5;
    if (has_isreceiptrequested()) {
      total_size += 1 + 1;
    }

    // optional bool IsRecipientSignatureRequested = 6;
    if (has_isrecipientsignaturerequested()) {
      total_size += 1 + 1;
    }

    // optional bool IsDocumentSignedByRecipient = 7;
    if (has_isdocumentsignedbyrecipient()) {
      total_size += 1 + 1;
    }

    // optional bool IsDocumentRejectedByRecipient = 8;
    if (has_isdocumentrejectedbyrecipient()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool CanDocumentBeReceipted = 9;
    if (has_candocumentbereceipted()) {
      total_size += 1 + 1;
    }

    // optional bool CanDocumentBeSignedBySender = 10;
    if (has_candocumentbesignedbysender()) {
      total_size += 1 + 1;
    }

    // optional bool CanDocumentBeSignedOrRejectedByRecipient = 11;
    if (has_candocumentbesignedorrejectedbyrecipient()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BilateralDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BilateralDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BilateralDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BilateralDocflow::MergeFrom(const BilateralDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_receiptdocflow()) {
      mutable_receiptdocflow()->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::MergeFrom(from.receiptdocflow());
    }
    if (from.has_recipientsignaturedocflow()) {
      mutable_recipientsignaturedocflow()->::Diadoc::Api::Proto::Docflow::RecipientSignatureDocflow::MergeFrom(from.recipientsignaturedocflow());
    }
    if (from.has_recipientsignaturerejectiondocflow()) {
      mutable_recipientsignaturerejectiondocflow()->::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow::MergeFrom(from.recipientsignaturerejectiondocflow());
    }
    if (from.has_isreceiptrequested()) {
      set_isreceiptrequested(from.isreceiptrequested());
    }
    if (from.has_isrecipientsignaturerequested()) {
      set_isrecipientsignaturerequested(from.isrecipientsignaturerequested());
    }
    if (from.has_isdocumentsignedbyrecipient()) {
      set_isdocumentsignedbyrecipient(from.isdocumentsignedbyrecipient());
    }
    if (from.has_isdocumentrejectedbyrecipient()) {
      set_isdocumentrejectedbyrecipient(from.isdocumentrejectedbyrecipient());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_candocumentbereceipted()) {
      set_candocumentbereceipted(from.candocumentbereceipted());
    }
    if (from.has_candocumentbesignedbysender()) {
      set_candocumentbesignedbysender(from.candocumentbesignedbysender());
    }
    if (from.has_candocumentbesignedorrejectedbyrecipient()) {
      set_candocumentbesignedorrejectedbyrecipient(from.candocumentbesignedorrejectedbyrecipient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BilateralDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BilateralDocflow::CopyFrom(const BilateralDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BilateralDocflow::IsInitialized() const {

  if (has_receiptdocflow()) {
    if (!this->receiptdocflow().IsInitialized()) return false;
  }
  if (has_recipientsignaturedocflow()) {
    if (!this->recipientsignaturedocflow().IsInitialized()) return false;
  }
  if (has_recipientsignaturerejectiondocflow()) {
    if (!this->recipientsignaturerejectiondocflow().IsInitialized()) return false;
  }
  return true;
}

void BilateralDocflow::Swap(BilateralDocflow* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(receiptdocflow_, other->receiptdocflow_);
    std::swap(recipientsignaturedocflow_, other->recipientsignaturedocflow_);
    std::swap(recipientsignaturerejectiondocflow_, other->recipientsignaturerejectiondocflow_);
    std::swap(isreceiptrequested_, other->isreceiptrequested_);
    std::swap(isrecipientsignaturerequested_, other->isrecipientsignaturerequested_);
    std::swap(isdocumentsignedbyrecipient_, other->isdocumentsignedbyrecipient_);
    std::swap(isdocumentrejectedbyrecipient_, other->isdocumentrejectedbyrecipient_);
    std::swap(candocumentbereceipted_, other->candocumentbereceipted_);
    std::swap(candocumentbesignedbysender_, other->candocumentbesignedbysender_);
    std::swap(candocumentbesignedorrejectedbyrecipient_, other->candocumentbesignedorrejectedbyrecipient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BilateralDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BilateralDocflow_descriptor_;
  metadata.reflection = BilateralDocflow_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
