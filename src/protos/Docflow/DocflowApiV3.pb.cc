// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/DocflowApiV3.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Docflow/DocflowApiV3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

namespace {

const ::google::protobuf::Descriptor* GetDocflowBatchResponseV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDocflowBatchResponseV3_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchDocflowsResponseV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchDocflowsResponseV3_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchedDocumentV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchedDocumentV3_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDocflowsByPacketIdResponseV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDocflowsByPacketIdResponseV3_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDocflowEventsResponseV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDocflowEventsResponseV3_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocflowEventV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocflowEventV3_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Docflow_2fDocflowApiV3_2eproto() {
  protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Docflow/DocflowApiV3.proto");
  GOOGLE_CHECK(file != NULL);
  GetDocflowBatchResponseV3_descriptor_ = file->message_type(0);
  static const int GetDocflowBatchResponseV3_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowBatchResponseV3, documents_),
  };
  GetDocflowBatchResponseV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDocflowBatchResponseV3_descriptor_,
      GetDocflowBatchResponseV3::default_instance_,
      GetDocflowBatchResponseV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowBatchResponseV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowBatchResponseV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDocflowBatchResponseV3));
  SearchDocflowsResponseV3_descriptor_ = file->message_type(1);
  static const int SearchDocflowsResponseV3_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDocflowsResponseV3, documents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDocflowsResponseV3, havemoredocuments_),
  };
  SearchDocflowsResponseV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchDocflowsResponseV3_descriptor_,
      SearchDocflowsResponseV3::default_instance_,
      SearchDocflowsResponseV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDocflowsResponseV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDocflowsResponseV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchDocflowsResponseV3));
  FetchedDocumentV3_descriptor_ = file->message_type(2);
  static const int FetchedDocumentV3_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchedDocumentV3, document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchedDocumentV3, indexkey_),
  };
  FetchedDocumentV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchedDocumentV3_descriptor_,
      FetchedDocumentV3::default_instance_,
      FetchedDocumentV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchedDocumentV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchedDocumentV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchedDocumentV3));
  GetDocflowsByPacketIdResponseV3_descriptor_ = file->message_type(3);
  static const int GetDocflowsByPacketIdResponseV3_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowsByPacketIdResponseV3, documents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowsByPacketIdResponseV3, nextpageindexkey_),
  };
  GetDocflowsByPacketIdResponseV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDocflowsByPacketIdResponseV3_descriptor_,
      GetDocflowsByPacketIdResponseV3::default_instance_,
      GetDocflowsByPacketIdResponseV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowsByPacketIdResponseV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowsByPacketIdResponseV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDocflowsByPacketIdResponseV3));
  GetDocflowEventsResponseV3_descriptor_ = file->message_type(4);
  static const int GetDocflowEventsResponseV3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsResponseV3, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsResponseV3, events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsResponseV3, totalcounttype_),
  };
  GetDocflowEventsResponseV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDocflowEventsResponseV3_descriptor_,
      GetDocflowEventsResponseV3::default_instance_,
      GetDocflowEventsResponseV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsResponseV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsResponseV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDocflowEventsResponseV3));
  DocflowEventV3_descriptor_ = file->message_type(5);
  static const int DocflowEventV3_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEventV3, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEventV3, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEventV3, documentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEventV3, indexkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEventV3, document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEventV3, previouseventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEventV3, previousdocumentstate_),
  };
  DocflowEventV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocflowEventV3_descriptor_,
      DocflowEventV3::default_instance_,
      DocflowEventV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEventV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEventV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocflowEventV3));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Docflow_2fDocflowApiV3_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDocflowBatchResponseV3_descriptor_, &GetDocflowBatchResponseV3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchDocflowsResponseV3_descriptor_, &SearchDocflowsResponseV3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchedDocumentV3_descriptor_, &FetchedDocumentV3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDocflowsByPacketIdResponseV3_descriptor_, &GetDocflowsByPacketIdResponseV3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDocflowEventsResponseV3_descriptor_, &GetDocflowEventsResponseV3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocflowEventV3_descriptor_, &DocflowEventV3::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Docflow_2fDocflowApiV3_2eproto() {
  delete GetDocflowBatchResponseV3::default_instance_;
  delete GetDocflowBatchResponseV3_reflection_;
  delete SearchDocflowsResponseV3::default_instance_;
  delete SearchDocflowsResponseV3_reflection_;
  delete FetchedDocumentV3::default_instance_;
  delete FetchedDocumentV3_reflection_;
  delete GetDocflowsByPacketIdResponseV3::default_instance_;
  delete GetDocflowsByPacketIdResponseV3_reflection_;
  delete GetDocflowEventsResponseV3::default_instance_;
  delete GetDocflowEventsResponseV3_reflection_;
  delete DocflowEventV3::default_instance_;
  delete DocflowEventV3_reflection_;
}

void protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_DocumentId_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_TotalCountType_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fDocumentWithDocflowV3_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032Docflow/DocflowApiV3.proto\022\030Diadoc.Api"
    ".Proto.Docflow\032\017Timestamp.proto\032\020Documen"
    "tId.proto\032\024TotalCountType.proto\032#Docflow"
    "/DocumentWithDocflowV3.proto\"_\n\031GetDocfl"
    "owBatchResponseV3\022B\n\tDocuments\030\001 \003(\0132/.D"
    "iadoc.Api.Proto.Docflow.DocumentWithDocf"
    "lowV3\"y\n\030SearchDocflowsResponseV3\022B\n\tDoc"
    "uments\030\001 \003(\0132/.Diadoc.Api.Proto.Docflow."
    "DocumentWithDocflowV3\022\031\n\021HaveMoreDocumen"
    "ts\030\002 \002(\010\"h\n\021FetchedDocumentV3\022A\n\010Documen"
    "t\030\001 \002(\0132/.Diadoc.Api.Proto.Docflow.Docum"
    "entWithDocflowV3\022\020\n\010IndexKey\030\002 \002(\014\"{\n\037Ge"
    "tDocflowsByPacketIdResponseV3\022>\n\tDocumen"
    "ts\030\001 \003(\0132+.Diadoc.Api.Proto.Docflow.Fetc"
    "hedDocumentV3\022\030\n\020NextPageIndexKey\030\002 \001(\014\""
    "\244\001\n\032GetDocflowEventsResponseV3\022\022\n\nTotalC"
    "ount\030\001 \002(\005\0228\n\006Events\030\002 \003(\0132(.Diadoc.Api."
    "Proto.Docflow.DocflowEventV3\0228\n\016TotalCou"
    "ntType\030\003 \002(\0162 .Diadoc.Api.Proto.TotalCou"
    "ntType\"\301\002\n\016DocflowEventV3\022\017\n\007EventId\030\001 \002"
    "(\t\022.\n\tTimestamp\030\002 \002(\0132\033.Diadoc.Api.Proto"
    ".Timestamp\0220\n\nDocumentId\030\003 \002(\0132\034.Diadoc."
    "Api.Proto.DocumentId\022\020\n\010IndexKey\030\004 \002(\014\022A"
    "\n\010Document\030\005 \001(\0132/.Diadoc.Api.Proto.Docf"
    "low.DocumentWithDocflowV3\022\027\n\017PreviousEve"
    "ntId\030\006 \001(\t\022N\n\025PreviousDocumentState\030\007 \001("
    "\0132/.Diadoc.Api.Proto.Docflow.DocumentWit"
    "hDocflowV3", 1090);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Docflow/DocflowApiV3.proto", &protobuf_RegisterTypes);
  GetDocflowBatchResponseV3::default_instance_ = new GetDocflowBatchResponseV3();
  SearchDocflowsResponseV3::default_instance_ = new SearchDocflowsResponseV3();
  FetchedDocumentV3::default_instance_ = new FetchedDocumentV3();
  GetDocflowsByPacketIdResponseV3::default_instance_ = new GetDocflowsByPacketIdResponseV3();
  GetDocflowEventsResponseV3::default_instance_ = new GetDocflowEventsResponseV3();
  DocflowEventV3::default_instance_ = new DocflowEventV3();
  GetDocflowBatchResponseV3::default_instance_->InitAsDefaultInstance();
  SearchDocflowsResponseV3::default_instance_->InitAsDefaultInstance();
  FetchedDocumentV3::default_instance_->InitAsDefaultInstance();
  GetDocflowsByPacketIdResponseV3::default_instance_->InitAsDefaultInstance();
  GetDocflowEventsResponseV3::default_instance_->InitAsDefaultInstance();
  DocflowEventV3::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Docflow_2fDocflowApiV3_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Docflow_2fDocflowApiV3_2eproto {
  StaticDescriptorInitializer_Docflow_2fDocflowApiV3_2eproto() {
    protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto();
  }
} static_descriptor_initializer_Docflow_2fDocflowApiV3_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GetDocflowBatchResponseV3::kDocumentsFieldNumber;
#endif  // !_MSC_VER

GetDocflowBatchResponseV3::GetDocflowBatchResponseV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3)
}

void GetDocflowBatchResponseV3::InitAsDefaultInstance() {
}

GetDocflowBatchResponseV3::GetDocflowBatchResponseV3(const GetDocflowBatchResponseV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3)
}

void GetDocflowBatchResponseV3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDocflowBatchResponseV3::~GetDocflowBatchResponseV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3)
  SharedDtor();
}

void GetDocflowBatchResponseV3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDocflowBatchResponseV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDocflowBatchResponseV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDocflowBatchResponseV3_descriptor_;
}

const GetDocflowBatchResponseV3& GetDocflowBatchResponseV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto();
  return *default_instance_;
}

GetDocflowBatchResponseV3* GetDocflowBatchResponseV3::default_instance_ = NULL;

GetDocflowBatchResponseV3* GetDocflowBatchResponseV3::New() const {
  return new GetDocflowBatchResponseV3;
}

void GetDocflowBatchResponseV3::Clear() {
  documents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDocflowBatchResponseV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Documents = 1;
      case 1: {
        if (tag == 10) {
         parse_Documents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Documents;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3)
  return false;
#undef DO_
}

void GetDocflowBatchResponseV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3)
  // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Documents = 1;
  for (int i = 0; i < this->documents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3)
}

::google::protobuf::uint8* GetDocflowBatchResponseV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3)
  // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Documents = 1;
  for (int i = 0; i < this->documents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3)
  return target;
}

int GetDocflowBatchResponseV3::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Documents = 1;
  total_size += 1 * this->documents_size();
  for (int i = 0; i < this->documents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDocflowBatchResponseV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDocflowBatchResponseV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDocflowBatchResponseV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDocflowBatchResponseV3::MergeFrom(const GetDocflowBatchResponseV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  documents_.MergeFrom(from.documents_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDocflowBatchResponseV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDocflowBatchResponseV3::CopyFrom(const GetDocflowBatchResponseV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocflowBatchResponseV3::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->documents())) return false;
  return true;
}

void GetDocflowBatchResponseV3::Swap(GetDocflowBatchResponseV3* other) {
  if (other != this) {
    documents_.Swap(&other->documents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDocflowBatchResponseV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDocflowBatchResponseV3_descriptor_;
  metadata.reflection = GetDocflowBatchResponseV3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchDocflowsResponseV3::kDocumentsFieldNumber;
const int SearchDocflowsResponseV3::kHaveMoreDocumentsFieldNumber;
#endif  // !_MSC_VER

SearchDocflowsResponseV3::SearchDocflowsResponseV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3)
}

void SearchDocflowsResponseV3::InitAsDefaultInstance() {
}

SearchDocflowsResponseV3::SearchDocflowsResponseV3(const SearchDocflowsResponseV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3)
}

void SearchDocflowsResponseV3::SharedCtor() {
  _cached_size_ = 0;
  havemoredocuments_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchDocflowsResponseV3::~SearchDocflowsResponseV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3)
  SharedDtor();
}

void SearchDocflowsResponseV3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchDocflowsResponseV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchDocflowsResponseV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchDocflowsResponseV3_descriptor_;
}

const SearchDocflowsResponseV3& SearchDocflowsResponseV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto();
  return *default_instance_;
}

SearchDocflowsResponseV3* SearchDocflowsResponseV3::default_instance_ = NULL;

SearchDocflowsResponseV3* SearchDocflowsResponseV3::New() const {
  return new SearchDocflowsResponseV3;
}

void SearchDocflowsResponseV3::Clear() {
  havemoredocuments_ = false;
  documents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchDocflowsResponseV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Documents = 1;
      case 1: {
        if (tag == 10) {
         parse_Documents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Documents;
        if (input->ExpectTag(16)) goto parse_HaveMoreDocuments;
        break;
      }

      // required bool HaveMoreDocuments = 2;
      case 2: {
        if (tag == 16) {
         parse_HaveMoreDocuments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &havemoredocuments_)));
          set_has_havemoredocuments();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3)
  return false;
#undef DO_
}

void SearchDocflowsResponseV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3)
  // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Documents = 1;
  for (int i = 0; i < this->documents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documents(i), output);
  }

  // required bool HaveMoreDocuments = 2;
  if (has_havemoredocuments()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->havemoredocuments(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3)
}

::google::protobuf::uint8* SearchDocflowsResponseV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3)
  // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Documents = 1;
  for (int i = 0; i < this->documents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documents(i), target);
  }

  // required bool HaveMoreDocuments = 2;
  if (has_havemoredocuments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->havemoredocuments(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3)
  return target;
}

int SearchDocflowsResponseV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool HaveMoreDocuments = 2;
    if (has_havemoredocuments()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Documents = 1;
  total_size += 1 * this->documents_size();
  for (int i = 0; i < this->documents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchDocflowsResponseV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchDocflowsResponseV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchDocflowsResponseV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchDocflowsResponseV3::MergeFrom(const SearchDocflowsResponseV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  documents_.MergeFrom(from.documents_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_havemoredocuments()) {
      set_havemoredocuments(from.havemoredocuments());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchDocflowsResponseV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchDocflowsResponseV3::CopyFrom(const SearchDocflowsResponseV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchDocflowsResponseV3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->documents())) return false;
  return true;
}

void SearchDocflowsResponseV3::Swap(SearchDocflowsResponseV3* other) {
  if (other != this) {
    documents_.Swap(&other->documents_);
    std::swap(havemoredocuments_, other->havemoredocuments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchDocflowsResponseV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchDocflowsResponseV3_descriptor_;
  metadata.reflection = SearchDocflowsResponseV3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FetchedDocumentV3::kDocumentFieldNumber;
const int FetchedDocumentV3::kIndexKeyFieldNumber;
#endif  // !_MSC_VER

FetchedDocumentV3::FetchedDocumentV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.FetchedDocumentV3)
}

void FetchedDocumentV3::InitAsDefaultInstance() {
  document_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3*>(&::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3::default_instance());
}

FetchedDocumentV3::FetchedDocumentV3(const FetchedDocumentV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.FetchedDocumentV3)
}

void FetchedDocumentV3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  document_ = NULL;
  indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchedDocumentV3::~FetchedDocumentV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.FetchedDocumentV3)
  SharedDtor();
}

void FetchedDocumentV3::SharedDtor() {
  if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete indexkey_;
  }
  if (this != default_instance_) {
    delete document_;
  }
}

void FetchedDocumentV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchedDocumentV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchedDocumentV3_descriptor_;
}

const FetchedDocumentV3& FetchedDocumentV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto();
  return *default_instance_;
}

FetchedDocumentV3* FetchedDocumentV3::default_instance_ = NULL;

FetchedDocumentV3* FetchedDocumentV3::New() const {
  return new FetchedDocumentV3;
}

void FetchedDocumentV3::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_document()) {
      if (document_ != NULL) document_->::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3::Clear();
    }
    if (has_indexkey()) {
      if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        indexkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchedDocumentV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.FetchedDocumentV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Document = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_IndexKey;
        break;
      }

      // required bytes IndexKey = 2;
      case 2: {
        if (tag == 18) {
         parse_IndexKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_indexkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.FetchedDocumentV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.FetchedDocumentV3)
  return false;
#undef DO_
}

void FetchedDocumentV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.FetchedDocumentV3)
  // required .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Document = 1;
  if (has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->document(), output);
  }

  // required bytes IndexKey = 2;
  if (has_indexkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->indexkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.FetchedDocumentV3)
}

::google::protobuf::uint8* FetchedDocumentV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.FetchedDocumentV3)
  // required .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Document = 1;
  if (has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->document(), target);
  }

  // required bytes IndexKey = 2;
  if (has_indexkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->indexkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.FetchedDocumentV3)
  return target;
}

int FetchedDocumentV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Document = 1;
    if (has_document()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->document());
    }

    // required bytes IndexKey = 2;
    if (has_indexkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->indexkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchedDocumentV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchedDocumentV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchedDocumentV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchedDocumentV3::MergeFrom(const FetchedDocumentV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_document()) {
      mutable_document()->::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3::MergeFrom(from.document());
    }
    if (from.has_indexkey()) {
      set_indexkey(from.indexkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchedDocumentV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchedDocumentV3::CopyFrom(const FetchedDocumentV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchedDocumentV3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_document()) {
    if (!this->document().IsInitialized()) return false;
  }
  return true;
}

void FetchedDocumentV3::Swap(FetchedDocumentV3* other) {
  if (other != this) {
    std::swap(document_, other->document_);
    std::swap(indexkey_, other->indexkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchedDocumentV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchedDocumentV3_descriptor_;
  metadata.reflection = FetchedDocumentV3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDocflowsByPacketIdResponseV3::kDocumentsFieldNumber;
const int GetDocflowsByPacketIdResponseV3::kNextPageIndexKeyFieldNumber;
#endif  // !_MSC_VER

GetDocflowsByPacketIdResponseV3::GetDocflowsByPacketIdResponseV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3)
}

void GetDocflowsByPacketIdResponseV3::InitAsDefaultInstance() {
}

GetDocflowsByPacketIdResponseV3::GetDocflowsByPacketIdResponseV3(const GetDocflowsByPacketIdResponseV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3)
}

void GetDocflowsByPacketIdResponseV3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nextpageindexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDocflowsByPacketIdResponseV3::~GetDocflowsByPacketIdResponseV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3)
  SharedDtor();
}

void GetDocflowsByPacketIdResponseV3::SharedDtor() {
  if (nextpageindexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nextpageindexkey_;
  }
  if (this != default_instance_) {
  }
}

void GetDocflowsByPacketIdResponseV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDocflowsByPacketIdResponseV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDocflowsByPacketIdResponseV3_descriptor_;
}

const GetDocflowsByPacketIdResponseV3& GetDocflowsByPacketIdResponseV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto();
  return *default_instance_;
}

GetDocflowsByPacketIdResponseV3* GetDocflowsByPacketIdResponseV3::default_instance_ = NULL;

GetDocflowsByPacketIdResponseV3* GetDocflowsByPacketIdResponseV3::New() const {
  return new GetDocflowsByPacketIdResponseV3;
}

void GetDocflowsByPacketIdResponseV3::Clear() {
  if (has_nextpageindexkey()) {
    if (nextpageindexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      nextpageindexkey_->clear();
    }
  }
  documents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDocflowsByPacketIdResponseV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Docflow.FetchedDocumentV3 Documents = 1;
      case 1: {
        if (tag == 10) {
         parse_Documents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Documents;
        if (input->ExpectTag(18)) goto parse_NextPageIndexKey;
        break;
      }

      // optional bytes NextPageIndexKey = 2;
      case 2: {
        if (tag == 18) {
         parse_NextPageIndexKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nextpageindexkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3)
  return false;
#undef DO_
}

void GetDocflowsByPacketIdResponseV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3)
  // repeated .Diadoc.Api.Proto.Docflow.FetchedDocumentV3 Documents = 1;
  for (int i = 0; i < this->documents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documents(i), output);
  }

  // optional bytes NextPageIndexKey = 2;
  if (has_nextpageindexkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nextpageindexkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3)
}

::google::protobuf::uint8* GetDocflowsByPacketIdResponseV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3)
  // repeated .Diadoc.Api.Proto.Docflow.FetchedDocumentV3 Documents = 1;
  for (int i = 0; i < this->documents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documents(i), target);
  }

  // optional bytes NextPageIndexKey = 2;
  if (has_nextpageindexkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nextpageindexkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3)
  return target;
}

int GetDocflowsByPacketIdResponseV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes NextPageIndexKey = 2;
    if (has_nextpageindexkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nextpageindexkey());
    }

  }
  // repeated .Diadoc.Api.Proto.Docflow.FetchedDocumentV3 Documents = 1;
  total_size += 1 * this->documents_size();
  for (int i = 0; i < this->documents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDocflowsByPacketIdResponseV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDocflowsByPacketIdResponseV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDocflowsByPacketIdResponseV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDocflowsByPacketIdResponseV3::MergeFrom(const GetDocflowsByPacketIdResponseV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  documents_.MergeFrom(from.documents_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_nextpageindexkey()) {
      set_nextpageindexkey(from.nextpageindexkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDocflowsByPacketIdResponseV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDocflowsByPacketIdResponseV3::CopyFrom(const GetDocflowsByPacketIdResponseV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocflowsByPacketIdResponseV3::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->documents())) return false;
  return true;
}

void GetDocflowsByPacketIdResponseV3::Swap(GetDocflowsByPacketIdResponseV3* other) {
  if (other != this) {
    documents_.Swap(&other->documents_);
    std::swap(nextpageindexkey_, other->nextpageindexkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDocflowsByPacketIdResponseV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDocflowsByPacketIdResponseV3_descriptor_;
  metadata.reflection = GetDocflowsByPacketIdResponseV3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDocflowEventsResponseV3::kTotalCountFieldNumber;
const int GetDocflowEventsResponseV3::kEventsFieldNumber;
const int GetDocflowEventsResponseV3::kTotalCountTypeFieldNumber;
#endif  // !_MSC_VER

GetDocflowEventsResponseV3::GetDocflowEventsResponseV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3)
}

void GetDocflowEventsResponseV3::InitAsDefaultInstance() {
}

GetDocflowEventsResponseV3::GetDocflowEventsResponseV3(const GetDocflowEventsResponseV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3)
}

void GetDocflowEventsResponseV3::SharedCtor() {
  _cached_size_ = 0;
  totalcount_ = 0;
  totalcounttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDocflowEventsResponseV3::~GetDocflowEventsResponseV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3)
  SharedDtor();
}

void GetDocflowEventsResponseV3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDocflowEventsResponseV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDocflowEventsResponseV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDocflowEventsResponseV3_descriptor_;
}

const GetDocflowEventsResponseV3& GetDocflowEventsResponseV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto();
  return *default_instance_;
}

GetDocflowEventsResponseV3* GetDocflowEventsResponseV3::default_instance_ = NULL;

GetDocflowEventsResponseV3* GetDocflowEventsResponseV3::New() const {
  return new GetDocflowEventsResponseV3;
}

void GetDocflowEventsResponseV3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetDocflowEventsResponseV3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(totalcount_, totalcounttype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDocflowEventsResponseV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 TotalCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Events;
        break;
      }

      // repeated .Diadoc.Api.Proto.Docflow.DocflowEventV3 Events = 2;
      case 2: {
        if (tag == 18) {
         parse_Events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Events;
        if (input->ExpectTag(24)) goto parse_TotalCountType;
        break;
      }

      // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
      case 3: {
        if (tag == 24) {
         parse_TotalCountType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::TotalCountType_IsValid(value)) {
            set_totalcounttype(static_cast< ::Diadoc::Api::Proto::TotalCountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3)
  return false;
#undef DO_
}

void GetDocflowEventsResponseV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3)
  // required int32 TotalCount = 1;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalcount(), output);
  }

  // repeated .Diadoc.Api.Proto.Docflow.DocflowEventV3 Events = 2;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->events(i), output);
  }

  // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
  if (has_totalcounttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->totalcounttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3)
}

::google::protobuf::uint8* GetDocflowEventsResponseV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3)
  // required int32 TotalCount = 1;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalcount(), target);
  }

  // repeated .Diadoc.Api.Proto.Docflow.DocflowEventV3 Events = 2;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->events(i), target);
  }

  // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
  if (has_totalcounttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->totalcounttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3)
  return target;
}

int GetDocflowEventsResponseV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 TotalCount = 1;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

    // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
    if (has_totalcounttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->totalcounttype());
    }

  }
  // repeated .Diadoc.Api.Proto.Docflow.DocflowEventV3 Events = 2;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDocflowEventsResponseV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDocflowEventsResponseV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDocflowEventsResponseV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDocflowEventsResponseV3::MergeFrom(const GetDocflowEventsResponseV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
    if (from.has_totalcounttype()) {
      set_totalcounttype(from.totalcounttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDocflowEventsResponseV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDocflowEventsResponseV3::CopyFrom(const GetDocflowEventsResponseV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocflowEventsResponseV3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->events())) return false;
  return true;
}

void GetDocflowEventsResponseV3::Swap(GetDocflowEventsResponseV3* other) {
  if (other != this) {
    std::swap(totalcount_, other->totalcount_);
    events_.Swap(&other->events_);
    std::swap(totalcounttype_, other->totalcounttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDocflowEventsResponseV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDocflowEventsResponseV3_descriptor_;
  metadata.reflection = GetDocflowEventsResponseV3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocflowEventV3::kEventIdFieldNumber;
const int DocflowEventV3::kTimestampFieldNumber;
const int DocflowEventV3::kDocumentIdFieldNumber;
const int DocflowEventV3::kIndexKeyFieldNumber;
const int DocflowEventV3::kDocumentFieldNumber;
const int DocflowEventV3::kPreviousEventIdFieldNumber;
const int DocflowEventV3::kPreviousDocumentStateFieldNumber;
#endif  // !_MSC_VER

DocflowEventV3::DocflowEventV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.DocflowEventV3)
}

void DocflowEventV3::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  documentid_ = const_cast< ::Diadoc::Api::Proto::DocumentId*>(&::Diadoc::Api::Proto::DocumentId::default_instance());
  document_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3*>(&::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3::default_instance());
  previousdocumentstate_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3*>(&::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3::default_instance());
}

DocflowEventV3::DocflowEventV3(const DocflowEventV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.DocflowEventV3)
}

void DocflowEventV3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
  documentid_ = NULL;
  indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_ = NULL;
  previouseventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousdocumentstate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocflowEventV3::~DocflowEventV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.DocflowEventV3)
  SharedDtor();
}

void DocflowEventV3::SharedDtor() {
  if (eventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eventid_;
  }
  if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete indexkey_;
  }
  if (previouseventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete previouseventid_;
  }
  if (this != default_instance_) {
    delete timestamp_;
    delete documentid_;
    delete document_;
    delete previousdocumentstate_;
  }
}

void DocflowEventV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocflowEventV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocflowEventV3_descriptor_;
}

const DocflowEventV3& DocflowEventV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto();
  return *default_instance_;
}

DocflowEventV3* DocflowEventV3::default_instance_ = NULL;

DocflowEventV3* DocflowEventV3::New() const {
  return new DocflowEventV3;
}

void DocflowEventV3::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        eventid_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_documentid()) {
      if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
    }
    if (has_indexkey()) {
      if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        indexkey_->clear();
      }
    }
    if (has_document()) {
      if (document_ != NULL) document_->::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3::Clear();
    }
    if (has_previouseventid()) {
      if (previouseventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        previouseventid_->clear();
      }
    }
    if (has_previousdocumentstate()) {
      if (previousdocumentstate_ != NULL) previousdocumentstate_->::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocflowEventV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.DocflowEventV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string EventId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "eventid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Timestamp;
        break;
      }

      // required .Diadoc.Api.Proto.Timestamp Timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_Timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DocumentId;
        break;
      }

      // required .Diadoc.Api.Proto.DocumentId DocumentId = 3;
      case 3: {
        if (tag == 26) {
         parse_DocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_IndexKey;
        break;
      }

      // required bytes IndexKey = 4;
      case 4: {
        if (tag == 34) {
         parse_IndexKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_indexkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Document;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Document = 5;
      case 5: {
        if (tag == 42) {
         parse_Document:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_PreviousEventId;
        break;
      }

      // optional string PreviousEventId = 6;
      case 6: {
        if (tag == 50) {
         parse_PreviousEventId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previouseventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->previouseventid().data(), this->previouseventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "previouseventid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_PreviousDocumentState;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 PreviousDocumentState = 7;
      case 7: {
        if (tag == 58) {
         parse_PreviousDocumentState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_previousdocumentstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.DocflowEventV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.DocflowEventV3)
  return false;
#undef DO_
}

void DocflowEventV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.DocflowEventV3)
  // required string EventId = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "eventid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->eventid(), output);
  }

  // required .Diadoc.Api.Proto.Timestamp Timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->timestamp(), output);
  }

  // required .Diadoc.Api.Proto.DocumentId DocumentId = 3;
  if (has_documentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->documentid(), output);
  }

  // required bytes IndexKey = 4;
  if (has_indexkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->indexkey(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Document = 5;
  if (has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->document(), output);
  }

  // optional string PreviousEventId = 6;
  if (has_previouseventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previouseventid().data(), this->previouseventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "previouseventid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->previouseventid(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 PreviousDocumentState = 7;
  if (has_previousdocumentstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->previousdocumentstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.DocflowEventV3)
}

::google::protobuf::uint8* DocflowEventV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.DocflowEventV3)
  // required string EventId = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "eventid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->eventid(), target);
  }

  // required .Diadoc.Api.Proto.Timestamp Timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->timestamp(), target);
  }

  // required .Diadoc.Api.Proto.DocumentId DocumentId = 3;
  if (has_documentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->documentid(), target);
  }

  // required bytes IndexKey = 4;
  if (has_indexkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->indexkey(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Document = 5;
  if (has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->document(), target);
  }

  // optional string PreviousEventId = 6;
  if (has_previouseventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previouseventid().data(), this->previouseventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "previouseventid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->previouseventid(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 PreviousDocumentState = 7;
  if (has_previousdocumentstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->previousdocumentstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.DocflowEventV3)
  return target;
}

int DocflowEventV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string EventId = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // required .Diadoc.Api.Proto.Timestamp Timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // required .Diadoc.Api.Proto.DocumentId DocumentId = 3;
    if (has_documentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentid());
    }

    // required bytes IndexKey = 4;
    if (has_indexkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->indexkey());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Document = 5;
    if (has_document()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->document());
    }

    // optional string PreviousEventId = 6;
    if (has_previouseventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->previouseventid());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 PreviousDocumentState = 7;
    if (has_previousdocumentstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->previousdocumentstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocflowEventV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocflowEventV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocflowEventV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocflowEventV3::MergeFrom(const DocflowEventV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_documentid()) {
      mutable_documentid()->::Diadoc::Api::Proto::DocumentId::MergeFrom(from.documentid());
    }
    if (from.has_indexkey()) {
      set_indexkey(from.indexkey());
    }
    if (from.has_document()) {
      mutable_document()->::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3::MergeFrom(from.document());
    }
    if (from.has_previouseventid()) {
      set_previouseventid(from.previouseventid());
    }
    if (from.has_previousdocumentstate()) {
      mutable_previousdocumentstate()->::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3::MergeFrom(from.previousdocumentstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocflowEventV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocflowEventV3::CopyFrom(const DocflowEventV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocflowEventV3::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_timestamp()) {
    if (!this->timestamp().IsInitialized()) return false;
  }
  if (has_documentid()) {
    if (!this->documentid().IsInitialized()) return false;
  }
  if (has_document()) {
    if (!this->document().IsInitialized()) return false;
  }
  if (has_previousdocumentstate()) {
    if (!this->previousdocumentstate().IsInitialized()) return false;
  }
  return true;
}

void DocflowEventV3::Swap(DocflowEventV3* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(documentid_, other->documentid_);
    std::swap(indexkey_, other->indexkey_);
    std::swap(document_, other->document_);
    std::swap(previouseventid_, other->previouseventid_);
    std::swap(previousdocumentstate_, other->previousdocumentstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocflowEventV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocflowEventV3_descriptor_;
  metadata.reflection = DocflowEventV3_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
