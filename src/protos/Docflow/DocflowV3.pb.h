// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/DocflowV3.proto

#ifndef PROTOBUF_Docflow_2fDocflowV3_2eproto__INCLUDED
#define PROTOBUF_Docflow_2fDocflowV3_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Timestamp.pb.h"
#include "Documents/Document.pb.h"
#include "Docflow/AttachmentV3.pb.h"
#include "Docflow/RoamingNotification.pb.h"
#include "Docflow/ResolutionDocflowV3.pb.h"
#include "OuterDocflowStatus.pb.h"
#include "DocflowStatusV3.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
void protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto();
void protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto();

class DocflowV3;
class SenderTitleDocflow;
class ConfirmationDocflow;
class SignatureRejectionDocflow;
class ParticipantResponseDocflow;
class AmendmentRequestDocflow;
class RevocationDocflowV3;
class RevocationRequestDocflow;
class RevocationResponseDocflow;
class ReceiptDocflowV3;
class OuterDocflow;
class OuterDocflowEntities;
class StatusEntity;

// ===================================================================

class DocflowV3 : public ::google::protobuf::Message {
 public:
  DocflowV3();
  virtual ~DocflowV3();

  DocflowV3(const DocflowV3& from);

  inline DocflowV3& operator=(const DocflowV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocflowV3& default_instance();

  void Swap(DocflowV3* other);

  // implements Message ----------------------------------------------

  DocflowV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocflowV3& from);
  void MergeFrom(const DocflowV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Docflow.SenderTitleDocflow SenderTitle = 1;
  inline bool has_sendertitle() const;
  inline void clear_sendertitle();
  static const int kSenderTitleFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::SenderTitleDocflow& sendertitle() const;
  inline ::Diadoc::Api::Proto::Docflow::SenderTitleDocflow* mutable_sendertitle();
  inline ::Diadoc::Api::Proto::Docflow::SenderTitleDocflow* release_sendertitle();
  inline void set_allocated_sendertitle(::Diadoc::Api::Proto::Docflow::SenderTitleDocflow* sendertitle);

  // optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow Confirmation = 2;
  inline bool has_confirmation() const;
  inline void clear_confirmation();
  static const int kConfirmationFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow& confirmation() const;
  inline ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* mutable_confirmation();
  inline ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* release_confirmation();
  inline void set_allocated_confirmation(::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* confirmation);

  // optional .Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow ProxyResponse = 11;
  inline bool has_proxyresponse() const;
  inline void clear_proxyresponse();
  static const int kProxyResponseFieldNumber = 11;
  inline const ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow& proxyresponse() const;
  inline ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* mutable_proxyresponse();
  inline ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* release_proxyresponse();
  inline void set_allocated_proxyresponse(::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* proxyresponse);

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 RecipientReceipt = 4;
  inline bool has_recipientreceipt() const;
  inline void clear_recipientreceipt();
  static const int kRecipientReceiptFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3& recipientreceipt() const;
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* mutable_recipientreceipt();
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* release_recipientreceipt();
  inline void set_allocated_recipientreceipt(::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* recipientreceipt);

  // optional .Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow RecipientResponse = 5;
  inline bool has_recipientresponse() const;
  inline void clear_recipientresponse();
  static const int kRecipientResponseFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow& recipientresponse() const;
  inline ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* mutable_recipientresponse();
  inline ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* release_recipientresponse();
  inline void set_allocated_recipientresponse(::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* recipientresponse);

  // optional .Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow AmendmentRequest = 6;
  inline bool has_amendmentrequest() const;
  inline void clear_amendmentrequest();
  static const int kAmendmentRequestFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow& amendmentrequest() const;
  inline ::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow* mutable_amendmentrequest();
  inline ::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow* release_amendmentrequest();
  inline void set_allocated_amendmentrequest(::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow* amendmentrequest);

  // optional .Diadoc.Api.Proto.Docflow.RevocationDocflowV3 Revocation = 7;
  inline bool has_revocation() const;
  inline void clear_revocation();
  static const int kRevocationFieldNumber = 7;
  inline const ::Diadoc::Api::Proto::Docflow::RevocationDocflowV3& revocation() const;
  inline ::Diadoc::Api::Proto::Docflow::RevocationDocflowV3* mutable_revocation();
  inline ::Diadoc::Api::Proto::Docflow::RevocationDocflowV3* release_revocation();
  inline void set_allocated_revocation(::Diadoc::Api::Proto::Docflow::RevocationDocflowV3* revocation);

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 SenderReceipt = 8;
  inline bool has_senderreceipt() const;
  inline void clear_senderreceipt();
  static const int kSenderReceiptFieldNumber = 8;
  inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3& senderreceipt() const;
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* mutable_senderreceipt();
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* release_senderreceipt();
  inline void set_allocated_senderreceipt(::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* senderreceipt);

  // optional .Diadoc.Api.Proto.Docflow.ResolutionDocflowV3 Resolution = 9;
  inline bool has_resolution() const;
  inline void clear_resolution();
  static const int kResolutionFieldNumber = 9;
  inline const ::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3& resolution() const;
  inline ::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3* mutable_resolution();
  inline ::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3* release_resolution();
  inline void set_allocated_resolution(::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3* resolution);

  // optional .Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3 ResolutionEntities = 10;
  inline bool has_resolutionentities() const;
  inline void clear_resolutionentities();
  static const int kResolutionEntitiesFieldNumber = 10;
  inline const ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3& resolutionentities() const;
  inline ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* mutable_resolutionentities();
  inline ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* release_resolutionentities();
  inline void set_allocated_resolutionentities(::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* resolutionentities);

  // repeated .Diadoc.Api.Proto.Docflow.OuterDocflow OuterDocflows = 12;
  inline int outerdocflows_size() const;
  inline void clear_outerdocflows();
  static const int kOuterDocflowsFieldNumber = 12;
  inline const ::Diadoc::Api::Proto::Docflow::OuterDocflow& outerdocflows(int index) const;
  inline ::Diadoc::Api::Proto::Docflow::OuterDocflow* mutable_outerdocflows(int index);
  inline ::Diadoc::Api::Proto::Docflow::OuterDocflow* add_outerdocflows();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::OuterDocflow >&
      outerdocflows() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::OuterDocflow >*
      mutable_outerdocflows();

  // repeated .Diadoc.Api.Proto.Docflow.OuterDocflowEntities OuterDocflowEntities = 13;
  inline int outerdocflowentities_size() const;
  inline void clear_outerdocflowentities();
  static const int kOuterDocflowEntitiesFieldNumber = 13;
  inline const ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities& outerdocflowentities(int index) const;
  inline ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities* mutable_outerdocflowentities(int index);
  inline ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities* add_outerdocflowentities();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities >&
      outerdocflowentities() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities >*
      mutable_outerdocflowentities();

  // required .Diadoc.Api.Proto.DocflowStatusV3 DocflowStatus = 14;
  inline bool has_docflowstatus() const;
  inline void clear_docflowstatus();
  static const int kDocflowStatusFieldNumber = 14;
  inline const ::Diadoc::Api::Proto::DocflowStatusV3& docflowstatus() const;
  inline ::Diadoc::Api::Proto::DocflowStatusV3* mutable_docflowstatus();
  inline ::Diadoc::Api::Proto::DocflowStatusV3* release_docflowstatus();
  inline void set_allocated_docflowstatus(::Diadoc::Api::Proto::DocflowStatusV3* docflowstatus);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.DocflowV3)
 private:
  inline void set_has_sendertitle();
  inline void clear_has_sendertitle();
  inline void set_has_confirmation();
  inline void clear_has_confirmation();
  inline void set_has_proxyresponse();
  inline void clear_has_proxyresponse();
  inline void set_has_recipientreceipt();
  inline void clear_has_recipientreceipt();
  inline void set_has_recipientresponse();
  inline void clear_has_recipientresponse();
  inline void set_has_amendmentrequest();
  inline void clear_has_amendmentrequest();
  inline void set_has_revocation();
  inline void clear_has_revocation();
  inline void set_has_senderreceipt();
  inline void clear_has_senderreceipt();
  inline void set_has_resolution();
  inline void clear_has_resolution();
  inline void set_has_resolutionentities();
  inline void clear_has_resolutionentities();
  inline void set_has_docflowstatus();
  inline void clear_has_docflowstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SenderTitleDocflow* sendertitle_;
  ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* confirmation_;
  ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* proxyresponse_;
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* recipientreceipt_;
  ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* recipientresponse_;
  ::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow* amendmentrequest_;
  ::Diadoc::Api::Proto::Docflow::RevocationDocflowV3* revocation_;
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* senderreceipt_;
  ::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3* resolution_;
  ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* resolutionentities_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::OuterDocflow > outerdocflows_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities > outerdocflowentities_;
  ::Diadoc::Api::Proto::DocflowStatusV3* docflowstatus_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static DocflowV3* default_instance_;
};
// -------------------------------------------------------------------

class SenderTitleDocflow : public ::google::protobuf::Message {
 public:
  SenderTitleDocflow();
  virtual ~SenderTitleDocflow();

  SenderTitleDocflow(const SenderTitleDocflow& from);

  inline SenderTitleDocflow& operator=(const SenderTitleDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SenderTitleDocflow& default_instance();

  void Swap(SenderTitleDocflow* other);

  // implements Message ----------------------------------------------

  SenderTitleDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SenderTitleDocflow& from);
  void MergeFrom(const SenderTitleDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Attachment = 2;
  inline bool has_attachment() const;
  inline void clear_attachment();
  static const int kAttachmentFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& attachment() const;
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* mutable_attachment();
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* release_attachment();
  inline void set_allocated_attachment(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* attachment);

  // optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
  inline bool has_sentat() const;
  inline void clear_sentat();
  static const int kSentAtFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Timestamp& sentat() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_sentat();
  inline ::Diadoc::Api::Proto::Timestamp* release_sentat();
  inline void set_allocated_sentat(::Diadoc::Api::Proto::Timestamp* sentat);

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
  inline bool has_deliveredat() const;
  inline void clear_deliveredat();
  static const int kDeliveredAtFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Timestamp& deliveredat() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_deliveredat();
  inline ::Diadoc::Api::Proto::Timestamp* release_deliveredat();
  inline void set_allocated_deliveredat(::Diadoc::Api::Proto::Timestamp* deliveredat);

  // optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 5;
  inline bool has_roamingnotification() const;
  inline void clear_roamingnotification();
  static const int kRoamingNotificationFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Docflow::RoamingNotification& roamingnotification() const;
  inline ::Diadoc::Api::Proto::Docflow::RoamingNotification* mutable_roamingnotification();
  inline ::Diadoc::Api::Proto::Docflow::RoamingNotification* release_roamingnotification();
  inline void set_allocated_roamingnotification(::Diadoc::Api::Proto::Docflow::RoamingNotification* roamingnotification);

  // required .Diadoc.Api.Proto.Documents.SenderSignatureStatus SenderSignatureStatus = 6;
  inline bool has_sendersignaturestatus() const;
  inline void clear_sendersignaturestatus();
  static const int kSenderSignatureStatusFieldNumber = 6;
  inline ::Diadoc::Api::Proto::Documents::SenderSignatureStatus sendersignaturestatus() const;
  inline void set_sendersignaturestatus(::Diadoc::Api::Proto::Documents::SenderSignatureStatus value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.SenderTitleDocflow)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_attachment();
  inline void clear_has_attachment();
  inline void set_has_sentat();
  inline void clear_has_sentat();
  inline void set_has_deliveredat();
  inline void clear_has_deliveredat();
  inline void set_has_roamingnotification();
  inline void clear_has_roamingnotification();
  inline void set_has_sendersignaturestatus();
  inline void clear_has_sendersignaturestatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* attachment_;
  ::Diadoc::Api::Proto::Timestamp* sentat_;
  bool isfinished_;
  int sendersignaturestatus_;
  ::Diadoc::Api::Proto::Timestamp* deliveredat_;
  ::Diadoc::Api::Proto::Docflow::RoamingNotification* roamingnotification_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static SenderTitleDocflow* default_instance_;
};
// -------------------------------------------------------------------

class ConfirmationDocflow : public ::google::protobuf::Message {
 public:
  ConfirmationDocflow();
  virtual ~ConfirmationDocflow();

  ConfirmationDocflow(const ConfirmationDocflow& from);

  inline ConfirmationDocflow& operator=(const ConfirmationDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfirmationDocflow& default_instance();

  void Swap(ConfirmationDocflow* other);

  // implements Message ----------------------------------------------

  ConfirmationDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfirmationDocflow& from);
  void MergeFrom(const ConfirmationDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 ConfirmationAttachment = 2;
  inline bool has_confirmationattachment() const;
  inline void clear_confirmationattachment();
  static const int kConfirmationAttachmentFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& confirmationattachment() const;
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* mutable_confirmationattachment();
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* release_confirmationattachment();
  inline void set_allocated_confirmationattachment(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* confirmationattachment);

  // optional .Diadoc.Api.Proto.Timestamp ConfirmedAt = 3;
  inline bool has_confirmedat() const;
  inline void clear_confirmedat();
  static const int kConfirmedAtFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Timestamp& confirmedat() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_confirmedat();
  inline ::Diadoc::Api::Proto::Timestamp* release_confirmedat();
  inline void set_allocated_confirmedat(::Diadoc::Api::Proto::Timestamp* confirmedat);

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 Receipt = 4;
  inline bool has_receipt() const;
  inline void clear_receipt();
  static const int kReceiptFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3& receipt() const;
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* mutable_receipt();
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* release_receipt();
  inline void set_allocated_receipt(::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* receipt);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.ConfirmationDocflow)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_confirmationattachment();
  inline void clear_has_confirmationattachment();
  inline void set_has_confirmedat();
  inline void clear_has_confirmedat();
  inline void set_has_receipt();
  inline void clear_has_receipt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* confirmationattachment_;
  ::Diadoc::Api::Proto::Timestamp* confirmedat_;
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* receipt_;
  bool isfinished_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static ConfirmationDocflow* default_instance_;
};
// -------------------------------------------------------------------

class SignatureRejectionDocflow : public ::google::protobuf::Message {
 public:
  SignatureRejectionDocflow();
  virtual ~SignatureRejectionDocflow();

  SignatureRejectionDocflow(const SignatureRejectionDocflow& from);

  inline SignatureRejectionDocflow& operator=(const SignatureRejectionDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignatureRejectionDocflow& default_instance();

  void Swap(SignatureRejectionDocflow* other);

  // implements Message ----------------------------------------------

  SignatureRejectionDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignatureRejectionDocflow& from);
  void MergeFrom(const SignatureRejectionDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 SignatureRejection = 1;
  inline bool has_signaturerejection() const;
  inline void clear_signaturerejection();
  static const int kSignatureRejectionFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& signaturerejection() const;
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* mutable_signaturerejection();
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* release_signaturerejection();
  inline void set_allocated_signaturerejection(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* signaturerejection);

  // required bool IsFormal = 2;
  inline bool has_isformal() const;
  inline void clear_isformal();
  static const int kIsFormalFieldNumber = 2;
  inline bool isformal() const;
  inline void set_isformal(bool value);

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 3;
  inline bool has_deliveredat() const;
  inline void clear_deliveredat();
  static const int kDeliveredAtFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Timestamp& deliveredat() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_deliveredat();
  inline ::Diadoc::Api::Proto::Timestamp* release_deliveredat();
  inline void set_allocated_deliveredat(::Diadoc::Api::Proto::Timestamp* deliveredat);

  // optional string PlainText = 4;
  inline bool has_plaintext() const;
  inline void clear_plaintext();
  static const int kPlainTextFieldNumber = 4;
  inline const ::std::string& plaintext() const;
  inline void set_plaintext(const ::std::string& value);
  inline void set_plaintext(const char* value);
  inline void set_plaintext(const char* value, size_t size);
  inline ::std::string* mutable_plaintext();
  inline ::std::string* release_plaintext();
  inline void set_allocated_plaintext(::std::string* plaintext);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow)
 private:
  inline void set_has_signaturerejection();
  inline void clear_has_signaturerejection();
  inline void set_has_isformal();
  inline void clear_has_isformal();
  inline void set_has_deliveredat();
  inline void clear_has_deliveredat();
  inline void set_has_plaintext();
  inline void clear_has_plaintext();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* signaturerejection_;
  ::Diadoc::Api::Proto::Timestamp* deliveredat_;
  ::std::string* plaintext_;
  bool isformal_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static SignatureRejectionDocflow* default_instance_;
};
// -------------------------------------------------------------------

class ParticipantResponseDocflow : public ::google::protobuf::Message {
 public:
  ParticipantResponseDocflow();
  virtual ~ParticipantResponseDocflow();

  ParticipantResponseDocflow(const ParticipantResponseDocflow& from);

  inline ParticipantResponseDocflow& operator=(const ParticipantResponseDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParticipantResponseDocflow& default_instance();

  void Swap(ParticipantResponseDocflow* other);

  // implements Message ----------------------------------------------

  ParticipantResponseDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParticipantResponseDocflow& from);
  void MergeFrom(const ParticipantResponseDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // optional .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 2;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::SignatureV3& signature() const;
  inline ::Diadoc::Api::Proto::Docflow::SignatureV3* mutable_signature();
  inline ::Diadoc::Api::Proto::Docflow::SignatureV3* release_signature();
  inline void set_allocated_signature(::Diadoc::Api::Proto::Docflow::SignatureV3* signature);

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& title() const;
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* mutable_title();
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* release_title();
  inline void set_allocated_title(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* title);

  // optional .Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow Rejection = 4;
  inline bool has_rejection() const;
  inline void clear_rejection();
  static const int kRejectionFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow& rejection() const;
  inline ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* mutable_rejection();
  inline ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* release_rejection();
  inline void set_allocated_rejection(::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* rejection);

  // optional .Diadoc.Api.Proto.Timestamp SentAt = 5;
  inline bool has_sentat() const;
  inline void clear_sentat();
  static const int kSentAtFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Timestamp& sentat() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_sentat();
  inline ::Diadoc::Api::Proto::Timestamp* release_sentat();
  inline void set_allocated_sentat(::Diadoc::Api::Proto::Timestamp* sentat);

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 6;
  inline bool has_deliveredat() const;
  inline void clear_deliveredat();
  static const int kDeliveredAtFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::Timestamp& deliveredat() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_deliveredat();
  inline ::Diadoc::Api::Proto::Timestamp* release_deliveredat();
  inline void set_allocated_deliveredat(::Diadoc::Api::Proto::Timestamp* deliveredat);

  // required .Diadoc.Api.Proto.Documents.RecipientResponseStatus ResponseStatus = 7;
  inline bool has_responsestatus() const;
  inline void clear_responsestatus();
  static const int kResponseStatusFieldNumber = 7;
  inline ::Diadoc::Api::Proto::Documents::RecipientResponseStatus responsestatus() const;
  inline void set_responsestatus(::Diadoc::Api::Proto::Documents::RecipientResponseStatus value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_rejection();
  inline void clear_has_rejection();
  inline void set_has_sentat();
  inline void clear_has_sentat();
  inline void set_has_deliveredat();
  inline void clear_has_deliveredat();
  inline void set_has_responsestatus();
  inline void clear_has_responsestatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SignatureV3* signature_;
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* title_;
  ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* rejection_;
  bool isfinished_;
  int responsestatus_;
  ::Diadoc::Api::Proto::Timestamp* sentat_;
  ::Diadoc::Api::Proto::Timestamp* deliveredat_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static ParticipantResponseDocflow* default_instance_;
};
// -------------------------------------------------------------------

class AmendmentRequestDocflow : public ::google::protobuf::Message {
 public:
  AmendmentRequestDocflow();
  virtual ~AmendmentRequestDocflow();

  AmendmentRequestDocflow(const AmendmentRequestDocflow& from);

  inline AmendmentRequestDocflow& operator=(const AmendmentRequestDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AmendmentRequestDocflow& default_instance();

  void Swap(AmendmentRequestDocflow* other);

  // implements Message ----------------------------------------------

  AmendmentRequestDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AmendmentRequestDocflow& from);
  void MergeFrom(const AmendmentRequestDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 AmendmentRequest = 2;
  inline bool has_amendmentrequest() const;
  inline void clear_amendmentrequest();
  static const int kAmendmentRequestFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& amendmentrequest() const;
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* mutable_amendmentrequest();
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* release_amendmentrequest();
  inline void set_allocated_amendmentrequest(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* amendmentrequest);

  // optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
  inline bool has_sentat() const;
  inline void clear_sentat();
  static const int kSentAtFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Timestamp& sentat() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_sentat();
  inline ::Diadoc::Api::Proto::Timestamp* release_sentat();
  inline void set_allocated_sentat(::Diadoc::Api::Proto::Timestamp* sentat);

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
  inline bool has_deliveredat() const;
  inline void clear_deliveredat();
  static const int kDeliveredAtFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Timestamp& deliveredat() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_deliveredat();
  inline ::Diadoc::Api::Proto::Timestamp* release_deliveredat();
  inline void set_allocated_deliveredat(::Diadoc::Api::Proto::Timestamp* deliveredat);

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 Receipt = 5;
  inline bool has_receipt() const;
  inline void clear_receipt();
  static const int kReceiptFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3& receipt() const;
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* mutable_receipt();
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* release_receipt();
  inline void set_allocated_receipt(::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* receipt);

  // required int32 AmendmentFlags = 6;
  inline bool has_amendmentflags() const;
  inline void clear_amendmentflags();
  static const int kAmendmentFlagsFieldNumber = 6;
  inline ::google::protobuf::int32 amendmentflags() const;
  inline void set_amendmentflags(::google::protobuf::int32 value);

  // optional string PlainText = 7;
  inline bool has_plaintext() const;
  inline void clear_plaintext();
  static const int kPlainTextFieldNumber = 7;
  inline const ::std::string& plaintext() const;
  inline void set_plaintext(const ::std::string& value);
  inline void set_plaintext(const char* value);
  inline void set_plaintext(const char* value, size_t size);
  inline ::std::string* mutable_plaintext();
  inline ::std::string* release_plaintext();
  inline void set_allocated_plaintext(::std::string* plaintext);

  // optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow ConfirmationDocflow = 8;
  inline bool has_confirmationdocflow() const;
  inline void clear_confirmationdocflow();
  static const int kConfirmationDocflowFieldNumber = 8;
  inline const ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow& confirmationdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* mutable_confirmationdocflow();
  inline ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* release_confirmationdocflow();
  inline void set_allocated_confirmationdocflow(::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* confirmationdocflow);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_amendmentrequest();
  inline void clear_has_amendmentrequest();
  inline void set_has_sentat();
  inline void clear_has_sentat();
  inline void set_has_deliveredat();
  inline void clear_has_deliveredat();
  inline void set_has_receipt();
  inline void clear_has_receipt();
  inline void set_has_amendmentflags();
  inline void clear_has_amendmentflags();
  inline void set_has_plaintext();
  inline void clear_has_plaintext();
  inline void set_has_confirmationdocflow();
  inline void clear_has_confirmationdocflow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* amendmentrequest_;
  ::Diadoc::Api::Proto::Timestamp* sentat_;
  bool isfinished_;
  ::google::protobuf::int32 amendmentflags_;
  ::Diadoc::Api::Proto::Timestamp* deliveredat_;
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* receipt_;
  ::std::string* plaintext_;
  ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* confirmationdocflow_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static AmendmentRequestDocflow* default_instance_;
};
// -------------------------------------------------------------------

class RevocationDocflowV3 : public ::google::protobuf::Message {
 public:
  RevocationDocflowV3();
  virtual ~RevocationDocflowV3();

  RevocationDocflowV3(const RevocationDocflowV3& from);

  inline RevocationDocflowV3& operator=(const RevocationDocflowV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RevocationDocflowV3& default_instance();

  void Swap(RevocationDocflowV3* other);

  // implements Message ----------------------------------------------

  RevocationDocflowV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RevocationDocflowV3& from);
  void MergeFrom(const RevocationDocflowV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // required .Diadoc.Api.Proto.Docflow.RevocationRequestDocflow RevocationRequest = 2;
  inline bool has_revocationrequest() const;
  inline void clear_revocationrequest();
  static const int kRevocationRequestFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow& revocationrequest() const;
  inline ::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow* mutable_revocationrequest();
  inline ::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow* release_revocationrequest();
  inline void set_allocated_revocationrequest(::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow* revocationrequest);

  // optional .Diadoc.Api.Proto.Docflow.RevocationResponseDocflow RevocationResponse = 3;
  inline bool has_revocationresponse() const;
  inline void clear_revocationresponse();
  static const int kRevocationResponseFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow& revocationresponse() const;
  inline ::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow* mutable_revocationresponse();
  inline ::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow* release_revocationresponse();
  inline void set_allocated_revocationresponse(::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow* revocationresponse);

  // required string InitiatorBoxId = 4;
  inline bool has_initiatorboxid() const;
  inline void clear_initiatorboxid();
  static const int kInitiatorBoxIdFieldNumber = 4;
  inline const ::std::string& initiatorboxid() const;
  inline void set_initiatorboxid(const ::std::string& value);
  inline void set_initiatorboxid(const char* value);
  inline void set_initiatorboxid(const char* value, size_t size);
  inline ::std::string* mutable_initiatorboxid();
  inline ::std::string* release_initiatorboxid();
  inline void set_allocated_initiatorboxid(::std::string* initiatorboxid);

  // required .Diadoc.Api.Proto.Documents.RevocationStatus RevocationStatus = 5;
  inline bool has_revocationstatus() const;
  inline void clear_revocationstatus();
  static const int kRevocationStatusFieldNumber = 5;
  inline ::Diadoc::Api::Proto::Documents::RevocationStatus revocationstatus() const;
  inline void set_revocationstatus(::Diadoc::Api::Proto::Documents::RevocationStatus value);

  // optional .Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3 ResolutionEntities = 6;
  inline bool has_resolutionentities() const;
  inline void clear_resolutionentities();
  static const int kResolutionEntitiesFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3& resolutionentities() const;
  inline ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* mutable_resolutionentities();
  inline ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* release_resolutionentities();
  inline void set_allocated_resolutionentities(::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* resolutionentities);

  // repeated .Diadoc.Api.Proto.Docflow.OuterDocflowEntities OuterDocflowEntities = 7;
  inline int outerdocflowentities_size() const;
  inline void clear_outerdocflowentities();
  static const int kOuterDocflowEntitiesFieldNumber = 7;
  inline const ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities& outerdocflowentities(int index) const;
  inline ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities* mutable_outerdocflowentities(int index);
  inline ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities* add_outerdocflowentities();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities >&
      outerdocflowentities() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities >*
      mutable_outerdocflowentities();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.RevocationDocflowV3)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_revocationrequest();
  inline void clear_has_revocationrequest();
  inline void set_has_revocationresponse();
  inline void clear_has_revocationresponse();
  inline void set_has_initiatorboxid();
  inline void clear_has_initiatorboxid();
  inline void set_has_revocationstatus();
  inline void clear_has_revocationstatus();
  inline void set_has_resolutionentities();
  inline void clear_has_resolutionentities();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow* revocationrequest_;
  ::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow* revocationresponse_;
  bool isfinished_;
  int revocationstatus_;
  ::std::string* initiatorboxid_;
  ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* resolutionentities_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities > outerdocflowentities_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static RevocationDocflowV3* default_instance_;
};
// -------------------------------------------------------------------

class RevocationRequestDocflow : public ::google::protobuf::Message {
 public:
  RevocationRequestDocflow();
  virtual ~RevocationRequestDocflow();

  RevocationRequestDocflow(const RevocationRequestDocflow& from);

  inline RevocationRequestDocflow& operator=(const RevocationRequestDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RevocationRequestDocflow& default_instance();

  void Swap(RevocationRequestDocflow* other);

  // implements Message ----------------------------------------------

  RevocationRequestDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RevocationRequestDocflow& from);
  void MergeFrom(const RevocationRequestDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 RevocationRequest = 1;
  inline bool has_revocationrequest() const;
  inline void clear_revocationrequest();
  static const int kRevocationRequestFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& revocationrequest() const;
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* mutable_revocationrequest();
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* release_revocationrequest();
  inline void set_allocated_revocationrequest(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* revocationrequest);

  // optional .Diadoc.Api.Proto.Timestamp SentAt = 2;
  inline bool has_sentat() const;
  inline void clear_sentat();
  static const int kSentAtFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Timestamp& sentat() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_sentat();
  inline ::Diadoc::Api::Proto::Timestamp* release_sentat();
  inline void set_allocated_sentat(::Diadoc::Api::Proto::Timestamp* sentat);

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 3;
  inline bool has_deliveredat() const;
  inline void clear_deliveredat();
  static const int kDeliveredAtFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Timestamp& deliveredat() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_deliveredat();
  inline ::Diadoc::Api::Proto::Timestamp* release_deliveredat();
  inline void set_allocated_deliveredat(::Diadoc::Api::Proto::Timestamp* deliveredat);

  // optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 4;
  inline bool has_roamingnotification() const;
  inline void clear_roamingnotification();
  static const int kRoamingNotificationFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Docflow::RoamingNotification& roamingnotification() const;
  inline ::Diadoc::Api::Proto::Docflow::RoamingNotification* mutable_roamingnotification();
  inline ::Diadoc::Api::Proto::Docflow::RoamingNotification* release_roamingnotification();
  inline void set_allocated_roamingnotification(::Diadoc::Api::Proto::Docflow::RoamingNotification* roamingnotification);

  // optional string PlainText = 5;
  inline bool has_plaintext() const;
  inline void clear_plaintext();
  static const int kPlainTextFieldNumber = 5;
  inline const ::std::string& plaintext() const;
  inline void set_plaintext(const ::std::string& value);
  inline void set_plaintext(const char* value);
  inline void set_plaintext(const char* value, size_t size);
  inline ::std::string* mutable_plaintext();
  inline ::std::string* release_plaintext();
  inline void set_allocated_plaintext(::std::string* plaintext);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow)
 private:
  inline void set_has_revocationrequest();
  inline void clear_has_revocationrequest();
  inline void set_has_sentat();
  inline void clear_has_sentat();
  inline void set_has_deliveredat();
  inline void clear_has_deliveredat();
  inline void set_has_roamingnotification();
  inline void clear_has_roamingnotification();
  inline void set_has_plaintext();
  inline void clear_has_plaintext();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* revocationrequest_;
  ::Diadoc::Api::Proto::Timestamp* sentat_;
  ::Diadoc::Api::Proto::Timestamp* deliveredat_;
  ::Diadoc::Api::Proto::Docflow::RoamingNotification* roamingnotification_;
  ::std::string* plaintext_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static RevocationRequestDocflow* default_instance_;
};
// -------------------------------------------------------------------

class RevocationResponseDocflow : public ::google::protobuf::Message {
 public:
  RevocationResponseDocflow();
  virtual ~RevocationResponseDocflow();

  RevocationResponseDocflow(const RevocationResponseDocflow& from);

  inline RevocationResponseDocflow& operator=(const RevocationResponseDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RevocationResponseDocflow& default_instance();

  void Swap(RevocationResponseDocflow* other);

  // implements Message ----------------------------------------------

  RevocationResponseDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RevocationResponseDocflow& from);
  void MergeFrom(const RevocationResponseDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Docflow.SignatureV3 RecipientSignature = 1;
  inline bool has_recipientsignature() const;
  inline void clear_recipientsignature();
  static const int kRecipientSignatureFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::SignatureV3& recipientsignature() const;
  inline ::Diadoc::Api::Proto::Docflow::SignatureV3* mutable_recipientsignature();
  inline ::Diadoc::Api::Proto::Docflow::SignatureV3* release_recipientsignature();
  inline void set_allocated_recipientsignature(::Diadoc::Api::Proto::Docflow::SignatureV3* recipientsignature);

  // optional .Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow SignatureRejection = 2;
  inline bool has_signaturerejection() const;
  inline void clear_signaturerejection();
  static const int kSignatureRejectionFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow& signaturerejection() const;
  inline ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* mutable_signaturerejection();
  inline ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* release_signaturerejection();
  inline void set_allocated_signaturerejection(::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* signaturerejection);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow)
 private:
  inline void set_has_recipientsignature();
  inline void clear_has_recipientsignature();
  inline void set_has_signaturerejection();
  inline void clear_has_signaturerejection();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SignatureV3* recipientsignature_;
  ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* signaturerejection_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static RevocationResponseDocflow* default_instance_;
};
// -------------------------------------------------------------------

class ReceiptDocflowV3 : public ::google::protobuf::Message {
 public:
  ReceiptDocflowV3();
  virtual ~ReceiptDocflowV3();

  ReceiptDocflowV3(const ReceiptDocflowV3& from);

  inline ReceiptDocflowV3& operator=(const ReceiptDocflowV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceiptDocflowV3& default_instance();

  void Swap(ReceiptDocflowV3* other);

  // implements Message ----------------------------------------------

  ReceiptDocflowV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReceiptDocflowV3& from);
  void MergeFrom(const ReceiptDocflowV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 ReceiptAttachment = 2;
  inline bool has_receiptattachment() const;
  inline void clear_receiptattachment();
  static const int kReceiptAttachmentFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& receiptattachment() const;
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* mutable_receiptattachment();
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* release_receiptattachment();
  inline void set_allocated_receiptattachment(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* receiptattachment);

  // optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
  inline bool has_sentat() const;
  inline void clear_sentat();
  static const int kSentAtFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Timestamp& sentat() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_sentat();
  inline ::Diadoc::Api::Proto::Timestamp* release_sentat();
  inline void set_allocated_sentat(::Diadoc::Api::Proto::Timestamp* sentat);

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
  inline bool has_deliveredat() const;
  inline void clear_deliveredat();
  static const int kDeliveredAtFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Timestamp& deliveredat() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_deliveredat();
  inline ::Diadoc::Api::Proto::Timestamp* release_deliveredat();
  inline void set_allocated_deliveredat(::Diadoc::Api::Proto::Timestamp* deliveredat);

  // optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow Confirmation = 5;
  inline bool has_confirmation() const;
  inline void clear_confirmation();
  static const int kConfirmationFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow& confirmation() const;
  inline ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* mutable_confirmation();
  inline ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* release_confirmation();
  inline void set_allocated_confirmation(::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* confirmation);

  // required .Diadoc.Api.Proto.Documents.GeneralReceiptStatus Status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus status() const;
  inline void set_status(::Diadoc::Api::Proto::Documents::GeneralReceiptStatus value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_receiptattachment();
  inline void clear_has_receiptattachment();
  inline void set_has_sentat();
  inline void clear_has_sentat();
  inline void set_has_deliveredat();
  inline void clear_has_deliveredat();
  inline void set_has_confirmation();
  inline void clear_has_confirmation();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* receiptattachment_;
  ::Diadoc::Api::Proto::Timestamp* sentat_;
  bool isfinished_;
  int status_;
  ::Diadoc::Api::Proto::Timestamp* deliveredat_;
  ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* confirmation_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static ReceiptDocflowV3* default_instance_;
};
// -------------------------------------------------------------------

class OuterDocflow : public ::google::protobuf::Message {
 public:
  OuterDocflow();
  virtual ~OuterDocflow();

  OuterDocflow(const OuterDocflow& from);

  inline OuterDocflow& operator=(const OuterDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OuterDocflow& default_instance();

  void Swap(OuterDocflow* other);

  // implements Message ----------------------------------------------

  OuterDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OuterDocflow& from);
  void MergeFrom(const OuterDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string DocflowNamedId = 1;
  inline bool has_docflownamedid() const;
  inline void clear_docflownamedid();
  static const int kDocflowNamedIdFieldNumber = 1;
  inline const ::std::string& docflownamedid() const;
  inline void set_docflownamedid(const ::std::string& value);
  inline void set_docflownamedid(const char* value);
  inline void set_docflownamedid(const char* value, size_t size);
  inline ::std::string* mutable_docflownamedid();
  inline ::std::string* release_docflownamedid();
  inline void set_allocated_docflownamedid(::std::string* docflownamedid);

  // required string ParentEntityId = 2;
  inline bool has_parententityid() const;
  inline void clear_parententityid();
  static const int kParentEntityIdFieldNumber = 2;
  inline const ::std::string& parententityid() const;
  inline void set_parententityid(const ::std::string& value);
  inline void set_parententityid(const char* value);
  inline void set_parententityid(const char* value, size_t size);
  inline ::std::string* mutable_parententityid();
  inline ::std::string* release_parententityid();
  inline void set_allocated_parententityid(::std::string* parententityid);

  // required string OuterDocflowEntityId = 3;
  inline bool has_outerdocflowentityid() const;
  inline void clear_outerdocflowentityid();
  static const int kOuterDocflowEntityIdFieldNumber = 3;
  inline const ::std::string& outerdocflowentityid() const;
  inline void set_outerdocflowentityid(const ::std::string& value);
  inline void set_outerdocflowentityid(const char* value);
  inline void set_outerdocflowentityid(const char* value, size_t size);
  inline ::std::string* mutable_outerdocflowentityid();
  inline ::std::string* release_outerdocflowentityid();
  inline void set_allocated_outerdocflowentityid(::std::string* outerdocflowentityid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.OuterDocflow)
 private:
  inline void set_has_docflownamedid();
  inline void clear_has_docflownamedid();
  inline void set_has_parententityid();
  inline void clear_has_parententityid();
  inline void set_has_outerdocflowentityid();
  inline void clear_has_outerdocflowentityid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* docflownamedid_;
  ::std::string* parententityid_;
  ::std::string* outerdocflowentityid_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static OuterDocflow* default_instance_;
};
// -------------------------------------------------------------------

class OuterDocflowEntities : public ::google::protobuf::Message {
 public:
  OuterDocflowEntities();
  virtual ~OuterDocflowEntities();

  OuterDocflowEntities(const OuterDocflowEntities& from);

  inline OuterDocflowEntities& operator=(const OuterDocflowEntities& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OuterDocflowEntities& default_instance();

  void Swap(OuterDocflowEntities* other);

  // implements Message ----------------------------------------------

  OuterDocflowEntities* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OuterDocflowEntities& from);
  void MergeFrom(const OuterDocflowEntities& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string DocflowNamedId = 1;
  inline bool has_docflownamedid() const;
  inline void clear_docflownamedid();
  static const int kDocflowNamedIdFieldNumber = 1;
  inline const ::std::string& docflownamedid() const;
  inline void set_docflownamedid(const ::std::string& value);
  inline void set_docflownamedid(const char* value);
  inline void set_docflownamedid(const char* value, size_t size);
  inline ::std::string* mutable_docflownamedid();
  inline ::std::string* release_docflownamedid();
  inline void set_allocated_docflownamedid(::std::string* docflownamedid);

  // required string DocflowFriendlyName = 2;
  inline bool has_docflowfriendlyname() const;
  inline void clear_docflowfriendlyname();
  static const int kDocflowFriendlyNameFieldNumber = 2;
  inline const ::std::string& docflowfriendlyname() const;
  inline void set_docflowfriendlyname(const ::std::string& value);
  inline void set_docflowfriendlyname(const char* value);
  inline void set_docflowfriendlyname(const char* value, size_t size);
  inline ::std::string* mutable_docflowfriendlyname();
  inline ::std::string* release_docflowfriendlyname();
  inline void set_allocated_docflowfriendlyname(::std::string* docflowfriendlyname);

  // repeated .Diadoc.Api.Proto.Docflow.StatusEntity StatusEntities = 3;
  inline int statusentities_size() const;
  inline void clear_statusentities();
  static const int kStatusEntitiesFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::StatusEntity& statusentities(int index) const;
  inline ::Diadoc::Api::Proto::Docflow::StatusEntity* mutable_statusentities(int index);
  inline ::Diadoc::Api::Proto::Docflow::StatusEntity* add_statusentities();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::StatusEntity >&
      statusentities() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::StatusEntity >*
      mutable_statusentities();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.OuterDocflowEntities)
 private:
  inline void set_has_docflownamedid();
  inline void clear_has_docflownamedid();
  inline void set_has_docflowfriendlyname();
  inline void clear_has_docflowfriendlyname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* docflownamedid_;
  ::std::string* docflowfriendlyname_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::StatusEntity > statusentities_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static OuterDocflowEntities* default_instance_;
};
// -------------------------------------------------------------------

class StatusEntity : public ::google::protobuf::Message {
 public:
  StatusEntity();
  virtual ~StatusEntity();

  StatusEntity(const StatusEntity& from);

  inline StatusEntity& operator=(const StatusEntity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusEntity& default_instance();

  void Swap(StatusEntity* other);

  // implements Message ----------------------------------------------

  StatusEntity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusEntity& from);
  void MergeFrom(const StatusEntity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Attachment = 1;
  inline bool has_attachment() const;
  inline void clear_attachment();
  static const int kAttachmentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& attachment() const;
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* mutable_attachment();
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* release_attachment();
  inline void set_allocated_attachment(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* attachment);

  // required .Diadoc.Api.Proto.Status Status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Status& status() const;
  inline ::Diadoc::Api::Proto::Status* mutable_status();
  inline ::Diadoc::Api::Proto::Status* release_status();
  inline void set_allocated_status(::Diadoc::Api::Proto::Status* status);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.StatusEntity)
 private:
  inline void set_has_attachment();
  inline void clear_has_attachment();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* attachment_;
  ::Diadoc::Api::Proto::Status* status_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static StatusEntity* default_instance_;
};
// ===================================================================


// ===================================================================

// DocflowV3

// required .Diadoc.Api.Proto.Docflow.SenderTitleDocflow SenderTitle = 1;
inline bool DocflowV3::has_sendertitle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocflowV3::set_has_sendertitle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocflowV3::clear_has_sendertitle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocflowV3::clear_sendertitle() {
  if (sendertitle_ != NULL) sendertitle_->::Diadoc::Api::Proto::Docflow::SenderTitleDocflow::Clear();
  clear_has_sendertitle();
}
inline const ::Diadoc::Api::Proto::Docflow::SenderTitleDocflow& DocflowV3::sendertitle() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowV3.SenderTitle)
  return sendertitle_ != NULL ? *sendertitle_ : *default_instance_->sendertitle_;
}
inline ::Diadoc::Api::Proto::Docflow::SenderTitleDocflow* DocflowV3::mutable_sendertitle() {
  set_has_sendertitle();
  if (sendertitle_ == NULL) sendertitle_ = new ::Diadoc::Api::Proto::Docflow::SenderTitleDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowV3.SenderTitle)
  return sendertitle_;
}
inline ::Diadoc::Api::Proto::Docflow::SenderTitleDocflow* DocflowV3::release_sendertitle() {
  clear_has_sendertitle();
  ::Diadoc::Api::Proto::Docflow::SenderTitleDocflow* temp = sendertitle_;
  sendertitle_ = NULL;
  return temp;
}
inline void DocflowV3::set_allocated_sendertitle(::Diadoc::Api::Proto::Docflow::SenderTitleDocflow* sendertitle) {
  delete sendertitle_;
  sendertitle_ = sendertitle;
  if (sendertitle) {
    set_has_sendertitle();
  } else {
    clear_has_sendertitle();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowV3.SenderTitle)
}

// optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow Confirmation = 2;
inline bool DocflowV3::has_confirmation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocflowV3::set_has_confirmation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocflowV3::clear_has_confirmation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocflowV3::clear_confirmation() {
  if (confirmation_ != NULL) confirmation_->::Diadoc::Api::Proto::Docflow::ConfirmationDocflow::Clear();
  clear_has_confirmation();
}
inline const ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow& DocflowV3::confirmation() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowV3.Confirmation)
  return confirmation_ != NULL ? *confirmation_ : *default_instance_->confirmation_;
}
inline ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* DocflowV3::mutable_confirmation() {
  set_has_confirmation();
  if (confirmation_ == NULL) confirmation_ = new ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowV3.Confirmation)
  return confirmation_;
}
inline ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* DocflowV3::release_confirmation() {
  clear_has_confirmation();
  ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* temp = confirmation_;
  confirmation_ = NULL;
  return temp;
}
inline void DocflowV3::set_allocated_confirmation(::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* confirmation) {
  delete confirmation_;
  confirmation_ = confirmation;
  if (confirmation) {
    set_has_confirmation();
  } else {
    clear_has_confirmation();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowV3.Confirmation)
}

// optional .Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow ProxyResponse = 11;
inline bool DocflowV3::has_proxyresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocflowV3::set_has_proxyresponse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocflowV3::clear_has_proxyresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocflowV3::clear_proxyresponse() {
  if (proxyresponse_ != NULL) proxyresponse_->::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow::Clear();
  clear_has_proxyresponse();
}
inline const ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow& DocflowV3::proxyresponse() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowV3.ProxyResponse)
  return proxyresponse_ != NULL ? *proxyresponse_ : *default_instance_->proxyresponse_;
}
inline ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* DocflowV3::mutable_proxyresponse() {
  set_has_proxyresponse();
  if (proxyresponse_ == NULL) proxyresponse_ = new ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowV3.ProxyResponse)
  return proxyresponse_;
}
inline ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* DocflowV3::release_proxyresponse() {
  clear_has_proxyresponse();
  ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* temp = proxyresponse_;
  proxyresponse_ = NULL;
  return temp;
}
inline void DocflowV3::set_allocated_proxyresponse(::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* proxyresponse) {
  delete proxyresponse_;
  proxyresponse_ = proxyresponse;
  if (proxyresponse) {
    set_has_proxyresponse();
  } else {
    clear_has_proxyresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowV3.ProxyResponse)
}

// optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 RecipientReceipt = 4;
inline bool DocflowV3::has_recipientreceipt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocflowV3::set_has_recipientreceipt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocflowV3::clear_has_recipientreceipt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocflowV3::clear_recipientreceipt() {
  if (recipientreceipt_ != NULL) recipientreceipt_->::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::Clear();
  clear_has_recipientreceipt();
}
inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3& DocflowV3::recipientreceipt() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowV3.RecipientReceipt)
  return recipientreceipt_ != NULL ? *recipientreceipt_ : *default_instance_->recipientreceipt_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* DocflowV3::mutable_recipientreceipt() {
  set_has_recipientreceipt();
  if (recipientreceipt_ == NULL) recipientreceipt_ = new ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowV3.RecipientReceipt)
  return recipientreceipt_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* DocflowV3::release_recipientreceipt() {
  clear_has_recipientreceipt();
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* temp = recipientreceipt_;
  recipientreceipt_ = NULL;
  return temp;
}
inline void DocflowV3::set_allocated_recipientreceipt(::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* recipientreceipt) {
  delete recipientreceipt_;
  recipientreceipt_ = recipientreceipt;
  if (recipientreceipt) {
    set_has_recipientreceipt();
  } else {
    clear_has_recipientreceipt();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowV3.RecipientReceipt)
}

// optional .Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow RecipientResponse = 5;
inline bool DocflowV3::has_recipientresponse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocflowV3::set_has_recipientresponse() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocflowV3::clear_has_recipientresponse() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocflowV3::clear_recipientresponse() {
  if (recipientresponse_ != NULL) recipientresponse_->::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow::Clear();
  clear_has_recipientresponse();
}
inline const ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow& DocflowV3::recipientresponse() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowV3.RecipientResponse)
  return recipientresponse_ != NULL ? *recipientresponse_ : *default_instance_->recipientresponse_;
}
inline ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* DocflowV3::mutable_recipientresponse() {
  set_has_recipientresponse();
  if (recipientresponse_ == NULL) recipientresponse_ = new ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowV3.RecipientResponse)
  return recipientresponse_;
}
inline ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* DocflowV3::release_recipientresponse() {
  clear_has_recipientresponse();
  ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* temp = recipientresponse_;
  recipientresponse_ = NULL;
  return temp;
}
inline void DocflowV3::set_allocated_recipientresponse(::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow* recipientresponse) {
  delete recipientresponse_;
  recipientresponse_ = recipientresponse;
  if (recipientresponse) {
    set_has_recipientresponse();
  } else {
    clear_has_recipientresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowV3.RecipientResponse)
}

// optional .Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow AmendmentRequest = 6;
inline bool DocflowV3::has_amendmentrequest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DocflowV3::set_has_amendmentrequest() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DocflowV3::clear_has_amendmentrequest() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DocflowV3::clear_amendmentrequest() {
  if (amendmentrequest_ != NULL) amendmentrequest_->::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow::Clear();
  clear_has_amendmentrequest();
}
inline const ::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow& DocflowV3::amendmentrequest() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowV3.AmendmentRequest)
  return amendmentrequest_ != NULL ? *amendmentrequest_ : *default_instance_->amendmentrequest_;
}
inline ::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow* DocflowV3::mutable_amendmentrequest() {
  set_has_amendmentrequest();
  if (amendmentrequest_ == NULL) amendmentrequest_ = new ::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowV3.AmendmentRequest)
  return amendmentrequest_;
}
inline ::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow* DocflowV3::release_amendmentrequest() {
  clear_has_amendmentrequest();
  ::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow* temp = amendmentrequest_;
  amendmentrequest_ = NULL;
  return temp;
}
inline void DocflowV3::set_allocated_amendmentrequest(::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow* amendmentrequest) {
  delete amendmentrequest_;
  amendmentrequest_ = amendmentrequest;
  if (amendmentrequest) {
    set_has_amendmentrequest();
  } else {
    clear_has_amendmentrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowV3.AmendmentRequest)
}

// optional .Diadoc.Api.Proto.Docflow.RevocationDocflowV3 Revocation = 7;
inline bool DocflowV3::has_revocation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DocflowV3::set_has_revocation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DocflowV3::clear_has_revocation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DocflowV3::clear_revocation() {
  if (revocation_ != NULL) revocation_->::Diadoc::Api::Proto::Docflow::RevocationDocflowV3::Clear();
  clear_has_revocation();
}
inline const ::Diadoc::Api::Proto::Docflow::RevocationDocflowV3& DocflowV3::revocation() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowV3.Revocation)
  return revocation_ != NULL ? *revocation_ : *default_instance_->revocation_;
}
inline ::Diadoc::Api::Proto::Docflow::RevocationDocflowV3* DocflowV3::mutable_revocation() {
  set_has_revocation();
  if (revocation_ == NULL) revocation_ = new ::Diadoc::Api::Proto::Docflow::RevocationDocflowV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowV3.Revocation)
  return revocation_;
}
inline ::Diadoc::Api::Proto::Docflow::RevocationDocflowV3* DocflowV3::release_revocation() {
  clear_has_revocation();
  ::Diadoc::Api::Proto::Docflow::RevocationDocflowV3* temp = revocation_;
  revocation_ = NULL;
  return temp;
}
inline void DocflowV3::set_allocated_revocation(::Diadoc::Api::Proto::Docflow::RevocationDocflowV3* revocation) {
  delete revocation_;
  revocation_ = revocation;
  if (revocation) {
    set_has_revocation();
  } else {
    clear_has_revocation();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowV3.Revocation)
}

// optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 SenderReceipt = 8;
inline bool DocflowV3::has_senderreceipt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DocflowV3::set_has_senderreceipt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DocflowV3::clear_has_senderreceipt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DocflowV3::clear_senderreceipt() {
  if (senderreceipt_ != NULL) senderreceipt_->::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::Clear();
  clear_has_senderreceipt();
}
inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3& DocflowV3::senderreceipt() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowV3.SenderReceipt)
  return senderreceipt_ != NULL ? *senderreceipt_ : *default_instance_->senderreceipt_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* DocflowV3::mutable_senderreceipt() {
  set_has_senderreceipt();
  if (senderreceipt_ == NULL) senderreceipt_ = new ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowV3.SenderReceipt)
  return senderreceipt_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* DocflowV3::release_senderreceipt() {
  clear_has_senderreceipt();
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* temp = senderreceipt_;
  senderreceipt_ = NULL;
  return temp;
}
inline void DocflowV3::set_allocated_senderreceipt(::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* senderreceipt) {
  delete senderreceipt_;
  senderreceipt_ = senderreceipt;
  if (senderreceipt) {
    set_has_senderreceipt();
  } else {
    clear_has_senderreceipt();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowV3.SenderReceipt)
}

// optional .Diadoc.Api.Proto.Docflow.ResolutionDocflowV3 Resolution = 9;
inline bool DocflowV3::has_resolution() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DocflowV3::set_has_resolution() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DocflowV3::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DocflowV3::clear_resolution() {
  if (resolution_ != NULL) resolution_->::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3::Clear();
  clear_has_resolution();
}
inline const ::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3& DocflowV3::resolution() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowV3.Resolution)
  return resolution_ != NULL ? *resolution_ : *default_instance_->resolution_;
}
inline ::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3* DocflowV3::mutable_resolution() {
  set_has_resolution();
  if (resolution_ == NULL) resolution_ = new ::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowV3.Resolution)
  return resolution_;
}
inline ::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3* DocflowV3::release_resolution() {
  clear_has_resolution();
  ::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3* temp = resolution_;
  resolution_ = NULL;
  return temp;
}
inline void DocflowV3::set_allocated_resolution(::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3* resolution) {
  delete resolution_;
  resolution_ = resolution;
  if (resolution) {
    set_has_resolution();
  } else {
    clear_has_resolution();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowV3.Resolution)
}

// optional .Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3 ResolutionEntities = 10;
inline bool DocflowV3::has_resolutionentities() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DocflowV3::set_has_resolutionentities() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DocflowV3::clear_has_resolutionentities() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DocflowV3::clear_resolutionentities() {
  if (resolutionentities_ != NULL) resolutionentities_->::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3::Clear();
  clear_has_resolutionentities();
}
inline const ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3& DocflowV3::resolutionentities() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowV3.ResolutionEntities)
  return resolutionentities_ != NULL ? *resolutionentities_ : *default_instance_->resolutionentities_;
}
inline ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* DocflowV3::mutable_resolutionentities() {
  set_has_resolutionentities();
  if (resolutionentities_ == NULL) resolutionentities_ = new ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowV3.ResolutionEntities)
  return resolutionentities_;
}
inline ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* DocflowV3::release_resolutionentities() {
  clear_has_resolutionentities();
  ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* temp = resolutionentities_;
  resolutionentities_ = NULL;
  return temp;
}
inline void DocflowV3::set_allocated_resolutionentities(::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* resolutionentities) {
  delete resolutionentities_;
  resolutionentities_ = resolutionentities;
  if (resolutionentities) {
    set_has_resolutionentities();
  } else {
    clear_has_resolutionentities();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowV3.ResolutionEntities)
}

// repeated .Diadoc.Api.Proto.Docflow.OuterDocflow OuterDocflows = 12;
inline int DocflowV3::outerdocflows_size() const {
  return outerdocflows_.size();
}
inline void DocflowV3::clear_outerdocflows() {
  outerdocflows_.Clear();
}
inline const ::Diadoc::Api::Proto::Docflow::OuterDocflow& DocflowV3::outerdocflows(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowV3.OuterDocflows)
  return outerdocflows_.Get(index);
}
inline ::Diadoc::Api::Proto::Docflow::OuterDocflow* DocflowV3::mutable_outerdocflows(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowV3.OuterDocflows)
  return outerdocflows_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Docflow::OuterDocflow* DocflowV3::add_outerdocflows() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.DocflowV3.OuterDocflows)
  return outerdocflows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::OuterDocflow >&
DocflowV3::outerdocflows() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.DocflowV3.OuterDocflows)
  return outerdocflows_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::OuterDocflow >*
DocflowV3::mutable_outerdocflows() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.DocflowV3.OuterDocflows)
  return &outerdocflows_;
}

// repeated .Diadoc.Api.Proto.Docflow.OuterDocflowEntities OuterDocflowEntities = 13;
inline int DocflowV3::outerdocflowentities_size() const {
  return outerdocflowentities_.size();
}
inline void DocflowV3::clear_outerdocflowentities() {
  outerdocflowentities_.Clear();
}
inline const ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities& DocflowV3::outerdocflowentities(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowV3.OuterDocflowEntities)
  return outerdocflowentities_.Get(index);
}
inline ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities* DocflowV3::mutable_outerdocflowentities(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowV3.OuterDocflowEntities)
  return outerdocflowentities_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities* DocflowV3::add_outerdocflowentities() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.DocflowV3.OuterDocflowEntities)
  return outerdocflowentities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities >&
DocflowV3::outerdocflowentities() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.DocflowV3.OuterDocflowEntities)
  return outerdocflowentities_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities >*
DocflowV3::mutable_outerdocflowentities() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.DocflowV3.OuterDocflowEntities)
  return &outerdocflowentities_;
}

// required .Diadoc.Api.Proto.DocflowStatusV3 DocflowStatus = 14;
inline bool DocflowV3::has_docflowstatus() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DocflowV3::set_has_docflowstatus() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DocflowV3::clear_has_docflowstatus() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DocflowV3::clear_docflowstatus() {
  if (docflowstatus_ != NULL) docflowstatus_->::Diadoc::Api::Proto::DocflowStatusV3::Clear();
  clear_has_docflowstatus();
}
inline const ::Diadoc::Api::Proto::DocflowStatusV3& DocflowV3::docflowstatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowV3.DocflowStatus)
  return docflowstatus_ != NULL ? *docflowstatus_ : *default_instance_->docflowstatus_;
}
inline ::Diadoc::Api::Proto::DocflowStatusV3* DocflowV3::mutable_docflowstatus() {
  set_has_docflowstatus();
  if (docflowstatus_ == NULL) docflowstatus_ = new ::Diadoc::Api::Proto::DocflowStatusV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowV3.DocflowStatus)
  return docflowstatus_;
}
inline ::Diadoc::Api::Proto::DocflowStatusV3* DocflowV3::release_docflowstatus() {
  clear_has_docflowstatus();
  ::Diadoc::Api::Proto::DocflowStatusV3* temp = docflowstatus_;
  docflowstatus_ = NULL;
  return temp;
}
inline void DocflowV3::set_allocated_docflowstatus(::Diadoc::Api::Proto::DocflowStatusV3* docflowstatus) {
  delete docflowstatus_;
  docflowstatus_ = docflowstatus;
  if (docflowstatus) {
    set_has_docflowstatus();
  } else {
    clear_has_docflowstatus();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowV3.DocflowStatus)
}

// -------------------------------------------------------------------

// SenderTitleDocflow

// required bool IsFinished = 1;
inline bool SenderTitleDocflow::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SenderTitleDocflow::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SenderTitleDocflow::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SenderTitleDocflow::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool SenderTitleDocflow::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.IsFinished)
  return isfinished_;
}
inline void SenderTitleDocflow::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.IsFinished)
}

// required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Attachment = 2;
inline bool SenderTitleDocflow::has_attachment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SenderTitleDocflow::set_has_attachment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SenderTitleDocflow::clear_has_attachment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SenderTitleDocflow::clear_attachment() {
  if (attachment_ != NULL) attachment_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
  clear_has_attachment();
}
inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& SenderTitleDocflow::attachment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.Attachment)
  return attachment_ != NULL ? *attachment_ : *default_instance_->attachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* SenderTitleDocflow::mutable_attachment() {
  set_has_attachment();
  if (attachment_ == NULL) attachment_ = new ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.Attachment)
  return attachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* SenderTitleDocflow::release_attachment() {
  clear_has_attachment();
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* temp = attachment_;
  attachment_ = NULL;
  return temp;
}
inline void SenderTitleDocflow::set_allocated_attachment(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* attachment) {
  delete attachment_;
  attachment_ = attachment;
  if (attachment) {
    set_has_attachment();
  } else {
    clear_has_attachment();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.Attachment)
}

// optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
inline bool SenderTitleDocflow::has_sentat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SenderTitleDocflow::set_has_sentat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SenderTitleDocflow::clear_has_sentat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SenderTitleDocflow::clear_sentat() {
  if (sentat_ != NULL) sentat_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_sentat();
}
inline const ::Diadoc::Api::Proto::Timestamp& SenderTitleDocflow::sentat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.SentAt)
  return sentat_ != NULL ? *sentat_ : *default_instance_->sentat_;
}
inline ::Diadoc::Api::Proto::Timestamp* SenderTitleDocflow::mutable_sentat() {
  set_has_sentat();
  if (sentat_ == NULL) sentat_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.SentAt)
  return sentat_;
}
inline ::Diadoc::Api::Proto::Timestamp* SenderTitleDocflow::release_sentat() {
  clear_has_sentat();
  ::Diadoc::Api::Proto::Timestamp* temp = sentat_;
  sentat_ = NULL;
  return temp;
}
inline void SenderTitleDocflow::set_allocated_sentat(::Diadoc::Api::Proto::Timestamp* sentat) {
  delete sentat_;
  sentat_ = sentat;
  if (sentat) {
    set_has_sentat();
  } else {
    clear_has_sentat();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.SentAt)
}

// optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
inline bool SenderTitleDocflow::has_deliveredat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SenderTitleDocflow::set_has_deliveredat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SenderTitleDocflow::clear_has_deliveredat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SenderTitleDocflow::clear_deliveredat() {
  if (deliveredat_ != NULL) deliveredat_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_deliveredat();
}
inline const ::Diadoc::Api::Proto::Timestamp& SenderTitleDocflow::deliveredat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.DeliveredAt)
  return deliveredat_ != NULL ? *deliveredat_ : *default_instance_->deliveredat_;
}
inline ::Diadoc::Api::Proto::Timestamp* SenderTitleDocflow::mutable_deliveredat() {
  set_has_deliveredat();
  if (deliveredat_ == NULL) deliveredat_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.DeliveredAt)
  return deliveredat_;
}
inline ::Diadoc::Api::Proto::Timestamp* SenderTitleDocflow::release_deliveredat() {
  clear_has_deliveredat();
  ::Diadoc::Api::Proto::Timestamp* temp = deliveredat_;
  deliveredat_ = NULL;
  return temp;
}
inline void SenderTitleDocflow::set_allocated_deliveredat(::Diadoc::Api::Proto::Timestamp* deliveredat) {
  delete deliveredat_;
  deliveredat_ = deliveredat;
  if (deliveredat) {
    set_has_deliveredat();
  } else {
    clear_has_deliveredat();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.DeliveredAt)
}

// optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 5;
inline bool SenderTitleDocflow::has_roamingnotification() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SenderTitleDocflow::set_has_roamingnotification() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SenderTitleDocflow::clear_has_roamingnotification() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SenderTitleDocflow::clear_roamingnotification() {
  if (roamingnotification_ != NULL) roamingnotification_->::Diadoc::Api::Proto::Docflow::RoamingNotification::Clear();
  clear_has_roamingnotification();
}
inline const ::Diadoc::Api::Proto::Docflow::RoamingNotification& SenderTitleDocflow::roamingnotification() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.RoamingNotification)
  return roamingnotification_ != NULL ? *roamingnotification_ : *default_instance_->roamingnotification_;
}
inline ::Diadoc::Api::Proto::Docflow::RoamingNotification* SenderTitleDocflow::mutable_roamingnotification() {
  set_has_roamingnotification();
  if (roamingnotification_ == NULL) roamingnotification_ = new ::Diadoc::Api::Proto::Docflow::RoamingNotification;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.RoamingNotification)
  return roamingnotification_;
}
inline ::Diadoc::Api::Proto::Docflow::RoamingNotification* SenderTitleDocflow::release_roamingnotification() {
  clear_has_roamingnotification();
  ::Diadoc::Api::Proto::Docflow::RoamingNotification* temp = roamingnotification_;
  roamingnotification_ = NULL;
  return temp;
}
inline void SenderTitleDocflow::set_allocated_roamingnotification(::Diadoc::Api::Proto::Docflow::RoamingNotification* roamingnotification) {
  delete roamingnotification_;
  roamingnotification_ = roamingnotification;
  if (roamingnotification) {
    set_has_roamingnotification();
  } else {
    clear_has_roamingnotification();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.RoamingNotification)
}

// required .Diadoc.Api.Proto.Documents.SenderSignatureStatus SenderSignatureStatus = 6;
inline bool SenderTitleDocflow::has_sendersignaturestatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SenderTitleDocflow::set_has_sendersignaturestatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SenderTitleDocflow::clear_has_sendersignaturestatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SenderTitleDocflow::clear_sendersignaturestatus() {
  sendersignaturestatus_ = 0;
  clear_has_sendersignaturestatus();
}
inline ::Diadoc::Api::Proto::Documents::SenderSignatureStatus SenderTitleDocflow::sendersignaturestatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.SenderSignatureStatus)
  return static_cast< ::Diadoc::Api::Proto::Documents::SenderSignatureStatus >(sendersignaturestatus_);
}
inline void SenderTitleDocflow::set_sendersignaturestatus(::Diadoc::Api::Proto::Documents::SenderSignatureStatus value) {
  assert(::Diadoc::Api::Proto::Documents::SenderSignatureStatus_IsValid(value));
  set_has_sendersignaturestatus();
  sendersignaturestatus_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.SenderTitleDocflow.SenderSignatureStatus)
}

// -------------------------------------------------------------------

// ConfirmationDocflow

// required bool IsFinished = 1;
inline bool ConfirmationDocflow::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfirmationDocflow::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfirmationDocflow::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfirmationDocflow::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool ConfirmationDocflow::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ConfirmationDocflow.IsFinished)
  return isfinished_;
}
inline void ConfirmationDocflow::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ConfirmationDocflow.IsFinished)
}

// optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 ConfirmationAttachment = 2;
inline bool ConfirmationDocflow::has_confirmationattachment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfirmationDocflow::set_has_confirmationattachment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfirmationDocflow::clear_has_confirmationattachment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfirmationDocflow::clear_confirmationattachment() {
  if (confirmationattachment_ != NULL) confirmationattachment_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
  clear_has_confirmationattachment();
}
inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& ConfirmationDocflow::confirmationattachment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ConfirmationDocflow.ConfirmationAttachment)
  return confirmationattachment_ != NULL ? *confirmationattachment_ : *default_instance_->confirmationattachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* ConfirmationDocflow::mutable_confirmationattachment() {
  set_has_confirmationattachment();
  if (confirmationattachment_ == NULL) confirmationattachment_ = new ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ConfirmationDocflow.ConfirmationAttachment)
  return confirmationattachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* ConfirmationDocflow::release_confirmationattachment() {
  clear_has_confirmationattachment();
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* temp = confirmationattachment_;
  confirmationattachment_ = NULL;
  return temp;
}
inline void ConfirmationDocflow::set_allocated_confirmationattachment(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* confirmationattachment) {
  delete confirmationattachment_;
  confirmationattachment_ = confirmationattachment;
  if (confirmationattachment) {
    set_has_confirmationattachment();
  } else {
    clear_has_confirmationattachment();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ConfirmationDocflow.ConfirmationAttachment)
}

// optional .Diadoc.Api.Proto.Timestamp ConfirmedAt = 3;
inline bool ConfirmationDocflow::has_confirmedat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfirmationDocflow::set_has_confirmedat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfirmationDocflow::clear_has_confirmedat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfirmationDocflow::clear_confirmedat() {
  if (confirmedat_ != NULL) confirmedat_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_confirmedat();
}
inline const ::Diadoc::Api::Proto::Timestamp& ConfirmationDocflow::confirmedat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ConfirmationDocflow.ConfirmedAt)
  return confirmedat_ != NULL ? *confirmedat_ : *default_instance_->confirmedat_;
}
inline ::Diadoc::Api::Proto::Timestamp* ConfirmationDocflow::mutable_confirmedat() {
  set_has_confirmedat();
  if (confirmedat_ == NULL) confirmedat_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ConfirmationDocflow.ConfirmedAt)
  return confirmedat_;
}
inline ::Diadoc::Api::Proto::Timestamp* ConfirmationDocflow::release_confirmedat() {
  clear_has_confirmedat();
  ::Diadoc::Api::Proto::Timestamp* temp = confirmedat_;
  confirmedat_ = NULL;
  return temp;
}
inline void ConfirmationDocflow::set_allocated_confirmedat(::Diadoc::Api::Proto::Timestamp* confirmedat) {
  delete confirmedat_;
  confirmedat_ = confirmedat;
  if (confirmedat) {
    set_has_confirmedat();
  } else {
    clear_has_confirmedat();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ConfirmationDocflow.ConfirmedAt)
}

// optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 Receipt = 4;
inline bool ConfirmationDocflow::has_receipt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfirmationDocflow::set_has_receipt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfirmationDocflow::clear_has_receipt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfirmationDocflow::clear_receipt() {
  if (receipt_ != NULL) receipt_->::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::Clear();
  clear_has_receipt();
}
inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3& ConfirmationDocflow::receipt() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ConfirmationDocflow.Receipt)
  return receipt_ != NULL ? *receipt_ : *default_instance_->receipt_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* ConfirmationDocflow::mutable_receipt() {
  set_has_receipt();
  if (receipt_ == NULL) receipt_ = new ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ConfirmationDocflow.Receipt)
  return receipt_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* ConfirmationDocflow::release_receipt() {
  clear_has_receipt();
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* temp = receipt_;
  receipt_ = NULL;
  return temp;
}
inline void ConfirmationDocflow::set_allocated_receipt(::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* receipt) {
  delete receipt_;
  receipt_ = receipt;
  if (receipt) {
    set_has_receipt();
  } else {
    clear_has_receipt();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ConfirmationDocflow.Receipt)
}

// -------------------------------------------------------------------

// SignatureRejectionDocflow

// required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 SignatureRejection = 1;
inline bool SignatureRejectionDocflow::has_signaturerejection() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignatureRejectionDocflow::set_has_signaturerejection() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignatureRejectionDocflow::clear_has_signaturerejection() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignatureRejectionDocflow::clear_signaturerejection() {
  if (signaturerejection_ != NULL) signaturerejection_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
  clear_has_signaturerejection();
}
inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& SignatureRejectionDocflow::signaturerejection() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow.SignatureRejection)
  return signaturerejection_ != NULL ? *signaturerejection_ : *default_instance_->signaturerejection_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* SignatureRejectionDocflow::mutable_signaturerejection() {
  set_has_signaturerejection();
  if (signaturerejection_ == NULL) signaturerejection_ = new ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow.SignatureRejection)
  return signaturerejection_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* SignatureRejectionDocflow::release_signaturerejection() {
  clear_has_signaturerejection();
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* temp = signaturerejection_;
  signaturerejection_ = NULL;
  return temp;
}
inline void SignatureRejectionDocflow::set_allocated_signaturerejection(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* signaturerejection) {
  delete signaturerejection_;
  signaturerejection_ = signaturerejection;
  if (signaturerejection) {
    set_has_signaturerejection();
  } else {
    clear_has_signaturerejection();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow.SignatureRejection)
}

// required bool IsFormal = 2;
inline bool SignatureRejectionDocflow::has_isformal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignatureRejectionDocflow::set_has_isformal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignatureRejectionDocflow::clear_has_isformal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignatureRejectionDocflow::clear_isformal() {
  isformal_ = false;
  clear_has_isformal();
}
inline bool SignatureRejectionDocflow::isformal() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow.IsFormal)
  return isformal_;
}
inline void SignatureRejectionDocflow::set_isformal(bool value) {
  set_has_isformal();
  isformal_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow.IsFormal)
}

// optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 3;
inline bool SignatureRejectionDocflow::has_deliveredat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignatureRejectionDocflow::set_has_deliveredat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignatureRejectionDocflow::clear_has_deliveredat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignatureRejectionDocflow::clear_deliveredat() {
  if (deliveredat_ != NULL) deliveredat_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_deliveredat();
}
inline const ::Diadoc::Api::Proto::Timestamp& SignatureRejectionDocflow::deliveredat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow.DeliveredAt)
  return deliveredat_ != NULL ? *deliveredat_ : *default_instance_->deliveredat_;
}
inline ::Diadoc::Api::Proto::Timestamp* SignatureRejectionDocflow::mutable_deliveredat() {
  set_has_deliveredat();
  if (deliveredat_ == NULL) deliveredat_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow.DeliveredAt)
  return deliveredat_;
}
inline ::Diadoc::Api::Proto::Timestamp* SignatureRejectionDocflow::release_deliveredat() {
  clear_has_deliveredat();
  ::Diadoc::Api::Proto::Timestamp* temp = deliveredat_;
  deliveredat_ = NULL;
  return temp;
}
inline void SignatureRejectionDocflow::set_allocated_deliveredat(::Diadoc::Api::Proto::Timestamp* deliveredat) {
  delete deliveredat_;
  deliveredat_ = deliveredat;
  if (deliveredat) {
    set_has_deliveredat();
  } else {
    clear_has_deliveredat();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow.DeliveredAt)
}

// optional string PlainText = 4;
inline bool SignatureRejectionDocflow::has_plaintext() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignatureRejectionDocflow::set_has_plaintext() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignatureRejectionDocflow::clear_has_plaintext() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignatureRejectionDocflow::clear_plaintext() {
  if (plaintext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plaintext_->clear();
  }
  clear_has_plaintext();
}
inline const ::std::string& SignatureRejectionDocflow::plaintext() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow.PlainText)
  return *plaintext_;
}
inline void SignatureRejectionDocflow::set_plaintext(const ::std::string& value) {
  set_has_plaintext();
  if (plaintext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plaintext_ = new ::std::string;
  }
  plaintext_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow.PlainText)
}
inline void SignatureRejectionDocflow::set_plaintext(const char* value) {
  set_has_plaintext();
  if (plaintext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plaintext_ = new ::std::string;
  }
  plaintext_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow.PlainText)
}
inline void SignatureRejectionDocflow::set_plaintext(const char* value, size_t size) {
  set_has_plaintext();
  if (plaintext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plaintext_ = new ::std::string;
  }
  plaintext_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow.PlainText)
}
inline ::std::string* SignatureRejectionDocflow::mutable_plaintext() {
  set_has_plaintext();
  if (plaintext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plaintext_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow.PlainText)
  return plaintext_;
}
inline ::std::string* SignatureRejectionDocflow::release_plaintext() {
  clear_has_plaintext();
  if (plaintext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = plaintext_;
    plaintext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignatureRejectionDocflow::set_allocated_plaintext(::std::string* plaintext) {
  if (plaintext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete plaintext_;
  }
  if (plaintext) {
    set_has_plaintext();
    plaintext_ = plaintext;
  } else {
    clear_has_plaintext();
    plaintext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow.PlainText)
}

// -------------------------------------------------------------------

// ParticipantResponseDocflow

// required bool IsFinished = 1;
inline bool ParticipantResponseDocflow::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParticipantResponseDocflow::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParticipantResponseDocflow::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParticipantResponseDocflow::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool ParticipantResponseDocflow::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.IsFinished)
  return isfinished_;
}
inline void ParticipantResponseDocflow::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.IsFinished)
}

// optional .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 2;
inline bool ParticipantResponseDocflow::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParticipantResponseDocflow::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParticipantResponseDocflow::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParticipantResponseDocflow::clear_signature() {
  if (signature_ != NULL) signature_->::Diadoc::Api::Proto::Docflow::SignatureV3::Clear();
  clear_has_signature();
}
inline const ::Diadoc::Api::Proto::Docflow::SignatureV3& ParticipantResponseDocflow::signature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.Signature)
  return signature_ != NULL ? *signature_ : *default_instance_->signature_;
}
inline ::Diadoc::Api::Proto::Docflow::SignatureV3* ParticipantResponseDocflow::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) signature_ = new ::Diadoc::Api::Proto::Docflow::SignatureV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.Signature)
  return signature_;
}
inline ::Diadoc::Api::Proto::Docflow::SignatureV3* ParticipantResponseDocflow::release_signature() {
  clear_has_signature();
  ::Diadoc::Api::Proto::Docflow::SignatureV3* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline void ParticipantResponseDocflow::set_allocated_signature(::Diadoc::Api::Proto::Docflow::SignatureV3* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.Signature)
}

// optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Title = 3;
inline bool ParticipantResponseDocflow::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParticipantResponseDocflow::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParticipantResponseDocflow::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParticipantResponseDocflow::clear_title() {
  if (title_ != NULL) title_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
  clear_has_title();
}
inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& ParticipantResponseDocflow::title() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.Title)
  return title_ != NULL ? *title_ : *default_instance_->title_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* ParticipantResponseDocflow::mutable_title() {
  set_has_title();
  if (title_ == NULL) title_ = new ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.Title)
  return title_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* ParticipantResponseDocflow::release_title() {
  clear_has_title();
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* temp = title_;
  title_ = NULL;
  return temp;
}
inline void ParticipantResponseDocflow::set_allocated_title(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* title) {
  delete title_;
  title_ = title;
  if (title) {
    set_has_title();
  } else {
    clear_has_title();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.Title)
}

// optional .Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow Rejection = 4;
inline bool ParticipantResponseDocflow::has_rejection() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParticipantResponseDocflow::set_has_rejection() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParticipantResponseDocflow::clear_has_rejection() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParticipantResponseDocflow::clear_rejection() {
  if (rejection_ != NULL) rejection_->::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow::Clear();
  clear_has_rejection();
}
inline const ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow& ParticipantResponseDocflow::rejection() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.Rejection)
  return rejection_ != NULL ? *rejection_ : *default_instance_->rejection_;
}
inline ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* ParticipantResponseDocflow::mutable_rejection() {
  set_has_rejection();
  if (rejection_ == NULL) rejection_ = new ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.Rejection)
  return rejection_;
}
inline ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* ParticipantResponseDocflow::release_rejection() {
  clear_has_rejection();
  ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* temp = rejection_;
  rejection_ = NULL;
  return temp;
}
inline void ParticipantResponseDocflow::set_allocated_rejection(::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* rejection) {
  delete rejection_;
  rejection_ = rejection;
  if (rejection) {
    set_has_rejection();
  } else {
    clear_has_rejection();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.Rejection)
}

// optional .Diadoc.Api.Proto.Timestamp SentAt = 5;
inline bool ParticipantResponseDocflow::has_sentat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParticipantResponseDocflow::set_has_sentat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParticipantResponseDocflow::clear_has_sentat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParticipantResponseDocflow::clear_sentat() {
  if (sentat_ != NULL) sentat_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_sentat();
}
inline const ::Diadoc::Api::Proto::Timestamp& ParticipantResponseDocflow::sentat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.SentAt)
  return sentat_ != NULL ? *sentat_ : *default_instance_->sentat_;
}
inline ::Diadoc::Api::Proto::Timestamp* ParticipantResponseDocflow::mutable_sentat() {
  set_has_sentat();
  if (sentat_ == NULL) sentat_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.SentAt)
  return sentat_;
}
inline ::Diadoc::Api::Proto::Timestamp* ParticipantResponseDocflow::release_sentat() {
  clear_has_sentat();
  ::Diadoc::Api::Proto::Timestamp* temp = sentat_;
  sentat_ = NULL;
  return temp;
}
inline void ParticipantResponseDocflow::set_allocated_sentat(::Diadoc::Api::Proto::Timestamp* sentat) {
  delete sentat_;
  sentat_ = sentat;
  if (sentat) {
    set_has_sentat();
  } else {
    clear_has_sentat();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.SentAt)
}

// optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 6;
inline bool ParticipantResponseDocflow::has_deliveredat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParticipantResponseDocflow::set_has_deliveredat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParticipantResponseDocflow::clear_has_deliveredat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParticipantResponseDocflow::clear_deliveredat() {
  if (deliveredat_ != NULL) deliveredat_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_deliveredat();
}
inline const ::Diadoc::Api::Proto::Timestamp& ParticipantResponseDocflow::deliveredat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.DeliveredAt)
  return deliveredat_ != NULL ? *deliveredat_ : *default_instance_->deliveredat_;
}
inline ::Diadoc::Api::Proto::Timestamp* ParticipantResponseDocflow::mutable_deliveredat() {
  set_has_deliveredat();
  if (deliveredat_ == NULL) deliveredat_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.DeliveredAt)
  return deliveredat_;
}
inline ::Diadoc::Api::Proto::Timestamp* ParticipantResponseDocflow::release_deliveredat() {
  clear_has_deliveredat();
  ::Diadoc::Api::Proto::Timestamp* temp = deliveredat_;
  deliveredat_ = NULL;
  return temp;
}
inline void ParticipantResponseDocflow::set_allocated_deliveredat(::Diadoc::Api::Proto::Timestamp* deliveredat) {
  delete deliveredat_;
  deliveredat_ = deliveredat;
  if (deliveredat) {
    set_has_deliveredat();
  } else {
    clear_has_deliveredat();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.DeliveredAt)
}

// required .Diadoc.Api.Proto.Documents.RecipientResponseStatus ResponseStatus = 7;
inline bool ParticipantResponseDocflow::has_responsestatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ParticipantResponseDocflow::set_has_responsestatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ParticipantResponseDocflow::clear_has_responsestatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ParticipantResponseDocflow::clear_responsestatus() {
  responsestatus_ = 0;
  clear_has_responsestatus();
}
inline ::Diadoc::Api::Proto::Documents::RecipientResponseStatus ParticipantResponseDocflow::responsestatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.ResponseStatus)
  return static_cast< ::Diadoc::Api::Proto::Documents::RecipientResponseStatus >(responsestatus_);
}
inline void ParticipantResponseDocflow::set_responsestatus(::Diadoc::Api::Proto::Documents::RecipientResponseStatus value) {
  assert(::Diadoc::Api::Proto::Documents::RecipientResponseStatus_IsValid(value));
  set_has_responsestatus();
  responsestatus_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow.ResponseStatus)
}

// -------------------------------------------------------------------

// AmendmentRequestDocflow

// required bool IsFinished = 1;
inline bool AmendmentRequestDocflow::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AmendmentRequestDocflow::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AmendmentRequestDocflow::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AmendmentRequestDocflow::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool AmendmentRequestDocflow::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.IsFinished)
  return isfinished_;
}
inline void AmendmentRequestDocflow::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.IsFinished)
}

// optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 AmendmentRequest = 2;
inline bool AmendmentRequestDocflow::has_amendmentrequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AmendmentRequestDocflow::set_has_amendmentrequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AmendmentRequestDocflow::clear_has_amendmentrequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AmendmentRequestDocflow::clear_amendmentrequest() {
  if (amendmentrequest_ != NULL) amendmentrequest_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
  clear_has_amendmentrequest();
}
inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& AmendmentRequestDocflow::amendmentrequest() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.AmendmentRequest)
  return amendmentrequest_ != NULL ? *amendmentrequest_ : *default_instance_->amendmentrequest_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* AmendmentRequestDocflow::mutable_amendmentrequest() {
  set_has_amendmentrequest();
  if (amendmentrequest_ == NULL) amendmentrequest_ = new ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.AmendmentRequest)
  return amendmentrequest_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* AmendmentRequestDocflow::release_amendmentrequest() {
  clear_has_amendmentrequest();
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* temp = amendmentrequest_;
  amendmentrequest_ = NULL;
  return temp;
}
inline void AmendmentRequestDocflow::set_allocated_amendmentrequest(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* amendmentrequest) {
  delete amendmentrequest_;
  amendmentrequest_ = amendmentrequest;
  if (amendmentrequest) {
    set_has_amendmentrequest();
  } else {
    clear_has_amendmentrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.AmendmentRequest)
}

// optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
inline bool AmendmentRequestDocflow::has_sentat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AmendmentRequestDocflow::set_has_sentat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AmendmentRequestDocflow::clear_has_sentat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AmendmentRequestDocflow::clear_sentat() {
  if (sentat_ != NULL) sentat_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_sentat();
}
inline const ::Diadoc::Api::Proto::Timestamp& AmendmentRequestDocflow::sentat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.SentAt)
  return sentat_ != NULL ? *sentat_ : *default_instance_->sentat_;
}
inline ::Diadoc::Api::Proto::Timestamp* AmendmentRequestDocflow::mutable_sentat() {
  set_has_sentat();
  if (sentat_ == NULL) sentat_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.SentAt)
  return sentat_;
}
inline ::Diadoc::Api::Proto::Timestamp* AmendmentRequestDocflow::release_sentat() {
  clear_has_sentat();
  ::Diadoc::Api::Proto::Timestamp* temp = sentat_;
  sentat_ = NULL;
  return temp;
}
inline void AmendmentRequestDocflow::set_allocated_sentat(::Diadoc::Api::Proto::Timestamp* sentat) {
  delete sentat_;
  sentat_ = sentat;
  if (sentat) {
    set_has_sentat();
  } else {
    clear_has_sentat();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.SentAt)
}

// optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
inline bool AmendmentRequestDocflow::has_deliveredat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AmendmentRequestDocflow::set_has_deliveredat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AmendmentRequestDocflow::clear_has_deliveredat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AmendmentRequestDocflow::clear_deliveredat() {
  if (deliveredat_ != NULL) deliveredat_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_deliveredat();
}
inline const ::Diadoc::Api::Proto::Timestamp& AmendmentRequestDocflow::deliveredat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.DeliveredAt)
  return deliveredat_ != NULL ? *deliveredat_ : *default_instance_->deliveredat_;
}
inline ::Diadoc::Api::Proto::Timestamp* AmendmentRequestDocflow::mutable_deliveredat() {
  set_has_deliveredat();
  if (deliveredat_ == NULL) deliveredat_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.DeliveredAt)
  return deliveredat_;
}
inline ::Diadoc::Api::Proto::Timestamp* AmendmentRequestDocflow::release_deliveredat() {
  clear_has_deliveredat();
  ::Diadoc::Api::Proto::Timestamp* temp = deliveredat_;
  deliveredat_ = NULL;
  return temp;
}
inline void AmendmentRequestDocflow::set_allocated_deliveredat(::Diadoc::Api::Proto::Timestamp* deliveredat) {
  delete deliveredat_;
  deliveredat_ = deliveredat;
  if (deliveredat) {
    set_has_deliveredat();
  } else {
    clear_has_deliveredat();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.DeliveredAt)
}

// optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 Receipt = 5;
inline bool AmendmentRequestDocflow::has_receipt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AmendmentRequestDocflow::set_has_receipt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AmendmentRequestDocflow::clear_has_receipt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AmendmentRequestDocflow::clear_receipt() {
  if (receipt_ != NULL) receipt_->::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::Clear();
  clear_has_receipt();
}
inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3& AmendmentRequestDocflow::receipt() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.Receipt)
  return receipt_ != NULL ? *receipt_ : *default_instance_->receipt_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* AmendmentRequestDocflow::mutable_receipt() {
  set_has_receipt();
  if (receipt_ == NULL) receipt_ = new ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.Receipt)
  return receipt_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* AmendmentRequestDocflow::release_receipt() {
  clear_has_receipt();
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* temp = receipt_;
  receipt_ = NULL;
  return temp;
}
inline void AmendmentRequestDocflow::set_allocated_receipt(::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3* receipt) {
  delete receipt_;
  receipt_ = receipt;
  if (receipt) {
    set_has_receipt();
  } else {
    clear_has_receipt();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.Receipt)
}

// required int32 AmendmentFlags = 6;
inline bool AmendmentRequestDocflow::has_amendmentflags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AmendmentRequestDocflow::set_has_amendmentflags() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AmendmentRequestDocflow::clear_has_amendmentflags() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AmendmentRequestDocflow::clear_amendmentflags() {
  amendmentflags_ = 0;
  clear_has_amendmentflags();
}
inline ::google::protobuf::int32 AmendmentRequestDocflow::amendmentflags() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.AmendmentFlags)
  return amendmentflags_;
}
inline void AmendmentRequestDocflow::set_amendmentflags(::google::protobuf::int32 value) {
  set_has_amendmentflags();
  amendmentflags_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.AmendmentFlags)
}

// optional string PlainText = 7;
inline bool AmendmentRequestDocflow::has_plaintext() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AmendmentRequestDocflow::set_has_plaintext() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AmendmentRequestDocflow::clear_has_plaintext() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AmendmentRequestDocflow::clear_plaintext() {
  if (plaintext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plaintext_->clear();
  }
  clear_has_plaintext();
}
inline const ::std::string& AmendmentRequestDocflow::plaintext() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.PlainText)
  return *plaintext_;
}
inline void AmendmentRequestDocflow::set_plaintext(const ::std::string& value) {
  set_has_plaintext();
  if (plaintext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plaintext_ = new ::std::string;
  }
  plaintext_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.PlainText)
}
inline void AmendmentRequestDocflow::set_plaintext(const char* value) {
  set_has_plaintext();
  if (plaintext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plaintext_ = new ::std::string;
  }
  plaintext_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.PlainText)
}
inline void AmendmentRequestDocflow::set_plaintext(const char* value, size_t size) {
  set_has_plaintext();
  if (plaintext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plaintext_ = new ::std::string;
  }
  plaintext_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.PlainText)
}
inline ::std::string* AmendmentRequestDocflow::mutable_plaintext() {
  set_has_plaintext();
  if (plaintext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plaintext_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.PlainText)
  return plaintext_;
}
inline ::std::string* AmendmentRequestDocflow::release_plaintext() {
  clear_has_plaintext();
  if (plaintext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = plaintext_;
    plaintext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AmendmentRequestDocflow::set_allocated_plaintext(::std::string* plaintext) {
  if (plaintext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete plaintext_;
  }
  if (plaintext) {
    set_has_plaintext();
    plaintext_ = plaintext;
  } else {
    clear_has_plaintext();
    plaintext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.PlainText)
}

// optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow ConfirmationDocflow = 8;
inline bool AmendmentRequestDocflow::has_confirmationdocflow() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AmendmentRequestDocflow::set_has_confirmationdocflow() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AmendmentRequestDocflow::clear_has_confirmationdocflow() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AmendmentRequestDocflow::clear_confirmationdocflow() {
  if (confirmationdocflow_ != NULL) confirmationdocflow_->::Diadoc::Api::Proto::Docflow::ConfirmationDocflow::Clear();
  clear_has_confirmationdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow& AmendmentRequestDocflow::confirmationdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.ConfirmationDocflow)
  return confirmationdocflow_ != NULL ? *confirmationdocflow_ : *default_instance_->confirmationdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* AmendmentRequestDocflow::mutable_confirmationdocflow() {
  set_has_confirmationdocflow();
  if (confirmationdocflow_ == NULL) confirmationdocflow_ = new ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.ConfirmationDocflow)
  return confirmationdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* AmendmentRequestDocflow::release_confirmationdocflow() {
  clear_has_confirmationdocflow();
  ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* temp = confirmationdocflow_;
  confirmationdocflow_ = NULL;
  return temp;
}
inline void AmendmentRequestDocflow::set_allocated_confirmationdocflow(::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* confirmationdocflow) {
  delete confirmationdocflow_;
  confirmationdocflow_ = confirmationdocflow;
  if (confirmationdocflow) {
    set_has_confirmationdocflow();
  } else {
    clear_has_confirmationdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow.ConfirmationDocflow)
}

// -------------------------------------------------------------------

// RevocationDocflowV3

// required bool IsFinished = 1;
inline bool RevocationDocflowV3::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RevocationDocflowV3::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RevocationDocflowV3::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RevocationDocflowV3::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool RevocationDocflowV3::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.IsFinished)
  return isfinished_;
}
inline void RevocationDocflowV3::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.IsFinished)
}

// required .Diadoc.Api.Proto.Docflow.RevocationRequestDocflow RevocationRequest = 2;
inline bool RevocationDocflowV3::has_revocationrequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RevocationDocflowV3::set_has_revocationrequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RevocationDocflowV3::clear_has_revocationrequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RevocationDocflowV3::clear_revocationrequest() {
  if (revocationrequest_ != NULL) revocationrequest_->::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow::Clear();
  clear_has_revocationrequest();
}
inline const ::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow& RevocationDocflowV3::revocationrequest() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.RevocationRequest)
  return revocationrequest_ != NULL ? *revocationrequest_ : *default_instance_->revocationrequest_;
}
inline ::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow* RevocationDocflowV3::mutable_revocationrequest() {
  set_has_revocationrequest();
  if (revocationrequest_ == NULL) revocationrequest_ = new ::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.RevocationRequest)
  return revocationrequest_;
}
inline ::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow* RevocationDocflowV3::release_revocationrequest() {
  clear_has_revocationrequest();
  ::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow* temp = revocationrequest_;
  revocationrequest_ = NULL;
  return temp;
}
inline void RevocationDocflowV3::set_allocated_revocationrequest(::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow* revocationrequest) {
  delete revocationrequest_;
  revocationrequest_ = revocationrequest;
  if (revocationrequest) {
    set_has_revocationrequest();
  } else {
    clear_has_revocationrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.RevocationRequest)
}

// optional .Diadoc.Api.Proto.Docflow.RevocationResponseDocflow RevocationResponse = 3;
inline bool RevocationDocflowV3::has_revocationresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RevocationDocflowV3::set_has_revocationresponse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RevocationDocflowV3::clear_has_revocationresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RevocationDocflowV3::clear_revocationresponse() {
  if (revocationresponse_ != NULL) revocationresponse_->::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow::Clear();
  clear_has_revocationresponse();
}
inline const ::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow& RevocationDocflowV3::revocationresponse() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.RevocationResponse)
  return revocationresponse_ != NULL ? *revocationresponse_ : *default_instance_->revocationresponse_;
}
inline ::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow* RevocationDocflowV3::mutable_revocationresponse() {
  set_has_revocationresponse();
  if (revocationresponse_ == NULL) revocationresponse_ = new ::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.RevocationResponse)
  return revocationresponse_;
}
inline ::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow* RevocationDocflowV3::release_revocationresponse() {
  clear_has_revocationresponse();
  ::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow* temp = revocationresponse_;
  revocationresponse_ = NULL;
  return temp;
}
inline void RevocationDocflowV3::set_allocated_revocationresponse(::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow* revocationresponse) {
  delete revocationresponse_;
  revocationresponse_ = revocationresponse;
  if (revocationresponse) {
    set_has_revocationresponse();
  } else {
    clear_has_revocationresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.RevocationResponse)
}

// required string InitiatorBoxId = 4;
inline bool RevocationDocflowV3::has_initiatorboxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RevocationDocflowV3::set_has_initiatorboxid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RevocationDocflowV3::clear_has_initiatorboxid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RevocationDocflowV3::clear_initiatorboxid() {
  if (initiatorboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initiatorboxid_->clear();
  }
  clear_has_initiatorboxid();
}
inline const ::std::string& RevocationDocflowV3::initiatorboxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.InitiatorBoxId)
  return *initiatorboxid_;
}
inline void RevocationDocflowV3::set_initiatorboxid(const ::std::string& value) {
  set_has_initiatorboxid();
  if (initiatorboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initiatorboxid_ = new ::std::string;
  }
  initiatorboxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.InitiatorBoxId)
}
inline void RevocationDocflowV3::set_initiatorboxid(const char* value) {
  set_has_initiatorboxid();
  if (initiatorboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initiatorboxid_ = new ::std::string;
  }
  initiatorboxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.InitiatorBoxId)
}
inline void RevocationDocflowV3::set_initiatorboxid(const char* value, size_t size) {
  set_has_initiatorboxid();
  if (initiatorboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initiatorboxid_ = new ::std::string;
  }
  initiatorboxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.InitiatorBoxId)
}
inline ::std::string* RevocationDocflowV3::mutable_initiatorboxid() {
  set_has_initiatorboxid();
  if (initiatorboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initiatorboxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.InitiatorBoxId)
  return initiatorboxid_;
}
inline ::std::string* RevocationDocflowV3::release_initiatorboxid() {
  clear_has_initiatorboxid();
  if (initiatorboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = initiatorboxid_;
    initiatorboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RevocationDocflowV3::set_allocated_initiatorboxid(::std::string* initiatorboxid) {
  if (initiatorboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initiatorboxid_;
  }
  if (initiatorboxid) {
    set_has_initiatorboxid();
    initiatorboxid_ = initiatorboxid;
  } else {
    clear_has_initiatorboxid();
    initiatorboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.InitiatorBoxId)
}

// required .Diadoc.Api.Proto.Documents.RevocationStatus RevocationStatus = 5;
inline bool RevocationDocflowV3::has_revocationstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RevocationDocflowV3::set_has_revocationstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RevocationDocflowV3::clear_has_revocationstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RevocationDocflowV3::clear_revocationstatus() {
  revocationstatus_ = 0;
  clear_has_revocationstatus();
}
inline ::Diadoc::Api::Proto::Documents::RevocationStatus RevocationDocflowV3::revocationstatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.RevocationStatus)
  return static_cast< ::Diadoc::Api::Proto::Documents::RevocationStatus >(revocationstatus_);
}
inline void RevocationDocflowV3::set_revocationstatus(::Diadoc::Api::Proto::Documents::RevocationStatus value) {
  assert(::Diadoc::Api::Proto::Documents::RevocationStatus_IsValid(value));
  set_has_revocationstatus();
  revocationstatus_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.RevocationStatus)
}

// optional .Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3 ResolutionEntities = 6;
inline bool RevocationDocflowV3::has_resolutionentities() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RevocationDocflowV3::set_has_resolutionentities() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RevocationDocflowV3::clear_has_resolutionentities() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RevocationDocflowV3::clear_resolutionentities() {
  if (resolutionentities_ != NULL) resolutionentities_->::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3::Clear();
  clear_has_resolutionentities();
}
inline const ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3& RevocationDocflowV3::resolutionentities() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.ResolutionEntities)
  return resolutionentities_ != NULL ? *resolutionentities_ : *default_instance_->resolutionentities_;
}
inline ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* RevocationDocflowV3::mutable_resolutionentities() {
  set_has_resolutionentities();
  if (resolutionentities_ == NULL) resolutionentities_ = new ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.ResolutionEntities)
  return resolutionentities_;
}
inline ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* RevocationDocflowV3::release_resolutionentities() {
  clear_has_resolutionentities();
  ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* temp = resolutionentities_;
  resolutionentities_ = NULL;
  return temp;
}
inline void RevocationDocflowV3::set_allocated_resolutionentities(::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3* resolutionentities) {
  delete resolutionentities_;
  resolutionentities_ = resolutionentities;
  if (resolutionentities) {
    set_has_resolutionentities();
  } else {
    clear_has_resolutionentities();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.ResolutionEntities)
}

// repeated .Diadoc.Api.Proto.Docflow.OuterDocflowEntities OuterDocflowEntities = 7;
inline int RevocationDocflowV3::outerdocflowentities_size() const {
  return outerdocflowentities_.size();
}
inline void RevocationDocflowV3::clear_outerdocflowentities() {
  outerdocflowentities_.Clear();
}
inline const ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities& RevocationDocflowV3::outerdocflowentities(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.OuterDocflowEntities)
  return outerdocflowentities_.Get(index);
}
inline ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities* RevocationDocflowV3::mutable_outerdocflowentities(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.OuterDocflowEntities)
  return outerdocflowentities_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities* RevocationDocflowV3::add_outerdocflowentities() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.OuterDocflowEntities)
  return outerdocflowentities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities >&
RevocationDocflowV3::outerdocflowentities() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.OuterDocflowEntities)
  return outerdocflowentities_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::OuterDocflowEntities >*
RevocationDocflowV3::mutable_outerdocflowentities() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.RevocationDocflowV3.OuterDocflowEntities)
  return &outerdocflowentities_;
}

// -------------------------------------------------------------------

// RevocationRequestDocflow

// required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 RevocationRequest = 1;
inline bool RevocationRequestDocflow::has_revocationrequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RevocationRequestDocflow::set_has_revocationrequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RevocationRequestDocflow::clear_has_revocationrequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RevocationRequestDocflow::clear_revocationrequest() {
  if (revocationrequest_ != NULL) revocationrequest_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
  clear_has_revocationrequest();
}
inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& RevocationRequestDocflow::revocationrequest() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.RevocationRequest)
  return revocationrequest_ != NULL ? *revocationrequest_ : *default_instance_->revocationrequest_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* RevocationRequestDocflow::mutable_revocationrequest() {
  set_has_revocationrequest();
  if (revocationrequest_ == NULL) revocationrequest_ = new ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.RevocationRequest)
  return revocationrequest_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* RevocationRequestDocflow::release_revocationrequest() {
  clear_has_revocationrequest();
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* temp = revocationrequest_;
  revocationrequest_ = NULL;
  return temp;
}
inline void RevocationRequestDocflow::set_allocated_revocationrequest(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* revocationrequest) {
  delete revocationrequest_;
  revocationrequest_ = revocationrequest;
  if (revocationrequest) {
    set_has_revocationrequest();
  } else {
    clear_has_revocationrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.RevocationRequest)
}

// optional .Diadoc.Api.Proto.Timestamp SentAt = 2;
inline bool RevocationRequestDocflow::has_sentat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RevocationRequestDocflow::set_has_sentat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RevocationRequestDocflow::clear_has_sentat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RevocationRequestDocflow::clear_sentat() {
  if (sentat_ != NULL) sentat_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_sentat();
}
inline const ::Diadoc::Api::Proto::Timestamp& RevocationRequestDocflow::sentat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.SentAt)
  return sentat_ != NULL ? *sentat_ : *default_instance_->sentat_;
}
inline ::Diadoc::Api::Proto::Timestamp* RevocationRequestDocflow::mutable_sentat() {
  set_has_sentat();
  if (sentat_ == NULL) sentat_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.SentAt)
  return sentat_;
}
inline ::Diadoc::Api::Proto::Timestamp* RevocationRequestDocflow::release_sentat() {
  clear_has_sentat();
  ::Diadoc::Api::Proto::Timestamp* temp = sentat_;
  sentat_ = NULL;
  return temp;
}
inline void RevocationRequestDocflow::set_allocated_sentat(::Diadoc::Api::Proto::Timestamp* sentat) {
  delete sentat_;
  sentat_ = sentat;
  if (sentat) {
    set_has_sentat();
  } else {
    clear_has_sentat();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.SentAt)
}

// optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 3;
inline bool RevocationRequestDocflow::has_deliveredat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RevocationRequestDocflow::set_has_deliveredat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RevocationRequestDocflow::clear_has_deliveredat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RevocationRequestDocflow::clear_deliveredat() {
  if (deliveredat_ != NULL) deliveredat_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_deliveredat();
}
inline const ::Diadoc::Api::Proto::Timestamp& RevocationRequestDocflow::deliveredat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.DeliveredAt)
  return deliveredat_ != NULL ? *deliveredat_ : *default_instance_->deliveredat_;
}
inline ::Diadoc::Api::Proto::Timestamp* RevocationRequestDocflow::mutable_deliveredat() {
  set_has_deliveredat();
  if (deliveredat_ == NULL) deliveredat_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.DeliveredAt)
  return deliveredat_;
}
inline ::Diadoc::Api::Proto::Timestamp* RevocationRequestDocflow::release_deliveredat() {
  clear_has_deliveredat();
  ::Diadoc::Api::Proto::Timestamp* temp = deliveredat_;
  deliveredat_ = NULL;
  return temp;
}
inline void RevocationRequestDocflow::set_allocated_deliveredat(::Diadoc::Api::Proto::Timestamp* deliveredat) {
  delete deliveredat_;
  deliveredat_ = deliveredat;
  if (deliveredat) {
    set_has_deliveredat();
  } else {
    clear_has_deliveredat();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.DeliveredAt)
}

// optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 4;
inline bool RevocationRequestDocflow::has_roamingnotification() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RevocationRequestDocflow::set_has_roamingnotification() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RevocationRequestDocflow::clear_has_roamingnotification() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RevocationRequestDocflow::clear_roamingnotification() {
  if (roamingnotification_ != NULL) roamingnotification_->::Diadoc::Api::Proto::Docflow::RoamingNotification::Clear();
  clear_has_roamingnotification();
}
inline const ::Diadoc::Api::Proto::Docflow::RoamingNotification& RevocationRequestDocflow::roamingnotification() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.RoamingNotification)
  return roamingnotification_ != NULL ? *roamingnotification_ : *default_instance_->roamingnotification_;
}
inline ::Diadoc::Api::Proto::Docflow::RoamingNotification* RevocationRequestDocflow::mutable_roamingnotification() {
  set_has_roamingnotification();
  if (roamingnotification_ == NULL) roamingnotification_ = new ::Diadoc::Api::Proto::Docflow::RoamingNotification;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.RoamingNotification)
  return roamingnotification_;
}
inline ::Diadoc::Api::Proto::Docflow::RoamingNotification* RevocationRequestDocflow::release_roamingnotification() {
  clear_has_roamingnotification();
  ::Diadoc::Api::Proto::Docflow::RoamingNotification* temp = roamingnotification_;
  roamingnotification_ = NULL;
  return temp;
}
inline void RevocationRequestDocflow::set_allocated_roamingnotification(::Diadoc::Api::Proto::Docflow::RoamingNotification* roamingnotification) {
  delete roamingnotification_;
  roamingnotification_ = roamingnotification;
  if (roamingnotification) {
    set_has_roamingnotification();
  } else {
    clear_has_roamingnotification();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.RoamingNotification)
}

// optional string PlainText = 5;
inline bool RevocationRequestDocflow::has_plaintext() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RevocationRequestDocflow::set_has_plaintext() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RevocationRequestDocflow::clear_has_plaintext() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RevocationRequestDocflow::clear_plaintext() {
  if (plaintext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plaintext_->clear();
  }
  clear_has_plaintext();
}
inline const ::std::string& RevocationRequestDocflow::plaintext() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.PlainText)
  return *plaintext_;
}
inline void RevocationRequestDocflow::set_plaintext(const ::std::string& value) {
  set_has_plaintext();
  if (plaintext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plaintext_ = new ::std::string;
  }
  plaintext_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.PlainText)
}
inline void RevocationRequestDocflow::set_plaintext(const char* value) {
  set_has_plaintext();
  if (plaintext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plaintext_ = new ::std::string;
  }
  plaintext_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.PlainText)
}
inline void RevocationRequestDocflow::set_plaintext(const char* value, size_t size) {
  set_has_plaintext();
  if (plaintext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plaintext_ = new ::std::string;
  }
  plaintext_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.PlainText)
}
inline ::std::string* RevocationRequestDocflow::mutable_plaintext() {
  set_has_plaintext();
  if (plaintext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    plaintext_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.PlainText)
  return plaintext_;
}
inline ::std::string* RevocationRequestDocflow::release_plaintext() {
  clear_has_plaintext();
  if (plaintext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = plaintext_;
    plaintext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RevocationRequestDocflow::set_allocated_plaintext(::std::string* plaintext) {
  if (plaintext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete plaintext_;
  }
  if (plaintext) {
    set_has_plaintext();
    plaintext_ = plaintext;
  } else {
    clear_has_plaintext();
    plaintext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow.PlainText)
}

// -------------------------------------------------------------------

// RevocationResponseDocflow

// optional .Diadoc.Api.Proto.Docflow.SignatureV3 RecipientSignature = 1;
inline bool RevocationResponseDocflow::has_recipientsignature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RevocationResponseDocflow::set_has_recipientsignature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RevocationResponseDocflow::clear_has_recipientsignature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RevocationResponseDocflow::clear_recipientsignature() {
  if (recipientsignature_ != NULL) recipientsignature_->::Diadoc::Api::Proto::Docflow::SignatureV3::Clear();
  clear_has_recipientsignature();
}
inline const ::Diadoc::Api::Proto::Docflow::SignatureV3& RevocationResponseDocflow::recipientsignature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow.RecipientSignature)
  return recipientsignature_ != NULL ? *recipientsignature_ : *default_instance_->recipientsignature_;
}
inline ::Diadoc::Api::Proto::Docflow::SignatureV3* RevocationResponseDocflow::mutable_recipientsignature() {
  set_has_recipientsignature();
  if (recipientsignature_ == NULL) recipientsignature_ = new ::Diadoc::Api::Proto::Docflow::SignatureV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow.RecipientSignature)
  return recipientsignature_;
}
inline ::Diadoc::Api::Proto::Docflow::SignatureV3* RevocationResponseDocflow::release_recipientsignature() {
  clear_has_recipientsignature();
  ::Diadoc::Api::Proto::Docflow::SignatureV3* temp = recipientsignature_;
  recipientsignature_ = NULL;
  return temp;
}
inline void RevocationResponseDocflow::set_allocated_recipientsignature(::Diadoc::Api::Proto::Docflow::SignatureV3* recipientsignature) {
  delete recipientsignature_;
  recipientsignature_ = recipientsignature;
  if (recipientsignature) {
    set_has_recipientsignature();
  } else {
    clear_has_recipientsignature();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow.RecipientSignature)
}

// optional .Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow SignatureRejection = 2;
inline bool RevocationResponseDocflow::has_signaturerejection() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RevocationResponseDocflow::set_has_signaturerejection() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RevocationResponseDocflow::clear_has_signaturerejection() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RevocationResponseDocflow::clear_signaturerejection() {
  if (signaturerejection_ != NULL) signaturerejection_->::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow::Clear();
  clear_has_signaturerejection();
}
inline const ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow& RevocationResponseDocflow::signaturerejection() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow.SignatureRejection)
  return signaturerejection_ != NULL ? *signaturerejection_ : *default_instance_->signaturerejection_;
}
inline ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* RevocationResponseDocflow::mutable_signaturerejection() {
  set_has_signaturerejection();
  if (signaturerejection_ == NULL) signaturerejection_ = new ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow.SignatureRejection)
  return signaturerejection_;
}
inline ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* RevocationResponseDocflow::release_signaturerejection() {
  clear_has_signaturerejection();
  ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* temp = signaturerejection_;
  signaturerejection_ = NULL;
  return temp;
}
inline void RevocationResponseDocflow::set_allocated_signaturerejection(::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow* signaturerejection) {
  delete signaturerejection_;
  signaturerejection_ = signaturerejection;
  if (signaturerejection) {
    set_has_signaturerejection();
  } else {
    clear_has_signaturerejection();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow.SignatureRejection)
}

// -------------------------------------------------------------------

// ReceiptDocflowV3

// required bool IsFinished = 1;
inline bool ReceiptDocflowV3::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReceiptDocflowV3::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReceiptDocflowV3::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReceiptDocflowV3::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool ReceiptDocflowV3::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.IsFinished)
  return isfinished_;
}
inline void ReceiptDocflowV3::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.IsFinished)
}

// optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 ReceiptAttachment = 2;
inline bool ReceiptDocflowV3::has_receiptattachment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReceiptDocflowV3::set_has_receiptattachment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReceiptDocflowV3::clear_has_receiptattachment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReceiptDocflowV3::clear_receiptattachment() {
  if (receiptattachment_ != NULL) receiptattachment_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
  clear_has_receiptattachment();
}
inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& ReceiptDocflowV3::receiptattachment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.ReceiptAttachment)
  return receiptattachment_ != NULL ? *receiptattachment_ : *default_instance_->receiptattachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* ReceiptDocflowV3::mutable_receiptattachment() {
  set_has_receiptattachment();
  if (receiptattachment_ == NULL) receiptattachment_ = new ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.ReceiptAttachment)
  return receiptattachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* ReceiptDocflowV3::release_receiptattachment() {
  clear_has_receiptattachment();
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* temp = receiptattachment_;
  receiptattachment_ = NULL;
  return temp;
}
inline void ReceiptDocflowV3::set_allocated_receiptattachment(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* receiptattachment) {
  delete receiptattachment_;
  receiptattachment_ = receiptattachment;
  if (receiptattachment) {
    set_has_receiptattachment();
  } else {
    clear_has_receiptattachment();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.ReceiptAttachment)
}

// optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
inline bool ReceiptDocflowV3::has_sentat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReceiptDocflowV3::set_has_sentat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReceiptDocflowV3::clear_has_sentat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReceiptDocflowV3::clear_sentat() {
  if (sentat_ != NULL) sentat_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_sentat();
}
inline const ::Diadoc::Api::Proto::Timestamp& ReceiptDocflowV3::sentat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.SentAt)
  return sentat_ != NULL ? *sentat_ : *default_instance_->sentat_;
}
inline ::Diadoc::Api::Proto::Timestamp* ReceiptDocflowV3::mutable_sentat() {
  set_has_sentat();
  if (sentat_ == NULL) sentat_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.SentAt)
  return sentat_;
}
inline ::Diadoc::Api::Proto::Timestamp* ReceiptDocflowV3::release_sentat() {
  clear_has_sentat();
  ::Diadoc::Api::Proto::Timestamp* temp = sentat_;
  sentat_ = NULL;
  return temp;
}
inline void ReceiptDocflowV3::set_allocated_sentat(::Diadoc::Api::Proto::Timestamp* sentat) {
  delete sentat_;
  sentat_ = sentat;
  if (sentat) {
    set_has_sentat();
  } else {
    clear_has_sentat();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.SentAt)
}

// optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
inline bool ReceiptDocflowV3::has_deliveredat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReceiptDocflowV3::set_has_deliveredat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReceiptDocflowV3::clear_has_deliveredat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReceiptDocflowV3::clear_deliveredat() {
  if (deliveredat_ != NULL) deliveredat_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_deliveredat();
}
inline const ::Diadoc::Api::Proto::Timestamp& ReceiptDocflowV3::deliveredat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.DeliveredAt)
  return deliveredat_ != NULL ? *deliveredat_ : *default_instance_->deliveredat_;
}
inline ::Diadoc::Api::Proto::Timestamp* ReceiptDocflowV3::mutable_deliveredat() {
  set_has_deliveredat();
  if (deliveredat_ == NULL) deliveredat_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.DeliveredAt)
  return deliveredat_;
}
inline ::Diadoc::Api::Proto::Timestamp* ReceiptDocflowV3::release_deliveredat() {
  clear_has_deliveredat();
  ::Diadoc::Api::Proto::Timestamp* temp = deliveredat_;
  deliveredat_ = NULL;
  return temp;
}
inline void ReceiptDocflowV3::set_allocated_deliveredat(::Diadoc::Api::Proto::Timestamp* deliveredat) {
  delete deliveredat_;
  deliveredat_ = deliveredat;
  if (deliveredat) {
    set_has_deliveredat();
  } else {
    clear_has_deliveredat();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.DeliveredAt)
}

// optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow Confirmation = 5;
inline bool ReceiptDocflowV3::has_confirmation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReceiptDocflowV3::set_has_confirmation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReceiptDocflowV3::clear_has_confirmation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReceiptDocflowV3::clear_confirmation() {
  if (confirmation_ != NULL) confirmation_->::Diadoc::Api::Proto::Docflow::ConfirmationDocflow::Clear();
  clear_has_confirmation();
}
inline const ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow& ReceiptDocflowV3::confirmation() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.Confirmation)
  return confirmation_ != NULL ? *confirmation_ : *default_instance_->confirmation_;
}
inline ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* ReceiptDocflowV3::mutable_confirmation() {
  set_has_confirmation();
  if (confirmation_ == NULL) confirmation_ = new ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.Confirmation)
  return confirmation_;
}
inline ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* ReceiptDocflowV3::release_confirmation() {
  clear_has_confirmation();
  ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* temp = confirmation_;
  confirmation_ = NULL;
  return temp;
}
inline void ReceiptDocflowV3::set_allocated_confirmation(::Diadoc::Api::Proto::Docflow::ConfirmationDocflow* confirmation) {
  delete confirmation_;
  confirmation_ = confirmation;
  if (confirmation) {
    set_has_confirmation();
  } else {
    clear_has_confirmation();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.Confirmation)
}

// required .Diadoc.Api.Proto.Documents.GeneralReceiptStatus Status = 6;
inline bool ReceiptDocflowV3::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReceiptDocflowV3::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReceiptDocflowV3::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReceiptDocflowV3::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus ReceiptDocflowV3::status() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.Status)
  return static_cast< ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus >(status_);
}
inline void ReceiptDocflowV3::set_status(::Diadoc::Api::Proto::Documents::GeneralReceiptStatus value) {
  assert(::Diadoc::Api::Proto::Documents::GeneralReceiptStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3.Status)
}

// -------------------------------------------------------------------

// OuterDocflow

// required string DocflowNamedId = 1;
inline bool OuterDocflow::has_docflownamedid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OuterDocflow::set_has_docflownamedid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OuterDocflow::clear_has_docflownamedid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OuterDocflow::clear_docflownamedid() {
  if (docflownamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docflownamedid_->clear();
  }
  clear_has_docflownamedid();
}
inline const ::std::string& OuterDocflow::docflownamedid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OuterDocflow.DocflowNamedId)
  return *docflownamedid_;
}
inline void OuterDocflow::set_docflownamedid(const ::std::string& value) {
  set_has_docflownamedid();
  if (docflownamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docflownamedid_ = new ::std::string;
  }
  docflownamedid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OuterDocflow.DocflowNamedId)
}
inline void OuterDocflow::set_docflownamedid(const char* value) {
  set_has_docflownamedid();
  if (docflownamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docflownamedid_ = new ::std::string;
  }
  docflownamedid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.OuterDocflow.DocflowNamedId)
}
inline void OuterDocflow::set_docflownamedid(const char* value, size_t size) {
  set_has_docflownamedid();
  if (docflownamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docflownamedid_ = new ::std::string;
  }
  docflownamedid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.OuterDocflow.DocflowNamedId)
}
inline ::std::string* OuterDocflow::mutable_docflownamedid() {
  set_has_docflownamedid();
  if (docflownamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docflownamedid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OuterDocflow.DocflowNamedId)
  return docflownamedid_;
}
inline ::std::string* OuterDocflow::release_docflownamedid() {
  clear_has_docflownamedid();
  if (docflownamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = docflownamedid_;
    docflownamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OuterDocflow::set_allocated_docflownamedid(::std::string* docflownamedid) {
  if (docflownamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete docflownamedid_;
  }
  if (docflownamedid) {
    set_has_docflownamedid();
    docflownamedid_ = docflownamedid;
  } else {
    clear_has_docflownamedid();
    docflownamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.OuterDocflow.DocflowNamedId)
}

// required string ParentEntityId = 2;
inline bool OuterDocflow::has_parententityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OuterDocflow::set_has_parententityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OuterDocflow::clear_has_parententityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OuterDocflow::clear_parententityid() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_->clear();
  }
  clear_has_parententityid();
}
inline const ::std::string& OuterDocflow::parententityid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OuterDocflow.ParentEntityId)
  return *parententityid_;
}
inline void OuterDocflow::set_parententityid(const ::std::string& value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OuterDocflow.ParentEntityId)
}
inline void OuterDocflow::set_parententityid(const char* value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.OuterDocflow.ParentEntityId)
}
inline void OuterDocflow::set_parententityid(const char* value, size_t size) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.OuterDocflow.ParentEntityId)
}
inline ::std::string* OuterDocflow::mutable_parententityid() {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OuterDocflow.ParentEntityId)
  return parententityid_;
}
inline ::std::string* OuterDocflow::release_parententityid() {
  clear_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parententityid_;
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OuterDocflow::set_allocated_parententityid(::std::string* parententityid) {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (parententityid) {
    set_has_parententityid();
    parententityid_ = parententityid;
  } else {
    clear_has_parententityid();
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.OuterDocflow.ParentEntityId)
}

// required string OuterDocflowEntityId = 3;
inline bool OuterDocflow::has_outerdocflowentityid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OuterDocflow::set_has_outerdocflowentityid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OuterDocflow::clear_has_outerdocflowentityid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OuterDocflow::clear_outerdocflowentityid() {
  if (outerdocflowentityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outerdocflowentityid_->clear();
  }
  clear_has_outerdocflowentityid();
}
inline const ::std::string& OuterDocflow::outerdocflowentityid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OuterDocflow.OuterDocflowEntityId)
  return *outerdocflowentityid_;
}
inline void OuterDocflow::set_outerdocflowentityid(const ::std::string& value) {
  set_has_outerdocflowentityid();
  if (outerdocflowentityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outerdocflowentityid_ = new ::std::string;
  }
  outerdocflowentityid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OuterDocflow.OuterDocflowEntityId)
}
inline void OuterDocflow::set_outerdocflowentityid(const char* value) {
  set_has_outerdocflowentityid();
  if (outerdocflowentityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outerdocflowentityid_ = new ::std::string;
  }
  outerdocflowentityid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.OuterDocflow.OuterDocflowEntityId)
}
inline void OuterDocflow::set_outerdocflowentityid(const char* value, size_t size) {
  set_has_outerdocflowentityid();
  if (outerdocflowentityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outerdocflowentityid_ = new ::std::string;
  }
  outerdocflowentityid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.OuterDocflow.OuterDocflowEntityId)
}
inline ::std::string* OuterDocflow::mutable_outerdocflowentityid() {
  set_has_outerdocflowentityid();
  if (outerdocflowentityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    outerdocflowentityid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OuterDocflow.OuterDocflowEntityId)
  return outerdocflowentityid_;
}
inline ::std::string* OuterDocflow::release_outerdocflowentityid() {
  clear_has_outerdocflowentityid();
  if (outerdocflowentityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = outerdocflowentityid_;
    outerdocflowentityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OuterDocflow::set_allocated_outerdocflowentityid(::std::string* outerdocflowentityid) {
  if (outerdocflowentityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete outerdocflowentityid_;
  }
  if (outerdocflowentityid) {
    set_has_outerdocflowentityid();
    outerdocflowentityid_ = outerdocflowentityid;
  } else {
    clear_has_outerdocflowentityid();
    outerdocflowentityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.OuterDocflow.OuterDocflowEntityId)
}

// -------------------------------------------------------------------

// OuterDocflowEntities

// required string DocflowNamedId = 1;
inline bool OuterDocflowEntities::has_docflownamedid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OuterDocflowEntities::set_has_docflownamedid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OuterDocflowEntities::clear_has_docflownamedid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OuterDocflowEntities::clear_docflownamedid() {
  if (docflownamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docflownamedid_->clear();
  }
  clear_has_docflownamedid();
}
inline const ::std::string& OuterDocflowEntities::docflownamedid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.DocflowNamedId)
  return *docflownamedid_;
}
inline void OuterDocflowEntities::set_docflownamedid(const ::std::string& value) {
  set_has_docflownamedid();
  if (docflownamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docflownamedid_ = new ::std::string;
  }
  docflownamedid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.DocflowNamedId)
}
inline void OuterDocflowEntities::set_docflownamedid(const char* value) {
  set_has_docflownamedid();
  if (docflownamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docflownamedid_ = new ::std::string;
  }
  docflownamedid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.DocflowNamedId)
}
inline void OuterDocflowEntities::set_docflownamedid(const char* value, size_t size) {
  set_has_docflownamedid();
  if (docflownamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docflownamedid_ = new ::std::string;
  }
  docflownamedid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.DocflowNamedId)
}
inline ::std::string* OuterDocflowEntities::mutable_docflownamedid() {
  set_has_docflownamedid();
  if (docflownamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docflownamedid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.DocflowNamedId)
  return docflownamedid_;
}
inline ::std::string* OuterDocflowEntities::release_docflownamedid() {
  clear_has_docflownamedid();
  if (docflownamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = docflownamedid_;
    docflownamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OuterDocflowEntities::set_allocated_docflownamedid(::std::string* docflownamedid) {
  if (docflownamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete docflownamedid_;
  }
  if (docflownamedid) {
    set_has_docflownamedid();
    docflownamedid_ = docflownamedid;
  } else {
    clear_has_docflownamedid();
    docflownamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.DocflowNamedId)
}

// required string DocflowFriendlyName = 2;
inline bool OuterDocflowEntities::has_docflowfriendlyname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OuterDocflowEntities::set_has_docflowfriendlyname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OuterDocflowEntities::clear_has_docflowfriendlyname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OuterDocflowEntities::clear_docflowfriendlyname() {
  if (docflowfriendlyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docflowfriendlyname_->clear();
  }
  clear_has_docflowfriendlyname();
}
inline const ::std::string& OuterDocflowEntities::docflowfriendlyname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.DocflowFriendlyName)
  return *docflowfriendlyname_;
}
inline void OuterDocflowEntities::set_docflowfriendlyname(const ::std::string& value) {
  set_has_docflowfriendlyname();
  if (docflowfriendlyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docflowfriendlyname_ = new ::std::string;
  }
  docflowfriendlyname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.DocflowFriendlyName)
}
inline void OuterDocflowEntities::set_docflowfriendlyname(const char* value) {
  set_has_docflowfriendlyname();
  if (docflowfriendlyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docflowfriendlyname_ = new ::std::string;
  }
  docflowfriendlyname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.DocflowFriendlyName)
}
inline void OuterDocflowEntities::set_docflowfriendlyname(const char* value, size_t size) {
  set_has_docflowfriendlyname();
  if (docflowfriendlyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docflowfriendlyname_ = new ::std::string;
  }
  docflowfriendlyname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.DocflowFriendlyName)
}
inline ::std::string* OuterDocflowEntities::mutable_docflowfriendlyname() {
  set_has_docflowfriendlyname();
  if (docflowfriendlyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    docflowfriendlyname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.DocflowFriendlyName)
  return docflowfriendlyname_;
}
inline ::std::string* OuterDocflowEntities::release_docflowfriendlyname() {
  clear_has_docflowfriendlyname();
  if (docflowfriendlyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = docflowfriendlyname_;
    docflowfriendlyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OuterDocflowEntities::set_allocated_docflowfriendlyname(::std::string* docflowfriendlyname) {
  if (docflowfriendlyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete docflowfriendlyname_;
  }
  if (docflowfriendlyname) {
    set_has_docflowfriendlyname();
    docflowfriendlyname_ = docflowfriendlyname;
  } else {
    clear_has_docflowfriendlyname();
    docflowfriendlyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.DocflowFriendlyName)
}

// repeated .Diadoc.Api.Proto.Docflow.StatusEntity StatusEntities = 3;
inline int OuterDocflowEntities::statusentities_size() const {
  return statusentities_.size();
}
inline void OuterDocflowEntities::clear_statusentities() {
  statusentities_.Clear();
}
inline const ::Diadoc::Api::Proto::Docflow::StatusEntity& OuterDocflowEntities::statusentities(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.StatusEntities)
  return statusentities_.Get(index);
}
inline ::Diadoc::Api::Proto::Docflow::StatusEntity* OuterDocflowEntities::mutable_statusentities(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.StatusEntities)
  return statusentities_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Docflow::StatusEntity* OuterDocflowEntities::add_statusentities() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.StatusEntities)
  return statusentities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::StatusEntity >&
OuterDocflowEntities::statusentities() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.StatusEntities)
  return statusentities_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::StatusEntity >*
OuterDocflowEntities::mutable_statusentities() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.OuterDocflowEntities.StatusEntities)
  return &statusentities_;
}

// -------------------------------------------------------------------

// StatusEntity

// required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Attachment = 1;
inline bool StatusEntity::has_attachment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatusEntity::set_has_attachment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatusEntity::clear_has_attachment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatusEntity::clear_attachment() {
  if (attachment_ != NULL) attachment_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
  clear_has_attachment();
}
inline const ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3& StatusEntity::attachment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.StatusEntity.Attachment)
  return attachment_ != NULL ? *attachment_ : *default_instance_->attachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* StatusEntity::mutable_attachment() {
  set_has_attachment();
  if (attachment_ == NULL) attachment_ = new ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.StatusEntity.Attachment)
  return attachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* StatusEntity::release_attachment() {
  clear_has_attachment();
  ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* temp = attachment_;
  attachment_ = NULL;
  return temp;
}
inline void StatusEntity::set_allocated_attachment(::Diadoc::Api::Proto::Docflow::SignedAttachmentV3* attachment) {
  delete attachment_;
  attachment_ = attachment;
  if (attachment) {
    set_has_attachment();
  } else {
    clear_has_attachment();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.StatusEntity.Attachment)
}

// required .Diadoc.Api.Proto.Status Status = 2;
inline bool StatusEntity::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatusEntity::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatusEntity::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatusEntity::clear_status() {
  if (status_ != NULL) status_->::Diadoc::Api::Proto::Status::Clear();
  clear_has_status();
}
inline const ::Diadoc::Api::Proto::Status& StatusEntity::status() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.StatusEntity.Status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::Diadoc::Api::Proto::Status* StatusEntity::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::Diadoc::Api::Proto::Status;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.StatusEntity.Status)
  return status_;
}
inline ::Diadoc::Api::Proto::Status* StatusEntity::release_status() {
  clear_has_status();
  ::Diadoc::Api::Proto::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void StatusEntity::set_allocated_status(::Diadoc::Api::Proto::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.StatusEntity.Status)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Docflow_2fDocflowV3_2eproto__INCLUDED
