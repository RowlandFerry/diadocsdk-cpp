// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/UniversalTransferDocumentDocflow.proto

#ifndef PROTOBUF_Docflow_2fUniversalTransferDocumentDocflow_2eproto__INCLUDED
#define PROTOBUF_Docflow_2fUniversalTransferDocumentDocflow_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Timestamp.pb.h"
#include "Docflow/Attachment.pb.h"
#include "Docflow/ReceiptDocflow.pb.h"
#include "Docflow/XmlBilateralDocflow.pb.h"
#include "Docflow/RecipientSignatureRejectionDocflow.pb.h"
#include "Docflow/InvoiceDocflow.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Docflow_2fUniversalTransferDocumentDocflow_2eproto();
void protobuf_AssignDesc_Docflow_2fUniversalTransferDocumentDocflow_2eproto();
void protobuf_ShutdownFile_Docflow_2fUniversalTransferDocumentDocflow_2eproto();

class InboundUniversalTransferDocumentDocflow;
class OutboundUniversalTransferDocumentDocflow;

// ===================================================================

class InboundUniversalTransferDocumentDocflow : public ::google::protobuf::Message {
 public:
  InboundUniversalTransferDocumentDocflow();
  virtual ~InboundUniversalTransferDocumentDocflow();

  InboundUniversalTransferDocumentDocflow(const InboundUniversalTransferDocumentDocflow& from);

  inline InboundUniversalTransferDocumentDocflow& operator=(const InboundUniversalTransferDocumentDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InboundUniversalTransferDocumentDocflow& default_instance();

  void Swap(InboundUniversalTransferDocumentDocflow* other);

  // implements Message ----------------------------------------------

  InboundUniversalTransferDocumentDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InboundUniversalTransferDocumentDocflow& from);
  void MergeFrom(const InboundUniversalTransferDocumentDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // optional .Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow ReceiptDocflow = 2;
  inline bool has_receiptdocflow() const;
  inline void clear_receiptdocflow();
  static const int kReceiptDocflowFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow& receiptdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* mutable_receiptdocflow();
  inline ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* release_receiptdocflow();
  inline void set_allocated_receiptdocflow(::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* receiptdocflow);

  // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
  inline bool has_confirmationdocflow() const;
  inline void clear_confirmationdocflow();
  static const int kConfirmationDocflowFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow& confirmationdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* mutable_confirmationdocflow();
  inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* release_confirmationdocflow();
  inline void set_allocated_confirmationdocflow(::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* confirmationdocflow);

  // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
  inline bool has_correctionrequestdocflow() const;
  inline void clear_correctionrequestdocflow();
  static const int kCorrectionRequestDocflowFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow& correctionrequestdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* mutable_correctionrequestdocflow();
  inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* release_correctionrequestdocflow();
  inline void set_allocated_correctionrequestdocflow(::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* correctionrequestdocflow);

  // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
  inline bool has_confirmationtimestamp() const;
  inline void clear_confirmationtimestamp();
  static const int kConfirmationTimestampFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Timestamp& confirmationtimestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_confirmationtimestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_confirmationtimestamp();
  inline void set_allocated_confirmationtimestamp(::Diadoc::Api::Proto::Timestamp* confirmationtimestamp);

  // optional bool IsAmendmentRequested = 6;
  inline bool has_isamendmentrequested() const;
  inline void clear_isamendmentrequested();
  static const int kIsAmendmentRequestedFieldNumber = 6;
  inline bool isamendmentrequested() const;
  inline void set_isamendmentrequested(bool value);

  // optional bool IsRevised = 7;
  inline bool has_isrevised() const;
  inline void clear_isrevised();
  static const int kIsRevisedFieldNumber = 7;
  inline bool isrevised() const;
  inline void set_isrevised(bool value);

  // optional bool IsCorrected = 8;
  inline bool has_iscorrected() const;
  inline void clear_iscorrected();
  static const int kIsCorrectedFieldNumber = 8;
  inline bool iscorrected() const;
  inline void set_iscorrected(bool value);

  // optional .Diadoc.Api.Proto.Docflow.BuyerTitleDocflow BuyerTitleDocflow = 9;
  inline bool has_buyertitledocflow() const;
  inline void clear_buyertitledocflow();
  static const int kBuyerTitleDocflowFieldNumber = 9;
  inline const ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow& buyertitledocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* mutable_buyertitledocflow();
  inline ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* release_buyertitledocflow();
  inline void set_allocated_buyertitledocflow(::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* buyertitledocflow);

  // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 10;
  inline bool has_recipientsignaturerejectiondocflow() const;
  inline void clear_recipientsignaturerejectiondocflow();
  static const int kRecipientSignatureRejectionDocflowFieldNumber = 10;
  inline const ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow& recipientsignaturerejectiondocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* mutable_recipientsignaturerejectiondocflow();
  inline ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* release_recipientsignaturerejectiondocflow();
  inline void set_allocated_recipientsignaturerejectiondocflow(::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* recipientsignaturerejectiondocflow);

  // optional bool IsReceiptRequested = 11;
  inline bool has_isreceiptrequested() const;
  inline void clear_isreceiptrequested();
  static const int kIsReceiptRequestedFieldNumber = 11;
  inline bool isreceiptrequested() const;
  inline void set_isreceiptrequested(bool value);

  // optional bool IsRecipientSignatureRequested = 12;
  inline bool has_isrecipientsignaturerequested() const;
  inline void clear_isrecipientsignaturerequested();
  static const int kIsRecipientSignatureRequestedFieldNumber = 12;
  inline bool isrecipientsignaturerequested() const;
  inline void set_isrecipientsignaturerequested(bool value);

  // optional bool IsDocumentSignedByRecipient = 13;
  inline bool has_isdocumentsignedbyrecipient() const;
  inline void clear_isdocumentsignedbyrecipient();
  static const int kIsDocumentSignedByRecipientFieldNumber = 13;
  inline bool isdocumentsignedbyrecipient() const;
  inline void set_isdocumentsignedbyrecipient(bool value);

  // optional bool IsDocumentRejectedByRecipient = 14;
  inline bool has_isdocumentrejectedbyrecipient() const;
  inline void clear_isdocumentrejectedbyrecipient();
  static const int kIsDocumentRejectedByRecipientFieldNumber = 14;
  inline bool isdocumentrejectedbyrecipient() const;
  inline void set_isdocumentrejectedbyrecipient(bool value);

  // optional bool CanDocumentBeReceipted = 15;
  inline bool has_candocumentbereceipted() const;
  inline void clear_candocumentbereceipted();
  static const int kCanDocumentBeReceiptedFieldNumber = 15;
  inline bool candocumentbereceipted() const;
  inline void set_candocumentbereceipted(bool value);

  // optional bool CanDocumentBeSignedOrRejectedByRecipient = 16;
  inline bool has_candocumentbesignedorrejectedbyrecipient() const;
  inline void clear_candocumentbesignedorrejectedbyrecipient();
  static const int kCanDocumentBeSignedOrRejectedByRecipientFieldNumber = 16;
  inline bool candocumentbesignedorrejectedbyrecipient() const;
  inline void set_candocumentbesignedorrejectedbyrecipient(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_receiptdocflow();
  inline void clear_has_receiptdocflow();
  inline void set_has_confirmationdocflow();
  inline void clear_has_confirmationdocflow();
  inline void set_has_correctionrequestdocflow();
  inline void clear_has_correctionrequestdocflow();
  inline void set_has_confirmationtimestamp();
  inline void clear_has_confirmationtimestamp();
  inline void set_has_isamendmentrequested();
  inline void clear_has_isamendmentrequested();
  inline void set_has_isrevised();
  inline void clear_has_isrevised();
  inline void set_has_iscorrected();
  inline void clear_has_iscorrected();
  inline void set_has_buyertitledocflow();
  inline void clear_has_buyertitledocflow();
  inline void set_has_recipientsignaturerejectiondocflow();
  inline void clear_has_recipientsignaturerejectiondocflow();
  inline void set_has_isreceiptrequested();
  inline void clear_has_isreceiptrequested();
  inline void set_has_isrecipientsignaturerequested();
  inline void clear_has_isrecipientsignaturerequested();
  inline void set_has_isdocumentsignedbyrecipient();
  inline void clear_has_isdocumentsignedbyrecipient();
  inline void set_has_isdocumentrejectedbyrecipient();
  inline void clear_has_isdocumentrejectedbyrecipient();
  inline void set_has_candocumentbereceipted();
  inline void clear_has_candocumentbereceipted();
  inline void set_has_candocumentbesignedorrejectedbyrecipient();
  inline void clear_has_candocumentbesignedorrejectedbyrecipient();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* receiptdocflow_;
  ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* confirmationdocflow_;
  ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* correctionrequestdocflow_;
  ::Diadoc::Api::Proto::Timestamp* confirmationtimestamp_;
  ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* buyertitledocflow_;
  bool isfinished_;
  bool isamendmentrequested_;
  bool isrevised_;
  bool iscorrected_;
  bool isreceiptrequested_;
  bool isrecipientsignaturerequested_;
  bool isdocumentsignedbyrecipient_;
  bool isdocumentrejectedbyrecipient_;
  ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* recipientsignaturerejectiondocflow_;
  bool candocumentbereceipted_;
  bool candocumentbesignedorrejectedbyrecipient_;
  friend void  protobuf_AddDesc_Docflow_2fUniversalTransferDocumentDocflow_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fUniversalTransferDocumentDocflow_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fUniversalTransferDocumentDocflow_2eproto();

  void InitAsDefaultInstance();
  static InboundUniversalTransferDocumentDocflow* default_instance_;
};
// -------------------------------------------------------------------

class OutboundUniversalTransferDocumentDocflow : public ::google::protobuf::Message {
 public:
  OutboundUniversalTransferDocumentDocflow();
  virtual ~OutboundUniversalTransferDocumentDocflow();

  OutboundUniversalTransferDocumentDocflow(const OutboundUniversalTransferDocumentDocflow& from);

  inline OutboundUniversalTransferDocumentDocflow& operator=(const OutboundUniversalTransferDocumentDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OutboundUniversalTransferDocumentDocflow& default_instance();

  void Swap(OutboundUniversalTransferDocumentDocflow* other);

  // implements Message ----------------------------------------------

  OutboundUniversalTransferDocumentDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OutboundUniversalTransferDocumentDocflow& from);
  void MergeFrom(const OutboundUniversalTransferDocumentDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
  inline bool has_receiptdocflow() const;
  inline void clear_receiptdocflow();
  static const int kReceiptDocflowFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflow& receiptdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* mutable_receiptdocflow();
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* release_receiptdocflow();
  inline void set_allocated_receiptdocflow(::Diadoc::Api::Proto::Docflow::ReceiptDocflow* receiptdocflow);

  // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
  inline bool has_confirmationdocflow() const;
  inline void clear_confirmationdocflow();
  static const int kConfirmationDocflowFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow& confirmationdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* mutable_confirmationdocflow();
  inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* release_confirmationdocflow();
  inline void set_allocated_confirmationdocflow(::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* confirmationdocflow);

  // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
  inline bool has_correctionrequestdocflow() const;
  inline void clear_correctionrequestdocflow();
  static const int kCorrectionRequestDocflowFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow& correctionrequestdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* mutable_correctionrequestdocflow();
  inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* release_correctionrequestdocflow();
  inline void set_allocated_correctionrequestdocflow(::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* correctionrequestdocflow);

  // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
  inline bool has_confirmationtimestamp() const;
  inline void clear_confirmationtimestamp();
  static const int kConfirmationTimestampFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Timestamp& confirmationtimestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_confirmationtimestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_confirmationtimestamp();
  inline void set_allocated_confirmationtimestamp(::Diadoc::Api::Proto::Timestamp* confirmationtimestamp);

  // optional bool IsAmendmentRequested = 6;
  inline bool has_isamendmentrequested() const;
  inline void clear_isamendmentrequested();
  static const int kIsAmendmentRequestedFieldNumber = 6;
  inline bool isamendmentrequested() const;
  inline void set_isamendmentrequested(bool value);

  // optional bool IsRevised = 7;
  inline bool has_isrevised() const;
  inline void clear_isrevised();
  static const int kIsRevisedFieldNumber = 7;
  inline bool isrevised() const;
  inline void set_isrevised(bool value);

  // optional bool IsCorrected = 8;
  inline bool has_iscorrected() const;
  inline void clear_iscorrected();
  static const int kIsCorrectedFieldNumber = 8;
  inline bool iscorrected() const;
  inline void set_iscorrected(bool value);

  // optional bool CanDocumentBeSignedBySender = 9;
  inline bool has_candocumentbesignedbysender() const;
  inline void clear_candocumentbesignedbysender();
  static const int kCanDocumentBeSignedBySenderFieldNumber = 9;
  inline bool candocumentbesignedbysender() const;
  inline void set_candocumentbesignedbysender(bool value);

  // optional .Diadoc.Api.Proto.Docflow.BuyerTitleDocflow BuyerTitleDocflow = 10;
  inline bool has_buyertitledocflow() const;
  inline void clear_buyertitledocflow();
  static const int kBuyerTitleDocflowFieldNumber = 10;
  inline const ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow& buyertitledocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* mutable_buyertitledocflow();
  inline ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* release_buyertitledocflow();
  inline void set_allocated_buyertitledocflow(::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* buyertitledocflow);

  // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 11;
  inline bool has_recipientsignaturerejectiondocflow() const;
  inline void clear_recipientsignaturerejectiondocflow();
  static const int kRecipientSignatureRejectionDocflowFieldNumber = 11;
  inline const ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow& recipientsignaturerejectiondocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* mutable_recipientsignaturerejectiondocflow();
  inline ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* release_recipientsignaturerejectiondocflow();
  inline void set_allocated_recipientsignaturerejectiondocflow(::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* recipientsignaturerejectiondocflow);

  // optional bool IsReceiptRequested = 12;
  inline bool has_isreceiptrequested() const;
  inline void clear_isreceiptrequested();
  static const int kIsReceiptRequestedFieldNumber = 12;
  inline bool isreceiptrequested() const;
  inline void set_isreceiptrequested(bool value);

  // optional bool IsRecipientSignatureRequested = 13;
  inline bool has_isrecipientsignaturerequested() const;
  inline void clear_isrecipientsignaturerequested();
  static const int kIsRecipientSignatureRequestedFieldNumber = 13;
  inline bool isrecipientsignaturerequested() const;
  inline void set_isrecipientsignaturerequested(bool value);

  // optional bool IsDocumentSignedByRecipient = 14;
  inline bool has_isdocumentsignedbyrecipient() const;
  inline void clear_isdocumentsignedbyrecipient();
  static const int kIsDocumentSignedByRecipientFieldNumber = 14;
  inline bool isdocumentsignedbyrecipient() const;
  inline void set_isdocumentsignedbyrecipient(bool value);

  // optional bool IsDocumentRejectedByRecipient = 15;
  inline bool has_isdocumentrejectedbyrecipient() const;
  inline void clear_isdocumentrejectedbyrecipient();
  static const int kIsDocumentRejectedByRecipientFieldNumber = 15;
  inline bool isdocumentrejectedbyrecipient() const;
  inline void set_isdocumentrejectedbyrecipient(bool value);

  // optional bool CanDocumentBeReceipted = 16;
  inline bool has_candocumentbereceipted() const;
  inline void clear_candocumentbereceipted();
  static const int kCanDocumentBeReceiptedFieldNumber = 16;
  inline bool candocumentbereceipted() const;
  inline void set_candocumentbereceipted(bool value);

  // optional bool CanDocumentBeSignedOrRejectedByRecipient = 17;
  inline bool has_candocumentbesignedorrejectedbyrecipient() const;
  inline void clear_candocumentbesignedorrejectedbyrecipient();
  static const int kCanDocumentBeSignedOrRejectedByRecipientFieldNumber = 17;
  inline bool candocumentbesignedorrejectedbyrecipient() const;
  inline void set_candocumentbesignedorrejectedbyrecipient(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_receiptdocflow();
  inline void clear_has_receiptdocflow();
  inline void set_has_confirmationdocflow();
  inline void clear_has_confirmationdocflow();
  inline void set_has_correctionrequestdocflow();
  inline void clear_has_correctionrequestdocflow();
  inline void set_has_confirmationtimestamp();
  inline void clear_has_confirmationtimestamp();
  inline void set_has_isamendmentrequested();
  inline void clear_has_isamendmentrequested();
  inline void set_has_isrevised();
  inline void clear_has_isrevised();
  inline void set_has_iscorrected();
  inline void clear_has_iscorrected();
  inline void set_has_candocumentbesignedbysender();
  inline void clear_has_candocumentbesignedbysender();
  inline void set_has_buyertitledocflow();
  inline void clear_has_buyertitledocflow();
  inline void set_has_recipientsignaturerejectiondocflow();
  inline void clear_has_recipientsignaturerejectiondocflow();
  inline void set_has_isreceiptrequested();
  inline void clear_has_isreceiptrequested();
  inline void set_has_isrecipientsignaturerequested();
  inline void clear_has_isrecipientsignaturerequested();
  inline void set_has_isdocumentsignedbyrecipient();
  inline void clear_has_isdocumentsignedbyrecipient();
  inline void set_has_isdocumentrejectedbyrecipient();
  inline void clear_has_isdocumentrejectedbyrecipient();
  inline void set_has_candocumentbereceipted();
  inline void clear_has_candocumentbereceipted();
  inline void set_has_candocumentbesignedorrejectedbyrecipient();
  inline void clear_has_candocumentbesignedorrejectedbyrecipient();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* receiptdocflow_;
  ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* confirmationdocflow_;
  ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* correctionrequestdocflow_;
  ::Diadoc::Api::Proto::Timestamp* confirmationtimestamp_;
  bool isfinished_;
  bool isamendmentrequested_;
  bool isrevised_;
  bool iscorrected_;
  bool candocumentbesignedbysender_;
  bool isreceiptrequested_;
  bool isrecipientsignaturerequested_;
  bool isdocumentsignedbyrecipient_;
  ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* buyertitledocflow_;
  ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* recipientsignaturerejectiondocflow_;
  bool isdocumentrejectedbyrecipient_;
  bool candocumentbereceipted_;
  bool candocumentbesignedorrejectedbyrecipient_;
  friend void  protobuf_AddDesc_Docflow_2fUniversalTransferDocumentDocflow_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fUniversalTransferDocumentDocflow_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fUniversalTransferDocumentDocflow_2eproto();

  void InitAsDefaultInstance();
  static OutboundUniversalTransferDocumentDocflow* default_instance_;
};
// ===================================================================


// ===================================================================

// InboundUniversalTransferDocumentDocflow

// optional bool IsFinished = 1;
inline bool InboundUniversalTransferDocumentDocflow::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool InboundUniversalTransferDocumentDocflow::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsFinished)
  return isfinished_;
}
inline void InboundUniversalTransferDocumentDocflow::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsFinished)
}

// optional .Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow ReceiptDocflow = 2;
inline bool InboundUniversalTransferDocumentDocflow::has_receiptdocflow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_receiptdocflow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_receiptdocflow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_receiptdocflow() {
  if (receiptdocflow_ != NULL) receiptdocflow_->::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow::Clear();
  clear_has_receiptdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow& InboundUniversalTransferDocumentDocflow::receiptdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.ReceiptDocflow)
  return receiptdocflow_ != NULL ? *receiptdocflow_ : *default_instance_->receiptdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* InboundUniversalTransferDocumentDocflow::mutable_receiptdocflow() {
  set_has_receiptdocflow();
  if (receiptdocflow_ == NULL) receiptdocflow_ = new ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.ReceiptDocflow)
  return receiptdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* InboundUniversalTransferDocumentDocflow::release_receiptdocflow() {
  clear_has_receiptdocflow();
  ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* temp = receiptdocflow_;
  receiptdocflow_ = NULL;
  return temp;
}
inline void InboundUniversalTransferDocumentDocflow::set_allocated_receiptdocflow(::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* receiptdocflow) {
  delete receiptdocflow_;
  receiptdocflow_ = receiptdocflow;
  if (receiptdocflow) {
    set_has_receiptdocflow();
  } else {
    clear_has_receiptdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.ReceiptDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
inline bool InboundUniversalTransferDocumentDocflow::has_confirmationdocflow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_confirmationdocflow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_confirmationdocflow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_confirmationdocflow() {
  if (confirmationdocflow_ != NULL) confirmationdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::Clear();
  clear_has_confirmationdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow& InboundUniversalTransferDocumentDocflow::confirmationdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.ConfirmationDocflow)
  return confirmationdocflow_ != NULL ? *confirmationdocflow_ : *default_instance_->confirmationdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* InboundUniversalTransferDocumentDocflow::mutable_confirmationdocflow() {
  set_has_confirmationdocflow();
  if (confirmationdocflow_ == NULL) confirmationdocflow_ = new ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.ConfirmationDocflow)
  return confirmationdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* InboundUniversalTransferDocumentDocflow::release_confirmationdocflow() {
  clear_has_confirmationdocflow();
  ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* temp = confirmationdocflow_;
  confirmationdocflow_ = NULL;
  return temp;
}
inline void InboundUniversalTransferDocumentDocflow::set_allocated_confirmationdocflow(::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* confirmationdocflow) {
  delete confirmationdocflow_;
  confirmationdocflow_ = confirmationdocflow;
  if (confirmationdocflow) {
    set_has_confirmationdocflow();
  } else {
    clear_has_confirmationdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.ConfirmationDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
inline bool InboundUniversalTransferDocumentDocflow::has_correctionrequestdocflow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_correctionrequestdocflow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_correctionrequestdocflow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_correctionrequestdocflow() {
  if (correctionrequestdocflow_ != NULL) correctionrequestdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::Clear();
  clear_has_correctionrequestdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow& InboundUniversalTransferDocumentDocflow::correctionrequestdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.CorrectionRequestDocflow)
  return correctionrequestdocflow_ != NULL ? *correctionrequestdocflow_ : *default_instance_->correctionrequestdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* InboundUniversalTransferDocumentDocflow::mutable_correctionrequestdocflow() {
  set_has_correctionrequestdocflow();
  if (correctionrequestdocflow_ == NULL) correctionrequestdocflow_ = new ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.CorrectionRequestDocflow)
  return correctionrequestdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* InboundUniversalTransferDocumentDocflow::release_correctionrequestdocflow() {
  clear_has_correctionrequestdocflow();
  ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* temp = correctionrequestdocflow_;
  correctionrequestdocflow_ = NULL;
  return temp;
}
inline void InboundUniversalTransferDocumentDocflow::set_allocated_correctionrequestdocflow(::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* correctionrequestdocflow) {
  delete correctionrequestdocflow_;
  correctionrequestdocflow_ = correctionrequestdocflow;
  if (correctionrequestdocflow) {
    set_has_correctionrequestdocflow();
  } else {
    clear_has_correctionrequestdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.CorrectionRequestDocflow)
}

// optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
inline bool InboundUniversalTransferDocumentDocflow::has_confirmationtimestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_confirmationtimestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_confirmationtimestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_confirmationtimestamp() {
  if (confirmationtimestamp_ != NULL) confirmationtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_confirmationtimestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& InboundUniversalTransferDocumentDocflow::confirmationtimestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.ConfirmationTimestamp)
  return confirmationtimestamp_ != NULL ? *confirmationtimestamp_ : *default_instance_->confirmationtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* InboundUniversalTransferDocumentDocflow::mutable_confirmationtimestamp() {
  set_has_confirmationtimestamp();
  if (confirmationtimestamp_ == NULL) confirmationtimestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.ConfirmationTimestamp)
  return confirmationtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* InboundUniversalTransferDocumentDocflow::release_confirmationtimestamp() {
  clear_has_confirmationtimestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = confirmationtimestamp_;
  confirmationtimestamp_ = NULL;
  return temp;
}
inline void InboundUniversalTransferDocumentDocflow::set_allocated_confirmationtimestamp(::Diadoc::Api::Proto::Timestamp* confirmationtimestamp) {
  delete confirmationtimestamp_;
  confirmationtimestamp_ = confirmationtimestamp;
  if (confirmationtimestamp) {
    set_has_confirmationtimestamp();
  } else {
    clear_has_confirmationtimestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.ConfirmationTimestamp)
}

// optional bool IsAmendmentRequested = 6;
inline bool InboundUniversalTransferDocumentDocflow::has_isamendmentrequested() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_isamendmentrequested() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_isamendmentrequested() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_isamendmentrequested() {
  isamendmentrequested_ = false;
  clear_has_isamendmentrequested();
}
inline bool InboundUniversalTransferDocumentDocflow::isamendmentrequested() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsAmendmentRequested)
  return isamendmentrequested_;
}
inline void InboundUniversalTransferDocumentDocflow::set_isamendmentrequested(bool value) {
  set_has_isamendmentrequested();
  isamendmentrequested_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsAmendmentRequested)
}

// optional bool IsRevised = 7;
inline bool InboundUniversalTransferDocumentDocflow::has_isrevised() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_isrevised() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_isrevised() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_isrevised() {
  isrevised_ = false;
  clear_has_isrevised();
}
inline bool InboundUniversalTransferDocumentDocflow::isrevised() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsRevised)
  return isrevised_;
}
inline void InboundUniversalTransferDocumentDocflow::set_isrevised(bool value) {
  set_has_isrevised();
  isrevised_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsRevised)
}

// optional bool IsCorrected = 8;
inline bool InboundUniversalTransferDocumentDocflow::has_iscorrected() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_iscorrected() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_iscorrected() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_iscorrected() {
  iscorrected_ = false;
  clear_has_iscorrected();
}
inline bool InboundUniversalTransferDocumentDocflow::iscorrected() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsCorrected)
  return iscorrected_;
}
inline void InboundUniversalTransferDocumentDocflow::set_iscorrected(bool value) {
  set_has_iscorrected();
  iscorrected_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsCorrected)
}

// optional .Diadoc.Api.Proto.Docflow.BuyerTitleDocflow BuyerTitleDocflow = 9;
inline bool InboundUniversalTransferDocumentDocflow::has_buyertitledocflow() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_buyertitledocflow() {
  _has_bits_[0] |= 0x00000100u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_buyertitledocflow() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_buyertitledocflow() {
  if (buyertitledocflow_ != NULL) buyertitledocflow_->::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow::Clear();
  clear_has_buyertitledocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow& InboundUniversalTransferDocumentDocflow::buyertitledocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.BuyerTitleDocflow)
  return buyertitledocflow_ != NULL ? *buyertitledocflow_ : *default_instance_->buyertitledocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* InboundUniversalTransferDocumentDocflow::mutable_buyertitledocflow() {
  set_has_buyertitledocflow();
  if (buyertitledocflow_ == NULL) buyertitledocflow_ = new ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.BuyerTitleDocflow)
  return buyertitledocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* InboundUniversalTransferDocumentDocflow::release_buyertitledocflow() {
  clear_has_buyertitledocflow();
  ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* temp = buyertitledocflow_;
  buyertitledocflow_ = NULL;
  return temp;
}
inline void InboundUniversalTransferDocumentDocflow::set_allocated_buyertitledocflow(::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* buyertitledocflow) {
  delete buyertitledocflow_;
  buyertitledocflow_ = buyertitledocflow;
  if (buyertitledocflow) {
    set_has_buyertitledocflow();
  } else {
    clear_has_buyertitledocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.BuyerTitleDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 10;
inline bool InboundUniversalTransferDocumentDocflow::has_recipientsignaturerejectiondocflow() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_recipientsignaturerejectiondocflow() {
  _has_bits_[0] |= 0x00000200u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_recipientsignaturerejectiondocflow() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_recipientsignaturerejectiondocflow() {
  if (recipientsignaturerejectiondocflow_ != NULL) recipientsignaturerejectiondocflow_->::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow::Clear();
  clear_has_recipientsignaturerejectiondocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow& InboundUniversalTransferDocumentDocflow::recipientsignaturerejectiondocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.RecipientSignatureRejectionDocflow)
  return recipientsignaturerejectiondocflow_ != NULL ? *recipientsignaturerejectiondocflow_ : *default_instance_->recipientsignaturerejectiondocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* InboundUniversalTransferDocumentDocflow::mutable_recipientsignaturerejectiondocflow() {
  set_has_recipientsignaturerejectiondocflow();
  if (recipientsignaturerejectiondocflow_ == NULL) recipientsignaturerejectiondocflow_ = new ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.RecipientSignatureRejectionDocflow)
  return recipientsignaturerejectiondocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* InboundUniversalTransferDocumentDocflow::release_recipientsignaturerejectiondocflow() {
  clear_has_recipientsignaturerejectiondocflow();
  ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* temp = recipientsignaturerejectiondocflow_;
  recipientsignaturerejectiondocflow_ = NULL;
  return temp;
}
inline void InboundUniversalTransferDocumentDocflow::set_allocated_recipientsignaturerejectiondocflow(::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* recipientsignaturerejectiondocflow) {
  delete recipientsignaturerejectiondocflow_;
  recipientsignaturerejectiondocflow_ = recipientsignaturerejectiondocflow;
  if (recipientsignaturerejectiondocflow) {
    set_has_recipientsignaturerejectiondocflow();
  } else {
    clear_has_recipientsignaturerejectiondocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.RecipientSignatureRejectionDocflow)
}

// optional bool IsReceiptRequested = 11;
inline bool InboundUniversalTransferDocumentDocflow::has_isreceiptrequested() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_isreceiptrequested() {
  _has_bits_[0] |= 0x00000400u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_isreceiptrequested() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_isreceiptrequested() {
  isreceiptrequested_ = false;
  clear_has_isreceiptrequested();
}
inline bool InboundUniversalTransferDocumentDocflow::isreceiptrequested() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsReceiptRequested)
  return isreceiptrequested_;
}
inline void InboundUniversalTransferDocumentDocflow::set_isreceiptrequested(bool value) {
  set_has_isreceiptrequested();
  isreceiptrequested_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsReceiptRequested)
}

// optional bool IsRecipientSignatureRequested = 12;
inline bool InboundUniversalTransferDocumentDocflow::has_isrecipientsignaturerequested() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_isrecipientsignaturerequested() {
  _has_bits_[0] |= 0x00000800u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_isrecipientsignaturerequested() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_isrecipientsignaturerequested() {
  isrecipientsignaturerequested_ = false;
  clear_has_isrecipientsignaturerequested();
}
inline bool InboundUniversalTransferDocumentDocflow::isrecipientsignaturerequested() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsRecipientSignatureRequested)
  return isrecipientsignaturerequested_;
}
inline void InboundUniversalTransferDocumentDocflow::set_isrecipientsignaturerequested(bool value) {
  set_has_isrecipientsignaturerequested();
  isrecipientsignaturerequested_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsRecipientSignatureRequested)
}

// optional bool IsDocumentSignedByRecipient = 13;
inline bool InboundUniversalTransferDocumentDocflow::has_isdocumentsignedbyrecipient() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_isdocumentsignedbyrecipient() {
  _has_bits_[0] |= 0x00001000u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_isdocumentsignedbyrecipient() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_isdocumentsignedbyrecipient() {
  isdocumentsignedbyrecipient_ = false;
  clear_has_isdocumentsignedbyrecipient();
}
inline bool InboundUniversalTransferDocumentDocflow::isdocumentsignedbyrecipient() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsDocumentSignedByRecipient)
  return isdocumentsignedbyrecipient_;
}
inline void InboundUniversalTransferDocumentDocflow::set_isdocumentsignedbyrecipient(bool value) {
  set_has_isdocumentsignedbyrecipient();
  isdocumentsignedbyrecipient_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsDocumentSignedByRecipient)
}

// optional bool IsDocumentRejectedByRecipient = 14;
inline bool InboundUniversalTransferDocumentDocflow::has_isdocumentrejectedbyrecipient() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_isdocumentrejectedbyrecipient() {
  _has_bits_[0] |= 0x00002000u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_isdocumentrejectedbyrecipient() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_isdocumentrejectedbyrecipient() {
  isdocumentrejectedbyrecipient_ = false;
  clear_has_isdocumentrejectedbyrecipient();
}
inline bool InboundUniversalTransferDocumentDocflow::isdocumentrejectedbyrecipient() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsDocumentRejectedByRecipient)
  return isdocumentrejectedbyrecipient_;
}
inline void InboundUniversalTransferDocumentDocflow::set_isdocumentrejectedbyrecipient(bool value) {
  set_has_isdocumentrejectedbyrecipient();
  isdocumentrejectedbyrecipient_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.IsDocumentRejectedByRecipient)
}

// optional bool CanDocumentBeReceipted = 15;
inline bool InboundUniversalTransferDocumentDocflow::has_candocumentbereceipted() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_candocumentbereceipted() {
  _has_bits_[0] |= 0x00004000u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_candocumentbereceipted() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_candocumentbereceipted() {
  candocumentbereceipted_ = false;
  clear_has_candocumentbereceipted();
}
inline bool InboundUniversalTransferDocumentDocflow::candocumentbereceipted() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.CanDocumentBeReceipted)
  return candocumentbereceipted_;
}
inline void InboundUniversalTransferDocumentDocflow::set_candocumentbereceipted(bool value) {
  set_has_candocumentbereceipted();
  candocumentbereceipted_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.CanDocumentBeReceipted)
}

// optional bool CanDocumentBeSignedOrRejectedByRecipient = 16;
inline bool InboundUniversalTransferDocumentDocflow::has_candocumentbesignedorrejectedbyrecipient() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void InboundUniversalTransferDocumentDocflow::set_has_candocumentbesignedorrejectedbyrecipient() {
  _has_bits_[0] |= 0x00008000u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_has_candocumentbesignedorrejectedbyrecipient() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void InboundUniversalTransferDocumentDocflow::clear_candocumentbesignedorrejectedbyrecipient() {
  candocumentbesignedorrejectedbyrecipient_ = false;
  clear_has_candocumentbesignedorrejectedbyrecipient();
}
inline bool InboundUniversalTransferDocumentDocflow::candocumentbesignedorrejectedbyrecipient() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.CanDocumentBeSignedOrRejectedByRecipient)
  return candocumentbesignedorrejectedbyrecipient_;
}
inline void InboundUniversalTransferDocumentDocflow::set_candocumentbesignedorrejectedbyrecipient(bool value) {
  set_has_candocumentbesignedorrejectedbyrecipient();
  candocumentbesignedorrejectedbyrecipient_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow.CanDocumentBeSignedOrRejectedByRecipient)
}

// -------------------------------------------------------------------

// OutboundUniversalTransferDocumentDocflow

// optional bool IsFinished = 1;
inline bool OutboundUniversalTransferDocumentDocflow::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool OutboundUniversalTransferDocumentDocflow::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsFinished)
  return isfinished_;
}
inline void OutboundUniversalTransferDocumentDocflow::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsFinished)
}

// optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
inline bool OutboundUniversalTransferDocumentDocflow::has_receiptdocflow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_receiptdocflow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_receiptdocflow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_receiptdocflow() {
  if (receiptdocflow_ != NULL) receiptdocflow_->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::Clear();
  clear_has_receiptdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflow& OutboundUniversalTransferDocumentDocflow::receiptdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.ReceiptDocflow)
  return receiptdocflow_ != NULL ? *receiptdocflow_ : *default_instance_->receiptdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* OutboundUniversalTransferDocumentDocflow::mutable_receiptdocflow() {
  set_has_receiptdocflow();
  if (receiptdocflow_ == NULL) receiptdocflow_ = new ::Diadoc::Api::Proto::Docflow::ReceiptDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.ReceiptDocflow)
  return receiptdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* OutboundUniversalTransferDocumentDocflow::release_receiptdocflow() {
  clear_has_receiptdocflow();
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* temp = receiptdocflow_;
  receiptdocflow_ = NULL;
  return temp;
}
inline void OutboundUniversalTransferDocumentDocflow::set_allocated_receiptdocflow(::Diadoc::Api::Proto::Docflow::ReceiptDocflow* receiptdocflow) {
  delete receiptdocflow_;
  receiptdocflow_ = receiptdocflow;
  if (receiptdocflow) {
    set_has_receiptdocflow();
  } else {
    clear_has_receiptdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.ReceiptDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
inline bool OutboundUniversalTransferDocumentDocflow::has_confirmationdocflow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_confirmationdocflow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_confirmationdocflow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_confirmationdocflow() {
  if (confirmationdocflow_ != NULL) confirmationdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::Clear();
  clear_has_confirmationdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow& OutboundUniversalTransferDocumentDocflow::confirmationdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.ConfirmationDocflow)
  return confirmationdocflow_ != NULL ? *confirmationdocflow_ : *default_instance_->confirmationdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* OutboundUniversalTransferDocumentDocflow::mutable_confirmationdocflow() {
  set_has_confirmationdocflow();
  if (confirmationdocflow_ == NULL) confirmationdocflow_ = new ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.ConfirmationDocflow)
  return confirmationdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* OutboundUniversalTransferDocumentDocflow::release_confirmationdocflow() {
  clear_has_confirmationdocflow();
  ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* temp = confirmationdocflow_;
  confirmationdocflow_ = NULL;
  return temp;
}
inline void OutboundUniversalTransferDocumentDocflow::set_allocated_confirmationdocflow(::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* confirmationdocflow) {
  delete confirmationdocflow_;
  confirmationdocflow_ = confirmationdocflow;
  if (confirmationdocflow) {
    set_has_confirmationdocflow();
  } else {
    clear_has_confirmationdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.ConfirmationDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
inline bool OutboundUniversalTransferDocumentDocflow::has_correctionrequestdocflow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_correctionrequestdocflow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_correctionrequestdocflow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_correctionrequestdocflow() {
  if (correctionrequestdocflow_ != NULL) correctionrequestdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::Clear();
  clear_has_correctionrequestdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow& OutboundUniversalTransferDocumentDocflow::correctionrequestdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.CorrectionRequestDocflow)
  return correctionrequestdocflow_ != NULL ? *correctionrequestdocflow_ : *default_instance_->correctionrequestdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* OutboundUniversalTransferDocumentDocflow::mutable_correctionrequestdocflow() {
  set_has_correctionrequestdocflow();
  if (correctionrequestdocflow_ == NULL) correctionrequestdocflow_ = new ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.CorrectionRequestDocflow)
  return correctionrequestdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* OutboundUniversalTransferDocumentDocflow::release_correctionrequestdocflow() {
  clear_has_correctionrequestdocflow();
  ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* temp = correctionrequestdocflow_;
  correctionrequestdocflow_ = NULL;
  return temp;
}
inline void OutboundUniversalTransferDocumentDocflow::set_allocated_correctionrequestdocflow(::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* correctionrequestdocflow) {
  delete correctionrequestdocflow_;
  correctionrequestdocflow_ = correctionrequestdocflow;
  if (correctionrequestdocflow) {
    set_has_correctionrequestdocflow();
  } else {
    clear_has_correctionrequestdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.CorrectionRequestDocflow)
}

// optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
inline bool OutboundUniversalTransferDocumentDocflow::has_confirmationtimestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_confirmationtimestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_confirmationtimestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_confirmationtimestamp() {
  if (confirmationtimestamp_ != NULL) confirmationtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_confirmationtimestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& OutboundUniversalTransferDocumentDocflow::confirmationtimestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.ConfirmationTimestamp)
  return confirmationtimestamp_ != NULL ? *confirmationtimestamp_ : *default_instance_->confirmationtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* OutboundUniversalTransferDocumentDocflow::mutable_confirmationtimestamp() {
  set_has_confirmationtimestamp();
  if (confirmationtimestamp_ == NULL) confirmationtimestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.ConfirmationTimestamp)
  return confirmationtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* OutboundUniversalTransferDocumentDocflow::release_confirmationtimestamp() {
  clear_has_confirmationtimestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = confirmationtimestamp_;
  confirmationtimestamp_ = NULL;
  return temp;
}
inline void OutboundUniversalTransferDocumentDocflow::set_allocated_confirmationtimestamp(::Diadoc::Api::Proto::Timestamp* confirmationtimestamp) {
  delete confirmationtimestamp_;
  confirmationtimestamp_ = confirmationtimestamp;
  if (confirmationtimestamp) {
    set_has_confirmationtimestamp();
  } else {
    clear_has_confirmationtimestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.ConfirmationTimestamp)
}

// optional bool IsAmendmentRequested = 6;
inline bool OutboundUniversalTransferDocumentDocflow::has_isamendmentrequested() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_isamendmentrequested() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_isamendmentrequested() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_isamendmentrequested() {
  isamendmentrequested_ = false;
  clear_has_isamendmentrequested();
}
inline bool OutboundUniversalTransferDocumentDocflow::isamendmentrequested() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsAmendmentRequested)
  return isamendmentrequested_;
}
inline void OutboundUniversalTransferDocumentDocflow::set_isamendmentrequested(bool value) {
  set_has_isamendmentrequested();
  isamendmentrequested_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsAmendmentRequested)
}

// optional bool IsRevised = 7;
inline bool OutboundUniversalTransferDocumentDocflow::has_isrevised() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_isrevised() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_isrevised() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_isrevised() {
  isrevised_ = false;
  clear_has_isrevised();
}
inline bool OutboundUniversalTransferDocumentDocflow::isrevised() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsRevised)
  return isrevised_;
}
inline void OutboundUniversalTransferDocumentDocflow::set_isrevised(bool value) {
  set_has_isrevised();
  isrevised_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsRevised)
}

// optional bool IsCorrected = 8;
inline bool OutboundUniversalTransferDocumentDocflow::has_iscorrected() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_iscorrected() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_iscorrected() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_iscorrected() {
  iscorrected_ = false;
  clear_has_iscorrected();
}
inline bool OutboundUniversalTransferDocumentDocflow::iscorrected() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsCorrected)
  return iscorrected_;
}
inline void OutboundUniversalTransferDocumentDocflow::set_iscorrected(bool value) {
  set_has_iscorrected();
  iscorrected_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsCorrected)
}

// optional bool CanDocumentBeSignedBySender = 9;
inline bool OutboundUniversalTransferDocumentDocflow::has_candocumentbesignedbysender() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_candocumentbesignedbysender() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_candocumentbesignedbysender() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_candocumentbesignedbysender() {
  candocumentbesignedbysender_ = false;
  clear_has_candocumentbesignedbysender();
}
inline bool OutboundUniversalTransferDocumentDocflow::candocumentbesignedbysender() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.CanDocumentBeSignedBySender)
  return candocumentbesignedbysender_;
}
inline void OutboundUniversalTransferDocumentDocflow::set_candocumentbesignedbysender(bool value) {
  set_has_candocumentbesignedbysender();
  candocumentbesignedbysender_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.CanDocumentBeSignedBySender)
}

// optional .Diadoc.Api.Proto.Docflow.BuyerTitleDocflow BuyerTitleDocflow = 10;
inline bool OutboundUniversalTransferDocumentDocflow::has_buyertitledocflow() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_buyertitledocflow() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_buyertitledocflow() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_buyertitledocflow() {
  if (buyertitledocflow_ != NULL) buyertitledocflow_->::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow::Clear();
  clear_has_buyertitledocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow& OutboundUniversalTransferDocumentDocflow::buyertitledocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.BuyerTitleDocflow)
  return buyertitledocflow_ != NULL ? *buyertitledocflow_ : *default_instance_->buyertitledocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* OutboundUniversalTransferDocumentDocflow::mutable_buyertitledocflow() {
  set_has_buyertitledocflow();
  if (buyertitledocflow_ == NULL) buyertitledocflow_ = new ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.BuyerTitleDocflow)
  return buyertitledocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* OutboundUniversalTransferDocumentDocflow::release_buyertitledocflow() {
  clear_has_buyertitledocflow();
  ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* temp = buyertitledocflow_;
  buyertitledocflow_ = NULL;
  return temp;
}
inline void OutboundUniversalTransferDocumentDocflow::set_allocated_buyertitledocflow(::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* buyertitledocflow) {
  delete buyertitledocflow_;
  buyertitledocflow_ = buyertitledocflow;
  if (buyertitledocflow) {
    set_has_buyertitledocflow();
  } else {
    clear_has_buyertitledocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.BuyerTitleDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 11;
inline bool OutboundUniversalTransferDocumentDocflow::has_recipientsignaturerejectiondocflow() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_recipientsignaturerejectiondocflow() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_recipientsignaturerejectiondocflow() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_recipientsignaturerejectiondocflow() {
  if (recipientsignaturerejectiondocflow_ != NULL) recipientsignaturerejectiondocflow_->::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow::Clear();
  clear_has_recipientsignaturerejectiondocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow& OutboundUniversalTransferDocumentDocflow::recipientsignaturerejectiondocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.RecipientSignatureRejectionDocflow)
  return recipientsignaturerejectiondocflow_ != NULL ? *recipientsignaturerejectiondocflow_ : *default_instance_->recipientsignaturerejectiondocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* OutboundUniversalTransferDocumentDocflow::mutable_recipientsignaturerejectiondocflow() {
  set_has_recipientsignaturerejectiondocflow();
  if (recipientsignaturerejectiondocflow_ == NULL) recipientsignaturerejectiondocflow_ = new ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.RecipientSignatureRejectionDocflow)
  return recipientsignaturerejectiondocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* OutboundUniversalTransferDocumentDocflow::release_recipientsignaturerejectiondocflow() {
  clear_has_recipientsignaturerejectiondocflow();
  ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* temp = recipientsignaturerejectiondocflow_;
  recipientsignaturerejectiondocflow_ = NULL;
  return temp;
}
inline void OutboundUniversalTransferDocumentDocflow::set_allocated_recipientsignaturerejectiondocflow(::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* recipientsignaturerejectiondocflow) {
  delete recipientsignaturerejectiondocflow_;
  recipientsignaturerejectiondocflow_ = recipientsignaturerejectiondocflow;
  if (recipientsignaturerejectiondocflow) {
    set_has_recipientsignaturerejectiondocflow();
  } else {
    clear_has_recipientsignaturerejectiondocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.RecipientSignatureRejectionDocflow)
}

// optional bool IsReceiptRequested = 12;
inline bool OutboundUniversalTransferDocumentDocflow::has_isreceiptrequested() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_isreceiptrequested() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_isreceiptrequested() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_isreceiptrequested() {
  isreceiptrequested_ = false;
  clear_has_isreceiptrequested();
}
inline bool OutboundUniversalTransferDocumentDocflow::isreceiptrequested() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsReceiptRequested)
  return isreceiptrequested_;
}
inline void OutboundUniversalTransferDocumentDocflow::set_isreceiptrequested(bool value) {
  set_has_isreceiptrequested();
  isreceiptrequested_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsReceiptRequested)
}

// optional bool IsRecipientSignatureRequested = 13;
inline bool OutboundUniversalTransferDocumentDocflow::has_isrecipientsignaturerequested() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_isrecipientsignaturerequested() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_isrecipientsignaturerequested() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_isrecipientsignaturerequested() {
  isrecipientsignaturerequested_ = false;
  clear_has_isrecipientsignaturerequested();
}
inline bool OutboundUniversalTransferDocumentDocflow::isrecipientsignaturerequested() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsRecipientSignatureRequested)
  return isrecipientsignaturerequested_;
}
inline void OutboundUniversalTransferDocumentDocflow::set_isrecipientsignaturerequested(bool value) {
  set_has_isrecipientsignaturerequested();
  isrecipientsignaturerequested_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsRecipientSignatureRequested)
}

// optional bool IsDocumentSignedByRecipient = 14;
inline bool OutboundUniversalTransferDocumentDocflow::has_isdocumentsignedbyrecipient() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_isdocumentsignedbyrecipient() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_isdocumentsignedbyrecipient() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_isdocumentsignedbyrecipient() {
  isdocumentsignedbyrecipient_ = false;
  clear_has_isdocumentsignedbyrecipient();
}
inline bool OutboundUniversalTransferDocumentDocflow::isdocumentsignedbyrecipient() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsDocumentSignedByRecipient)
  return isdocumentsignedbyrecipient_;
}
inline void OutboundUniversalTransferDocumentDocflow::set_isdocumentsignedbyrecipient(bool value) {
  set_has_isdocumentsignedbyrecipient();
  isdocumentsignedbyrecipient_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsDocumentSignedByRecipient)
}

// optional bool IsDocumentRejectedByRecipient = 15;
inline bool OutboundUniversalTransferDocumentDocflow::has_isdocumentrejectedbyrecipient() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_isdocumentrejectedbyrecipient() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_isdocumentrejectedbyrecipient() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_isdocumentrejectedbyrecipient() {
  isdocumentrejectedbyrecipient_ = false;
  clear_has_isdocumentrejectedbyrecipient();
}
inline bool OutboundUniversalTransferDocumentDocflow::isdocumentrejectedbyrecipient() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsDocumentRejectedByRecipient)
  return isdocumentrejectedbyrecipient_;
}
inline void OutboundUniversalTransferDocumentDocflow::set_isdocumentrejectedbyrecipient(bool value) {
  set_has_isdocumentrejectedbyrecipient();
  isdocumentrejectedbyrecipient_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.IsDocumentRejectedByRecipient)
}

// optional bool CanDocumentBeReceipted = 16;
inline bool OutboundUniversalTransferDocumentDocflow::has_candocumentbereceipted() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_candocumentbereceipted() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_candocumentbereceipted() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_candocumentbereceipted() {
  candocumentbereceipted_ = false;
  clear_has_candocumentbereceipted();
}
inline bool OutboundUniversalTransferDocumentDocflow::candocumentbereceipted() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.CanDocumentBeReceipted)
  return candocumentbereceipted_;
}
inline void OutboundUniversalTransferDocumentDocflow::set_candocumentbereceipted(bool value) {
  set_has_candocumentbereceipted();
  candocumentbereceipted_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.CanDocumentBeReceipted)
}

// optional bool CanDocumentBeSignedOrRejectedByRecipient = 17;
inline bool OutboundUniversalTransferDocumentDocflow::has_candocumentbesignedorrejectedbyrecipient() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OutboundUniversalTransferDocumentDocflow::set_has_candocumentbesignedorrejectedbyrecipient() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_has_candocumentbesignedorrejectedbyrecipient() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OutboundUniversalTransferDocumentDocflow::clear_candocumentbesignedorrejectedbyrecipient() {
  candocumentbesignedorrejectedbyrecipient_ = false;
  clear_has_candocumentbesignedorrejectedbyrecipient();
}
inline bool OutboundUniversalTransferDocumentDocflow::candocumentbesignedorrejectedbyrecipient() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.CanDocumentBeSignedOrRejectedByRecipient)
  return candocumentbesignedorrejectedbyrecipient_;
}
inline void OutboundUniversalTransferDocumentDocflow::set_candocumentbesignedorrejectedbyrecipient(bool value) {
  set_has_candocumentbesignedorrejectedbyrecipient();
  candocumentbesignedorrejectedbyrecipient_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow.CanDocumentBeSignedOrRejectedByRecipient)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Docflow_2fUniversalTransferDocumentDocflow_2eproto__INCLUDED
