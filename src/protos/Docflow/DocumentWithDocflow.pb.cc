// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/DocumentWithDocflow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Docflow/DocumentWithDocflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

namespace {

const ::google::protobuf::Descriptor* DocumentWithDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentWithDocflow_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Docflow_2fDocumentWithDocflow_2eproto() {
  protobuf_AddDesc_Docflow_2fDocumentWithDocflow_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Docflow/DocumentWithDocflow.proto");
  GOOGLE_CHECK(file != NULL);
  DocumentWithDocflow_descriptor_ = file->message_type(0);
  static const int DocumentWithDocflow_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWithDocflow, documentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWithDocflow, lasteventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWithDocflow, lasteventtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWithDocflow, documentinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWithDocflow, docflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWithDocflow, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWithDocflow, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWithDocflow, forwarddocumentevents_),
  };
  DocumentWithDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentWithDocflow_descriptor_,
      DocumentWithDocflow::default_instance_,
      DocumentWithDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWithDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWithDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentWithDocflow));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Docflow_2fDocumentWithDocflow_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentWithDocflow_descriptor_, &DocumentWithDocflow::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Docflow_2fDocumentWithDocflow_2eproto() {
  delete DocumentWithDocflow::default_instance_;
  delete DocumentWithDocflow_reflection_;
}

void protobuf_AddDesc_Docflow_2fDocumentWithDocflow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_DocumentId_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_ForwardDocumentEvent_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fDocflow_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fDocumentInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!Docflow/DocumentWithDocflow.proto\022\030Dia"
    "doc.Api.Proto.Docflow\032\017Timestamp.proto\032\020"
    "DocumentId.proto\032\032ForwardDocumentEvent.p"
    "roto\032\025Docflow/Docflow.proto\032\032Docflow/Doc"
    "umentInfo.proto\"\306\003\n\023DocumentWithDocflow\022"
    "0\n\nDocumentId\030\001 \001(\0132\034.Diadoc.Api.Proto.D"
    "ocumentId\022\023\n\013LastEventId\030\002 \001(\t\0227\n\022LastEv"
    "entTimestamp\030\003 \001(\0132\033.Diadoc.Api.Proto.Ti"
    "mestamp\022<\n\014DocumentInfo\030\004 \001(\0132&.Diadoc.A"
    "pi.Proto.Docflow.DocumentInfo\0222\n\007Docflow"
    "\030\005 \001(\0132!.Diadoc.Api.Proto.Docflow.Docflo"
    "w\0228\n\022InitialDocumentIds\030\006 \003(\0132\034.Diadoc.A"
    "pi.Proto.DocumentId\022<\n\026SubordinateDocume"
    "ntIds\030\007 \003(\0132\034.Diadoc.Api.Proto.DocumentI"
    "d\022E\n\025ForwardDocumentEvents\030\010 \003(\0132&.Diado"
    "c.Api.Proto.ForwardDocumentEvent", 632);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Docflow/DocumentWithDocflow.proto", &protobuf_RegisterTypes);
  DocumentWithDocflow::default_instance_ = new DocumentWithDocflow();
  DocumentWithDocflow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Docflow_2fDocumentWithDocflow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Docflow_2fDocumentWithDocflow_2eproto {
  StaticDescriptorInitializer_Docflow_2fDocumentWithDocflow_2eproto() {
    protobuf_AddDesc_Docflow_2fDocumentWithDocflow_2eproto();
  }
} static_descriptor_initializer_Docflow_2fDocumentWithDocflow_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DocumentWithDocflow::kDocumentIdFieldNumber;
const int DocumentWithDocflow::kLastEventIdFieldNumber;
const int DocumentWithDocflow::kLastEventTimestampFieldNumber;
const int DocumentWithDocflow::kDocumentInfoFieldNumber;
const int DocumentWithDocflow::kDocflowFieldNumber;
const int DocumentWithDocflow::kInitialDocumentIdsFieldNumber;
const int DocumentWithDocflow::kSubordinateDocumentIdsFieldNumber;
const int DocumentWithDocflow::kForwardDocumentEventsFieldNumber;
#endif  // !_MSC_VER

DocumentWithDocflow::DocumentWithDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.DocumentWithDocflow)
}

void DocumentWithDocflow::InitAsDefaultInstance() {
  documentid_ = const_cast< ::Diadoc::Api::Proto::DocumentId*>(&::Diadoc::Api::Proto::DocumentId::default_instance());
  lasteventtimestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  documentinfo_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentInfo*>(&::Diadoc::Api::Proto::Docflow::DocumentInfo::default_instance());
  docflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::Docflow*>(&::Diadoc::Api::Proto::Docflow::Docflow::default_instance());
}

DocumentWithDocflow::DocumentWithDocflow(const DocumentWithDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.DocumentWithDocflow)
}

void DocumentWithDocflow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documentid_ = NULL;
  lasteventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lasteventtimestamp_ = NULL;
  documentinfo_ = NULL;
  docflow_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentWithDocflow::~DocumentWithDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.DocumentWithDocflow)
  SharedDtor();
}

void DocumentWithDocflow::SharedDtor() {
  if (lasteventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lasteventid_;
  }
  if (this != default_instance_) {
    delete documentid_;
    delete lasteventtimestamp_;
    delete documentinfo_;
    delete docflow_;
  }
}

void DocumentWithDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentWithDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentWithDocflow_descriptor_;
}

const DocumentWithDocflow& DocumentWithDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocumentWithDocflow_2eproto();
  return *default_instance_;
}

DocumentWithDocflow* DocumentWithDocflow::default_instance_ = NULL;

DocumentWithDocflow* DocumentWithDocflow::New() const {
  return new DocumentWithDocflow;
}

void DocumentWithDocflow::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_documentid()) {
      if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
    }
    if (has_lasteventid()) {
      if (lasteventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lasteventid_->clear();
      }
    }
    if (has_lasteventtimestamp()) {
      if (lasteventtimestamp_ != NULL) lasteventtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_documentinfo()) {
      if (documentinfo_ != NULL) documentinfo_->::Diadoc::Api::Proto::Docflow::DocumentInfo::Clear();
    }
    if (has_docflow()) {
      if (docflow_ != NULL) docflow_->::Diadoc::Api::Proto::Docflow::Docflow::Clear();
    }
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  forwarddocumentevents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentWithDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.DocumentWithDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.DocumentId DocumentId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LastEventId;
        break;
      }

      // optional string LastEventId = 2;
      case 2: {
        if (tag == 18) {
         parse_LastEventId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lasteventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lasteventid().data(), this->lasteventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lasteventid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_LastEventTimestamp;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp LastEventTimestamp = 3;
      case 3: {
        if (tag == 26) {
         parse_LastEventTimestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lasteventtimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DocumentInfo;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentInfo DocumentInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_DocumentInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Docflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.Docflow Docflow = 5;
      case 5: {
        if (tag == 42) {
         parse_Docflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_docflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 6;
      case 6: {
        if (tag == 50) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(58)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 7;
      case 7: {
        if (tag == 58) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(66)) goto parse_ForwardDocumentEvents;
        break;
      }

      // repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 8;
      case 8: {
        if (tag == 66) {
         parse_ForwardDocumentEvents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_forwarddocumentevents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ForwardDocumentEvents;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.DocumentWithDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.DocumentWithDocflow)
  return false;
#undef DO_
}

void DocumentWithDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.DocumentWithDocflow)
  // optional .Diadoc.Api.Proto.DocumentId DocumentId = 1;
  if (has_documentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documentid(), output);
  }

  // optional string LastEventId = 2;
  if (has_lasteventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lasteventid().data(), this->lasteventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lasteventid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lasteventid(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp LastEventTimestamp = 3;
  if (has_lasteventtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lasteventtimestamp(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentInfo DocumentInfo = 4;
  if (has_documentinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->documentinfo(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.Docflow Docflow = 5;
  if (has_docflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->docflow(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 6;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 7;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->subordinatedocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 8;
  for (int i = 0; i < this->forwarddocumentevents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->forwarddocumentevents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.DocumentWithDocflow)
}

::google::protobuf::uint8* DocumentWithDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.DocumentWithDocflow)
  // optional .Diadoc.Api.Proto.DocumentId DocumentId = 1;
  if (has_documentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documentid(), target);
  }

  // optional string LastEventId = 2;
  if (has_lasteventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lasteventid().data(), this->lasteventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lasteventid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lasteventid(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp LastEventTimestamp = 3;
  if (has_lasteventtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lasteventtimestamp(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentInfo DocumentInfo = 4;
  if (has_documentinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->documentinfo(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.Docflow Docflow = 5;
  if (has_docflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->docflow(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 6;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 7;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->subordinatedocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 8;
  for (int i = 0; i < this->forwarddocumentevents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->forwarddocumentevents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.DocumentWithDocflow)
  return target;
}

int DocumentWithDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.DocumentId DocumentId = 1;
    if (has_documentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentid());
    }

    // optional string LastEventId = 2;
    if (has_lasteventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lasteventid());
    }

    // optional .Diadoc.Api.Proto.Timestamp LastEventTimestamp = 3;
    if (has_lasteventtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lasteventtimestamp());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentInfo DocumentInfo = 4;
    if (has_documentinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentinfo());
    }

    // optional .Diadoc.Api.Proto.Docflow.Docflow Docflow = 5;
    if (has_docflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docflow());
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 6;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 7;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 8;
  total_size += 1 * this->forwarddocumentevents_size();
  for (int i = 0; i < this->forwarddocumentevents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forwarddocumentevents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentWithDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentWithDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentWithDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentWithDocflow::MergeFrom(const DocumentWithDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  forwarddocumentevents_.MergeFrom(from.forwarddocumentevents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentid()) {
      mutable_documentid()->::Diadoc::Api::Proto::DocumentId::MergeFrom(from.documentid());
    }
    if (from.has_lasteventid()) {
      set_lasteventid(from.lasteventid());
    }
    if (from.has_lasteventtimestamp()) {
      mutable_lasteventtimestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.lasteventtimestamp());
    }
    if (from.has_documentinfo()) {
      mutable_documentinfo()->::Diadoc::Api::Proto::Docflow::DocumentInfo::MergeFrom(from.documentinfo());
    }
    if (from.has_docflow()) {
      mutable_docflow()->::Diadoc::Api::Proto::Docflow::Docflow::MergeFrom(from.docflow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentWithDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentWithDocflow::CopyFrom(const DocumentWithDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentWithDocflow::IsInitialized() const {

  if (has_documentid()) {
    if (!this->documentid().IsInitialized()) return false;
  }
  if (has_lasteventtimestamp()) {
    if (!this->lasteventtimestamp().IsInitialized()) return false;
  }
  if (has_documentinfo()) {
    if (!this->documentinfo().IsInitialized()) return false;
  }
  if (has_docflow()) {
    if (!this->docflow().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->initialdocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subordinatedocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->forwarddocumentevents())) return false;
  return true;
}

void DocumentWithDocflow::Swap(DocumentWithDocflow* other) {
  if (other != this) {
    std::swap(documentid_, other->documentid_);
    std::swap(lasteventid_, other->lasteventid_);
    std::swap(lasteventtimestamp_, other->lasteventtimestamp_);
    std::swap(documentinfo_, other->documentinfo_);
    std::swap(docflow_, other->docflow_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    forwarddocumentevents_.Swap(&other->forwarddocumentevents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentWithDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentWithDocflow_descriptor_;
  metadata.reflection = DocumentWithDocflow_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
