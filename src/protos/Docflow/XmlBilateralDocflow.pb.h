// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/XmlBilateralDocflow.proto

#ifndef PROTOBUF_Docflow_2fXmlBilateralDocflow_2eproto__INCLUDED
#define PROTOBUF_Docflow_2fXmlBilateralDocflow_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Timestamp.pb.h"
#include "Docflow/Attachment.pb.h"
#include "Docflow/ReceiptDocflow.pb.h"
#include "Docflow/RecipientSignatureRejectionDocflow.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Docflow_2fXmlBilateralDocflow_2eproto();
void protobuf_AssignDesc_Docflow_2fXmlBilateralDocflow_2eproto();
void protobuf_ShutdownFile_Docflow_2fXmlBilateralDocflow_2eproto();

class XmlBilateralDocflow;
class BuyerTitleDocflow;

// ===================================================================

class XmlBilateralDocflow : public ::google::protobuf::Message {
 public:
  XmlBilateralDocflow();
  virtual ~XmlBilateralDocflow();

  XmlBilateralDocflow(const XmlBilateralDocflow& from);

  inline XmlBilateralDocflow& operator=(const XmlBilateralDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const XmlBilateralDocflow& default_instance();

  void Swap(XmlBilateralDocflow* other);

  // implements Message ----------------------------------------------

  XmlBilateralDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const XmlBilateralDocflow& from);
  void MergeFrom(const XmlBilateralDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
  inline bool has_receiptdocflow() const;
  inline void clear_receiptdocflow();
  static const int kReceiptDocflowFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflow& receiptdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* mutable_receiptdocflow();
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* release_receiptdocflow();
  inline void set_allocated_receiptdocflow(::Diadoc::Api::Proto::Docflow::ReceiptDocflow* receiptdocflow);

  // optional .Diadoc.Api.Proto.Docflow.BuyerTitleDocflow BuyerTitleDocflow = 3;
  inline bool has_buyertitledocflow() const;
  inline void clear_buyertitledocflow();
  static const int kBuyerTitleDocflowFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow& buyertitledocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* mutable_buyertitledocflow();
  inline ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* release_buyertitledocflow();
  inline void set_allocated_buyertitledocflow(::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* buyertitledocflow);

  // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 4;
  inline bool has_recipientsignaturerejectiondocflow() const;
  inline void clear_recipientsignaturerejectiondocflow();
  static const int kRecipientSignatureRejectionDocflowFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow& recipientsignaturerejectiondocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* mutable_recipientsignaturerejectiondocflow();
  inline ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* release_recipientsignaturerejectiondocflow();
  inline void set_allocated_recipientsignaturerejectiondocflow(::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* recipientsignaturerejectiondocflow);

  // optional bool IsReceiptRequested = 5;
  inline bool has_isreceiptrequested() const;
  inline void clear_isreceiptrequested();
  static const int kIsReceiptRequestedFieldNumber = 5;
  inline bool isreceiptrequested() const;
  inline void set_isreceiptrequested(bool value);

  // optional bool IsDocumentSignedByRecipient = 6;
  inline bool has_isdocumentsignedbyrecipient() const;
  inline void clear_isdocumentsignedbyrecipient();
  static const int kIsDocumentSignedByRecipientFieldNumber = 6;
  inline bool isdocumentsignedbyrecipient() const;
  inline void set_isdocumentsignedbyrecipient(bool value);

  // optional bool IsDocumentRejectedByRecipient = 7;
  inline bool has_isdocumentrejectedbyrecipient() const;
  inline void clear_isdocumentrejectedbyrecipient();
  static const int kIsDocumentRejectedByRecipientFieldNumber = 7;
  inline bool isdocumentrejectedbyrecipient() const;
  inline void set_isdocumentrejectedbyrecipient(bool value);

  // optional bool CanDocumentBeReceipted = 8;
  inline bool has_candocumentbereceipted() const;
  inline void clear_candocumentbereceipted();
  static const int kCanDocumentBeReceiptedFieldNumber = 8;
  inline bool candocumentbereceipted() const;
  inline void set_candocumentbereceipted(bool value);

  // optional bool CanDocumentBeSignedBySender = 9;
  inline bool has_candocumentbesignedbysender() const;
  inline void clear_candocumentbesignedbysender();
  static const int kCanDocumentBeSignedBySenderFieldNumber = 9;
  inline bool candocumentbesignedbysender() const;
  inline void set_candocumentbesignedbysender(bool value);

  // optional bool CanDocumentBeSignedOrRejectedByRecipient = 10;
  inline bool has_candocumentbesignedorrejectedbyrecipient() const;
  inline void clear_candocumentbesignedorrejectedbyrecipient();
  static const int kCanDocumentBeSignedOrRejectedByRecipientFieldNumber = 10;
  inline bool candocumentbesignedorrejectedbyrecipient() const;
  inline void set_candocumentbesignedorrejectedbyrecipient(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_receiptdocflow();
  inline void clear_has_receiptdocflow();
  inline void set_has_buyertitledocflow();
  inline void clear_has_buyertitledocflow();
  inline void set_has_recipientsignaturerejectiondocflow();
  inline void clear_has_recipientsignaturerejectiondocflow();
  inline void set_has_isreceiptrequested();
  inline void clear_has_isreceiptrequested();
  inline void set_has_isdocumentsignedbyrecipient();
  inline void clear_has_isdocumentsignedbyrecipient();
  inline void set_has_isdocumentrejectedbyrecipient();
  inline void clear_has_isdocumentrejectedbyrecipient();
  inline void set_has_candocumentbereceipted();
  inline void clear_has_candocumentbereceipted();
  inline void set_has_candocumentbesignedbysender();
  inline void clear_has_candocumentbesignedbysender();
  inline void set_has_candocumentbesignedorrejectedbyrecipient();
  inline void clear_has_candocumentbesignedorrejectedbyrecipient();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* receiptdocflow_;
  ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* buyertitledocflow_;
  ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* recipientsignaturerejectiondocflow_;
  bool isfinished_;
  bool isreceiptrequested_;
  bool isdocumentsignedbyrecipient_;
  bool isdocumentrejectedbyrecipient_;
  bool candocumentbereceipted_;
  bool candocumentbesignedbysender_;
  bool candocumentbesignedorrejectedbyrecipient_;
  friend void  protobuf_AddDesc_Docflow_2fXmlBilateralDocflow_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fXmlBilateralDocflow_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fXmlBilateralDocflow_2eproto();

  void InitAsDefaultInstance();
  static XmlBilateralDocflow* default_instance_;
};
// -------------------------------------------------------------------

class BuyerTitleDocflow : public ::google::protobuf::Message {
 public:
  BuyerTitleDocflow();
  virtual ~BuyerTitleDocflow();

  BuyerTitleDocflow(const BuyerTitleDocflow& from);

  inline BuyerTitleDocflow& operator=(const BuyerTitleDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyerTitleDocflow& default_instance();

  void Swap(BuyerTitleDocflow* other);

  // implements Message ----------------------------------------------

  BuyerTitleDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyerTitleDocflow& from);
  void MergeFrom(const BuyerTitleDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachment BuyerTitleAttachment = 2;
  inline bool has_buyertitleattachment() const;
  inline void clear_buyertitleattachment();
  static const int kBuyerTitleAttachmentFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::SignedAttachment& buyertitleattachment() const;
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* mutable_buyertitleattachment();
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* release_buyertitleattachment();
  inline void set_allocated_buyertitleattachment(::Diadoc::Api::Proto::Docflow::SignedAttachment* buyertitleattachment);

  // optional .Diadoc.Api.Proto.Timestamp SendTimestamp = 3;
  inline bool has_sendtimestamp() const;
  inline void clear_sendtimestamp();
  static const int kSendTimestampFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Timestamp& sendtimestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_sendtimestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_sendtimestamp();
  inline void set_allocated_sendtimestamp(::Diadoc::Api::Proto::Timestamp* sendtimestamp);

  // optional .Diadoc.Api.Proto.Timestamp DeliveryTimestamp = 4;
  inline bool has_deliverytimestamp() const;
  inline void clear_deliverytimestamp();
  static const int kDeliveryTimestampFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Timestamp& deliverytimestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_deliverytimestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_deliverytimestamp();
  inline void set_allocated_deliverytimestamp(::Diadoc::Api::Proto::Timestamp* deliverytimestamp);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.BuyerTitleDocflow)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_buyertitleattachment();
  inline void clear_has_buyertitleattachment();
  inline void set_has_sendtimestamp();
  inline void clear_has_sendtimestamp();
  inline void set_has_deliverytimestamp();
  inline void clear_has_deliverytimestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SignedAttachment* buyertitleattachment_;
  ::Diadoc::Api::Proto::Timestamp* sendtimestamp_;
  ::Diadoc::Api::Proto::Timestamp* deliverytimestamp_;
  bool isfinished_;
  friend void  protobuf_AddDesc_Docflow_2fXmlBilateralDocflow_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fXmlBilateralDocflow_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fXmlBilateralDocflow_2eproto();

  void InitAsDefaultInstance();
  static BuyerTitleDocflow* default_instance_;
};
// ===================================================================


// ===================================================================

// XmlBilateralDocflow

// optional bool IsFinished = 1;
inline bool XmlBilateralDocflow::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XmlBilateralDocflow::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void XmlBilateralDocflow::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void XmlBilateralDocflow::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool XmlBilateralDocflow::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.IsFinished)
  return isfinished_;
}
inline void XmlBilateralDocflow::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.IsFinished)
}

// optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
inline bool XmlBilateralDocflow::has_receiptdocflow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void XmlBilateralDocflow::set_has_receiptdocflow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void XmlBilateralDocflow::clear_has_receiptdocflow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void XmlBilateralDocflow::clear_receiptdocflow() {
  if (receiptdocflow_ != NULL) receiptdocflow_->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::Clear();
  clear_has_receiptdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflow& XmlBilateralDocflow::receiptdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.ReceiptDocflow)
  return receiptdocflow_ != NULL ? *receiptdocflow_ : *default_instance_->receiptdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* XmlBilateralDocflow::mutable_receiptdocflow() {
  set_has_receiptdocflow();
  if (receiptdocflow_ == NULL) receiptdocflow_ = new ::Diadoc::Api::Proto::Docflow::ReceiptDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.ReceiptDocflow)
  return receiptdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* XmlBilateralDocflow::release_receiptdocflow() {
  clear_has_receiptdocflow();
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* temp = receiptdocflow_;
  receiptdocflow_ = NULL;
  return temp;
}
inline void XmlBilateralDocflow::set_allocated_receiptdocflow(::Diadoc::Api::Proto::Docflow::ReceiptDocflow* receiptdocflow) {
  delete receiptdocflow_;
  receiptdocflow_ = receiptdocflow;
  if (receiptdocflow) {
    set_has_receiptdocflow();
  } else {
    clear_has_receiptdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.ReceiptDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.BuyerTitleDocflow BuyerTitleDocflow = 3;
inline bool XmlBilateralDocflow::has_buyertitledocflow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void XmlBilateralDocflow::set_has_buyertitledocflow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void XmlBilateralDocflow::clear_has_buyertitledocflow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void XmlBilateralDocflow::clear_buyertitledocflow() {
  if (buyertitledocflow_ != NULL) buyertitledocflow_->::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow::Clear();
  clear_has_buyertitledocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow& XmlBilateralDocflow::buyertitledocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.BuyerTitleDocflow)
  return buyertitledocflow_ != NULL ? *buyertitledocflow_ : *default_instance_->buyertitledocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* XmlBilateralDocflow::mutable_buyertitledocflow() {
  set_has_buyertitledocflow();
  if (buyertitledocflow_ == NULL) buyertitledocflow_ = new ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.BuyerTitleDocflow)
  return buyertitledocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* XmlBilateralDocflow::release_buyertitledocflow() {
  clear_has_buyertitledocflow();
  ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* temp = buyertitledocflow_;
  buyertitledocflow_ = NULL;
  return temp;
}
inline void XmlBilateralDocflow::set_allocated_buyertitledocflow(::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow* buyertitledocflow) {
  delete buyertitledocflow_;
  buyertitledocflow_ = buyertitledocflow;
  if (buyertitledocflow) {
    set_has_buyertitledocflow();
  } else {
    clear_has_buyertitledocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.BuyerTitleDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 4;
inline bool XmlBilateralDocflow::has_recipientsignaturerejectiondocflow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void XmlBilateralDocflow::set_has_recipientsignaturerejectiondocflow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void XmlBilateralDocflow::clear_has_recipientsignaturerejectiondocflow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void XmlBilateralDocflow::clear_recipientsignaturerejectiondocflow() {
  if (recipientsignaturerejectiondocflow_ != NULL) recipientsignaturerejectiondocflow_->::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow::Clear();
  clear_has_recipientsignaturerejectiondocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow& XmlBilateralDocflow::recipientsignaturerejectiondocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.RecipientSignatureRejectionDocflow)
  return recipientsignaturerejectiondocflow_ != NULL ? *recipientsignaturerejectiondocflow_ : *default_instance_->recipientsignaturerejectiondocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* XmlBilateralDocflow::mutable_recipientsignaturerejectiondocflow() {
  set_has_recipientsignaturerejectiondocflow();
  if (recipientsignaturerejectiondocflow_ == NULL) recipientsignaturerejectiondocflow_ = new ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.RecipientSignatureRejectionDocflow)
  return recipientsignaturerejectiondocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* XmlBilateralDocflow::release_recipientsignaturerejectiondocflow() {
  clear_has_recipientsignaturerejectiondocflow();
  ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* temp = recipientsignaturerejectiondocflow_;
  recipientsignaturerejectiondocflow_ = NULL;
  return temp;
}
inline void XmlBilateralDocflow::set_allocated_recipientsignaturerejectiondocflow(::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow* recipientsignaturerejectiondocflow) {
  delete recipientsignaturerejectiondocflow_;
  recipientsignaturerejectiondocflow_ = recipientsignaturerejectiondocflow;
  if (recipientsignaturerejectiondocflow) {
    set_has_recipientsignaturerejectiondocflow();
  } else {
    clear_has_recipientsignaturerejectiondocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.RecipientSignatureRejectionDocflow)
}

// optional bool IsReceiptRequested = 5;
inline bool XmlBilateralDocflow::has_isreceiptrequested() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void XmlBilateralDocflow::set_has_isreceiptrequested() {
  _has_bits_[0] |= 0x00000010u;
}
inline void XmlBilateralDocflow::clear_has_isreceiptrequested() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void XmlBilateralDocflow::clear_isreceiptrequested() {
  isreceiptrequested_ = false;
  clear_has_isreceiptrequested();
}
inline bool XmlBilateralDocflow::isreceiptrequested() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.IsReceiptRequested)
  return isreceiptrequested_;
}
inline void XmlBilateralDocflow::set_isreceiptrequested(bool value) {
  set_has_isreceiptrequested();
  isreceiptrequested_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.IsReceiptRequested)
}

// optional bool IsDocumentSignedByRecipient = 6;
inline bool XmlBilateralDocflow::has_isdocumentsignedbyrecipient() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void XmlBilateralDocflow::set_has_isdocumentsignedbyrecipient() {
  _has_bits_[0] |= 0x00000020u;
}
inline void XmlBilateralDocflow::clear_has_isdocumentsignedbyrecipient() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void XmlBilateralDocflow::clear_isdocumentsignedbyrecipient() {
  isdocumentsignedbyrecipient_ = false;
  clear_has_isdocumentsignedbyrecipient();
}
inline bool XmlBilateralDocflow::isdocumentsignedbyrecipient() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.IsDocumentSignedByRecipient)
  return isdocumentsignedbyrecipient_;
}
inline void XmlBilateralDocflow::set_isdocumentsignedbyrecipient(bool value) {
  set_has_isdocumentsignedbyrecipient();
  isdocumentsignedbyrecipient_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.IsDocumentSignedByRecipient)
}

// optional bool IsDocumentRejectedByRecipient = 7;
inline bool XmlBilateralDocflow::has_isdocumentrejectedbyrecipient() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void XmlBilateralDocflow::set_has_isdocumentrejectedbyrecipient() {
  _has_bits_[0] |= 0x00000040u;
}
inline void XmlBilateralDocflow::clear_has_isdocumentrejectedbyrecipient() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void XmlBilateralDocflow::clear_isdocumentrejectedbyrecipient() {
  isdocumentrejectedbyrecipient_ = false;
  clear_has_isdocumentrejectedbyrecipient();
}
inline bool XmlBilateralDocflow::isdocumentrejectedbyrecipient() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.IsDocumentRejectedByRecipient)
  return isdocumentrejectedbyrecipient_;
}
inline void XmlBilateralDocflow::set_isdocumentrejectedbyrecipient(bool value) {
  set_has_isdocumentrejectedbyrecipient();
  isdocumentrejectedbyrecipient_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.IsDocumentRejectedByRecipient)
}

// optional bool CanDocumentBeReceipted = 8;
inline bool XmlBilateralDocflow::has_candocumentbereceipted() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void XmlBilateralDocflow::set_has_candocumentbereceipted() {
  _has_bits_[0] |= 0x00000080u;
}
inline void XmlBilateralDocflow::clear_has_candocumentbereceipted() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void XmlBilateralDocflow::clear_candocumentbereceipted() {
  candocumentbereceipted_ = false;
  clear_has_candocumentbereceipted();
}
inline bool XmlBilateralDocflow::candocumentbereceipted() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.CanDocumentBeReceipted)
  return candocumentbereceipted_;
}
inline void XmlBilateralDocflow::set_candocumentbereceipted(bool value) {
  set_has_candocumentbereceipted();
  candocumentbereceipted_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.CanDocumentBeReceipted)
}

// optional bool CanDocumentBeSignedBySender = 9;
inline bool XmlBilateralDocflow::has_candocumentbesignedbysender() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void XmlBilateralDocflow::set_has_candocumentbesignedbysender() {
  _has_bits_[0] |= 0x00000100u;
}
inline void XmlBilateralDocflow::clear_has_candocumentbesignedbysender() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void XmlBilateralDocflow::clear_candocumentbesignedbysender() {
  candocumentbesignedbysender_ = false;
  clear_has_candocumentbesignedbysender();
}
inline bool XmlBilateralDocflow::candocumentbesignedbysender() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.CanDocumentBeSignedBySender)
  return candocumentbesignedbysender_;
}
inline void XmlBilateralDocflow::set_candocumentbesignedbysender(bool value) {
  set_has_candocumentbesignedbysender();
  candocumentbesignedbysender_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.CanDocumentBeSignedBySender)
}

// optional bool CanDocumentBeSignedOrRejectedByRecipient = 10;
inline bool XmlBilateralDocflow::has_candocumentbesignedorrejectedbyrecipient() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void XmlBilateralDocflow::set_has_candocumentbesignedorrejectedbyrecipient() {
  _has_bits_[0] |= 0x00000200u;
}
inline void XmlBilateralDocflow::clear_has_candocumentbesignedorrejectedbyrecipient() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void XmlBilateralDocflow::clear_candocumentbesignedorrejectedbyrecipient() {
  candocumentbesignedorrejectedbyrecipient_ = false;
  clear_has_candocumentbesignedorrejectedbyrecipient();
}
inline bool XmlBilateralDocflow::candocumentbesignedorrejectedbyrecipient() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.CanDocumentBeSignedOrRejectedByRecipient)
  return candocumentbesignedorrejectedbyrecipient_;
}
inline void XmlBilateralDocflow::set_candocumentbesignedorrejectedbyrecipient(bool value) {
  set_has_candocumentbesignedorrejectedbyrecipient();
  candocumentbesignedorrejectedbyrecipient_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.XmlBilateralDocflow.CanDocumentBeSignedOrRejectedByRecipient)
}

// -------------------------------------------------------------------

// BuyerTitleDocflow

// optional bool IsFinished = 1;
inline bool BuyerTitleDocflow::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyerTitleDocflow::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyerTitleDocflow::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyerTitleDocflow::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool BuyerTitleDocflow::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.BuyerTitleDocflow.IsFinished)
  return isfinished_;
}
inline void BuyerTitleDocflow::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.BuyerTitleDocflow.IsFinished)
}

// optional .Diadoc.Api.Proto.Docflow.SignedAttachment BuyerTitleAttachment = 2;
inline bool BuyerTitleDocflow::has_buyertitleattachment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyerTitleDocflow::set_has_buyertitleattachment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyerTitleDocflow::clear_has_buyertitleattachment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyerTitleDocflow::clear_buyertitleattachment() {
  if (buyertitleattachment_ != NULL) buyertitleattachment_->::Diadoc::Api::Proto::Docflow::SignedAttachment::Clear();
  clear_has_buyertitleattachment();
}
inline const ::Diadoc::Api::Proto::Docflow::SignedAttachment& BuyerTitleDocflow::buyertitleattachment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.BuyerTitleDocflow.BuyerTitleAttachment)
  return buyertitleattachment_ != NULL ? *buyertitleattachment_ : *default_instance_->buyertitleattachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* BuyerTitleDocflow::mutable_buyertitleattachment() {
  set_has_buyertitleattachment();
  if (buyertitleattachment_ == NULL) buyertitleattachment_ = new ::Diadoc::Api::Proto::Docflow::SignedAttachment;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.BuyerTitleDocflow.BuyerTitleAttachment)
  return buyertitleattachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* BuyerTitleDocflow::release_buyertitleattachment() {
  clear_has_buyertitleattachment();
  ::Diadoc::Api::Proto::Docflow::SignedAttachment* temp = buyertitleattachment_;
  buyertitleattachment_ = NULL;
  return temp;
}
inline void BuyerTitleDocflow::set_allocated_buyertitleattachment(::Diadoc::Api::Proto::Docflow::SignedAttachment* buyertitleattachment) {
  delete buyertitleattachment_;
  buyertitleattachment_ = buyertitleattachment;
  if (buyertitleattachment) {
    set_has_buyertitleattachment();
  } else {
    clear_has_buyertitleattachment();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.BuyerTitleDocflow.BuyerTitleAttachment)
}

// optional .Diadoc.Api.Proto.Timestamp SendTimestamp = 3;
inline bool BuyerTitleDocflow::has_sendtimestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuyerTitleDocflow::set_has_sendtimestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuyerTitleDocflow::clear_has_sendtimestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuyerTitleDocflow::clear_sendtimestamp() {
  if (sendtimestamp_ != NULL) sendtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_sendtimestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& BuyerTitleDocflow::sendtimestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.BuyerTitleDocflow.SendTimestamp)
  return sendtimestamp_ != NULL ? *sendtimestamp_ : *default_instance_->sendtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* BuyerTitleDocflow::mutable_sendtimestamp() {
  set_has_sendtimestamp();
  if (sendtimestamp_ == NULL) sendtimestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.BuyerTitleDocflow.SendTimestamp)
  return sendtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* BuyerTitleDocflow::release_sendtimestamp() {
  clear_has_sendtimestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = sendtimestamp_;
  sendtimestamp_ = NULL;
  return temp;
}
inline void BuyerTitleDocflow::set_allocated_sendtimestamp(::Diadoc::Api::Proto::Timestamp* sendtimestamp) {
  delete sendtimestamp_;
  sendtimestamp_ = sendtimestamp;
  if (sendtimestamp) {
    set_has_sendtimestamp();
  } else {
    clear_has_sendtimestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.BuyerTitleDocflow.SendTimestamp)
}

// optional .Diadoc.Api.Proto.Timestamp DeliveryTimestamp = 4;
inline bool BuyerTitleDocflow::has_deliverytimestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuyerTitleDocflow::set_has_deliverytimestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuyerTitleDocflow::clear_has_deliverytimestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuyerTitleDocflow::clear_deliverytimestamp() {
  if (deliverytimestamp_ != NULL) deliverytimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_deliverytimestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& BuyerTitleDocflow::deliverytimestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.BuyerTitleDocflow.DeliveryTimestamp)
  return deliverytimestamp_ != NULL ? *deliverytimestamp_ : *default_instance_->deliverytimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* BuyerTitleDocflow::mutable_deliverytimestamp() {
  set_has_deliverytimestamp();
  if (deliverytimestamp_ == NULL) deliverytimestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.BuyerTitleDocflow.DeliveryTimestamp)
  return deliverytimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* BuyerTitleDocflow::release_deliverytimestamp() {
  clear_has_deliverytimestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = deliverytimestamp_;
  deliverytimestamp_ = NULL;
  return temp;
}
inline void BuyerTitleDocflow::set_allocated_deliverytimestamp(::Diadoc::Api::Proto::Timestamp* deliverytimestamp) {
  delete deliverytimestamp_;
  deliverytimestamp_ = deliverytimestamp;
  if (deliverytimestamp) {
    set_has_deliverytimestamp();
  } else {
    clear_has_deliverytimestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.BuyerTitleDocflow.DeliveryTimestamp)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Docflow_2fXmlBilateralDocflow_2eproto__INCLUDED
