// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/DocumentWithDocflow.proto

#ifndef PROTOBUF_Docflow_2fDocumentWithDocflow_2eproto__INCLUDED
#define PROTOBUF_Docflow_2fDocumentWithDocflow_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Timestamp.pb.h"
#include "DocumentId.pb.h"
#include "ForwardDocumentEvent.pb.h"
#include "Docflow/Docflow.pb.h"
#include "Docflow/DocumentInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Docflow_2fDocumentWithDocflow_2eproto();
void protobuf_AssignDesc_Docflow_2fDocumentWithDocflow_2eproto();
void protobuf_ShutdownFile_Docflow_2fDocumentWithDocflow_2eproto();

class DocumentWithDocflow;

// ===================================================================

class DocumentWithDocflow : public ::google::protobuf::Message {
 public:
  DocumentWithDocflow();
  virtual ~DocumentWithDocflow();

  DocumentWithDocflow(const DocumentWithDocflow& from);

  inline DocumentWithDocflow& operator=(const DocumentWithDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentWithDocflow& default_instance();

  void Swap(DocumentWithDocflow* other);

  // implements Message ----------------------------------------------

  DocumentWithDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentWithDocflow& from);
  void MergeFrom(const DocumentWithDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.DocumentId DocumentId = 1;
  inline bool has_documentid() const;
  inline void clear_documentid();
  static const int kDocumentIdFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::DocumentId& documentid() const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_documentid();
  inline ::Diadoc::Api::Proto::DocumentId* release_documentid();
  inline void set_allocated_documentid(::Diadoc::Api::Proto::DocumentId* documentid);

  // optional string LastEventId = 2;
  inline bool has_lasteventid() const;
  inline void clear_lasteventid();
  static const int kLastEventIdFieldNumber = 2;
  inline const ::std::string& lasteventid() const;
  inline void set_lasteventid(const ::std::string& value);
  inline void set_lasteventid(const char* value);
  inline void set_lasteventid(const char* value, size_t size);
  inline ::std::string* mutable_lasteventid();
  inline ::std::string* release_lasteventid();
  inline void set_allocated_lasteventid(::std::string* lasteventid);

  // optional .Diadoc.Api.Proto.Timestamp LastEventTimestamp = 3;
  inline bool has_lasteventtimestamp() const;
  inline void clear_lasteventtimestamp();
  static const int kLastEventTimestampFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Timestamp& lasteventtimestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_lasteventtimestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_lasteventtimestamp();
  inline void set_allocated_lasteventtimestamp(::Diadoc::Api::Proto::Timestamp* lasteventtimestamp);

  // optional .Diadoc.Api.Proto.Docflow.DocumentInfo DocumentInfo = 4;
  inline bool has_documentinfo() const;
  inline void clear_documentinfo();
  static const int kDocumentInfoFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentInfo& documentinfo() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentInfo* mutable_documentinfo();
  inline ::Diadoc::Api::Proto::Docflow::DocumentInfo* release_documentinfo();
  inline void set_allocated_documentinfo(::Diadoc::Api::Proto::Docflow::DocumentInfo* documentinfo);

  // optional .Diadoc.Api.Proto.Docflow.Docflow Docflow = 5;
  inline bool has_docflow() const;
  inline void clear_docflow();
  static const int kDocflowFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Docflow::Docflow& docflow() const;
  inline ::Diadoc::Api::Proto::Docflow::Docflow* mutable_docflow();
  inline ::Diadoc::Api::Proto::Docflow::Docflow* release_docflow();
  inline void set_allocated_docflow(::Diadoc::Api::Proto::Docflow::Docflow* docflow);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 6;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 7;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 7;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 8;
  inline int forwarddocumentevents_size() const;
  inline void clear_forwarddocumentevents();
  static const int kForwardDocumentEventsFieldNumber = 8;
  inline const ::Diadoc::Api::Proto::ForwardDocumentEvent& forwarddocumentevents(int index) const;
  inline ::Diadoc::Api::Proto::ForwardDocumentEvent* mutable_forwarddocumentevents(int index);
  inline ::Diadoc::Api::Proto::ForwardDocumentEvent* add_forwarddocumentevents();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >&
      forwarddocumentevents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >*
      mutable_forwarddocumentevents();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.DocumentWithDocflow)
 private:
  inline void set_has_documentid();
  inline void clear_has_documentid();
  inline void set_has_lasteventid();
  inline void clear_has_lasteventid();
  inline void set_has_lasteventtimestamp();
  inline void clear_has_lasteventtimestamp();
  inline void set_has_documentinfo();
  inline void clear_has_documentinfo();
  inline void set_has_docflow();
  inline void clear_has_docflow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::DocumentId* documentid_;
  ::std::string* lasteventid_;
  ::Diadoc::Api::Proto::Timestamp* lasteventtimestamp_;
  ::Diadoc::Api::Proto::Docflow::DocumentInfo* documentinfo_;
  ::Diadoc::Api::Proto::Docflow::Docflow* docflow_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent > forwarddocumentevents_;
  friend void  protobuf_AddDesc_Docflow_2fDocumentWithDocflow_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocumentWithDocflow_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocumentWithDocflow_2eproto();

  void InitAsDefaultInstance();
  static DocumentWithDocflow* default_instance_;
};
// ===================================================================


// ===================================================================

// DocumentWithDocflow

// optional .Diadoc.Api.Proto.DocumentId DocumentId = 1;
inline bool DocumentWithDocflow::has_documentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentWithDocflow::set_has_documentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentWithDocflow::clear_has_documentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentWithDocflow::clear_documentid() {
  if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
  clear_has_documentid();
}
inline const ::Diadoc::Api::Proto::DocumentId& DocumentWithDocflow::documentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.DocumentId)
  return documentid_ != NULL ? *documentid_ : *default_instance_->documentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentWithDocflow::mutable_documentid() {
  set_has_documentid();
  if (documentid_ == NULL) documentid_ = new ::Diadoc::Api::Proto::DocumentId;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.DocumentId)
  return documentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentWithDocflow::release_documentid() {
  clear_has_documentid();
  ::Diadoc::Api::Proto::DocumentId* temp = documentid_;
  documentid_ = NULL;
  return temp;
}
inline void DocumentWithDocflow::set_allocated_documentid(::Diadoc::Api::Proto::DocumentId* documentid) {
  delete documentid_;
  documentid_ = documentid;
  if (documentid) {
    set_has_documentid();
  } else {
    clear_has_documentid();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.DocumentId)
}

// optional string LastEventId = 2;
inline bool DocumentWithDocflow::has_lasteventid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentWithDocflow::set_has_lasteventid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentWithDocflow::clear_has_lasteventid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentWithDocflow::clear_lasteventid() {
  if (lasteventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lasteventid_->clear();
  }
  clear_has_lasteventid();
}
inline const ::std::string& DocumentWithDocflow::lasteventid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.LastEventId)
  return *lasteventid_;
}
inline void DocumentWithDocflow::set_lasteventid(const ::std::string& value) {
  set_has_lasteventid();
  if (lasteventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lasteventid_ = new ::std::string;
  }
  lasteventid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.LastEventId)
}
inline void DocumentWithDocflow::set_lasteventid(const char* value) {
  set_has_lasteventid();
  if (lasteventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lasteventid_ = new ::std::string;
  }
  lasteventid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.LastEventId)
}
inline void DocumentWithDocflow::set_lasteventid(const char* value, size_t size) {
  set_has_lasteventid();
  if (lasteventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lasteventid_ = new ::std::string;
  }
  lasteventid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.LastEventId)
}
inline ::std::string* DocumentWithDocflow::mutable_lasteventid() {
  set_has_lasteventid();
  if (lasteventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lasteventid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.LastEventId)
  return lasteventid_;
}
inline ::std::string* DocumentWithDocflow::release_lasteventid() {
  clear_has_lasteventid();
  if (lasteventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lasteventid_;
    lasteventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentWithDocflow::set_allocated_lasteventid(::std::string* lasteventid) {
  if (lasteventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lasteventid_;
  }
  if (lasteventid) {
    set_has_lasteventid();
    lasteventid_ = lasteventid;
  } else {
    clear_has_lasteventid();
    lasteventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.LastEventId)
}

// optional .Diadoc.Api.Proto.Timestamp LastEventTimestamp = 3;
inline bool DocumentWithDocflow::has_lasteventtimestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentWithDocflow::set_has_lasteventtimestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentWithDocflow::clear_has_lasteventtimestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentWithDocflow::clear_lasteventtimestamp() {
  if (lasteventtimestamp_ != NULL) lasteventtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_lasteventtimestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& DocumentWithDocflow::lasteventtimestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.LastEventTimestamp)
  return lasteventtimestamp_ != NULL ? *lasteventtimestamp_ : *default_instance_->lasteventtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* DocumentWithDocflow::mutable_lasteventtimestamp() {
  set_has_lasteventtimestamp();
  if (lasteventtimestamp_ == NULL) lasteventtimestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.LastEventTimestamp)
  return lasteventtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* DocumentWithDocflow::release_lasteventtimestamp() {
  clear_has_lasteventtimestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = lasteventtimestamp_;
  lasteventtimestamp_ = NULL;
  return temp;
}
inline void DocumentWithDocflow::set_allocated_lasteventtimestamp(::Diadoc::Api::Proto::Timestamp* lasteventtimestamp) {
  delete lasteventtimestamp_;
  lasteventtimestamp_ = lasteventtimestamp;
  if (lasteventtimestamp) {
    set_has_lasteventtimestamp();
  } else {
    clear_has_lasteventtimestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.LastEventTimestamp)
}

// optional .Diadoc.Api.Proto.Docflow.DocumentInfo DocumentInfo = 4;
inline bool DocumentWithDocflow::has_documentinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentWithDocflow::set_has_documentinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentWithDocflow::clear_has_documentinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentWithDocflow::clear_documentinfo() {
  if (documentinfo_ != NULL) documentinfo_->::Diadoc::Api::Proto::Docflow::DocumentInfo::Clear();
  clear_has_documentinfo();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentInfo& DocumentWithDocflow::documentinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.DocumentInfo)
  return documentinfo_ != NULL ? *documentinfo_ : *default_instance_->documentinfo_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentInfo* DocumentWithDocflow::mutable_documentinfo() {
  set_has_documentinfo();
  if (documentinfo_ == NULL) documentinfo_ = new ::Diadoc::Api::Proto::Docflow::DocumentInfo;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.DocumentInfo)
  return documentinfo_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentInfo* DocumentWithDocflow::release_documentinfo() {
  clear_has_documentinfo();
  ::Diadoc::Api::Proto::Docflow::DocumentInfo* temp = documentinfo_;
  documentinfo_ = NULL;
  return temp;
}
inline void DocumentWithDocflow::set_allocated_documentinfo(::Diadoc::Api::Proto::Docflow::DocumentInfo* documentinfo) {
  delete documentinfo_;
  documentinfo_ = documentinfo;
  if (documentinfo) {
    set_has_documentinfo();
  } else {
    clear_has_documentinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.DocumentInfo)
}

// optional .Diadoc.Api.Proto.Docflow.Docflow Docflow = 5;
inline bool DocumentWithDocflow::has_docflow() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentWithDocflow::set_has_docflow() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentWithDocflow::clear_has_docflow() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentWithDocflow::clear_docflow() {
  if (docflow_ != NULL) docflow_->::Diadoc::Api::Proto::Docflow::Docflow::Clear();
  clear_has_docflow();
}
inline const ::Diadoc::Api::Proto::Docflow::Docflow& DocumentWithDocflow::docflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.Docflow)
  return docflow_ != NULL ? *docflow_ : *default_instance_->docflow_;
}
inline ::Diadoc::Api::Proto::Docflow::Docflow* DocumentWithDocflow::mutable_docflow() {
  set_has_docflow();
  if (docflow_ == NULL) docflow_ = new ::Diadoc::Api::Proto::Docflow::Docflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.Docflow)
  return docflow_;
}
inline ::Diadoc::Api::Proto::Docflow::Docflow* DocumentWithDocflow::release_docflow() {
  clear_has_docflow();
  ::Diadoc::Api::Proto::Docflow::Docflow* temp = docflow_;
  docflow_ = NULL;
  return temp;
}
inline void DocumentWithDocflow::set_allocated_docflow(::Diadoc::Api::Proto::Docflow::Docflow* docflow) {
  delete docflow_;
  docflow_ = docflow;
  if (docflow) {
    set_has_docflow();
  } else {
    clear_has_docflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.Docflow)
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 6;
inline int DocumentWithDocflow::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void DocumentWithDocflow::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& DocumentWithDocflow::initialdocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.InitialDocumentIds)
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentWithDocflow::mutable_initialdocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.InitialDocumentIds)
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentWithDocflow::add_initialdocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.InitialDocumentIds)
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
DocumentWithDocflow::initialdocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.InitialDocumentIds)
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
DocumentWithDocflow::mutable_initialdocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.InitialDocumentIds)
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 7;
inline int DocumentWithDocflow::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void DocumentWithDocflow::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& DocumentWithDocflow::subordinatedocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.SubordinateDocumentIds)
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentWithDocflow::mutable_subordinatedocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.SubordinateDocumentIds)
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentWithDocflow::add_subordinatedocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.SubordinateDocumentIds)
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
DocumentWithDocflow::subordinatedocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.SubordinateDocumentIds)
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
DocumentWithDocflow::mutable_subordinatedocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.SubordinateDocumentIds)
  return &subordinatedocumentids_;
}

// repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 8;
inline int DocumentWithDocflow::forwarddocumentevents_size() const {
  return forwarddocumentevents_.size();
}
inline void DocumentWithDocflow::clear_forwarddocumentevents() {
  forwarddocumentevents_.Clear();
}
inline const ::Diadoc::Api::Proto::ForwardDocumentEvent& DocumentWithDocflow::forwarddocumentevents(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.ForwardDocumentEvents)
  return forwarddocumentevents_.Get(index);
}
inline ::Diadoc::Api::Proto::ForwardDocumentEvent* DocumentWithDocflow::mutable_forwarddocumentevents(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.ForwardDocumentEvents)
  return forwarddocumentevents_.Mutable(index);
}
inline ::Diadoc::Api::Proto::ForwardDocumentEvent* DocumentWithDocflow::add_forwarddocumentevents() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.ForwardDocumentEvents)
  return forwarddocumentevents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >&
DocumentWithDocflow::forwarddocumentevents() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.ForwardDocumentEvents)
  return forwarddocumentevents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >*
DocumentWithDocflow::mutable_forwarddocumentevents() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.DocumentWithDocflow.ForwardDocumentEvents)
  return &forwarddocumentevents_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Docflow_2fDocumentWithDocflow_2eproto__INCLUDED
