// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/UnilateralDocflow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Docflow/UnilateralDocflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

namespace {

const ::google::protobuf::Descriptor* UnilateralDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnilateralDocflow_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Docflow_2fUnilateralDocflow_2eproto() {
  protobuf_AddDesc_Docflow_2fUnilateralDocflow_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Docflow/UnilateralDocflow.proto");
  GOOGLE_CHECK(file != NULL);
  UnilateralDocflow_descriptor_ = file->message_type(0);
  static const int UnilateralDocflow_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnilateralDocflow, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnilateralDocflow, receiptdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnilateralDocflow, isreceiptrequested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnilateralDocflow, candocumentbereceipted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnilateralDocflow, candocumentbesignedbysender_),
  };
  UnilateralDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnilateralDocflow_descriptor_,
      UnilateralDocflow::default_instance_,
      UnilateralDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnilateralDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnilateralDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnilateralDocflow));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Docflow_2fUnilateralDocflow_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnilateralDocflow_descriptor_, &UnilateralDocflow::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Docflow_2fUnilateralDocflow_2eproto() {
  delete UnilateralDocflow::default_instance_;
  delete UnilateralDocflow_reflection_;
}

void protobuf_AddDesc_Docflow_2fUnilateralDocflow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fReceiptDocflow_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037Docflow/UnilateralDocflow.proto\022\030Diado"
    "c.Api.Proto.Docflow\032\034Docflow/ReceiptDocf"
    "low.proto\"\312\001\n\021UnilateralDocflow\022\022\n\nIsFin"
    "ished\030\001 \001(\010\022@\n\016ReceiptDocflow\030\002 \001(\0132(.Di"
    "adoc.Api.Proto.Docflow.ReceiptDocflow\022\032\n"
    "\022IsReceiptRequested\030\003 \001(\010\022\036\n\026CanDocument"
    "BeReceipted\030\004 \001(\010\022#\n\033CanDocumentBeSigned"
    "BySender\030\005 \001(\010", 294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Docflow/UnilateralDocflow.proto", &protobuf_RegisterTypes);
  UnilateralDocflow::default_instance_ = new UnilateralDocflow();
  UnilateralDocflow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Docflow_2fUnilateralDocflow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Docflow_2fUnilateralDocflow_2eproto {
  StaticDescriptorInitializer_Docflow_2fUnilateralDocflow_2eproto() {
    protobuf_AddDesc_Docflow_2fUnilateralDocflow_2eproto();
  }
} static_descriptor_initializer_Docflow_2fUnilateralDocflow_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UnilateralDocflow::kIsFinishedFieldNumber;
const int UnilateralDocflow::kReceiptDocflowFieldNumber;
const int UnilateralDocflow::kIsReceiptRequestedFieldNumber;
const int UnilateralDocflow::kCanDocumentBeReceiptedFieldNumber;
const int UnilateralDocflow::kCanDocumentBeSignedBySenderFieldNumber;
#endif  // !_MSC_VER

UnilateralDocflow::UnilateralDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.UnilateralDocflow)
}

void UnilateralDocflow::InitAsDefaultInstance() {
  receiptdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::ReceiptDocflow*>(&::Diadoc::Api::Proto::Docflow::ReceiptDocflow::default_instance());
}

UnilateralDocflow::UnilateralDocflow(const UnilateralDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.UnilateralDocflow)
}

void UnilateralDocflow::SharedCtor() {
  _cached_size_ = 0;
  isfinished_ = false;
  receiptdocflow_ = NULL;
  isreceiptrequested_ = false;
  candocumentbereceipted_ = false;
  candocumentbesignedbysender_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnilateralDocflow::~UnilateralDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.UnilateralDocflow)
  SharedDtor();
}

void UnilateralDocflow::SharedDtor() {
  if (this != default_instance_) {
    delete receiptdocflow_;
  }
}

void UnilateralDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnilateralDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnilateralDocflow_descriptor_;
}

const UnilateralDocflow& UnilateralDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fUnilateralDocflow_2eproto();
  return *default_instance_;
}

UnilateralDocflow* UnilateralDocflow::default_instance_ = NULL;

UnilateralDocflow* UnilateralDocflow::New() const {
  return new UnilateralDocflow;
}

void UnilateralDocflow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UnilateralDocflow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(isfinished_, candocumentbesignedbysender_);
    if (has_receiptdocflow()) {
      if (receiptdocflow_ != NULL) receiptdocflow_->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnilateralDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.UnilateralDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ReceiptDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
      case 2: {
        if (tag == 18) {
         parse_ReceiptDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiptdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsReceiptRequested;
        break;
      }

      // optional bool IsReceiptRequested = 3;
      case 3: {
        if (tag == 24) {
         parse_IsReceiptRequested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreceiptrequested_)));
          set_has_isreceiptrequested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CanDocumentBeReceipted;
        break;
      }

      // optional bool CanDocumentBeReceipted = 4;
      case 4: {
        if (tag == 32) {
         parse_CanDocumentBeReceipted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &candocumentbereceipted_)));
          set_has_candocumentbereceipted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CanDocumentBeSignedBySender;
        break;
      }

      // optional bool CanDocumentBeSignedBySender = 5;
      case 5: {
        if (tag == 40) {
         parse_CanDocumentBeSignedBySender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &candocumentbesignedbysender_)));
          set_has_candocumentbesignedbysender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.UnilateralDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.UnilateralDocflow)
  return false;
#undef DO_
}

void UnilateralDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.UnilateralDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
  if (has_receiptdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->receiptdocflow(), output);
  }

  // optional bool IsReceiptRequested = 3;
  if (has_isreceiptrequested()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isreceiptrequested(), output);
  }

  // optional bool CanDocumentBeReceipted = 4;
  if (has_candocumentbereceipted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->candocumentbereceipted(), output);
  }

  // optional bool CanDocumentBeSignedBySender = 5;
  if (has_candocumentbesignedbysender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->candocumentbesignedbysender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.UnilateralDocflow)
}

::google::protobuf::uint8* UnilateralDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.UnilateralDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
  if (has_receiptdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->receiptdocflow(), target);
  }

  // optional bool IsReceiptRequested = 3;
  if (has_isreceiptrequested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isreceiptrequested(), target);
  }

  // optional bool CanDocumentBeReceipted = 4;
  if (has_candocumentbereceipted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->candocumentbereceipted(), target);
  }

  // optional bool CanDocumentBeSignedBySender = 5;
  if (has_candocumentbesignedbysender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->candocumentbesignedbysender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.UnilateralDocflow)
  return target;
}

int UnilateralDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
    if (has_receiptdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiptdocflow());
    }

    // optional bool IsReceiptRequested = 3;
    if (has_isreceiptrequested()) {
      total_size += 1 + 1;
    }

    // optional bool CanDocumentBeReceipted = 4;
    if (has_candocumentbereceipted()) {
      total_size += 1 + 1;
    }

    // optional bool CanDocumentBeSignedBySender = 5;
    if (has_candocumentbesignedbysender()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnilateralDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnilateralDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnilateralDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnilateralDocflow::MergeFrom(const UnilateralDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_receiptdocflow()) {
      mutable_receiptdocflow()->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::MergeFrom(from.receiptdocflow());
    }
    if (from.has_isreceiptrequested()) {
      set_isreceiptrequested(from.isreceiptrequested());
    }
    if (from.has_candocumentbereceipted()) {
      set_candocumentbereceipted(from.candocumentbereceipted());
    }
    if (from.has_candocumentbesignedbysender()) {
      set_candocumentbesignedbysender(from.candocumentbesignedbysender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnilateralDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnilateralDocflow::CopyFrom(const UnilateralDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnilateralDocflow::IsInitialized() const {

  if (has_receiptdocflow()) {
    if (!this->receiptdocflow().IsInitialized()) return false;
  }
  return true;
}

void UnilateralDocflow::Swap(UnilateralDocflow* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(receiptdocflow_, other->receiptdocflow_);
    std::swap(isreceiptrequested_, other->isreceiptrequested_);
    std::swap(candocumentbereceipted_, other->candocumentbereceipted_);
    std::swap(candocumentbesignedbysender_, other->candocumentbesignedbysender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnilateralDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnilateralDocflow_descriptor_;
  metadata.reflection = UnilateralDocflow_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
