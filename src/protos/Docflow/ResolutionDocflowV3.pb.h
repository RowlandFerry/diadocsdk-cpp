// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/ResolutionDocflowV3.proto

#ifndef PROTOBUF_Docflow_2fResolutionDocflowV3_2eproto__INCLUDED
#define PROTOBUF_Docflow_2fResolutionDocflowV3_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Timestamp.pb.h"
#include "ResolutionAction.pb.h"
#include "ResolutionRequestType.pb.h"
#include "ResolutionTarget.pb.h"
#include "ResolutionType.pb.h"
#include "Docflow/Attachment.pb.h"
#include "Docflow/AttachmentV3.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
void protobuf_AssignDesc_Docflow_2fResolutionDocflowV3_2eproto();
void protobuf_ShutdownFile_Docflow_2fResolutionDocflowV3_2eproto();

class ResolutionDocflowV3;
class ResolutionEntitiesV3;
class ResolutionRequestV3;
class ResolutionV3;
class ApprovementSignatureV3;
class SignatureDenialV3;

enum ResolutionStatus {
  UnknownStatus = 0,
  None = 1,
  Approved = 2,
  Disapproved = 3,
  ApprovementRequested = 4,
  ApprovementSignatureRequested = 5,
  PrimarySignatureRequested = 6,
  SignatureRequestRejected = 7,
  SignedWithApprovingSignature = 8,
  SignedWithPrimarySignature = 9,
  PrimarySignatureRejected = 10,
  ActionsRequested = 11
};
bool ResolutionStatus_IsValid(int value);
const ResolutionStatus ResolutionStatus_MIN = UnknownStatus;
const ResolutionStatus ResolutionStatus_MAX = ActionsRequested;
const int ResolutionStatus_ARRAYSIZE = ResolutionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResolutionStatus_descriptor();
inline const ::std::string& ResolutionStatus_Name(ResolutionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResolutionStatus_descriptor(), value);
}
inline bool ResolutionStatus_Parse(
    const ::std::string& name, ResolutionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResolutionStatus>(
    ResolutionStatus_descriptor(), name, value);
}
// ===================================================================

class ResolutionDocflowV3 : public ::google::protobuf::Message {
 public:
  ResolutionDocflowV3();
  virtual ~ResolutionDocflowV3();

  ResolutionDocflowV3(const ResolutionDocflowV3& from);

  inline ResolutionDocflowV3& operator=(const ResolutionDocflowV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionDocflowV3& default_instance();

  void Swap(ResolutionDocflowV3* other);

  // implements Message ----------------------------------------------

  ResolutionDocflowV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionDocflowV3& from);
  void MergeFrom(const ResolutionDocflowV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // required string ParentEntityId = 2;
  inline bool has_parententityid() const;
  inline void clear_parententityid();
  static const int kParentEntityIdFieldNumber = 2;
  inline const ::std::string& parententityid() const;
  inline void set_parententityid(const ::std::string& value);
  inline void set_parententityid(const char* value);
  inline void set_parententityid(const char* value, size_t size);
  inline ::std::string* mutable_parententityid();
  inline ::std::string* release_parententityid();
  inline void set_allocated_parententityid(::std::string* parententityid);

  // required .Diadoc.Api.Proto.Docflow.ResolutionStatus ResolutionStatus = 3 [default = UnknownStatus];
  inline bool has_resolutionstatus() const;
  inline void clear_resolutionstatus();
  static const int kResolutionStatusFieldNumber = 3;
  inline ::Diadoc::Api::Proto::Docflow::ResolutionStatus resolutionstatus() const;
  inline void set_resolutionstatus(::Diadoc::Api::Proto::Docflow::ResolutionStatus value);

  // optional string ResolutionEntityId = 4;
  inline bool has_resolutionentityid() const;
  inline void clear_resolutionentityid();
  static const int kResolutionEntityIdFieldNumber = 4;
  inline const ::std::string& resolutionentityid() const;
  inline void set_resolutionentityid(const ::std::string& value);
  inline void set_resolutionentityid(const char* value);
  inline void set_resolutionentityid(const char* value, size_t size);
  inline ::std::string* mutable_resolutionentityid();
  inline ::std::string* release_resolutionentityid();
  inline void set_allocated_resolutionentityid(::std::string* resolutionentityid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_parententityid();
  inline void clear_has_parententityid();
  inline void set_has_resolutionstatus();
  inline void clear_has_resolutionstatus();
  inline void set_has_resolutionentityid();
  inline void clear_has_resolutionentityid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* parententityid_;
  bool isfinished_;
  int resolutionstatus_;
  ::std::string* resolutionentityid_;
  friend void  protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fResolutionDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fResolutionDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static ResolutionDocflowV3* default_instance_;
};
// -------------------------------------------------------------------

class ResolutionEntitiesV3 : public ::google::protobuf::Message {
 public:
  ResolutionEntitiesV3();
  virtual ~ResolutionEntitiesV3();

  ResolutionEntitiesV3(const ResolutionEntitiesV3& from);

  inline ResolutionEntitiesV3& operator=(const ResolutionEntitiesV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionEntitiesV3& default_instance();

  void Swap(ResolutionEntitiesV3* other);

  // implements Message ----------------------------------------------

  ResolutionEntitiesV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionEntitiesV3& from);
  void MergeFrom(const ResolutionEntitiesV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.Docflow.ResolutionRequestV3 Requests = 1;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::ResolutionRequestV3& requests(int index) const;
  inline ::Diadoc::Api::Proto::Docflow::ResolutionRequestV3* mutable_requests(int index);
  inline ::Diadoc::Api::Proto::Docflow::ResolutionRequestV3* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::ResolutionRequestV3 >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::ResolutionRequestV3 >*
      mutable_requests();

  // repeated .Diadoc.Api.Proto.Docflow.ResolutionV3 Resolutions = 2;
  inline int resolutions_size() const;
  inline void clear_resolutions();
  static const int kResolutionsFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::ResolutionV3& resolutions(int index) const;
  inline ::Diadoc::Api::Proto::Docflow::ResolutionV3* mutable_resolutions(int index);
  inline ::Diadoc::Api::Proto::Docflow::ResolutionV3* add_resolutions();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::ResolutionV3 >&
      resolutions() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::ResolutionV3 >*
      mutable_resolutions();

  // repeated .Diadoc.Api.Proto.Docflow.ApprovementSignatureV3 ApprovementSignatures = 3;
  inline int approvementsignatures_size() const;
  inline void clear_approvementsignatures();
  static const int kApprovementSignaturesFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::ApprovementSignatureV3& approvementsignatures(int index) const;
  inline ::Diadoc::Api::Proto::Docflow::ApprovementSignatureV3* mutable_approvementsignatures(int index);
  inline ::Diadoc::Api::Proto::Docflow::ApprovementSignatureV3* add_approvementsignatures();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::ApprovementSignatureV3 >&
      approvementsignatures() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::ApprovementSignatureV3 >*
      mutable_approvementsignatures();

  // repeated .Diadoc.Api.Proto.Docflow.SignatureDenialV3 SignatureDenials = 4;
  inline int signaturedenials_size() const;
  inline void clear_signaturedenials();
  static const int kSignatureDenialsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Docflow::SignatureDenialV3& signaturedenials(int index) const;
  inline ::Diadoc::Api::Proto::Docflow::SignatureDenialV3* mutable_signaturedenials(int index);
  inline ::Diadoc::Api::Proto::Docflow::SignatureDenialV3* add_signaturedenials();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::SignatureDenialV3 >&
      signaturedenials() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::SignatureDenialV3 >*
      mutable_signaturedenials();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::ResolutionRequestV3 > requests_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::ResolutionV3 > resolutions_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::ApprovementSignatureV3 > approvementsignatures_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::SignatureDenialV3 > signaturedenials_;
  friend void  protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fResolutionDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fResolutionDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static ResolutionEntitiesV3* default_instance_;
};
// -------------------------------------------------------------------

class ResolutionRequestV3 : public ::google::protobuf::Message {
 public:
  ResolutionRequestV3();
  virtual ~ResolutionRequestV3();

  ResolutionRequestV3(const ResolutionRequestV3& from);

  inline ResolutionRequestV3& operator=(const ResolutionRequestV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionRequestV3& default_instance();

  void Swap(ResolutionRequestV3* other);

  // implements Message ----------------------------------------------

  ResolutionRequestV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionRequestV3& from);
  void MergeFrom(const ResolutionRequestV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
  inline bool has_entity() const;
  inline void clear_entity();
  static const int kEntityFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::Entity& entity() const;
  inline ::Diadoc::Api::Proto::Docflow::Entity* mutable_entity();
  inline ::Diadoc::Api::Proto::Docflow::Entity* release_entity();
  inline void set_allocated_entity(::Diadoc::Api::Proto::Docflow::Entity* entity);

  // required .Diadoc.Api.Proto.ResolutionTarget Target = 2;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::ResolutionTarget& target() const;
  inline ::Diadoc::Api::Proto::ResolutionTarget* mutable_target();
  inline ::Diadoc::Api::Proto::ResolutionTarget* release_target();
  inline void set_allocated_target(::Diadoc::Api::Proto::ResolutionTarget* target);

  // optional string AuthorUserId = 3;
  inline bool has_authoruserid() const;
  inline void clear_authoruserid();
  static const int kAuthorUserIdFieldNumber = 3;
  inline const ::std::string& authoruserid() const;
  inline void set_authoruserid(const ::std::string& value);
  inline void set_authoruserid(const char* value);
  inline void set_authoruserid(const char* value, size_t size);
  inline ::std::string* mutable_authoruserid();
  inline ::std::string* release_authoruserid();
  inline void set_allocated_authoruserid(::std::string* authoruserid);

  // required .Diadoc.Api.Proto.ResolutionRequestType RequestType = 4 [default = UnknownResolutionRequestType];
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 4;
  inline ::Diadoc::Api::Proto::ResolutionRequestType requesttype() const;
  inline void set_requesttype(::Diadoc::Api::Proto::ResolutionRequestType value);

  // optional string ResolvedWith = 5;
  inline bool has_resolvedwith() const;
  inline void clear_resolvedwith();
  static const int kResolvedWithFieldNumber = 5;
  inline const ::std::string& resolvedwith() const;
  inline void set_resolvedwith(const ::std::string& value);
  inline void set_resolvedwith(const char* value);
  inline void set_resolvedwith(const char* value, size_t size);
  inline ::std::string* mutable_resolvedwith();
  inline ::std::string* release_resolvedwith();
  inline void set_allocated_resolvedwith(::std::string* resolvedwith);

  // repeated .Diadoc.Api.Proto.ResolutionAction Actions = 6;
  inline int actions_size() const;
  inline void clear_actions();
  static const int kActionsFieldNumber = 6;
  inline ::Diadoc::Api::Proto::ResolutionAction actions(int index) const;
  inline void set_actions(int index, ::Diadoc::Api::Proto::ResolutionAction value);
  inline void add_actions(::Diadoc::Api::Proto::ResolutionAction value);
  inline const ::google::protobuf::RepeatedField<int>& actions() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_actions();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.ResolutionRequestV3)
 private:
  inline void set_has_entity();
  inline void clear_has_entity();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_authoruserid();
  inline void clear_has_authoruserid();
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_resolvedwith();
  inline void clear_has_resolvedwith();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::Entity* entity_;
  ::Diadoc::Api::Proto::ResolutionTarget* target_;
  ::std::string* authoruserid_;
  ::std::string* resolvedwith_;
  ::google::protobuf::RepeatedField<int> actions_;
  int requesttype_;
  friend void  protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fResolutionDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fResolutionDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static ResolutionRequestV3* default_instance_;
};
// -------------------------------------------------------------------

class ResolutionV3 : public ::google::protobuf::Message {
 public:
  ResolutionV3();
  virtual ~ResolutionV3();

  ResolutionV3(const ResolutionV3& from);

  inline ResolutionV3& operator=(const ResolutionV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionV3& default_instance();

  void Swap(ResolutionV3* other);

  // implements Message ----------------------------------------------

  ResolutionV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionV3& from);
  void MergeFrom(const ResolutionV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
  inline bool has_entity() const;
  inline void clear_entity();
  static const int kEntityFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::Entity& entity() const;
  inline ::Diadoc::Api::Proto::Docflow::Entity* mutable_entity();
  inline ::Diadoc::Api::Proto::Docflow::Entity* release_entity();
  inline void set_allocated_entity(::Diadoc::Api::Proto::Docflow::Entity* entity);

  // optional string ResolutionRequestId = 2;
  inline bool has_resolutionrequestid() const;
  inline void clear_resolutionrequestid();
  static const int kResolutionRequestIdFieldNumber = 2;
  inline const ::std::string& resolutionrequestid() const;
  inline void set_resolutionrequestid(const ::std::string& value);
  inline void set_resolutionrequestid(const char* value);
  inline void set_resolutionrequestid(const char* value, size_t size);
  inline ::std::string* mutable_resolutionrequestid();
  inline ::std::string* release_resolutionrequestid();
  inline void set_allocated_resolutionrequestid(::std::string* resolutionrequestid);

  // optional string AuthorUserId = 3;
  inline bool has_authoruserid() const;
  inline void clear_authoruserid();
  static const int kAuthorUserIdFieldNumber = 3;
  inline const ::std::string& authoruserid() const;
  inline void set_authoruserid(const ::std::string& value);
  inline void set_authoruserid(const char* value);
  inline void set_authoruserid(const char* value, size_t size);
  inline ::std::string* mutable_authoruserid();
  inline ::std::string* release_authoruserid();
  inline void set_allocated_authoruserid(::std::string* authoruserid);

  // required .Diadoc.Api.Proto.ResolutionType ResolutionType = 4 [default = UnknownResolutionType];
  inline bool has_resolutiontype() const;
  inline void clear_resolutiontype();
  static const int kResolutionTypeFieldNumber = 4;
  inline ::Diadoc::Api::Proto::ResolutionType resolutiontype() const;
  inline void set_resolutiontype(::Diadoc::Api::Proto::ResolutionType value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.ResolutionV3)
 private:
  inline void set_has_entity();
  inline void clear_has_entity();
  inline void set_has_resolutionrequestid();
  inline void clear_has_resolutionrequestid();
  inline void set_has_authoruserid();
  inline void clear_has_authoruserid();
  inline void set_has_resolutiontype();
  inline void clear_has_resolutiontype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::Entity* entity_;
  ::std::string* resolutionrequestid_;
  ::std::string* authoruserid_;
  int resolutiontype_;
  friend void  protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fResolutionDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fResolutionDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static ResolutionV3* default_instance_;
};
// -------------------------------------------------------------------

class ApprovementSignatureV3 : public ::google::protobuf::Message {
 public:
  ApprovementSignatureV3();
  virtual ~ApprovementSignatureV3();

  ApprovementSignatureV3(const ApprovementSignatureV3& from);

  inline ApprovementSignatureV3& operator=(const ApprovementSignatureV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApprovementSignatureV3& default_instance();

  void Swap(ApprovementSignatureV3* other);

  // implements Message ----------------------------------------------

  ApprovementSignatureV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApprovementSignatureV3& from);
  void MergeFrom(const ApprovementSignatureV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 1;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::SignatureV3& signature() const;
  inline ::Diadoc::Api::Proto::Docflow::SignatureV3* mutable_signature();
  inline ::Diadoc::Api::Proto::Docflow::SignatureV3* release_signature();
  inline void set_allocated_signature(::Diadoc::Api::Proto::Docflow::SignatureV3* signature);

  // optional string ResolutionRequestId = 2;
  inline bool has_resolutionrequestid() const;
  inline void clear_resolutionrequestid();
  static const int kResolutionRequestIdFieldNumber = 2;
  inline const ::std::string& resolutionrequestid() const;
  inline void set_resolutionrequestid(const ::std::string& value);
  inline void set_resolutionrequestid(const char* value);
  inline void set_resolutionrequestid(const char* value, size_t size);
  inline ::std::string* mutable_resolutionrequestid();
  inline ::std::string* release_resolutionrequestid();
  inline void set_allocated_resolutionrequestid(::std::string* resolutionrequestid);

  // optional string AuthorUserId = 3;
  inline bool has_authoruserid() const;
  inline void clear_authoruserid();
  static const int kAuthorUserIdFieldNumber = 3;
  inline const ::std::string& authoruserid() const;
  inline void set_authoruserid(const ::std::string& value);
  inline void set_authoruserid(const char* value);
  inline void set_authoruserid(const char* value, size_t size);
  inline ::std::string* mutable_authoruserid();
  inline ::std::string* release_authoruserid();
  inline void set_allocated_authoruserid(::std::string* authoruserid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3)
 private:
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_resolutionrequestid();
  inline void clear_has_resolutionrequestid();
  inline void set_has_authoruserid();
  inline void clear_has_authoruserid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SignatureV3* signature_;
  ::std::string* resolutionrequestid_;
  ::std::string* authoruserid_;
  friend void  protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fResolutionDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fResolutionDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static ApprovementSignatureV3* default_instance_;
};
// -------------------------------------------------------------------

class SignatureDenialV3 : public ::google::protobuf::Message {
 public:
  SignatureDenialV3();
  virtual ~SignatureDenialV3();

  SignatureDenialV3(const SignatureDenialV3& from);

  inline SignatureDenialV3& operator=(const SignatureDenialV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignatureDenialV3& default_instance();

  void Swap(SignatureDenialV3* other);

  // implements Message ----------------------------------------------

  SignatureDenialV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignatureDenialV3& from);
  void MergeFrom(const SignatureDenialV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
  inline bool has_entity() const;
  inline void clear_entity();
  static const int kEntityFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::Entity& entity() const;
  inline ::Diadoc::Api::Proto::Docflow::Entity* mutable_entity();
  inline ::Diadoc::Api::Proto::Docflow::Entity* release_entity();
  inline void set_allocated_entity(::Diadoc::Api::Proto::Docflow::Entity* entity);

  // required string ResolutionRequestId = 2;
  inline bool has_resolutionrequestid() const;
  inline void clear_resolutionrequestid();
  static const int kResolutionRequestIdFieldNumber = 2;
  inline const ::std::string& resolutionrequestid() const;
  inline void set_resolutionrequestid(const ::std::string& value);
  inline void set_resolutionrequestid(const char* value);
  inline void set_resolutionrequestid(const char* value, size_t size);
  inline ::std::string* mutable_resolutionrequestid();
  inline ::std::string* release_resolutionrequestid();
  inline void set_allocated_resolutionrequestid(::std::string* resolutionrequestid);

  // optional string AuthorUserId = 3;
  inline bool has_authoruserid() const;
  inline void clear_authoruserid();
  static const int kAuthorUserIdFieldNumber = 3;
  inline const ::std::string& authoruserid() const;
  inline void set_authoruserid(const ::std::string& value);
  inline void set_authoruserid(const char* value);
  inline void set_authoruserid(const char* value, size_t size);
  inline ::std::string* mutable_authoruserid();
  inline ::std::string* release_authoruserid();
  inline void set_allocated_authoruserid(::std::string* authoruserid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.SignatureDenialV3)
 private:
  inline void set_has_entity();
  inline void clear_has_entity();
  inline void set_has_resolutionrequestid();
  inline void clear_has_resolutionrequestid();
  inline void set_has_authoruserid();
  inline void clear_has_authoruserid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::Entity* entity_;
  ::std::string* resolutionrequestid_;
  ::std::string* authoruserid_;
  friend void  protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fResolutionDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fResolutionDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static SignatureDenialV3* default_instance_;
};
// ===================================================================


// ===================================================================

// ResolutionDocflowV3

// required bool IsFinished = 1;
inline bool ResolutionDocflowV3::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionDocflowV3::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolutionDocflowV3::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolutionDocflowV3::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool ResolutionDocflowV3::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.IsFinished)
  return isfinished_;
}
inline void ResolutionDocflowV3::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.IsFinished)
}

// required string ParentEntityId = 2;
inline bool ResolutionDocflowV3::has_parententityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolutionDocflowV3::set_has_parententityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolutionDocflowV3::clear_has_parententityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolutionDocflowV3::clear_parententityid() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_->clear();
  }
  clear_has_parententityid();
}
inline const ::std::string& ResolutionDocflowV3::parententityid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.ParentEntityId)
  return *parententityid_;
}
inline void ResolutionDocflowV3::set_parententityid(const ::std::string& value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.ParentEntityId)
}
inline void ResolutionDocflowV3::set_parententityid(const char* value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.ParentEntityId)
}
inline void ResolutionDocflowV3::set_parententityid(const char* value, size_t size) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.ParentEntityId)
}
inline ::std::string* ResolutionDocflowV3::mutable_parententityid() {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.ParentEntityId)
  return parententityid_;
}
inline ::std::string* ResolutionDocflowV3::release_parententityid() {
  clear_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parententityid_;
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionDocflowV3::set_allocated_parententityid(::std::string* parententityid) {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (parententityid) {
    set_has_parententityid();
    parententityid_ = parententityid;
  } else {
    clear_has_parententityid();
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.ParentEntityId)
}

// required .Diadoc.Api.Proto.Docflow.ResolutionStatus ResolutionStatus = 3 [default = UnknownStatus];
inline bool ResolutionDocflowV3::has_resolutionstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolutionDocflowV3::set_has_resolutionstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolutionDocflowV3::clear_has_resolutionstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolutionDocflowV3::clear_resolutionstatus() {
  resolutionstatus_ = 0;
  clear_has_resolutionstatus();
}
inline ::Diadoc::Api::Proto::Docflow::ResolutionStatus ResolutionDocflowV3::resolutionstatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.ResolutionStatus)
  return static_cast< ::Diadoc::Api::Proto::Docflow::ResolutionStatus >(resolutionstatus_);
}
inline void ResolutionDocflowV3::set_resolutionstatus(::Diadoc::Api::Proto::Docflow::ResolutionStatus value) {
  assert(::Diadoc::Api::Proto::Docflow::ResolutionStatus_IsValid(value));
  set_has_resolutionstatus();
  resolutionstatus_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.ResolutionStatus)
}

// optional string ResolutionEntityId = 4;
inline bool ResolutionDocflowV3::has_resolutionentityid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolutionDocflowV3::set_has_resolutionentityid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolutionDocflowV3::clear_has_resolutionentityid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolutionDocflowV3::clear_resolutionentityid() {
  if (resolutionentityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionentityid_->clear();
  }
  clear_has_resolutionentityid();
}
inline const ::std::string& ResolutionDocflowV3::resolutionentityid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.ResolutionEntityId)
  return *resolutionentityid_;
}
inline void ResolutionDocflowV3::set_resolutionentityid(const ::std::string& value) {
  set_has_resolutionentityid();
  if (resolutionentityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionentityid_ = new ::std::string;
  }
  resolutionentityid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.ResolutionEntityId)
}
inline void ResolutionDocflowV3::set_resolutionentityid(const char* value) {
  set_has_resolutionentityid();
  if (resolutionentityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionentityid_ = new ::std::string;
  }
  resolutionentityid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.ResolutionEntityId)
}
inline void ResolutionDocflowV3::set_resolutionentityid(const char* value, size_t size) {
  set_has_resolutionentityid();
  if (resolutionentityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionentityid_ = new ::std::string;
  }
  resolutionentityid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.ResolutionEntityId)
}
inline ::std::string* ResolutionDocflowV3::mutable_resolutionentityid() {
  set_has_resolutionentityid();
  if (resolutionentityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionentityid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.ResolutionEntityId)
  return resolutionentityid_;
}
inline ::std::string* ResolutionDocflowV3::release_resolutionentityid() {
  clear_has_resolutionentityid();
  if (resolutionentityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resolutionentityid_;
    resolutionentityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionDocflowV3::set_allocated_resolutionentityid(::std::string* resolutionentityid) {
  if (resolutionentityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resolutionentityid_;
  }
  if (resolutionentityid) {
    set_has_resolutionentityid();
    resolutionentityid_ = resolutionentityid;
  } else {
    clear_has_resolutionentityid();
    resolutionentityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3.ResolutionEntityId)
}

// -------------------------------------------------------------------

// ResolutionEntitiesV3

// repeated .Diadoc.Api.Proto.Docflow.ResolutionRequestV3 Requests = 1;
inline int ResolutionEntitiesV3::requests_size() const {
  return requests_.size();
}
inline void ResolutionEntitiesV3::clear_requests() {
  requests_.Clear();
}
inline const ::Diadoc::Api::Proto::Docflow::ResolutionRequestV3& ResolutionEntitiesV3::requests(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.Requests)
  return requests_.Get(index);
}
inline ::Diadoc::Api::Proto::Docflow::ResolutionRequestV3* ResolutionEntitiesV3::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.Requests)
  return requests_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Docflow::ResolutionRequestV3* ResolutionEntitiesV3::add_requests() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.Requests)
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::ResolutionRequestV3 >&
ResolutionEntitiesV3::requests() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.Requests)
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::ResolutionRequestV3 >*
ResolutionEntitiesV3::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.Requests)
  return &requests_;
}

// repeated .Diadoc.Api.Proto.Docflow.ResolutionV3 Resolutions = 2;
inline int ResolutionEntitiesV3::resolutions_size() const {
  return resolutions_.size();
}
inline void ResolutionEntitiesV3::clear_resolutions() {
  resolutions_.Clear();
}
inline const ::Diadoc::Api::Proto::Docflow::ResolutionV3& ResolutionEntitiesV3::resolutions(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.Resolutions)
  return resolutions_.Get(index);
}
inline ::Diadoc::Api::Proto::Docflow::ResolutionV3* ResolutionEntitiesV3::mutable_resolutions(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.Resolutions)
  return resolutions_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Docflow::ResolutionV3* ResolutionEntitiesV3::add_resolutions() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.Resolutions)
  return resolutions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::ResolutionV3 >&
ResolutionEntitiesV3::resolutions() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.Resolutions)
  return resolutions_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::ResolutionV3 >*
ResolutionEntitiesV3::mutable_resolutions() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.Resolutions)
  return &resolutions_;
}

// repeated .Diadoc.Api.Proto.Docflow.ApprovementSignatureV3 ApprovementSignatures = 3;
inline int ResolutionEntitiesV3::approvementsignatures_size() const {
  return approvementsignatures_.size();
}
inline void ResolutionEntitiesV3::clear_approvementsignatures() {
  approvementsignatures_.Clear();
}
inline const ::Diadoc::Api::Proto::Docflow::ApprovementSignatureV3& ResolutionEntitiesV3::approvementsignatures(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.ApprovementSignatures)
  return approvementsignatures_.Get(index);
}
inline ::Diadoc::Api::Proto::Docflow::ApprovementSignatureV3* ResolutionEntitiesV3::mutable_approvementsignatures(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.ApprovementSignatures)
  return approvementsignatures_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Docflow::ApprovementSignatureV3* ResolutionEntitiesV3::add_approvementsignatures() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.ApprovementSignatures)
  return approvementsignatures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::ApprovementSignatureV3 >&
ResolutionEntitiesV3::approvementsignatures() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.ApprovementSignatures)
  return approvementsignatures_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::ApprovementSignatureV3 >*
ResolutionEntitiesV3::mutable_approvementsignatures() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.ApprovementSignatures)
  return &approvementsignatures_;
}

// repeated .Diadoc.Api.Proto.Docflow.SignatureDenialV3 SignatureDenials = 4;
inline int ResolutionEntitiesV3::signaturedenials_size() const {
  return signaturedenials_.size();
}
inline void ResolutionEntitiesV3::clear_signaturedenials() {
  signaturedenials_.Clear();
}
inline const ::Diadoc::Api::Proto::Docflow::SignatureDenialV3& ResolutionEntitiesV3::signaturedenials(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.SignatureDenials)
  return signaturedenials_.Get(index);
}
inline ::Diadoc::Api::Proto::Docflow::SignatureDenialV3* ResolutionEntitiesV3::mutable_signaturedenials(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.SignatureDenials)
  return signaturedenials_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Docflow::SignatureDenialV3* ResolutionEntitiesV3::add_signaturedenials() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.SignatureDenials)
  return signaturedenials_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::SignatureDenialV3 >&
ResolutionEntitiesV3::signaturedenials() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.SignatureDenials)
  return signaturedenials_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::SignatureDenialV3 >*
ResolutionEntitiesV3::mutable_signaturedenials() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3.SignatureDenials)
  return &signaturedenials_;
}

// -------------------------------------------------------------------

// ResolutionRequestV3

// required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
inline bool ResolutionRequestV3::has_entity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionRequestV3::set_has_entity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolutionRequestV3::clear_has_entity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolutionRequestV3::clear_entity() {
  if (entity_ != NULL) entity_->::Diadoc::Api::Proto::Docflow::Entity::Clear();
  clear_has_entity();
}
inline const ::Diadoc::Api::Proto::Docflow::Entity& ResolutionRequestV3::entity() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.Entity)
  return entity_ != NULL ? *entity_ : *default_instance_->entity_;
}
inline ::Diadoc::Api::Proto::Docflow::Entity* ResolutionRequestV3::mutable_entity() {
  set_has_entity();
  if (entity_ == NULL) entity_ = new ::Diadoc::Api::Proto::Docflow::Entity;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.Entity)
  return entity_;
}
inline ::Diadoc::Api::Proto::Docflow::Entity* ResolutionRequestV3::release_entity() {
  clear_has_entity();
  ::Diadoc::Api::Proto::Docflow::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void ResolutionRequestV3::set_allocated_entity(::Diadoc::Api::Proto::Docflow::Entity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    set_has_entity();
  } else {
    clear_has_entity();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.Entity)
}

// required .Diadoc.Api.Proto.ResolutionTarget Target = 2;
inline bool ResolutionRequestV3::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolutionRequestV3::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolutionRequestV3::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolutionRequestV3::clear_target() {
  if (target_ != NULL) target_->::Diadoc::Api::Proto::ResolutionTarget::Clear();
  clear_has_target();
}
inline const ::Diadoc::Api::Proto::ResolutionTarget& ResolutionRequestV3::target() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.Target)
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::Diadoc::Api::Proto::ResolutionTarget* ResolutionRequestV3::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::Diadoc::Api::Proto::ResolutionTarget;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.Target)
  return target_;
}
inline ::Diadoc::Api::Proto::ResolutionTarget* ResolutionRequestV3::release_target() {
  clear_has_target();
  ::Diadoc::Api::Proto::ResolutionTarget* temp = target_;
  target_ = NULL;
  return temp;
}
inline void ResolutionRequestV3::set_allocated_target(::Diadoc::Api::Proto::ResolutionTarget* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.Target)
}

// optional string AuthorUserId = 3;
inline bool ResolutionRequestV3::has_authoruserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolutionRequestV3::set_has_authoruserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolutionRequestV3::clear_has_authoruserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolutionRequestV3::clear_authoruserid() {
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_->clear();
  }
  clear_has_authoruserid();
}
inline const ::std::string& ResolutionRequestV3::authoruserid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.AuthorUserId)
  return *authoruserid_;
}
inline void ResolutionRequestV3::set_authoruserid(const ::std::string& value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.AuthorUserId)
}
inline void ResolutionRequestV3::set_authoruserid(const char* value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.AuthorUserId)
}
inline void ResolutionRequestV3::set_authoruserid(const char* value, size_t size) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.AuthorUserId)
}
inline ::std::string* ResolutionRequestV3::mutable_authoruserid() {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.AuthorUserId)
  return authoruserid_;
}
inline ::std::string* ResolutionRequestV3::release_authoruserid() {
  clear_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authoruserid_;
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRequestV3::set_allocated_authoruserid(::std::string* authoruserid) {
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authoruserid_;
  }
  if (authoruserid) {
    set_has_authoruserid();
    authoruserid_ = authoruserid;
  } else {
    clear_has_authoruserid();
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.AuthorUserId)
}

// required .Diadoc.Api.Proto.ResolutionRequestType RequestType = 4 [default = UnknownResolutionRequestType];
inline bool ResolutionRequestV3::has_requesttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolutionRequestV3::set_has_requesttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolutionRequestV3::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolutionRequestV3::clear_requesttype() {
  requesttype_ = -1;
  clear_has_requesttype();
}
inline ::Diadoc::Api::Proto::ResolutionRequestType ResolutionRequestV3::requesttype() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.RequestType)
  return static_cast< ::Diadoc::Api::Proto::ResolutionRequestType >(requesttype_);
}
inline void ResolutionRequestV3::set_requesttype(::Diadoc::Api::Proto::ResolutionRequestType value) {
  assert(::Diadoc::Api::Proto::ResolutionRequestType_IsValid(value));
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.RequestType)
}

// optional string ResolvedWith = 5;
inline bool ResolutionRequestV3::has_resolvedwith() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolutionRequestV3::set_has_resolvedwith() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolutionRequestV3::clear_has_resolvedwith() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolutionRequestV3::clear_resolvedwith() {
  if (resolvedwith_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolvedwith_->clear();
  }
  clear_has_resolvedwith();
}
inline const ::std::string& ResolutionRequestV3::resolvedwith() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.ResolvedWith)
  return *resolvedwith_;
}
inline void ResolutionRequestV3::set_resolvedwith(const ::std::string& value) {
  set_has_resolvedwith();
  if (resolvedwith_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolvedwith_ = new ::std::string;
  }
  resolvedwith_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.ResolvedWith)
}
inline void ResolutionRequestV3::set_resolvedwith(const char* value) {
  set_has_resolvedwith();
  if (resolvedwith_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolvedwith_ = new ::std::string;
  }
  resolvedwith_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.ResolvedWith)
}
inline void ResolutionRequestV3::set_resolvedwith(const char* value, size_t size) {
  set_has_resolvedwith();
  if (resolvedwith_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolvedwith_ = new ::std::string;
  }
  resolvedwith_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.ResolvedWith)
}
inline ::std::string* ResolutionRequestV3::mutable_resolvedwith() {
  set_has_resolvedwith();
  if (resolvedwith_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolvedwith_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.ResolvedWith)
  return resolvedwith_;
}
inline ::std::string* ResolutionRequestV3::release_resolvedwith() {
  clear_has_resolvedwith();
  if (resolvedwith_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resolvedwith_;
    resolvedwith_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRequestV3::set_allocated_resolvedwith(::std::string* resolvedwith) {
  if (resolvedwith_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resolvedwith_;
  }
  if (resolvedwith) {
    set_has_resolvedwith();
    resolvedwith_ = resolvedwith;
  } else {
    clear_has_resolvedwith();
    resolvedwith_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.ResolvedWith)
}

// repeated .Diadoc.Api.Proto.ResolutionAction Actions = 6;
inline int ResolutionRequestV3::actions_size() const {
  return actions_.size();
}
inline void ResolutionRequestV3::clear_actions() {
  actions_.Clear();
}
inline ::Diadoc::Api::Proto::ResolutionAction ResolutionRequestV3::actions(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.Actions)
  return static_cast< ::Diadoc::Api::Proto::ResolutionAction >(actions_.Get(index));
}
inline void ResolutionRequestV3::set_actions(int index, ::Diadoc::Api::Proto::ResolutionAction value) {
  assert(::Diadoc::Api::Proto::ResolutionAction_IsValid(value));
  actions_.Set(index, value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.Actions)
}
inline void ResolutionRequestV3::add_actions(::Diadoc::Api::Proto::ResolutionAction value) {
  assert(::Diadoc::Api::Proto::ResolutionAction_IsValid(value));
  actions_.Add(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.Actions)
}
inline const ::google::protobuf::RepeatedField<int>&
ResolutionRequestV3::actions() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.Actions)
  return actions_;
}
inline ::google::protobuf::RepeatedField<int>*
ResolutionRequestV3::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.ResolutionRequestV3.Actions)
  return &actions_;
}

// -------------------------------------------------------------------

// ResolutionV3

// required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
inline bool ResolutionV3::has_entity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionV3::set_has_entity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolutionV3::clear_has_entity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolutionV3::clear_entity() {
  if (entity_ != NULL) entity_->::Diadoc::Api::Proto::Docflow::Entity::Clear();
  clear_has_entity();
}
inline const ::Diadoc::Api::Proto::Docflow::Entity& ResolutionV3::entity() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionV3.Entity)
  return entity_ != NULL ? *entity_ : *default_instance_->entity_;
}
inline ::Diadoc::Api::Proto::Docflow::Entity* ResolutionV3::mutable_entity() {
  set_has_entity();
  if (entity_ == NULL) entity_ = new ::Diadoc::Api::Proto::Docflow::Entity;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ResolutionV3.Entity)
  return entity_;
}
inline ::Diadoc::Api::Proto::Docflow::Entity* ResolutionV3::release_entity() {
  clear_has_entity();
  ::Diadoc::Api::Proto::Docflow::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void ResolutionV3::set_allocated_entity(::Diadoc::Api::Proto::Docflow::Entity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    set_has_entity();
  } else {
    clear_has_entity();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ResolutionV3.Entity)
}

// optional string ResolutionRequestId = 2;
inline bool ResolutionV3::has_resolutionrequestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolutionV3::set_has_resolutionrequestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolutionV3::clear_has_resolutionrequestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolutionV3::clear_resolutionrequestid() {
  if (resolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrequestid_->clear();
  }
  clear_has_resolutionrequestid();
}
inline const ::std::string& ResolutionV3::resolutionrequestid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionV3.ResolutionRequestId)
  return *resolutionrequestid_;
}
inline void ResolutionV3::set_resolutionrequestid(const ::std::string& value) {
  set_has_resolutionrequestid();
  if (resolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrequestid_ = new ::std::string;
  }
  resolutionrequestid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ResolutionV3.ResolutionRequestId)
}
inline void ResolutionV3::set_resolutionrequestid(const char* value) {
  set_has_resolutionrequestid();
  if (resolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrequestid_ = new ::std::string;
  }
  resolutionrequestid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.ResolutionV3.ResolutionRequestId)
}
inline void ResolutionV3::set_resolutionrequestid(const char* value, size_t size) {
  set_has_resolutionrequestid();
  if (resolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrequestid_ = new ::std::string;
  }
  resolutionrequestid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.ResolutionV3.ResolutionRequestId)
}
inline ::std::string* ResolutionV3::mutable_resolutionrequestid() {
  set_has_resolutionrequestid();
  if (resolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrequestid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ResolutionV3.ResolutionRequestId)
  return resolutionrequestid_;
}
inline ::std::string* ResolutionV3::release_resolutionrequestid() {
  clear_has_resolutionrequestid();
  if (resolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resolutionrequestid_;
    resolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionV3::set_allocated_resolutionrequestid(::std::string* resolutionrequestid) {
  if (resolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resolutionrequestid_;
  }
  if (resolutionrequestid) {
    set_has_resolutionrequestid();
    resolutionrequestid_ = resolutionrequestid;
  } else {
    clear_has_resolutionrequestid();
    resolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ResolutionV3.ResolutionRequestId)
}

// optional string AuthorUserId = 3;
inline bool ResolutionV3::has_authoruserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolutionV3::set_has_authoruserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolutionV3::clear_has_authoruserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolutionV3::clear_authoruserid() {
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_->clear();
  }
  clear_has_authoruserid();
}
inline const ::std::string& ResolutionV3::authoruserid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionV3.AuthorUserId)
  return *authoruserid_;
}
inline void ResolutionV3::set_authoruserid(const ::std::string& value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ResolutionV3.AuthorUserId)
}
inline void ResolutionV3::set_authoruserid(const char* value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.ResolutionV3.AuthorUserId)
}
inline void ResolutionV3::set_authoruserid(const char* value, size_t size) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.ResolutionV3.AuthorUserId)
}
inline ::std::string* ResolutionV3::mutable_authoruserid() {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ResolutionV3.AuthorUserId)
  return authoruserid_;
}
inline ::std::string* ResolutionV3::release_authoruserid() {
  clear_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authoruserid_;
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionV3::set_allocated_authoruserid(::std::string* authoruserid) {
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authoruserid_;
  }
  if (authoruserid) {
    set_has_authoruserid();
    authoruserid_ = authoruserid;
  } else {
    clear_has_authoruserid();
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ResolutionV3.AuthorUserId)
}

// required .Diadoc.Api.Proto.ResolutionType ResolutionType = 4 [default = UnknownResolutionType];
inline bool ResolutionV3::has_resolutiontype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolutionV3::set_has_resolutiontype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolutionV3::clear_has_resolutiontype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolutionV3::clear_resolutiontype() {
  resolutiontype_ = -1;
  clear_has_resolutiontype();
}
inline ::Diadoc::Api::Proto::ResolutionType ResolutionV3::resolutiontype() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ResolutionV3.ResolutionType)
  return static_cast< ::Diadoc::Api::Proto::ResolutionType >(resolutiontype_);
}
inline void ResolutionV3::set_resolutiontype(::Diadoc::Api::Proto::ResolutionType value) {
  assert(::Diadoc::Api::Proto::ResolutionType_IsValid(value));
  set_has_resolutiontype();
  resolutiontype_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ResolutionV3.ResolutionType)
}

// -------------------------------------------------------------------

// ApprovementSignatureV3

// required .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 1;
inline bool ApprovementSignatureV3::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApprovementSignatureV3::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ApprovementSignatureV3::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ApprovementSignatureV3::clear_signature() {
  if (signature_ != NULL) signature_->::Diadoc::Api::Proto::Docflow::SignatureV3::Clear();
  clear_has_signature();
}
inline const ::Diadoc::Api::Proto::Docflow::SignatureV3& ApprovementSignatureV3::signature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3.Signature)
  return signature_ != NULL ? *signature_ : *default_instance_->signature_;
}
inline ::Diadoc::Api::Proto::Docflow::SignatureV3* ApprovementSignatureV3::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) signature_ = new ::Diadoc::Api::Proto::Docflow::SignatureV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3.Signature)
  return signature_;
}
inline ::Diadoc::Api::Proto::Docflow::SignatureV3* ApprovementSignatureV3::release_signature() {
  clear_has_signature();
  ::Diadoc::Api::Proto::Docflow::SignatureV3* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline void ApprovementSignatureV3::set_allocated_signature(::Diadoc::Api::Proto::Docflow::SignatureV3* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3.Signature)
}

// optional string ResolutionRequestId = 2;
inline bool ApprovementSignatureV3::has_resolutionrequestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApprovementSignatureV3::set_has_resolutionrequestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ApprovementSignatureV3::clear_has_resolutionrequestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ApprovementSignatureV3::clear_resolutionrequestid() {
  if (resolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrequestid_->clear();
  }
  clear_has_resolutionrequestid();
}
inline const ::std::string& ApprovementSignatureV3::resolutionrequestid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3.ResolutionRequestId)
  return *resolutionrequestid_;
}
inline void ApprovementSignatureV3::set_resolutionrequestid(const ::std::string& value) {
  set_has_resolutionrequestid();
  if (resolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrequestid_ = new ::std::string;
  }
  resolutionrequestid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3.ResolutionRequestId)
}
inline void ApprovementSignatureV3::set_resolutionrequestid(const char* value) {
  set_has_resolutionrequestid();
  if (resolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrequestid_ = new ::std::string;
  }
  resolutionrequestid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3.ResolutionRequestId)
}
inline void ApprovementSignatureV3::set_resolutionrequestid(const char* value, size_t size) {
  set_has_resolutionrequestid();
  if (resolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrequestid_ = new ::std::string;
  }
  resolutionrequestid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3.ResolutionRequestId)
}
inline ::std::string* ApprovementSignatureV3::mutable_resolutionrequestid() {
  set_has_resolutionrequestid();
  if (resolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrequestid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3.ResolutionRequestId)
  return resolutionrequestid_;
}
inline ::std::string* ApprovementSignatureV3::release_resolutionrequestid() {
  clear_has_resolutionrequestid();
  if (resolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resolutionrequestid_;
    resolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ApprovementSignatureV3::set_allocated_resolutionrequestid(::std::string* resolutionrequestid) {
  if (resolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resolutionrequestid_;
  }
  if (resolutionrequestid) {
    set_has_resolutionrequestid();
    resolutionrequestid_ = resolutionrequestid;
  } else {
    clear_has_resolutionrequestid();
    resolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3.ResolutionRequestId)
}

// optional string AuthorUserId = 3;
inline bool ApprovementSignatureV3::has_authoruserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ApprovementSignatureV3::set_has_authoruserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ApprovementSignatureV3::clear_has_authoruserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ApprovementSignatureV3::clear_authoruserid() {
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_->clear();
  }
  clear_has_authoruserid();
}
inline const ::std::string& ApprovementSignatureV3::authoruserid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3.AuthorUserId)
  return *authoruserid_;
}
inline void ApprovementSignatureV3::set_authoruserid(const ::std::string& value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3.AuthorUserId)
}
inline void ApprovementSignatureV3::set_authoruserid(const char* value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3.AuthorUserId)
}
inline void ApprovementSignatureV3::set_authoruserid(const char* value, size_t size) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3.AuthorUserId)
}
inline ::std::string* ApprovementSignatureV3::mutable_authoruserid() {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3.AuthorUserId)
  return authoruserid_;
}
inline ::std::string* ApprovementSignatureV3::release_authoruserid() {
  clear_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authoruserid_;
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ApprovementSignatureV3::set_allocated_authoruserid(::std::string* authoruserid) {
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authoruserid_;
  }
  if (authoruserid) {
    set_has_authoruserid();
    authoruserid_ = authoruserid;
  } else {
    clear_has_authoruserid();
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3.AuthorUserId)
}

// -------------------------------------------------------------------

// SignatureDenialV3

// required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
inline bool SignatureDenialV3::has_entity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignatureDenialV3::set_has_entity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignatureDenialV3::clear_has_entity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignatureDenialV3::clear_entity() {
  if (entity_ != NULL) entity_->::Diadoc::Api::Proto::Docflow::Entity::Clear();
  clear_has_entity();
}
inline const ::Diadoc::Api::Proto::Docflow::Entity& SignatureDenialV3::entity() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.SignatureDenialV3.Entity)
  return entity_ != NULL ? *entity_ : *default_instance_->entity_;
}
inline ::Diadoc::Api::Proto::Docflow::Entity* SignatureDenialV3::mutable_entity() {
  set_has_entity();
  if (entity_ == NULL) entity_ = new ::Diadoc::Api::Proto::Docflow::Entity;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.SignatureDenialV3.Entity)
  return entity_;
}
inline ::Diadoc::Api::Proto::Docflow::Entity* SignatureDenialV3::release_entity() {
  clear_has_entity();
  ::Diadoc::Api::Proto::Docflow::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void SignatureDenialV3::set_allocated_entity(::Diadoc::Api::Proto::Docflow::Entity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    set_has_entity();
  } else {
    clear_has_entity();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.SignatureDenialV3.Entity)
}

// required string ResolutionRequestId = 2;
inline bool SignatureDenialV3::has_resolutionrequestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignatureDenialV3::set_has_resolutionrequestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignatureDenialV3::clear_has_resolutionrequestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignatureDenialV3::clear_resolutionrequestid() {
  if (resolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrequestid_->clear();
  }
  clear_has_resolutionrequestid();
}
inline const ::std::string& SignatureDenialV3::resolutionrequestid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.SignatureDenialV3.ResolutionRequestId)
  return *resolutionrequestid_;
}
inline void SignatureDenialV3::set_resolutionrequestid(const ::std::string& value) {
  set_has_resolutionrequestid();
  if (resolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrequestid_ = new ::std::string;
  }
  resolutionrequestid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.SignatureDenialV3.ResolutionRequestId)
}
inline void SignatureDenialV3::set_resolutionrequestid(const char* value) {
  set_has_resolutionrequestid();
  if (resolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrequestid_ = new ::std::string;
  }
  resolutionrequestid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.SignatureDenialV3.ResolutionRequestId)
}
inline void SignatureDenialV3::set_resolutionrequestid(const char* value, size_t size) {
  set_has_resolutionrequestid();
  if (resolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrequestid_ = new ::std::string;
  }
  resolutionrequestid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.SignatureDenialV3.ResolutionRequestId)
}
inline ::std::string* SignatureDenialV3::mutable_resolutionrequestid() {
  set_has_resolutionrequestid();
  if (resolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrequestid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.SignatureDenialV3.ResolutionRequestId)
  return resolutionrequestid_;
}
inline ::std::string* SignatureDenialV3::release_resolutionrequestid() {
  clear_has_resolutionrequestid();
  if (resolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resolutionrequestid_;
    resolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignatureDenialV3::set_allocated_resolutionrequestid(::std::string* resolutionrequestid) {
  if (resolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resolutionrequestid_;
  }
  if (resolutionrequestid) {
    set_has_resolutionrequestid();
    resolutionrequestid_ = resolutionrequestid;
  } else {
    clear_has_resolutionrequestid();
    resolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.SignatureDenialV3.ResolutionRequestId)
}

// optional string AuthorUserId = 3;
inline bool SignatureDenialV3::has_authoruserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignatureDenialV3::set_has_authoruserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignatureDenialV3::clear_has_authoruserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignatureDenialV3::clear_authoruserid() {
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_->clear();
  }
  clear_has_authoruserid();
}
inline const ::std::string& SignatureDenialV3::authoruserid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.SignatureDenialV3.AuthorUserId)
  return *authoruserid_;
}
inline void SignatureDenialV3::set_authoruserid(const ::std::string& value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.SignatureDenialV3.AuthorUserId)
}
inline void SignatureDenialV3::set_authoruserid(const char* value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.SignatureDenialV3.AuthorUserId)
}
inline void SignatureDenialV3::set_authoruserid(const char* value, size_t size) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.SignatureDenialV3.AuthorUserId)
}
inline ::std::string* SignatureDenialV3::mutable_authoruserid() {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.SignatureDenialV3.AuthorUserId)
  return authoruserid_;
}
inline ::std::string* SignatureDenialV3::release_authoruserid() {
  clear_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authoruserid_;
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignatureDenialV3::set_allocated_authoruserid(::std::string* authoruserid) {
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authoruserid_;
  }
  if (authoruserid) {
    set_has_authoruserid();
    authoruserid_ = authoruserid;
  } else {
    clear_has_authoruserid();
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.SignatureDenialV3.AuthorUserId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Diadoc::Api::Proto::Docflow::ResolutionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Docflow::ResolutionStatus>() {
  return ::Diadoc::Api::Proto::Docflow::ResolutionStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Docflow_2fResolutionDocflowV3_2eproto__INCLUDED
