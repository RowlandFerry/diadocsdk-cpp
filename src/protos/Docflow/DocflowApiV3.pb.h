// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/DocflowApiV3.proto

#ifndef PROTOBUF_Docflow_2fDocflowApiV3_2eproto__INCLUDED
#define PROTOBUF_Docflow_2fDocflowApiV3_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Timestamp.pb.h"
#include "DocumentId.pb.h"
#include "TotalCountType.pb.h"
#include "Docflow/DocumentWithDocflowV3.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto();
void protobuf_AssignDesc_Docflow_2fDocflowApiV3_2eproto();
void protobuf_ShutdownFile_Docflow_2fDocflowApiV3_2eproto();

class GetDocflowBatchResponseV3;
class SearchDocflowsResponseV3;
class FetchedDocumentV3;
class GetDocflowsByPacketIdResponseV3;
class GetDocflowEventsResponseV3;
class DocflowEventV3;

// ===================================================================

class GetDocflowBatchResponseV3 : public ::google::protobuf::Message {
 public:
  GetDocflowBatchResponseV3();
  virtual ~GetDocflowBatchResponseV3();

  GetDocflowBatchResponseV3(const GetDocflowBatchResponseV3& from);

  inline GetDocflowBatchResponseV3& operator=(const GetDocflowBatchResponseV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDocflowBatchResponseV3& default_instance();

  void Swap(GetDocflowBatchResponseV3* other);

  // implements Message ----------------------------------------------

  GetDocflowBatchResponseV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDocflowBatchResponseV3& from);
  void MergeFrom(const GetDocflowBatchResponseV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Documents = 1;
  inline int documents_size() const;
  inline void clear_documents();
  static const int kDocumentsFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3& documents(int index) const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* mutable_documents(int index);
  inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* add_documents();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3 >&
      documents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3 >*
      mutable_documents();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3 > documents_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowApiV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowApiV3_2eproto();

  void InitAsDefaultInstance();
  static GetDocflowBatchResponseV3* default_instance_;
};
// -------------------------------------------------------------------

class SearchDocflowsResponseV3 : public ::google::protobuf::Message {
 public:
  SearchDocflowsResponseV3();
  virtual ~SearchDocflowsResponseV3();

  SearchDocflowsResponseV3(const SearchDocflowsResponseV3& from);

  inline SearchDocflowsResponseV3& operator=(const SearchDocflowsResponseV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchDocflowsResponseV3& default_instance();

  void Swap(SearchDocflowsResponseV3* other);

  // implements Message ----------------------------------------------

  SearchDocflowsResponseV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchDocflowsResponseV3& from);
  void MergeFrom(const SearchDocflowsResponseV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Documents = 1;
  inline int documents_size() const;
  inline void clear_documents();
  static const int kDocumentsFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3& documents(int index) const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* mutable_documents(int index);
  inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* add_documents();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3 >&
      documents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3 >*
      mutable_documents();

  // required bool HaveMoreDocuments = 2;
  inline bool has_havemoredocuments() const;
  inline void clear_havemoredocuments();
  static const int kHaveMoreDocumentsFieldNumber = 2;
  inline bool havemoredocuments() const;
  inline void set_havemoredocuments(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3)
 private:
  inline void set_has_havemoredocuments();
  inline void clear_has_havemoredocuments();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3 > documents_;
  bool havemoredocuments_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowApiV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowApiV3_2eproto();

  void InitAsDefaultInstance();
  static SearchDocflowsResponseV3* default_instance_;
};
// -------------------------------------------------------------------

class FetchedDocumentV3 : public ::google::protobuf::Message {
 public:
  FetchedDocumentV3();
  virtual ~FetchedDocumentV3();

  FetchedDocumentV3(const FetchedDocumentV3& from);

  inline FetchedDocumentV3& operator=(const FetchedDocumentV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchedDocumentV3& default_instance();

  void Swap(FetchedDocumentV3* other);

  // implements Message ----------------------------------------------

  FetchedDocumentV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FetchedDocumentV3& from);
  void MergeFrom(const FetchedDocumentV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Document = 1;
  inline bool has_document() const;
  inline void clear_document();
  static const int kDocumentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3& document() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* mutable_document();
  inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* release_document();
  inline void set_allocated_document(::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* document);

  // required bytes IndexKey = 2;
  inline bool has_indexkey() const;
  inline void clear_indexkey();
  static const int kIndexKeyFieldNumber = 2;
  inline const ::std::string& indexkey() const;
  inline void set_indexkey(const ::std::string& value);
  inline void set_indexkey(const char* value);
  inline void set_indexkey(const void* value, size_t size);
  inline ::std::string* mutable_indexkey();
  inline ::std::string* release_indexkey();
  inline void set_allocated_indexkey(::std::string* indexkey);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.FetchedDocumentV3)
 private:
  inline void set_has_document();
  inline void clear_has_document();
  inline void set_has_indexkey();
  inline void clear_has_indexkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* document_;
  ::std::string* indexkey_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowApiV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowApiV3_2eproto();

  void InitAsDefaultInstance();
  static FetchedDocumentV3* default_instance_;
};
// -------------------------------------------------------------------

class GetDocflowsByPacketIdResponseV3 : public ::google::protobuf::Message {
 public:
  GetDocflowsByPacketIdResponseV3();
  virtual ~GetDocflowsByPacketIdResponseV3();

  GetDocflowsByPacketIdResponseV3(const GetDocflowsByPacketIdResponseV3& from);

  inline GetDocflowsByPacketIdResponseV3& operator=(const GetDocflowsByPacketIdResponseV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDocflowsByPacketIdResponseV3& default_instance();

  void Swap(GetDocflowsByPacketIdResponseV3* other);

  // implements Message ----------------------------------------------

  GetDocflowsByPacketIdResponseV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDocflowsByPacketIdResponseV3& from);
  void MergeFrom(const GetDocflowsByPacketIdResponseV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.Docflow.FetchedDocumentV3 Documents = 1;
  inline int documents_size() const;
  inline void clear_documents();
  static const int kDocumentsFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::FetchedDocumentV3& documents(int index) const;
  inline ::Diadoc::Api::Proto::Docflow::FetchedDocumentV3* mutable_documents(int index);
  inline ::Diadoc::Api::Proto::Docflow::FetchedDocumentV3* add_documents();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::FetchedDocumentV3 >&
      documents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::FetchedDocumentV3 >*
      mutable_documents();

  // optional bytes NextPageIndexKey = 2;
  inline bool has_nextpageindexkey() const;
  inline void clear_nextpageindexkey();
  static const int kNextPageIndexKeyFieldNumber = 2;
  inline const ::std::string& nextpageindexkey() const;
  inline void set_nextpageindexkey(const ::std::string& value);
  inline void set_nextpageindexkey(const char* value);
  inline void set_nextpageindexkey(const void* value, size_t size);
  inline ::std::string* mutable_nextpageindexkey();
  inline ::std::string* release_nextpageindexkey();
  inline void set_allocated_nextpageindexkey(::std::string* nextpageindexkey);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3)
 private:
  inline void set_has_nextpageindexkey();
  inline void clear_has_nextpageindexkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::FetchedDocumentV3 > documents_;
  ::std::string* nextpageindexkey_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowApiV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowApiV3_2eproto();

  void InitAsDefaultInstance();
  static GetDocflowsByPacketIdResponseV3* default_instance_;
};
// -------------------------------------------------------------------

class GetDocflowEventsResponseV3 : public ::google::protobuf::Message {
 public:
  GetDocflowEventsResponseV3();
  virtual ~GetDocflowEventsResponseV3();

  GetDocflowEventsResponseV3(const GetDocflowEventsResponseV3& from);

  inline GetDocflowEventsResponseV3& operator=(const GetDocflowEventsResponseV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDocflowEventsResponseV3& default_instance();

  void Swap(GetDocflowEventsResponseV3* other);

  // implements Message ----------------------------------------------

  GetDocflowEventsResponseV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDocflowEventsResponseV3& from);
  void MergeFrom(const GetDocflowEventsResponseV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 TotalCount = 1;
  inline bool has_totalcount() const;
  inline void clear_totalcount();
  static const int kTotalCountFieldNumber = 1;
  inline ::google::protobuf::int32 totalcount() const;
  inline void set_totalcount(::google::protobuf::int32 value);

  // repeated .Diadoc.Api.Proto.Docflow.DocflowEventV3 Events = 2;
  inline int events_size() const;
  inline void clear_events();
  static const int kEventsFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::DocflowEventV3& events(int index) const;
  inline ::Diadoc::Api::Proto::Docflow::DocflowEventV3* mutable_events(int index);
  inline ::Diadoc::Api::Proto::Docflow::DocflowEventV3* add_events();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::DocflowEventV3 >&
      events() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::DocflowEventV3 >*
      mutable_events();

  // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
  inline bool has_totalcounttype() const;
  inline void clear_totalcounttype();
  static const int kTotalCountTypeFieldNumber = 3;
  inline ::Diadoc::Api::Proto::TotalCountType totalcounttype() const;
  inline void set_totalcounttype(::Diadoc::Api::Proto::TotalCountType value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3)
 private:
  inline void set_has_totalcount();
  inline void clear_has_totalcount();
  inline void set_has_totalcounttype();
  inline void clear_has_totalcounttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::DocflowEventV3 > events_;
  ::google::protobuf::int32 totalcount_;
  int totalcounttype_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowApiV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowApiV3_2eproto();

  void InitAsDefaultInstance();
  static GetDocflowEventsResponseV3* default_instance_;
};
// -------------------------------------------------------------------

class DocflowEventV3 : public ::google::protobuf::Message {
 public:
  DocflowEventV3();
  virtual ~DocflowEventV3();

  DocflowEventV3(const DocflowEventV3& from);

  inline DocflowEventV3& operator=(const DocflowEventV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocflowEventV3& default_instance();

  void Swap(DocflowEventV3* other);

  // implements Message ----------------------------------------------

  DocflowEventV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocflowEventV3& from);
  void MergeFrom(const DocflowEventV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string EventId = 1;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 1;
  inline const ::std::string& eventid() const;
  inline void set_eventid(const ::std::string& value);
  inline void set_eventid(const char* value);
  inline void set_eventid(const char* value, size_t size);
  inline ::std::string* mutable_eventid();
  inline ::std::string* release_eventid();
  inline void set_allocated_eventid(::std::string* eventid);

  // required .Diadoc.Api.Proto.Timestamp Timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Timestamp& timestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_timestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_timestamp();
  inline void set_allocated_timestamp(::Diadoc::Api::Proto::Timestamp* timestamp);

  // required .Diadoc.Api.Proto.DocumentId DocumentId = 3;
  inline bool has_documentid() const;
  inline void clear_documentid();
  static const int kDocumentIdFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::DocumentId& documentid() const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_documentid();
  inline ::Diadoc::Api::Proto::DocumentId* release_documentid();
  inline void set_allocated_documentid(::Diadoc::Api::Proto::DocumentId* documentid);

  // required bytes IndexKey = 4;
  inline bool has_indexkey() const;
  inline void clear_indexkey();
  static const int kIndexKeyFieldNumber = 4;
  inline const ::std::string& indexkey() const;
  inline void set_indexkey(const ::std::string& value);
  inline void set_indexkey(const char* value);
  inline void set_indexkey(const void* value, size_t size);
  inline ::std::string* mutable_indexkey();
  inline ::std::string* release_indexkey();
  inline void set_allocated_indexkey(::std::string* indexkey);

  // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Document = 5;
  inline bool has_document() const;
  inline void clear_document();
  static const int kDocumentFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3& document() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* mutable_document();
  inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* release_document();
  inline void set_allocated_document(::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* document);

  // optional string PreviousEventId = 6;
  inline bool has_previouseventid() const;
  inline void clear_previouseventid();
  static const int kPreviousEventIdFieldNumber = 6;
  inline const ::std::string& previouseventid() const;
  inline void set_previouseventid(const ::std::string& value);
  inline void set_previouseventid(const char* value);
  inline void set_previouseventid(const char* value, size_t size);
  inline ::std::string* mutable_previouseventid();
  inline ::std::string* release_previouseventid();
  inline void set_allocated_previouseventid(::std::string* previouseventid);

  // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 PreviousDocumentState = 7;
  inline bool has_previousdocumentstate() const;
  inline void clear_previousdocumentstate();
  static const int kPreviousDocumentStateFieldNumber = 7;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3& previousdocumentstate() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* mutable_previousdocumentstate();
  inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* release_previousdocumentstate();
  inline void set_allocated_previousdocumentstate(::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* previousdocumentstate);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.DocflowEventV3)
 private:
  inline void set_has_eventid();
  inline void clear_has_eventid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_documentid();
  inline void clear_has_documentid();
  inline void set_has_indexkey();
  inline void clear_has_indexkey();
  inline void set_has_document();
  inline void clear_has_document();
  inline void set_has_previouseventid();
  inline void clear_has_previouseventid();
  inline void set_has_previousdocumentstate();
  inline void clear_has_previousdocumentstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* eventid_;
  ::Diadoc::Api::Proto::Timestamp* timestamp_;
  ::Diadoc::Api::Proto::DocumentId* documentid_;
  ::std::string* indexkey_;
  ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* document_;
  ::std::string* previouseventid_;
  ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* previousdocumentstate_;
  friend void  protobuf_AddDesc_Docflow_2fDocflowApiV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflowApiV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflowApiV3_2eproto();

  void InitAsDefaultInstance();
  static DocflowEventV3* default_instance_;
};
// ===================================================================


// ===================================================================

// GetDocflowBatchResponseV3

// repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Documents = 1;
inline int GetDocflowBatchResponseV3::documents_size() const {
  return documents_.size();
}
inline void GetDocflowBatchResponseV3::clear_documents() {
  documents_.Clear();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3& GetDocflowBatchResponseV3::documents(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3.Documents)
  return documents_.Get(index);
}
inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* GetDocflowBatchResponseV3::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3.Documents)
  return documents_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* GetDocflowBatchResponseV3::add_documents() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3.Documents)
  return documents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3 >&
GetDocflowBatchResponseV3::documents() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3.Documents)
  return documents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3 >*
GetDocflowBatchResponseV3::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponseV3.Documents)
  return &documents_;
}

// -------------------------------------------------------------------

// SearchDocflowsResponseV3

// repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Documents = 1;
inline int SearchDocflowsResponseV3::documents_size() const {
  return documents_.size();
}
inline void SearchDocflowsResponseV3::clear_documents() {
  documents_.Clear();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3& SearchDocflowsResponseV3::documents(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3.Documents)
  return documents_.Get(index);
}
inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* SearchDocflowsResponseV3::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3.Documents)
  return documents_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* SearchDocflowsResponseV3::add_documents() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3.Documents)
  return documents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3 >&
SearchDocflowsResponseV3::documents() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3.Documents)
  return documents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3 >*
SearchDocflowsResponseV3::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3.Documents)
  return &documents_;
}

// required bool HaveMoreDocuments = 2;
inline bool SearchDocflowsResponseV3::has_havemoredocuments() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchDocflowsResponseV3::set_has_havemoredocuments() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchDocflowsResponseV3::clear_has_havemoredocuments() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchDocflowsResponseV3::clear_havemoredocuments() {
  havemoredocuments_ = false;
  clear_has_havemoredocuments();
}
inline bool SearchDocflowsResponseV3::havemoredocuments() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3.HaveMoreDocuments)
  return havemoredocuments_;
}
inline void SearchDocflowsResponseV3::set_havemoredocuments(bool value) {
  set_has_havemoredocuments();
  havemoredocuments_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.SearchDocflowsResponseV3.HaveMoreDocuments)
}

// -------------------------------------------------------------------

// FetchedDocumentV3

// required .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Document = 1;
inline bool FetchedDocumentV3::has_document() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetchedDocumentV3::set_has_document() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetchedDocumentV3::clear_has_document() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetchedDocumentV3::clear_document() {
  if (document_ != NULL) document_->::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3::Clear();
  clear_has_document();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3& FetchedDocumentV3::document() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.FetchedDocumentV3.Document)
  return document_ != NULL ? *document_ : *default_instance_->document_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* FetchedDocumentV3::mutable_document() {
  set_has_document();
  if (document_ == NULL) document_ = new ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.FetchedDocumentV3.Document)
  return document_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* FetchedDocumentV3::release_document() {
  clear_has_document();
  ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* temp = document_;
  document_ = NULL;
  return temp;
}
inline void FetchedDocumentV3::set_allocated_document(::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* document) {
  delete document_;
  document_ = document;
  if (document) {
    set_has_document();
  } else {
    clear_has_document();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.FetchedDocumentV3.Document)
}

// required bytes IndexKey = 2;
inline bool FetchedDocumentV3::has_indexkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetchedDocumentV3::set_has_indexkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetchedDocumentV3::clear_has_indexkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetchedDocumentV3::clear_indexkey() {
  if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_->clear();
  }
  clear_has_indexkey();
}
inline const ::std::string& FetchedDocumentV3::indexkey() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.FetchedDocumentV3.IndexKey)
  return *indexkey_;
}
inline void FetchedDocumentV3::set_indexkey(const ::std::string& value) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.FetchedDocumentV3.IndexKey)
}
inline void FetchedDocumentV3::set_indexkey(const char* value) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.FetchedDocumentV3.IndexKey)
}
inline void FetchedDocumentV3::set_indexkey(const void* value, size_t size) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.FetchedDocumentV3.IndexKey)
}
inline ::std::string* FetchedDocumentV3::mutable_indexkey() {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.FetchedDocumentV3.IndexKey)
  return indexkey_;
}
inline ::std::string* FetchedDocumentV3::release_indexkey() {
  clear_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = indexkey_;
    indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FetchedDocumentV3::set_allocated_indexkey(::std::string* indexkey) {
  if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete indexkey_;
  }
  if (indexkey) {
    set_has_indexkey();
    indexkey_ = indexkey;
  } else {
    clear_has_indexkey();
    indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.FetchedDocumentV3.IndexKey)
}

// -------------------------------------------------------------------

// GetDocflowsByPacketIdResponseV3

// repeated .Diadoc.Api.Proto.Docflow.FetchedDocumentV3 Documents = 1;
inline int GetDocflowsByPacketIdResponseV3::documents_size() const {
  return documents_.size();
}
inline void GetDocflowsByPacketIdResponseV3::clear_documents() {
  documents_.Clear();
}
inline const ::Diadoc::Api::Proto::Docflow::FetchedDocumentV3& GetDocflowsByPacketIdResponseV3::documents(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3.Documents)
  return documents_.Get(index);
}
inline ::Diadoc::Api::Proto::Docflow::FetchedDocumentV3* GetDocflowsByPacketIdResponseV3::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3.Documents)
  return documents_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Docflow::FetchedDocumentV3* GetDocflowsByPacketIdResponseV3::add_documents() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3.Documents)
  return documents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::FetchedDocumentV3 >&
GetDocflowsByPacketIdResponseV3::documents() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3.Documents)
  return documents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::FetchedDocumentV3 >*
GetDocflowsByPacketIdResponseV3::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3.Documents)
  return &documents_;
}

// optional bytes NextPageIndexKey = 2;
inline bool GetDocflowsByPacketIdResponseV3::has_nextpageindexkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetDocflowsByPacketIdResponseV3::set_has_nextpageindexkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetDocflowsByPacketIdResponseV3::clear_has_nextpageindexkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetDocflowsByPacketIdResponseV3::clear_nextpageindexkey() {
  if (nextpageindexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nextpageindexkey_->clear();
  }
  clear_has_nextpageindexkey();
}
inline const ::std::string& GetDocflowsByPacketIdResponseV3::nextpageindexkey() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3.NextPageIndexKey)
  return *nextpageindexkey_;
}
inline void GetDocflowsByPacketIdResponseV3::set_nextpageindexkey(const ::std::string& value) {
  set_has_nextpageindexkey();
  if (nextpageindexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nextpageindexkey_ = new ::std::string;
  }
  nextpageindexkey_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3.NextPageIndexKey)
}
inline void GetDocflowsByPacketIdResponseV3::set_nextpageindexkey(const char* value) {
  set_has_nextpageindexkey();
  if (nextpageindexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nextpageindexkey_ = new ::std::string;
  }
  nextpageindexkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3.NextPageIndexKey)
}
inline void GetDocflowsByPacketIdResponseV3::set_nextpageindexkey(const void* value, size_t size) {
  set_has_nextpageindexkey();
  if (nextpageindexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nextpageindexkey_ = new ::std::string;
  }
  nextpageindexkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3.NextPageIndexKey)
}
inline ::std::string* GetDocflowsByPacketIdResponseV3::mutable_nextpageindexkey() {
  set_has_nextpageindexkey();
  if (nextpageindexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nextpageindexkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3.NextPageIndexKey)
  return nextpageindexkey_;
}
inline ::std::string* GetDocflowsByPacketIdResponseV3::release_nextpageindexkey() {
  clear_has_nextpageindexkey();
  if (nextpageindexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nextpageindexkey_;
    nextpageindexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetDocflowsByPacketIdResponseV3::set_allocated_nextpageindexkey(::std::string* nextpageindexkey) {
  if (nextpageindexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nextpageindexkey_;
  }
  if (nextpageindexkey) {
    set_has_nextpageindexkey();
    nextpageindexkey_ = nextpageindexkey;
  } else {
    clear_has_nextpageindexkey();
    nextpageindexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponseV3.NextPageIndexKey)
}

// -------------------------------------------------------------------

// GetDocflowEventsResponseV3

// required int32 TotalCount = 1;
inline bool GetDocflowEventsResponseV3::has_totalcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDocflowEventsResponseV3::set_has_totalcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDocflowEventsResponseV3::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDocflowEventsResponseV3::clear_totalcount() {
  totalcount_ = 0;
  clear_has_totalcount();
}
inline ::google::protobuf::int32 GetDocflowEventsResponseV3::totalcount() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3.TotalCount)
  return totalcount_;
}
inline void GetDocflowEventsResponseV3::set_totalcount(::google::protobuf::int32 value) {
  set_has_totalcount();
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3.TotalCount)
}

// repeated .Diadoc.Api.Proto.Docflow.DocflowEventV3 Events = 2;
inline int GetDocflowEventsResponseV3::events_size() const {
  return events_.size();
}
inline void GetDocflowEventsResponseV3::clear_events() {
  events_.Clear();
}
inline const ::Diadoc::Api::Proto::Docflow::DocflowEventV3& GetDocflowEventsResponseV3::events(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3.Events)
  return events_.Get(index);
}
inline ::Diadoc::Api::Proto::Docflow::DocflowEventV3* GetDocflowEventsResponseV3::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3.Events)
  return events_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Docflow::DocflowEventV3* GetDocflowEventsResponseV3::add_events() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3.Events)
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::DocflowEventV3 >&
GetDocflowEventsResponseV3::events() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3.Events)
  return events_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::DocflowEventV3 >*
GetDocflowEventsResponseV3::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3.Events)
  return &events_;
}

// required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
inline bool GetDocflowEventsResponseV3::has_totalcounttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetDocflowEventsResponseV3::set_has_totalcounttype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetDocflowEventsResponseV3::clear_has_totalcounttype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetDocflowEventsResponseV3::clear_totalcounttype() {
  totalcounttype_ = 0;
  clear_has_totalcounttype();
}
inline ::Diadoc::Api::Proto::TotalCountType GetDocflowEventsResponseV3::totalcounttype() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3.TotalCountType)
  return static_cast< ::Diadoc::Api::Proto::TotalCountType >(totalcounttype_);
}
inline void GetDocflowEventsResponseV3::set_totalcounttype(::Diadoc::Api::Proto::TotalCountType value) {
  assert(::Diadoc::Api::Proto::TotalCountType_IsValid(value));
  set_has_totalcounttype();
  totalcounttype_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponseV3.TotalCountType)
}

// -------------------------------------------------------------------

// DocflowEventV3

// required string EventId = 1;
inline bool DocflowEventV3::has_eventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocflowEventV3::set_has_eventid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocflowEventV3::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocflowEventV3::clear_eventid() {
  if (eventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventid_->clear();
  }
  clear_has_eventid();
}
inline const ::std::string& DocflowEventV3::eventid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowEventV3.EventId)
  return *eventid_;
}
inline void DocflowEventV3::set_eventid(const ::std::string& value) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocflowEventV3.EventId)
}
inline void DocflowEventV3::set_eventid(const char* value) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.DocflowEventV3.EventId)
}
inline void DocflowEventV3::set_eventid(const char* value, size_t size) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.DocflowEventV3.EventId)
}
inline ::std::string* DocflowEventV3::mutable_eventid() {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowEventV3.EventId)
  return eventid_;
}
inline ::std::string* DocflowEventV3::release_eventid() {
  clear_has_eventid();
  if (eventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = eventid_;
    eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocflowEventV3::set_allocated_eventid(::std::string* eventid) {
  if (eventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eventid_;
  }
  if (eventid) {
    set_has_eventid();
    eventid_ = eventid;
  } else {
    clear_has_eventid();
    eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowEventV3.EventId)
}

// required .Diadoc.Api.Proto.Timestamp Timestamp = 2;
inline bool DocflowEventV3::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocflowEventV3::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocflowEventV3::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocflowEventV3::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& DocflowEventV3::timestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowEventV3.Timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* DocflowEventV3::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowEventV3.Timestamp)
  return timestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* DocflowEventV3::release_timestamp() {
  clear_has_timestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void DocflowEventV3::set_allocated_timestamp(::Diadoc::Api::Proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowEventV3.Timestamp)
}

// required .Diadoc.Api.Proto.DocumentId DocumentId = 3;
inline bool DocflowEventV3::has_documentid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocflowEventV3::set_has_documentid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocflowEventV3::clear_has_documentid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocflowEventV3::clear_documentid() {
  if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
  clear_has_documentid();
}
inline const ::Diadoc::Api::Proto::DocumentId& DocflowEventV3::documentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowEventV3.DocumentId)
  return documentid_ != NULL ? *documentid_ : *default_instance_->documentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* DocflowEventV3::mutable_documentid() {
  set_has_documentid();
  if (documentid_ == NULL) documentid_ = new ::Diadoc::Api::Proto::DocumentId;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowEventV3.DocumentId)
  return documentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* DocflowEventV3::release_documentid() {
  clear_has_documentid();
  ::Diadoc::Api::Proto::DocumentId* temp = documentid_;
  documentid_ = NULL;
  return temp;
}
inline void DocflowEventV3::set_allocated_documentid(::Diadoc::Api::Proto::DocumentId* documentid) {
  delete documentid_;
  documentid_ = documentid;
  if (documentid) {
    set_has_documentid();
  } else {
    clear_has_documentid();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowEventV3.DocumentId)
}

// required bytes IndexKey = 4;
inline bool DocflowEventV3::has_indexkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocflowEventV3::set_has_indexkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocflowEventV3::clear_has_indexkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocflowEventV3::clear_indexkey() {
  if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_->clear();
  }
  clear_has_indexkey();
}
inline const ::std::string& DocflowEventV3::indexkey() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowEventV3.IndexKey)
  return *indexkey_;
}
inline void DocflowEventV3::set_indexkey(const ::std::string& value) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocflowEventV3.IndexKey)
}
inline void DocflowEventV3::set_indexkey(const char* value) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.DocflowEventV3.IndexKey)
}
inline void DocflowEventV3::set_indexkey(const void* value, size_t size) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.DocflowEventV3.IndexKey)
}
inline ::std::string* DocflowEventV3::mutable_indexkey() {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowEventV3.IndexKey)
  return indexkey_;
}
inline ::std::string* DocflowEventV3::release_indexkey() {
  clear_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = indexkey_;
    indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocflowEventV3::set_allocated_indexkey(::std::string* indexkey) {
  if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete indexkey_;
  }
  if (indexkey) {
    set_has_indexkey();
    indexkey_ = indexkey;
  } else {
    clear_has_indexkey();
    indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowEventV3.IndexKey)
}

// optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 Document = 5;
inline bool DocflowEventV3::has_document() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocflowEventV3::set_has_document() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocflowEventV3::clear_has_document() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocflowEventV3::clear_document() {
  if (document_ != NULL) document_->::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3::Clear();
  clear_has_document();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3& DocflowEventV3::document() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowEventV3.Document)
  return document_ != NULL ? *document_ : *default_instance_->document_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* DocflowEventV3::mutable_document() {
  set_has_document();
  if (document_ == NULL) document_ = new ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowEventV3.Document)
  return document_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* DocflowEventV3::release_document() {
  clear_has_document();
  ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* temp = document_;
  document_ = NULL;
  return temp;
}
inline void DocflowEventV3::set_allocated_document(::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* document) {
  delete document_;
  document_ = document;
  if (document) {
    set_has_document();
  } else {
    clear_has_document();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowEventV3.Document)
}

// optional string PreviousEventId = 6;
inline bool DocflowEventV3::has_previouseventid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DocflowEventV3::set_has_previouseventid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DocflowEventV3::clear_has_previouseventid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DocflowEventV3::clear_previouseventid() {
  if (previouseventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    previouseventid_->clear();
  }
  clear_has_previouseventid();
}
inline const ::std::string& DocflowEventV3::previouseventid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowEventV3.PreviousEventId)
  return *previouseventid_;
}
inline void DocflowEventV3::set_previouseventid(const ::std::string& value) {
  set_has_previouseventid();
  if (previouseventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    previouseventid_ = new ::std::string;
  }
  previouseventid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocflowEventV3.PreviousEventId)
}
inline void DocflowEventV3::set_previouseventid(const char* value) {
  set_has_previouseventid();
  if (previouseventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    previouseventid_ = new ::std::string;
  }
  previouseventid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.DocflowEventV3.PreviousEventId)
}
inline void DocflowEventV3::set_previouseventid(const char* value, size_t size) {
  set_has_previouseventid();
  if (previouseventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    previouseventid_ = new ::std::string;
  }
  previouseventid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.DocflowEventV3.PreviousEventId)
}
inline ::std::string* DocflowEventV3::mutable_previouseventid() {
  set_has_previouseventid();
  if (previouseventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    previouseventid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowEventV3.PreviousEventId)
  return previouseventid_;
}
inline ::std::string* DocflowEventV3::release_previouseventid() {
  clear_has_previouseventid();
  if (previouseventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = previouseventid_;
    previouseventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocflowEventV3::set_allocated_previouseventid(::std::string* previouseventid) {
  if (previouseventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete previouseventid_;
  }
  if (previouseventid) {
    set_has_previouseventid();
    previouseventid_ = previouseventid;
  } else {
    clear_has_previouseventid();
    previouseventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowEventV3.PreviousEventId)
}

// optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3 PreviousDocumentState = 7;
inline bool DocflowEventV3::has_previousdocumentstate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DocflowEventV3::set_has_previousdocumentstate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DocflowEventV3::clear_has_previousdocumentstate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DocflowEventV3::clear_previousdocumentstate() {
  if (previousdocumentstate_ != NULL) previousdocumentstate_->::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3::Clear();
  clear_has_previousdocumentstate();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3& DocflowEventV3::previousdocumentstate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowEventV3.PreviousDocumentState)
  return previousdocumentstate_ != NULL ? *previousdocumentstate_ : *default_instance_->previousdocumentstate_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* DocflowEventV3::mutable_previousdocumentstate() {
  set_has_previousdocumentstate();
  if (previousdocumentstate_ == NULL) previousdocumentstate_ = new ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowEventV3.PreviousDocumentState)
  return previousdocumentstate_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* DocflowEventV3::release_previousdocumentstate() {
  clear_has_previousdocumentstate();
  ::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* temp = previousdocumentstate_;
  previousdocumentstate_ = NULL;
  return temp;
}
inline void DocflowEventV3::set_allocated_previousdocumentstate(::Diadoc::Api::Proto::Docflow::DocumentWithDocflowV3* previousdocumentstate) {
  delete previousdocumentstate_;
  previousdocumentstate_ = previousdocumentstate;
  if (previousdocumentstate) {
    set_has_previousdocumentstate();
  } else {
    clear_has_previousdocumentstate();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowEventV3.PreviousDocumentState)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Docflow_2fDocflowApiV3_2eproto__INCLUDED
