// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/DocflowV3.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Docflow/DocflowV3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

namespace {

const ::google::protobuf::Descriptor* DocflowV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocflowV3_reflection_ = NULL;
const ::google::protobuf::Descriptor* SenderTitleDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SenderTitleDocflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfirmationDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfirmationDocflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignatureRejectionDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignatureRejectionDocflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParticipantResponseDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParticipantResponseDocflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* AmendmentRequestDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AmendmentRequestDocflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* RevocationDocflowV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RevocationDocflowV3_reflection_ = NULL;
const ::google::protobuf::Descriptor* RevocationRequestDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RevocationRequestDocflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* RevocationResponseDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RevocationResponseDocflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiptDocflowV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiptDocflowV3_reflection_ = NULL;
const ::google::protobuf::Descriptor* OuterDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OuterDocflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* OuterDocflowEntities_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OuterDocflowEntities_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusEntity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusEntity_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto() {
  protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Docflow/DocflowV3.proto");
  GOOGLE_CHECK(file != NULL);
  DocflowV3_descriptor_ = file->message_type(0);
  static const int DocflowV3_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowV3, sendertitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowV3, confirmation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowV3, proxyresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowV3, recipientreceipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowV3, recipientresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowV3, amendmentrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowV3, revocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowV3, senderreceipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowV3, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowV3, resolutionentities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowV3, outerdocflows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowV3, outerdocflowentities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowV3, docflowstatus_),
  };
  DocflowV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocflowV3_descriptor_,
      DocflowV3::default_instance_,
      DocflowV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocflowV3));
  SenderTitleDocflow_descriptor_ = file->message_type(1);
  static const int SenderTitleDocflow_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderTitleDocflow, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderTitleDocflow, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderTitleDocflow, sentat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderTitleDocflow, deliveredat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderTitleDocflow, roamingnotification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderTitleDocflow, sendersignaturestatus_),
  };
  SenderTitleDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SenderTitleDocflow_descriptor_,
      SenderTitleDocflow::default_instance_,
      SenderTitleDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderTitleDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderTitleDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SenderTitleDocflow));
  ConfirmationDocflow_descriptor_ = file->message_type(2);
  static const int ConfirmationDocflow_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmationDocflow, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmationDocflow, confirmationattachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmationDocflow, confirmedat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmationDocflow, receipt_),
  };
  ConfirmationDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfirmationDocflow_descriptor_,
      ConfirmationDocflow::default_instance_,
      ConfirmationDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmationDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmationDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfirmationDocflow));
  SignatureRejectionDocflow_descriptor_ = file->message_type(3);
  static const int SignatureRejectionDocflow_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureRejectionDocflow, signaturerejection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureRejectionDocflow, isformal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureRejectionDocflow, deliveredat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureRejectionDocflow, plaintext_),
  };
  SignatureRejectionDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignatureRejectionDocflow_descriptor_,
      SignatureRejectionDocflow::default_instance_,
      SignatureRejectionDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureRejectionDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureRejectionDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignatureRejectionDocflow));
  ParticipantResponseDocflow_descriptor_ = file->message_type(4);
  static const int ParticipantResponseDocflow_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantResponseDocflow, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantResponseDocflow, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantResponseDocflow, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantResponseDocflow, rejection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantResponseDocflow, sentat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantResponseDocflow, deliveredat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantResponseDocflow, responsestatus_),
  };
  ParticipantResponseDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParticipantResponseDocflow_descriptor_,
      ParticipantResponseDocflow::default_instance_,
      ParticipantResponseDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantResponseDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipantResponseDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParticipantResponseDocflow));
  AmendmentRequestDocflow_descriptor_ = file->message_type(5);
  static const int AmendmentRequestDocflow_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendmentRequestDocflow, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendmentRequestDocflow, amendmentrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendmentRequestDocflow, sentat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendmentRequestDocflow, deliveredat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendmentRequestDocflow, receipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendmentRequestDocflow, amendmentflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendmentRequestDocflow, plaintext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendmentRequestDocflow, confirmationdocflow_),
  };
  AmendmentRequestDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AmendmentRequestDocflow_descriptor_,
      AmendmentRequestDocflow::default_instance_,
      AmendmentRequestDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendmentRequestDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendmentRequestDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AmendmentRequestDocflow));
  RevocationDocflowV3_descriptor_ = file->message_type(6);
  static const int RevocationDocflowV3_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationDocflowV3, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationDocflowV3, revocationrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationDocflowV3, revocationresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationDocflowV3, initiatorboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationDocflowV3, revocationstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationDocflowV3, resolutionentities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationDocflowV3, outerdocflowentities_),
  };
  RevocationDocflowV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RevocationDocflowV3_descriptor_,
      RevocationDocflowV3::default_instance_,
      RevocationDocflowV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationDocflowV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationDocflowV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RevocationDocflowV3));
  RevocationRequestDocflow_descriptor_ = file->message_type(7);
  static const int RevocationRequestDocflow_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestDocflow, revocationrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestDocflow, sentat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestDocflow, deliveredat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestDocflow, roamingnotification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestDocflow, plaintext_),
  };
  RevocationRequestDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RevocationRequestDocflow_descriptor_,
      RevocationRequestDocflow::default_instance_,
      RevocationRequestDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RevocationRequestDocflow));
  RevocationResponseDocflow_descriptor_ = file->message_type(8);
  static const int RevocationResponseDocflow_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationResponseDocflow, recipientsignature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationResponseDocflow, signaturerejection_),
  };
  RevocationResponseDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RevocationResponseDocflow_descriptor_,
      RevocationResponseDocflow::default_instance_,
      RevocationResponseDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationResponseDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationResponseDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RevocationResponseDocflow));
  ReceiptDocflowV3_descriptor_ = file->message_type(9);
  static const int ReceiptDocflowV3_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptDocflowV3, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptDocflowV3, receiptattachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptDocflowV3, sentat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptDocflowV3, deliveredat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptDocflowV3, confirmation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptDocflowV3, status_),
  };
  ReceiptDocflowV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiptDocflowV3_descriptor_,
      ReceiptDocflowV3::default_instance_,
      ReceiptDocflowV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptDocflowV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptDocflowV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiptDocflowV3));
  OuterDocflow_descriptor_ = file->message_type(10);
  static const int OuterDocflow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterDocflow, docflownamedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterDocflow, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterDocflow, outerdocflowentityid_),
  };
  OuterDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OuterDocflow_descriptor_,
      OuterDocflow::default_instance_,
      OuterDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OuterDocflow));
  OuterDocflowEntities_descriptor_ = file->message_type(11);
  static const int OuterDocflowEntities_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterDocflowEntities, docflownamedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterDocflowEntities, docflowfriendlyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterDocflowEntities, statusentities_),
  };
  OuterDocflowEntities_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OuterDocflowEntities_descriptor_,
      OuterDocflowEntities::default_instance_,
      OuterDocflowEntities_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterDocflowEntities, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OuterDocflowEntities, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OuterDocflowEntities));
  StatusEntity_descriptor_ = file->message_type(12);
  static const int StatusEntity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusEntity, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusEntity, status_),
  };
  StatusEntity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusEntity_descriptor_,
      StatusEntity::default_instance_,
      StatusEntity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusEntity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusEntity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusEntity));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Docflow_2fDocflowV3_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocflowV3_descriptor_, &DocflowV3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SenderTitleDocflow_descriptor_, &SenderTitleDocflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfirmationDocflow_descriptor_, &ConfirmationDocflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignatureRejectionDocflow_descriptor_, &SignatureRejectionDocflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParticipantResponseDocflow_descriptor_, &ParticipantResponseDocflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AmendmentRequestDocflow_descriptor_, &AmendmentRequestDocflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RevocationDocflowV3_descriptor_, &RevocationDocflowV3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RevocationRequestDocflow_descriptor_, &RevocationRequestDocflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RevocationResponseDocflow_descriptor_, &RevocationResponseDocflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiptDocflowV3_descriptor_, &ReceiptDocflowV3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OuterDocflow_descriptor_, &OuterDocflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OuterDocflowEntities_descriptor_, &OuterDocflowEntities::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusEntity_descriptor_, &StatusEntity::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto() {
  delete DocflowV3::default_instance_;
  delete DocflowV3_reflection_;
  delete SenderTitleDocflow::default_instance_;
  delete SenderTitleDocflow_reflection_;
  delete ConfirmationDocflow::default_instance_;
  delete ConfirmationDocflow_reflection_;
  delete SignatureRejectionDocflow::default_instance_;
  delete SignatureRejectionDocflow_reflection_;
  delete ParticipantResponseDocflow::default_instance_;
  delete ParticipantResponseDocflow_reflection_;
  delete AmendmentRequestDocflow::default_instance_;
  delete AmendmentRequestDocflow_reflection_;
  delete RevocationDocflowV3::default_instance_;
  delete RevocationDocflowV3_reflection_;
  delete RevocationRequestDocflow::default_instance_;
  delete RevocationRequestDocflow_reflection_;
  delete RevocationResponseDocflow::default_instance_;
  delete RevocationResponseDocflow_reflection_;
  delete ReceiptDocflowV3::default_instance_;
  delete ReceiptDocflowV3_reflection_;
  delete OuterDocflow::default_instance_;
  delete OuterDocflow_reflection_;
  delete OuterDocflowEntities::default_instance_;
  delete OuterDocflowEntities_reflection_;
  delete StatusEntity::default_instance_;
  delete StatusEntity_reflection_;
}

void protobuf_AddDesc_Docflow_2fDocflowV3_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::Diadoc::Api::Proto::Documents::protobuf_AddDesc_Documents_2fDocument_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fAttachmentV3_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fRoamingNotification_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_OuterDocflowStatus_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_DocflowStatusV3_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027Docflow/DocflowV3.proto\022\030Diadoc.Api.Pr"
    "oto.Docflow\032\017Timestamp.proto\032\030Documents/"
    "Document.proto\032\032Docflow/AttachmentV3.pro"
    "to\032!Docflow/RoamingNotification.proto\032!D"
    "ocflow/ResolutionDocflowV3.proto\032\030OuterD"
    "ocflowStatus.proto\032\025DocflowStatusV3.prot"
    "o\"\240\007\n\tDocflowV3\022A\n\013SenderTitle\030\001 \002(\0132,.D"
    "iadoc.Api.Proto.Docflow.SenderTitleDocfl"
    "ow\022C\n\014Confirmation\030\002 \001(\0132-.Diadoc.Api.Pr"
    "oto.Docflow.ConfirmationDocflow\022K\n\rProxy"
    "Response\030\013 \001(\01324.Diadoc.Api.Proto.Docflo"
    "w.ParticipantResponseDocflow\022D\n\020Recipien"
    "tReceipt\030\004 \001(\0132*.Diadoc.Api.Proto.Docflo"
    "w.ReceiptDocflowV3\022O\n\021RecipientResponse\030"
    "\005 \001(\01324.Diadoc.Api.Proto.Docflow.Partici"
    "pantResponseDocflow\022K\n\020AmendmentRequest\030"
    "\006 \001(\01321.Diadoc.Api.Proto.Docflow.Amendme"
    "ntRequestDocflow\022A\n\nRevocation\030\007 \001(\0132-.D"
    "iadoc.Api.Proto.Docflow.RevocationDocflo"
    "wV3\022A\n\rSenderReceipt\030\010 \001(\0132*.Diadoc.Api."
    "Proto.Docflow.ReceiptDocflowV3\022A\n\nResolu"
    "tion\030\t \001(\0132-.Diadoc.Api.Proto.Docflow.Re"
    "solutionDocflowV3\022J\n\022ResolutionEntities\030"
    "\n \001(\0132..Diadoc.Api.Proto.Docflow.Resolut"
    "ionEntitiesV3\022=\n\rOuterDocflows\030\014 \003(\0132&.D"
    "iadoc.Api.Proto.Docflow.OuterDocflow\022L\n\024"
    "OuterDocflowEntities\030\r \003(\0132..Diadoc.Api."
    "Proto.Docflow.OuterDocflowEntities\0228\n\rDo"
    "cflowStatus\030\016 \002(\0132!.Diadoc.Api.Proto.Doc"
    "flowStatusV3\"\347\002\n\022SenderTitleDocflow\022\022\n\nI"
    "sFinished\030\001 \002(\010\022@\n\nAttachment\030\002 \002(\0132,.Di"
    "adoc.Api.Proto.Docflow.SignedAttachmentV"
    "3\022+\n\006SentAt\030\003 \001(\0132\033.Diadoc.Api.Proto.Tim"
    "estamp\0220\n\013DeliveredAt\030\004 \001(\0132\033.Diadoc.Api"
    ".Proto.Timestamp\022J\n\023RoamingNotification\030"
    "\005 \001(\0132-.Diadoc.Api.Proto.Docflow.Roaming"
    "Notification\022P\n\025SenderSignatureStatus\030\006 "
    "\002(\01621.Diadoc.Api.Proto.Documents.SenderS"
    "ignatureStatus\"\346\001\n\023ConfirmationDocflow\022\022"
    "\n\nIsFinished\030\001 \002(\010\022L\n\026ConfirmationAttach"
    "ment\030\002 \001(\0132,.Diadoc.Api.Proto.Docflow.Si"
    "gnedAttachmentV3\0220\n\013ConfirmedAt\030\003 \001(\0132\033."
    "Diadoc.Api.Proto.Timestamp\022;\n\007Receipt\030\004 "
    "\001(\0132*.Diadoc.Api.Proto.Docflow.ReceiptDo"
    "cflowV3\"\274\001\n\031SignatureRejectionDocflow\022H\n"
    "\022SignatureRejection\030\001 \002(\0132,.Diadoc.Api.P"
    "roto.Docflow.SignedAttachmentV3\022\020\n\010IsFor"
    "mal\030\002 \002(\010\0220\n\013DeliveredAt\030\003 \001(\0132\033.Diadoc."
    "Api.Proto.Timestamp\022\021\n\tPlainText\030\004 \001(\t\"\233"
    "\003\n\032ParticipantResponseDocflow\022\022\n\nIsFinis"
    "hed\030\001 \002(\010\0228\n\tSignature\030\002 \001(\0132%.Diadoc.Ap"
    "i.Proto.Docflow.SignatureV3\022;\n\005Title\030\003 \001"
    "(\0132,.Diadoc.Api.Proto.Docflow.SignedAtta"
    "chmentV3\022F\n\tRejection\030\004 \001(\01323.Diadoc.Api"
    ".Proto.Docflow.SignatureRejectionDocflow"
    "\022+\n\006SentAt\030\005 \001(\0132\033.Diadoc.Api.Proto.Time"
    "stamp\0220\n\013DeliveredAt\030\006 \001(\0132\033.Diadoc.Api."
    "Proto.Timestamp\022K\n\016ResponseStatus\030\007 \002(\0162"
    "3.Diadoc.Api.Proto.Documents.RecipientRe"
    "sponseStatus\"\210\003\n\027AmendmentRequestDocflow"
    "\022\022\n\nIsFinished\030\001 \002(\010\022F\n\020AmendmentRequest"
    "\030\002 \001(\0132,.Diadoc.Api.Proto.Docflow.Signed"
    "AttachmentV3\022+\n\006SentAt\030\003 \001(\0132\033.Diadoc.Ap"
    "i.Proto.Timestamp\0220\n\013DeliveredAt\030\004 \001(\0132\033"
    ".Diadoc.Api.Proto.Timestamp\022;\n\007Receipt\030\005"
    " \001(\0132*.Diadoc.Api.Proto.Docflow.ReceiptD"
    "ocflowV3\022\026\n\016AmendmentFlags\030\006 \002(\005\022\021\n\tPlai"
    "nText\030\007 \001(\t\022J\n\023ConfirmationDocflow\030\010 \001(\013"
    "2-.Diadoc.Api.Proto.Docflow.Confirmation"
    "Docflow\"\303\003\n\023RevocationDocflowV3\022\022\n\nIsFin"
    "ished\030\001 \002(\010\022M\n\021RevocationRequest\030\002 \002(\01322"
    ".Diadoc.Api.Proto.Docflow.RevocationRequ"
    "estDocflow\022O\n\022RevocationResponse\030\003 \001(\01323"
    ".Diadoc.Api.Proto.Docflow.RevocationResp"
    "onseDocflow\022\026\n\016InitiatorBoxId\030\004 \002(\t\022F\n\020R"
    "evocationStatus\030\005 \002(\0162,.Diadoc.Api.Proto"
    ".Documents.RevocationStatus\022J\n\022Resolutio"
    "nEntities\030\006 \001(\0132..Diadoc.Api.Proto.Docfl"
    "ow.ResolutionEntitiesV3\022L\n\024OuterDocflowE"
    "ntities\030\007 \003(\0132..Diadoc.Api.Proto.Docflow"
    ".OuterDocflowEntities\"\241\002\n\030RevocationRequ"
    "estDocflow\022G\n\021RevocationRequest\030\001 \002(\0132,."
    "Diadoc.Api.Proto.Docflow.SignedAttachmen"
    "tV3\022+\n\006SentAt\030\002 \001(\0132\033.Diadoc.Api.Proto.T"
    "imestamp\0220\n\013DeliveredAt\030\003 \001(\0132\033.Diadoc.A"
    "pi.Proto.Timestamp\022J\n\023RoamingNotificatio"
    "n\030\004 \001(\0132-.Diadoc.Api.Proto.Docflow.Roami"
    "ngNotification\022\021\n\tPlainText\030\005 \001(\t\"\257\001\n\031Re"
    "vocationResponseDocflow\022A\n\022RecipientSign"
    "ature\030\001 \001(\0132%.Diadoc.Api.Proto.Docflow.S"
    "ignatureV3\022O\n\022SignatureRejection\030\002 \001(\01323"
    ".Diadoc.Api.Proto.Docflow.SignatureRejec"
    "tionDocflow\"\325\002\n\020ReceiptDocflowV3\022\022\n\nIsFi"
    "nished\030\001 \002(\010\022G\n\021ReceiptAttachment\030\002 \001(\0132"
    ",.Diadoc.Api.Proto.Docflow.SignedAttachm"
    "entV3\022+\n\006SentAt\030\003 \001(\0132\033.Diadoc.Api.Proto"
    ".Timestamp\0220\n\013DeliveredAt\030\004 \001(\0132\033.Diadoc"
    ".Api.Proto.Timestamp\022C\n\014Confirmation\030\005 \001"
    "(\0132-.Diadoc.Api.Proto.Docflow.Confirmati"
    "onDocflow\022@\n\006Status\030\006 \002(\01620.Diadoc.Api.P"
    "roto.Documents.GeneralReceiptStatus\"\\\n\014O"
    "uterDocflow\022\026\n\016DocflowNamedId\030\001 \002(\t\022\026\n\016P"
    "arentEntityId\030\002 \002(\t\022\034\n\024OuterDocflowEntit"
    "yId\030\003 \002(\t\"\213\001\n\024OuterDocflowEntities\022\026\n\016Do"
    "cflowNamedId\030\001 \002(\t\022\033\n\023DocflowFriendlyNam"
    "e\030\002 \002(\t\022>\n\016StatusEntities\030\003 \003(\0132&.Diadoc"
    ".Api.Proto.Docflow.StatusEntity\"z\n\014Statu"
    "sEntity\022@\n\nAttachment\030\001 \002(\0132,.Diadoc.Api"
    ".Proto.Docflow.SignedAttachmentV3\022(\n\006Sta"
    "tus\030\002 \002(\0132\030.Diadoc.Api.Proto.Status", 4395);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Docflow/DocflowV3.proto", &protobuf_RegisterTypes);
  DocflowV3::default_instance_ = new DocflowV3();
  SenderTitleDocflow::default_instance_ = new SenderTitleDocflow();
  ConfirmationDocflow::default_instance_ = new ConfirmationDocflow();
  SignatureRejectionDocflow::default_instance_ = new SignatureRejectionDocflow();
  ParticipantResponseDocflow::default_instance_ = new ParticipantResponseDocflow();
  AmendmentRequestDocflow::default_instance_ = new AmendmentRequestDocflow();
  RevocationDocflowV3::default_instance_ = new RevocationDocflowV3();
  RevocationRequestDocflow::default_instance_ = new RevocationRequestDocflow();
  RevocationResponseDocflow::default_instance_ = new RevocationResponseDocflow();
  ReceiptDocflowV3::default_instance_ = new ReceiptDocflowV3();
  OuterDocflow::default_instance_ = new OuterDocflow();
  OuterDocflowEntities::default_instance_ = new OuterDocflowEntities();
  StatusEntity::default_instance_ = new StatusEntity();
  DocflowV3::default_instance_->InitAsDefaultInstance();
  SenderTitleDocflow::default_instance_->InitAsDefaultInstance();
  ConfirmationDocflow::default_instance_->InitAsDefaultInstance();
  SignatureRejectionDocflow::default_instance_->InitAsDefaultInstance();
  ParticipantResponseDocflow::default_instance_->InitAsDefaultInstance();
  AmendmentRequestDocflow::default_instance_->InitAsDefaultInstance();
  RevocationDocflowV3::default_instance_->InitAsDefaultInstance();
  RevocationRequestDocflow::default_instance_->InitAsDefaultInstance();
  RevocationResponseDocflow::default_instance_->InitAsDefaultInstance();
  ReceiptDocflowV3::default_instance_->InitAsDefaultInstance();
  OuterDocflow::default_instance_->InitAsDefaultInstance();
  OuterDocflowEntities::default_instance_->InitAsDefaultInstance();
  StatusEntity::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Docflow_2fDocflowV3_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Docflow_2fDocflowV3_2eproto {
  StaticDescriptorInitializer_Docflow_2fDocflowV3_2eproto() {
    protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  }
} static_descriptor_initializer_Docflow_2fDocflowV3_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DocflowV3::kSenderTitleFieldNumber;
const int DocflowV3::kConfirmationFieldNumber;
const int DocflowV3::kProxyResponseFieldNumber;
const int DocflowV3::kRecipientReceiptFieldNumber;
const int DocflowV3::kRecipientResponseFieldNumber;
const int DocflowV3::kAmendmentRequestFieldNumber;
const int DocflowV3::kRevocationFieldNumber;
const int DocflowV3::kSenderReceiptFieldNumber;
const int DocflowV3::kResolutionFieldNumber;
const int DocflowV3::kResolutionEntitiesFieldNumber;
const int DocflowV3::kOuterDocflowsFieldNumber;
const int DocflowV3::kOuterDocflowEntitiesFieldNumber;
const int DocflowV3::kDocflowStatusFieldNumber;
#endif  // !_MSC_VER

DocflowV3::DocflowV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.DocflowV3)
}

void DocflowV3::InitAsDefaultInstance() {
  sendertitle_ = const_cast< ::Diadoc::Api::Proto::Docflow::SenderTitleDocflow*>(&::Diadoc::Api::Proto::Docflow::SenderTitleDocflow::default_instance());
  confirmation_ = const_cast< ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow*>(&::Diadoc::Api::Proto::Docflow::ConfirmationDocflow::default_instance());
  proxyresponse_ = const_cast< ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow*>(&::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow::default_instance());
  recipientreceipt_ = const_cast< ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3*>(&::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::default_instance());
  recipientresponse_ = const_cast< ::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow*>(&::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow::default_instance());
  amendmentrequest_ = const_cast< ::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow*>(&::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow::default_instance());
  revocation_ = const_cast< ::Diadoc::Api::Proto::Docflow::RevocationDocflowV3*>(&::Diadoc::Api::Proto::Docflow::RevocationDocflowV3::default_instance());
  senderreceipt_ = const_cast< ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3*>(&::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::default_instance());
  resolution_ = const_cast< ::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3*>(&::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3::default_instance());
  resolutionentities_ = const_cast< ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3*>(&::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3::default_instance());
  docflowstatus_ = const_cast< ::Diadoc::Api::Proto::DocflowStatusV3*>(&::Diadoc::Api::Proto::DocflowStatusV3::default_instance());
}

DocflowV3::DocflowV3(const DocflowV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.DocflowV3)
}

void DocflowV3::SharedCtor() {
  _cached_size_ = 0;
  sendertitle_ = NULL;
  confirmation_ = NULL;
  proxyresponse_ = NULL;
  recipientreceipt_ = NULL;
  recipientresponse_ = NULL;
  amendmentrequest_ = NULL;
  revocation_ = NULL;
  senderreceipt_ = NULL;
  resolution_ = NULL;
  resolutionentities_ = NULL;
  docflowstatus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocflowV3::~DocflowV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.DocflowV3)
  SharedDtor();
}

void DocflowV3::SharedDtor() {
  if (this != default_instance_) {
    delete sendertitle_;
    delete confirmation_;
    delete proxyresponse_;
    delete recipientreceipt_;
    delete recipientresponse_;
    delete amendmentrequest_;
    delete revocation_;
    delete senderreceipt_;
    delete resolution_;
    delete resolutionentities_;
    delete docflowstatus_;
  }
}

void DocflowV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocflowV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocflowV3_descriptor_;
}

const DocflowV3& DocflowV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  return *default_instance_;
}

DocflowV3* DocflowV3::default_instance_ = NULL;

DocflowV3* DocflowV3::New() const {
  return new DocflowV3;
}

void DocflowV3::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_sendertitle()) {
      if (sendertitle_ != NULL) sendertitle_->::Diadoc::Api::Proto::Docflow::SenderTitleDocflow::Clear();
    }
    if (has_confirmation()) {
      if (confirmation_ != NULL) confirmation_->::Diadoc::Api::Proto::Docflow::ConfirmationDocflow::Clear();
    }
    if (has_proxyresponse()) {
      if (proxyresponse_ != NULL) proxyresponse_->::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow::Clear();
    }
    if (has_recipientreceipt()) {
      if (recipientreceipt_ != NULL) recipientreceipt_->::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::Clear();
    }
    if (has_recipientresponse()) {
      if (recipientresponse_ != NULL) recipientresponse_->::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow::Clear();
    }
    if (has_amendmentrequest()) {
      if (amendmentrequest_ != NULL) amendmentrequest_->::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow::Clear();
    }
    if (has_revocation()) {
      if (revocation_ != NULL) revocation_->::Diadoc::Api::Proto::Docflow::RevocationDocflowV3::Clear();
    }
    if (has_senderreceipt()) {
      if (senderreceipt_ != NULL) senderreceipt_->::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 4864) {
    if (has_resolution()) {
      if (resolution_ != NULL) resolution_->::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3::Clear();
    }
    if (has_resolutionentities()) {
      if (resolutionentities_ != NULL) resolutionentities_->::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3::Clear();
    }
    if (has_docflowstatus()) {
      if (docflowstatus_ != NULL) docflowstatus_->::Diadoc::Api::Proto::DocflowStatusV3::Clear();
    }
  }
  outerdocflows_.Clear();
  outerdocflowentities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocflowV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.DocflowV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Docflow.SenderTitleDocflow SenderTitle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendertitle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Confirmation;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow Confirmation = 2;
      case 2: {
        if (tag == 18) {
         parse_Confirmation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RecipientReceipt;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 RecipientReceipt = 4;
      case 4: {
        if (tag == 34) {
         parse_RecipientReceipt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recipientreceipt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RecipientResponse;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow RecipientResponse = 5;
      case 5: {
        if (tag == 42) {
         parse_RecipientResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recipientresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_AmendmentRequest;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow AmendmentRequest = 6;
      case 6: {
        if (tag == 50) {
         parse_AmendmentRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_amendmentrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Revocation;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.RevocationDocflowV3 Revocation = 7;
      case 7: {
        if (tag == 58) {
         parse_Revocation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revocation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_SenderReceipt;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 SenderReceipt = 8;
      case 8: {
        if (tag == 66) {
         parse_SenderReceipt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_senderreceipt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Resolution;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ResolutionDocflowV3 Resolution = 9;
      case 9: {
        if (tag == 74) {
         parse_Resolution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolution()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ResolutionEntities;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3 ResolutionEntities = 10;
      case 10: {
        if (tag == 82) {
         parse_ResolutionEntities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolutionentities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ProxyResponse;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow ProxyResponse = 11;
      case 11: {
        if (tag == 90) {
         parse_ProxyResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proxyresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_OuterDocflows;
        break;
      }

      // repeated .Diadoc.Api.Proto.Docflow.OuterDocflow OuterDocflows = 12;
      case 12: {
        if (tag == 98) {
         parse_OuterDocflows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outerdocflows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_OuterDocflows;
        if (input->ExpectTag(106)) goto parse_OuterDocflowEntities;
        break;
      }

      // repeated .Diadoc.Api.Proto.Docflow.OuterDocflowEntities OuterDocflowEntities = 13;
      case 13: {
        if (tag == 106) {
         parse_OuterDocflowEntities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outerdocflowentities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_OuterDocflowEntities;
        if (input->ExpectTag(114)) goto parse_DocflowStatus;
        break;
      }

      // required .Diadoc.Api.Proto.DocflowStatusV3 DocflowStatus = 14;
      case 14: {
        if (tag == 114) {
         parse_DocflowStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_docflowstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.DocflowV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.DocflowV3)
  return false;
#undef DO_
}

void DocflowV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.DocflowV3)
  // required .Diadoc.Api.Proto.Docflow.SenderTitleDocflow SenderTitle = 1;
  if (has_sendertitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sendertitle(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow Confirmation = 2;
  if (has_confirmation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->confirmation(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 RecipientReceipt = 4;
  if (has_recipientreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recipientreceipt(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow RecipientResponse = 5;
  if (has_recipientresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->recipientresponse(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow AmendmentRequest = 6;
  if (has_amendmentrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->amendmentrequest(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.RevocationDocflowV3 Revocation = 7;
  if (has_revocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->revocation(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 SenderReceipt = 8;
  if (has_senderreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->senderreceipt(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ResolutionDocflowV3 Resolution = 9;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->resolution(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3 ResolutionEntities = 10;
  if (has_resolutionentities()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->resolutionentities(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow ProxyResponse = 11;
  if (has_proxyresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->proxyresponse(), output);
  }

  // repeated .Diadoc.Api.Proto.Docflow.OuterDocflow OuterDocflows = 12;
  for (int i = 0; i < this->outerdocflows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->outerdocflows(i), output);
  }

  // repeated .Diadoc.Api.Proto.Docflow.OuterDocflowEntities OuterDocflowEntities = 13;
  for (int i = 0; i < this->outerdocflowentities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->outerdocflowentities(i), output);
  }

  // required .Diadoc.Api.Proto.DocflowStatusV3 DocflowStatus = 14;
  if (has_docflowstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->docflowstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.DocflowV3)
}

::google::protobuf::uint8* DocflowV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.DocflowV3)
  // required .Diadoc.Api.Proto.Docflow.SenderTitleDocflow SenderTitle = 1;
  if (has_sendertitle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sendertitle(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow Confirmation = 2;
  if (has_confirmation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->confirmation(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 RecipientReceipt = 4;
  if (has_recipientreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recipientreceipt(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow RecipientResponse = 5;
  if (has_recipientresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->recipientresponse(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow AmendmentRequest = 6;
  if (has_amendmentrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->amendmentrequest(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.RevocationDocflowV3 Revocation = 7;
  if (has_revocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->revocation(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 SenderReceipt = 8;
  if (has_senderreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->senderreceipt(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ResolutionDocflowV3 Resolution = 9;
  if (has_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->resolution(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3 ResolutionEntities = 10;
  if (has_resolutionentities()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->resolutionentities(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow ProxyResponse = 11;
  if (has_proxyresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->proxyresponse(), target);
  }

  // repeated .Diadoc.Api.Proto.Docflow.OuterDocflow OuterDocflows = 12;
  for (int i = 0; i < this->outerdocflows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->outerdocflows(i), target);
  }

  // repeated .Diadoc.Api.Proto.Docflow.OuterDocflowEntities OuterDocflowEntities = 13;
  for (int i = 0; i < this->outerdocflowentities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->outerdocflowentities(i), target);
  }

  // required .Diadoc.Api.Proto.DocflowStatusV3 DocflowStatus = 14;
  if (has_docflowstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->docflowstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.DocflowV3)
  return target;
}

int DocflowV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Docflow.SenderTitleDocflow SenderTitle = 1;
    if (has_sendertitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendertitle());
    }

    // optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow Confirmation = 2;
    if (has_confirmation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmation());
    }

    // optional .Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow ProxyResponse = 11;
    if (has_proxyresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proxyresponse());
    }

    // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 RecipientReceipt = 4;
    if (has_recipientreceipt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recipientreceipt());
    }

    // optional .Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow RecipientResponse = 5;
    if (has_recipientresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recipientresponse());
    }

    // optional .Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow AmendmentRequest = 6;
    if (has_amendmentrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->amendmentrequest());
    }

    // optional .Diadoc.Api.Proto.Docflow.RevocationDocflowV3 Revocation = 7;
    if (has_revocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revocation());
    }

    // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 SenderReceipt = 8;
    if (has_senderreceipt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->senderreceipt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Diadoc.Api.Proto.Docflow.ResolutionDocflowV3 Resolution = 9;
    if (has_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resolution());
    }

    // optional .Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3 ResolutionEntities = 10;
    if (has_resolutionentities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resolutionentities());
    }

    // required .Diadoc.Api.Proto.DocflowStatusV3 DocflowStatus = 14;
    if (has_docflowstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docflowstatus());
    }

  }
  // repeated .Diadoc.Api.Proto.Docflow.OuterDocflow OuterDocflows = 12;
  total_size += 1 * this->outerdocflows_size();
  for (int i = 0; i < this->outerdocflows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outerdocflows(i));
  }

  // repeated .Diadoc.Api.Proto.Docflow.OuterDocflowEntities OuterDocflowEntities = 13;
  total_size += 1 * this->outerdocflowentities_size();
  for (int i = 0; i < this->outerdocflowentities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outerdocflowentities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocflowV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocflowV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocflowV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocflowV3::MergeFrom(const DocflowV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  outerdocflows_.MergeFrom(from.outerdocflows_);
  outerdocflowentities_.MergeFrom(from.outerdocflowentities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendertitle()) {
      mutable_sendertitle()->::Diadoc::Api::Proto::Docflow::SenderTitleDocflow::MergeFrom(from.sendertitle());
    }
    if (from.has_confirmation()) {
      mutable_confirmation()->::Diadoc::Api::Proto::Docflow::ConfirmationDocflow::MergeFrom(from.confirmation());
    }
    if (from.has_proxyresponse()) {
      mutable_proxyresponse()->::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow::MergeFrom(from.proxyresponse());
    }
    if (from.has_recipientreceipt()) {
      mutable_recipientreceipt()->::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::MergeFrom(from.recipientreceipt());
    }
    if (from.has_recipientresponse()) {
      mutable_recipientresponse()->::Diadoc::Api::Proto::Docflow::ParticipantResponseDocflow::MergeFrom(from.recipientresponse());
    }
    if (from.has_amendmentrequest()) {
      mutable_amendmentrequest()->::Diadoc::Api::Proto::Docflow::AmendmentRequestDocflow::MergeFrom(from.amendmentrequest());
    }
    if (from.has_revocation()) {
      mutable_revocation()->::Diadoc::Api::Proto::Docflow::RevocationDocflowV3::MergeFrom(from.revocation());
    }
    if (from.has_senderreceipt()) {
      mutable_senderreceipt()->::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::MergeFrom(from.senderreceipt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_resolution()) {
      mutable_resolution()->::Diadoc::Api::Proto::Docflow::ResolutionDocflowV3::MergeFrom(from.resolution());
    }
    if (from.has_resolutionentities()) {
      mutable_resolutionentities()->::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3::MergeFrom(from.resolutionentities());
    }
    if (from.has_docflowstatus()) {
      mutable_docflowstatus()->::Diadoc::Api::Proto::DocflowStatusV3::MergeFrom(from.docflowstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocflowV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocflowV3::CopyFrom(const DocflowV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocflowV3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001001) != 0x00001001) return false;

  if (has_sendertitle()) {
    if (!this->sendertitle().IsInitialized()) return false;
  }
  if (has_confirmation()) {
    if (!this->confirmation().IsInitialized()) return false;
  }
  if (has_proxyresponse()) {
    if (!this->proxyresponse().IsInitialized()) return false;
  }
  if (has_recipientreceipt()) {
    if (!this->recipientreceipt().IsInitialized()) return false;
  }
  if (has_recipientresponse()) {
    if (!this->recipientresponse().IsInitialized()) return false;
  }
  if (has_amendmentrequest()) {
    if (!this->amendmentrequest().IsInitialized()) return false;
  }
  if (has_revocation()) {
    if (!this->revocation().IsInitialized()) return false;
  }
  if (has_senderreceipt()) {
    if (!this->senderreceipt().IsInitialized()) return false;
  }
  if (has_resolution()) {
    if (!this->resolution().IsInitialized()) return false;
  }
  if (has_resolutionentities()) {
    if (!this->resolutionentities().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->outerdocflows())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->outerdocflowentities())) return false;
  if (has_docflowstatus()) {
    if (!this->docflowstatus().IsInitialized()) return false;
  }
  return true;
}

void DocflowV3::Swap(DocflowV3* other) {
  if (other != this) {
    std::swap(sendertitle_, other->sendertitle_);
    std::swap(confirmation_, other->confirmation_);
    std::swap(proxyresponse_, other->proxyresponse_);
    std::swap(recipientreceipt_, other->recipientreceipt_);
    std::swap(recipientresponse_, other->recipientresponse_);
    std::swap(amendmentrequest_, other->amendmentrequest_);
    std::swap(revocation_, other->revocation_);
    std::swap(senderreceipt_, other->senderreceipt_);
    std::swap(resolution_, other->resolution_);
    std::swap(resolutionentities_, other->resolutionentities_);
    outerdocflows_.Swap(&other->outerdocflows_);
    outerdocflowentities_.Swap(&other->outerdocflowentities_);
    std::swap(docflowstatus_, other->docflowstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocflowV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocflowV3_descriptor_;
  metadata.reflection = DocflowV3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SenderTitleDocflow::kIsFinishedFieldNumber;
const int SenderTitleDocflow::kAttachmentFieldNumber;
const int SenderTitleDocflow::kSentAtFieldNumber;
const int SenderTitleDocflow::kDeliveredAtFieldNumber;
const int SenderTitleDocflow::kRoamingNotificationFieldNumber;
const int SenderTitleDocflow::kSenderSignatureStatusFieldNumber;
#endif  // !_MSC_VER

SenderTitleDocflow::SenderTitleDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.SenderTitleDocflow)
}

void SenderTitleDocflow::InitAsDefaultInstance() {
  attachment_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3*>(&::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::default_instance());
  sentat_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  deliveredat_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  roamingnotification_ = const_cast< ::Diadoc::Api::Proto::Docflow::RoamingNotification*>(&::Diadoc::Api::Proto::Docflow::RoamingNotification::default_instance());
}

SenderTitleDocflow::SenderTitleDocflow(const SenderTitleDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.SenderTitleDocflow)
}

void SenderTitleDocflow::SharedCtor() {
  _cached_size_ = 0;
  isfinished_ = false;
  attachment_ = NULL;
  sentat_ = NULL;
  deliveredat_ = NULL;
  roamingnotification_ = NULL;
  sendersignaturestatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SenderTitleDocflow::~SenderTitleDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.SenderTitleDocflow)
  SharedDtor();
}

void SenderTitleDocflow::SharedDtor() {
  if (this != default_instance_) {
    delete attachment_;
    delete sentat_;
    delete deliveredat_;
    delete roamingnotification_;
  }
}

void SenderTitleDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SenderTitleDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SenderTitleDocflow_descriptor_;
}

const SenderTitleDocflow& SenderTitleDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  return *default_instance_;
}

SenderTitleDocflow* SenderTitleDocflow::default_instance_ = NULL;

SenderTitleDocflow* SenderTitleDocflow::New() const {
  return new SenderTitleDocflow;
}

void SenderTitleDocflow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SenderTitleDocflow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(isfinished_, sendersignaturestatus_);
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
    }
    if (has_sentat()) {
      if (sentat_ != NULL) sentat_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_deliveredat()) {
      if (deliveredat_ != NULL) deliveredat_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_roamingnotification()) {
      if (roamingnotification_ != NULL) roamingnotification_->::Diadoc::Api::Proto::Docflow::RoamingNotification::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SenderTitleDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.SenderTitleDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Attachment;
        break;
      }

      // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Attachment = 2;
      case 2: {
        if (tag == 18) {
         parse_Attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SentAt;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
      case 3: {
        if (tag == 26) {
         parse_SentAt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sentat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DeliveredAt;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
      case 4: {
        if (tag == 34) {
         parse_DeliveredAt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deliveredat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RoamingNotification;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 5;
      case 5: {
        if (tag == 42) {
         parse_RoamingNotification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roamingnotification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SenderSignatureStatus;
        break;
      }

      // required .Diadoc.Api.Proto.Documents.SenderSignatureStatus SenderSignatureStatus = 6;
      case 6: {
        if (tag == 48) {
         parse_SenderSignatureStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::SenderSignatureStatus_IsValid(value)) {
            set_sendersignaturestatus(static_cast< ::Diadoc::Api::Proto::Documents::SenderSignatureStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.SenderTitleDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.SenderTitleDocflow)
  return false;
#undef DO_
}

void SenderTitleDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.SenderTitleDocflow)
  // required bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Attachment = 2;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attachment(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
  if (has_sentat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sentat(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
  if (has_deliveredat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->deliveredat(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 5;
  if (has_roamingnotification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->roamingnotification(), output);
  }

  // required .Diadoc.Api.Proto.Documents.SenderSignatureStatus SenderSignatureStatus = 6;
  if (has_sendersignaturestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->sendersignaturestatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.SenderTitleDocflow)
}

::google::protobuf::uint8* SenderTitleDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.SenderTitleDocflow)
  // required bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Attachment = 2;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attachment(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
  if (has_sentat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sentat(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
  if (has_deliveredat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->deliveredat(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 5;
  if (has_roamingnotification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->roamingnotification(), target);
  }

  // required .Diadoc.Api.Proto.Documents.SenderSignatureStatus SenderSignatureStatus = 6;
  if (has_sendersignaturestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->sendersignaturestatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.SenderTitleDocflow)
  return target;
}

int SenderTitleDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Attachment = 2;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

    // optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
    if (has_sentat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sentat());
    }

    // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
    if (has_deliveredat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deliveredat());
    }

    // optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 5;
    if (has_roamingnotification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roamingnotification());
    }

    // required .Diadoc.Api.Proto.Documents.SenderSignatureStatus SenderSignatureStatus = 6;
    if (has_sendersignaturestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sendersignaturestatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SenderTitleDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SenderTitleDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SenderTitleDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SenderTitleDocflow::MergeFrom(const SenderTitleDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_attachment()) {
      mutable_attachment()->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::MergeFrom(from.attachment());
    }
    if (from.has_sentat()) {
      mutable_sentat()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.sentat());
    }
    if (from.has_deliveredat()) {
      mutable_deliveredat()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.deliveredat());
    }
    if (from.has_roamingnotification()) {
      mutable_roamingnotification()->::Diadoc::Api::Proto::Docflow::RoamingNotification::MergeFrom(from.roamingnotification());
    }
    if (from.has_sendersignaturestatus()) {
      set_sendersignaturestatus(from.sendersignaturestatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SenderTitleDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SenderTitleDocflow::CopyFrom(const SenderTitleDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenderTitleDocflow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;

  if (has_attachment()) {
    if (!this->attachment().IsInitialized()) return false;
  }
  if (has_sentat()) {
    if (!this->sentat().IsInitialized()) return false;
  }
  if (has_deliveredat()) {
    if (!this->deliveredat().IsInitialized()) return false;
  }
  if (has_roamingnotification()) {
    if (!this->roamingnotification().IsInitialized()) return false;
  }
  return true;
}

void SenderTitleDocflow::Swap(SenderTitleDocflow* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(attachment_, other->attachment_);
    std::swap(sentat_, other->sentat_);
    std::swap(deliveredat_, other->deliveredat_);
    std::swap(roamingnotification_, other->roamingnotification_);
    std::swap(sendersignaturestatus_, other->sendersignaturestatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SenderTitleDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SenderTitleDocflow_descriptor_;
  metadata.reflection = SenderTitleDocflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfirmationDocflow::kIsFinishedFieldNumber;
const int ConfirmationDocflow::kConfirmationAttachmentFieldNumber;
const int ConfirmationDocflow::kConfirmedAtFieldNumber;
const int ConfirmationDocflow::kReceiptFieldNumber;
#endif  // !_MSC_VER

ConfirmationDocflow::ConfirmationDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.ConfirmationDocflow)
}

void ConfirmationDocflow::InitAsDefaultInstance() {
  confirmationattachment_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3*>(&::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::default_instance());
  confirmedat_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  receipt_ = const_cast< ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3*>(&::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::default_instance());
}

ConfirmationDocflow::ConfirmationDocflow(const ConfirmationDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.ConfirmationDocflow)
}

void ConfirmationDocflow::SharedCtor() {
  _cached_size_ = 0;
  isfinished_ = false;
  confirmationattachment_ = NULL;
  confirmedat_ = NULL;
  receipt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfirmationDocflow::~ConfirmationDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.ConfirmationDocflow)
  SharedDtor();
}

void ConfirmationDocflow::SharedDtor() {
  if (this != default_instance_) {
    delete confirmationattachment_;
    delete confirmedat_;
    delete receipt_;
  }
}

void ConfirmationDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfirmationDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfirmationDocflow_descriptor_;
}

const ConfirmationDocflow& ConfirmationDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  return *default_instance_;
}

ConfirmationDocflow* ConfirmationDocflow::default_instance_ = NULL;

ConfirmationDocflow* ConfirmationDocflow::New() const {
  return new ConfirmationDocflow;
}

void ConfirmationDocflow::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    isfinished_ = false;
    if (has_confirmationattachment()) {
      if (confirmationattachment_ != NULL) confirmationattachment_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
    }
    if (has_confirmedat()) {
      if (confirmedat_ != NULL) confirmedat_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_receipt()) {
      if (receipt_ != NULL) receipt_->::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfirmationDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.ConfirmationDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ConfirmationAttachment;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 ConfirmationAttachment = 2;
      case 2: {
        if (tag == 18) {
         parse_ConfirmationAttachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmationattachment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ConfirmedAt;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp ConfirmedAt = 3;
      case 3: {
        if (tag == 26) {
         parse_ConfirmedAt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmedat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Receipt;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 Receipt = 4;
      case 4: {
        if (tag == 34) {
         parse_Receipt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receipt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.ConfirmationDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.ConfirmationDocflow)
  return false;
#undef DO_
}

void ConfirmationDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.ConfirmationDocflow)
  // required bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 ConfirmationAttachment = 2;
  if (has_confirmationattachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->confirmationattachment(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp ConfirmedAt = 3;
  if (has_confirmedat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->confirmedat(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 Receipt = 4;
  if (has_receipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->receipt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.ConfirmationDocflow)
}

::google::protobuf::uint8* ConfirmationDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.ConfirmationDocflow)
  // required bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 ConfirmationAttachment = 2;
  if (has_confirmationattachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->confirmationattachment(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp ConfirmedAt = 3;
  if (has_confirmedat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->confirmedat(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 Receipt = 4;
  if (has_receipt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->receipt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.ConfirmationDocflow)
  return target;
}

int ConfirmationDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 ConfirmationAttachment = 2;
    if (has_confirmationattachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmationattachment());
    }

    // optional .Diadoc.Api.Proto.Timestamp ConfirmedAt = 3;
    if (has_confirmedat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmedat());
    }

    // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 Receipt = 4;
    if (has_receipt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receipt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfirmationDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfirmationDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfirmationDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfirmationDocflow::MergeFrom(const ConfirmationDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_confirmationattachment()) {
      mutable_confirmationattachment()->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::MergeFrom(from.confirmationattachment());
    }
    if (from.has_confirmedat()) {
      mutable_confirmedat()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.confirmedat());
    }
    if (from.has_receipt()) {
      mutable_receipt()->::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::MergeFrom(from.receipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfirmationDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfirmationDocflow::CopyFrom(const ConfirmationDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmationDocflow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_confirmationattachment()) {
    if (!this->confirmationattachment().IsInitialized()) return false;
  }
  if (has_confirmedat()) {
    if (!this->confirmedat().IsInitialized()) return false;
  }
  if (has_receipt()) {
    if (!this->receipt().IsInitialized()) return false;
  }
  return true;
}

void ConfirmationDocflow::Swap(ConfirmationDocflow* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(confirmationattachment_, other->confirmationattachment_);
    std::swap(confirmedat_, other->confirmedat_);
    std::swap(receipt_, other->receipt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfirmationDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfirmationDocflow_descriptor_;
  metadata.reflection = ConfirmationDocflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignatureRejectionDocflow::kSignatureRejectionFieldNumber;
const int SignatureRejectionDocflow::kIsFormalFieldNumber;
const int SignatureRejectionDocflow::kDeliveredAtFieldNumber;
const int SignatureRejectionDocflow::kPlainTextFieldNumber;
#endif  // !_MSC_VER

SignatureRejectionDocflow::SignatureRejectionDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow)
}

void SignatureRejectionDocflow::InitAsDefaultInstance() {
  signaturerejection_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3*>(&::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::default_instance());
  deliveredat_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
}

SignatureRejectionDocflow::SignatureRejectionDocflow(const SignatureRejectionDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow)
}

void SignatureRejectionDocflow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signaturerejection_ = NULL;
  isformal_ = false;
  deliveredat_ = NULL;
  plaintext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignatureRejectionDocflow::~SignatureRejectionDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow)
  SharedDtor();
}

void SignatureRejectionDocflow::SharedDtor() {
  if (plaintext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete plaintext_;
  }
  if (this != default_instance_) {
    delete signaturerejection_;
    delete deliveredat_;
  }
}

void SignatureRejectionDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignatureRejectionDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignatureRejectionDocflow_descriptor_;
}

const SignatureRejectionDocflow& SignatureRejectionDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  return *default_instance_;
}

SignatureRejectionDocflow* SignatureRejectionDocflow::default_instance_ = NULL;

SignatureRejectionDocflow* SignatureRejectionDocflow::New() const {
  return new SignatureRejectionDocflow;
}

void SignatureRejectionDocflow::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_signaturerejection()) {
      if (signaturerejection_ != NULL) signaturerejection_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
    }
    isformal_ = false;
    if (has_deliveredat()) {
      if (deliveredat_ != NULL) deliveredat_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_plaintext()) {
      if (plaintext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        plaintext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignatureRejectionDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 SignatureRejection = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signaturerejection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsFormal;
        break;
      }

      // required bool IsFormal = 2;
      case 2: {
        if (tag == 16) {
         parse_IsFormal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isformal_)));
          set_has_isformal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DeliveredAt;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 3;
      case 3: {
        if (tag == 26) {
         parse_DeliveredAt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deliveredat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_PlainText;
        break;
      }

      // optional string PlainText = 4;
      case 4: {
        if (tag == 34) {
         parse_PlainText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plaintext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plaintext().data(), this->plaintext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "plaintext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow)
  return false;
#undef DO_
}

void SignatureRejectionDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow)
  // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 SignatureRejection = 1;
  if (has_signaturerejection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signaturerejection(), output);
  }

  // required bool IsFormal = 2;
  if (has_isformal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isformal(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 3;
  if (has_deliveredat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->deliveredat(), output);
  }

  // optional string PlainText = 4;
  if (has_plaintext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plaintext().data(), this->plaintext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plaintext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->plaintext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow)
}

::google::protobuf::uint8* SignatureRejectionDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow)
  // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 SignatureRejection = 1;
  if (has_signaturerejection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signaturerejection(), target);
  }

  // required bool IsFormal = 2;
  if (has_isformal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isformal(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 3;
  if (has_deliveredat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->deliveredat(), target);
  }

  // optional string PlainText = 4;
  if (has_plaintext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plaintext().data(), this->plaintext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plaintext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->plaintext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow)
  return target;
}

int SignatureRejectionDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 SignatureRejection = 1;
    if (has_signaturerejection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signaturerejection());
    }

    // required bool IsFormal = 2;
    if (has_isformal()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 3;
    if (has_deliveredat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deliveredat());
    }

    // optional string PlainText = 4;
    if (has_plaintext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plaintext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignatureRejectionDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignatureRejectionDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignatureRejectionDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignatureRejectionDocflow::MergeFrom(const SignatureRejectionDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signaturerejection()) {
      mutable_signaturerejection()->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::MergeFrom(from.signaturerejection());
    }
    if (from.has_isformal()) {
      set_isformal(from.isformal());
    }
    if (from.has_deliveredat()) {
      mutable_deliveredat()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.deliveredat());
    }
    if (from.has_plaintext()) {
      set_plaintext(from.plaintext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignatureRejectionDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureRejectionDocflow::CopyFrom(const SignatureRejectionDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureRejectionDocflow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_signaturerejection()) {
    if (!this->signaturerejection().IsInitialized()) return false;
  }
  if (has_deliveredat()) {
    if (!this->deliveredat().IsInitialized()) return false;
  }
  return true;
}

void SignatureRejectionDocflow::Swap(SignatureRejectionDocflow* other) {
  if (other != this) {
    std::swap(signaturerejection_, other->signaturerejection_);
    std::swap(isformal_, other->isformal_);
    std::swap(deliveredat_, other->deliveredat_);
    std::swap(plaintext_, other->plaintext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignatureRejectionDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignatureRejectionDocflow_descriptor_;
  metadata.reflection = SignatureRejectionDocflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParticipantResponseDocflow::kIsFinishedFieldNumber;
const int ParticipantResponseDocflow::kSignatureFieldNumber;
const int ParticipantResponseDocflow::kTitleFieldNumber;
const int ParticipantResponseDocflow::kRejectionFieldNumber;
const int ParticipantResponseDocflow::kSentAtFieldNumber;
const int ParticipantResponseDocflow::kDeliveredAtFieldNumber;
const int ParticipantResponseDocflow::kResponseStatusFieldNumber;
#endif  // !_MSC_VER

ParticipantResponseDocflow::ParticipantResponseDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow)
}

void ParticipantResponseDocflow::InitAsDefaultInstance() {
  signature_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignatureV3*>(&::Diadoc::Api::Proto::Docflow::SignatureV3::default_instance());
  title_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3*>(&::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::default_instance());
  rejection_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow*>(&::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow::default_instance());
  sentat_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  deliveredat_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
}

ParticipantResponseDocflow::ParticipantResponseDocflow(const ParticipantResponseDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow)
}

void ParticipantResponseDocflow::SharedCtor() {
  _cached_size_ = 0;
  isfinished_ = false;
  signature_ = NULL;
  title_ = NULL;
  rejection_ = NULL;
  sentat_ = NULL;
  deliveredat_ = NULL;
  responsestatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParticipantResponseDocflow::~ParticipantResponseDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow)
  SharedDtor();
}

void ParticipantResponseDocflow::SharedDtor() {
  if (this != default_instance_) {
    delete signature_;
    delete title_;
    delete rejection_;
    delete sentat_;
    delete deliveredat_;
  }
}

void ParticipantResponseDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParticipantResponseDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParticipantResponseDocflow_descriptor_;
}

const ParticipantResponseDocflow& ParticipantResponseDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  return *default_instance_;
}

ParticipantResponseDocflow* ParticipantResponseDocflow::default_instance_ = NULL;

ParticipantResponseDocflow* ParticipantResponseDocflow::New() const {
  return new ParticipantResponseDocflow;
}

void ParticipantResponseDocflow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ParticipantResponseDocflow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(isfinished_, responsestatus_);
    if (has_signature()) {
      if (signature_ != NULL) signature_->::Diadoc::Api::Proto::Docflow::SignatureV3::Clear();
    }
    if (has_title()) {
      if (title_ != NULL) title_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
    }
    if (has_rejection()) {
      if (rejection_ != NULL) rejection_->::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow::Clear();
    }
    if (has_sentat()) {
      if (sentat_ != NULL) sentat_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_deliveredat()) {
      if (deliveredat_ != NULL) deliveredat_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParticipantResponseDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Signature;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 2;
      case 2: {
        if (tag == 18) {
         parse_Signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Title;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Title = 3;
      case 3: {
        if (tag == 26) {
         parse_Title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Rejection;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow Rejection = 4;
      case 4: {
        if (tag == 34) {
         parse_Rejection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rejection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SentAt;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp SentAt = 5;
      case 5: {
        if (tag == 42) {
         parse_SentAt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sentat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_DeliveredAt;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 6;
      case 6: {
        if (tag == 50) {
         parse_DeliveredAt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deliveredat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ResponseStatus;
        break;
      }

      // required .Diadoc.Api.Proto.Documents.RecipientResponseStatus ResponseStatus = 7;
      case 7: {
        if (tag == 56) {
         parse_ResponseStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::RecipientResponseStatus_IsValid(value)) {
            set_responsestatus(static_cast< ::Diadoc::Api::Proto::Documents::RecipientResponseStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow)
  return false;
#undef DO_
}

void ParticipantResponseDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow)
  // required bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signature(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->title(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow Rejection = 4;
  if (has_rejection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rejection(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp SentAt = 5;
  if (has_sentat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sentat(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 6;
  if (has_deliveredat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->deliveredat(), output);
  }

  // required .Diadoc.Api.Proto.Documents.RecipientResponseStatus ResponseStatus = 7;
  if (has_responsestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->responsestatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow)
}

::google::protobuf::uint8* ParticipantResponseDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow)
  // required bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 2;
  if (has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signature(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Title = 3;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->title(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow Rejection = 4;
  if (has_rejection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rejection(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp SentAt = 5;
  if (has_sentat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sentat(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 6;
  if (has_deliveredat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->deliveredat(), target);
  }

  // required .Diadoc.Api.Proto.Documents.RecipientResponseStatus ResponseStatus = 7;
  if (has_responsestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->responsestatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.ParticipantResponseDocflow)
  return target;
}

int ParticipantResponseDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signature());
    }

    // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
    }

    // optional .Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow Rejection = 4;
    if (has_rejection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rejection());
    }

    // optional .Diadoc.Api.Proto.Timestamp SentAt = 5;
    if (has_sentat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sentat());
    }

    // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 6;
    if (has_deliveredat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deliveredat());
    }

    // required .Diadoc.Api.Proto.Documents.RecipientResponseStatus ResponseStatus = 7;
    if (has_responsestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->responsestatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParticipantResponseDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParticipantResponseDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParticipantResponseDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParticipantResponseDocflow::MergeFrom(const ParticipantResponseDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_signature()) {
      mutable_signature()->::Diadoc::Api::Proto::Docflow::SignatureV3::MergeFrom(from.signature());
    }
    if (from.has_title()) {
      mutable_title()->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::MergeFrom(from.title());
    }
    if (from.has_rejection()) {
      mutable_rejection()->::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow::MergeFrom(from.rejection());
    }
    if (from.has_sentat()) {
      mutable_sentat()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.sentat());
    }
    if (from.has_deliveredat()) {
      mutable_deliveredat()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.deliveredat());
    }
    if (from.has_responsestatus()) {
      set_responsestatus(from.responsestatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParticipantResponseDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParticipantResponseDocflow::CopyFrom(const ParticipantResponseDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipantResponseDocflow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;

  if (has_signature()) {
    if (!this->signature().IsInitialized()) return false;
  }
  if (has_title()) {
    if (!this->title().IsInitialized()) return false;
  }
  if (has_rejection()) {
    if (!this->rejection().IsInitialized()) return false;
  }
  if (has_sentat()) {
    if (!this->sentat().IsInitialized()) return false;
  }
  if (has_deliveredat()) {
    if (!this->deliveredat().IsInitialized()) return false;
  }
  return true;
}

void ParticipantResponseDocflow::Swap(ParticipantResponseDocflow* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(signature_, other->signature_);
    std::swap(title_, other->title_);
    std::swap(rejection_, other->rejection_);
    std::swap(sentat_, other->sentat_);
    std::swap(deliveredat_, other->deliveredat_);
    std::swap(responsestatus_, other->responsestatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParticipantResponseDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParticipantResponseDocflow_descriptor_;
  metadata.reflection = ParticipantResponseDocflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AmendmentRequestDocflow::kIsFinishedFieldNumber;
const int AmendmentRequestDocflow::kAmendmentRequestFieldNumber;
const int AmendmentRequestDocflow::kSentAtFieldNumber;
const int AmendmentRequestDocflow::kDeliveredAtFieldNumber;
const int AmendmentRequestDocflow::kReceiptFieldNumber;
const int AmendmentRequestDocflow::kAmendmentFlagsFieldNumber;
const int AmendmentRequestDocflow::kPlainTextFieldNumber;
const int AmendmentRequestDocflow::kConfirmationDocflowFieldNumber;
#endif  // !_MSC_VER

AmendmentRequestDocflow::AmendmentRequestDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow)
}

void AmendmentRequestDocflow::InitAsDefaultInstance() {
  amendmentrequest_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3*>(&::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::default_instance());
  sentat_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  deliveredat_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  receipt_ = const_cast< ::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3*>(&::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::default_instance());
  confirmationdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow*>(&::Diadoc::Api::Proto::Docflow::ConfirmationDocflow::default_instance());
}

AmendmentRequestDocflow::AmendmentRequestDocflow(const AmendmentRequestDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow)
}

void AmendmentRequestDocflow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isfinished_ = false;
  amendmentrequest_ = NULL;
  sentat_ = NULL;
  deliveredat_ = NULL;
  receipt_ = NULL;
  amendmentflags_ = 0;
  plaintext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirmationdocflow_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AmendmentRequestDocflow::~AmendmentRequestDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow)
  SharedDtor();
}

void AmendmentRequestDocflow::SharedDtor() {
  if (plaintext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete plaintext_;
  }
  if (this != default_instance_) {
    delete amendmentrequest_;
    delete sentat_;
    delete deliveredat_;
    delete receipt_;
    delete confirmationdocflow_;
  }
}

void AmendmentRequestDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AmendmentRequestDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AmendmentRequestDocflow_descriptor_;
}

const AmendmentRequestDocflow& AmendmentRequestDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  return *default_instance_;
}

AmendmentRequestDocflow* AmendmentRequestDocflow::default_instance_ = NULL;

AmendmentRequestDocflow* AmendmentRequestDocflow::New() const {
  return new AmendmentRequestDocflow;
}

void AmendmentRequestDocflow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AmendmentRequestDocflow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(isfinished_, amendmentflags_);
    if (has_amendmentrequest()) {
      if (amendmentrequest_ != NULL) amendmentrequest_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
    }
    if (has_sentat()) {
      if (sentat_ != NULL) sentat_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_deliveredat()) {
      if (deliveredat_ != NULL) deliveredat_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_receipt()) {
      if (receipt_ != NULL) receipt_->::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::Clear();
    }
    if (has_plaintext()) {
      if (plaintext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        plaintext_->clear();
      }
    }
    if (has_confirmationdocflow()) {
      if (confirmationdocflow_ != NULL) confirmationdocflow_->::Diadoc::Api::Proto::Docflow::ConfirmationDocflow::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AmendmentRequestDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AmendmentRequest;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 AmendmentRequest = 2;
      case 2: {
        if (tag == 18) {
         parse_AmendmentRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_amendmentrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SentAt;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
      case 3: {
        if (tag == 26) {
         parse_SentAt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sentat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DeliveredAt;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
      case 4: {
        if (tag == 34) {
         parse_DeliveredAt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deliveredat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Receipt;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 Receipt = 5;
      case 5: {
        if (tag == 42) {
         parse_Receipt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receipt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_AmendmentFlags;
        break;
      }

      // required int32 AmendmentFlags = 6;
      case 6: {
        if (tag == 48) {
         parse_AmendmentFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amendmentflags_)));
          set_has_amendmentflags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_PlainText;
        break;
      }

      // optional string PlainText = 7;
      case 7: {
        if (tag == 58) {
         parse_PlainText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plaintext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plaintext().data(), this->plaintext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "plaintext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ConfirmationDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow ConfirmationDocflow = 8;
      case 8: {
        if (tag == 66) {
         parse_ConfirmationDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmationdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow)
  return false;
#undef DO_
}

void AmendmentRequestDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow)
  // required bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 AmendmentRequest = 2;
  if (has_amendmentrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->amendmentrequest(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
  if (has_sentat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sentat(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
  if (has_deliveredat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->deliveredat(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 Receipt = 5;
  if (has_receipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->receipt(), output);
  }

  // required int32 AmendmentFlags = 6;
  if (has_amendmentflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->amendmentflags(), output);
  }

  // optional string PlainText = 7;
  if (has_plaintext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plaintext().data(), this->plaintext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plaintext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->plaintext(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow ConfirmationDocflow = 8;
  if (has_confirmationdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->confirmationdocflow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow)
}

::google::protobuf::uint8* AmendmentRequestDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow)
  // required bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 AmendmentRequest = 2;
  if (has_amendmentrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->amendmentrequest(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
  if (has_sentat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sentat(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
  if (has_deliveredat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->deliveredat(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 Receipt = 5;
  if (has_receipt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->receipt(), target);
  }

  // required int32 AmendmentFlags = 6;
  if (has_amendmentflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->amendmentflags(), target);
  }

  // optional string PlainText = 7;
  if (has_plaintext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plaintext().data(), this->plaintext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plaintext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->plaintext(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow ConfirmationDocflow = 8;
  if (has_confirmationdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->confirmationdocflow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.AmendmentRequestDocflow)
  return target;
}

int AmendmentRequestDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 AmendmentRequest = 2;
    if (has_amendmentrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->amendmentrequest());
    }

    // optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
    if (has_sentat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sentat());
    }

    // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
    if (has_deliveredat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deliveredat());
    }

    // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflowV3 Receipt = 5;
    if (has_receipt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receipt());
    }

    // required int32 AmendmentFlags = 6;
    if (has_amendmentflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amendmentflags());
    }

    // optional string PlainText = 7;
    if (has_plaintext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plaintext());
    }

    // optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow ConfirmationDocflow = 8;
    if (has_confirmationdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmationdocflow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AmendmentRequestDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AmendmentRequestDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AmendmentRequestDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AmendmentRequestDocflow::MergeFrom(const AmendmentRequestDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_amendmentrequest()) {
      mutable_amendmentrequest()->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::MergeFrom(from.amendmentrequest());
    }
    if (from.has_sentat()) {
      mutable_sentat()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.sentat());
    }
    if (from.has_deliveredat()) {
      mutable_deliveredat()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.deliveredat());
    }
    if (from.has_receipt()) {
      mutable_receipt()->::Diadoc::Api::Proto::Docflow::ReceiptDocflowV3::MergeFrom(from.receipt());
    }
    if (from.has_amendmentflags()) {
      set_amendmentflags(from.amendmentflags());
    }
    if (from.has_plaintext()) {
      set_plaintext(from.plaintext());
    }
    if (from.has_confirmationdocflow()) {
      mutable_confirmationdocflow()->::Diadoc::Api::Proto::Docflow::ConfirmationDocflow::MergeFrom(from.confirmationdocflow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AmendmentRequestDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmendmentRequestDocflow::CopyFrom(const AmendmentRequestDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmendmentRequestDocflow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;

  if (has_amendmentrequest()) {
    if (!this->amendmentrequest().IsInitialized()) return false;
  }
  if (has_sentat()) {
    if (!this->sentat().IsInitialized()) return false;
  }
  if (has_deliveredat()) {
    if (!this->deliveredat().IsInitialized()) return false;
  }
  if (has_receipt()) {
    if (!this->receipt().IsInitialized()) return false;
  }
  if (has_confirmationdocflow()) {
    if (!this->confirmationdocflow().IsInitialized()) return false;
  }
  return true;
}

void AmendmentRequestDocflow::Swap(AmendmentRequestDocflow* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(amendmentrequest_, other->amendmentrequest_);
    std::swap(sentat_, other->sentat_);
    std::swap(deliveredat_, other->deliveredat_);
    std::swap(receipt_, other->receipt_);
    std::swap(amendmentflags_, other->amendmentflags_);
    std::swap(plaintext_, other->plaintext_);
    std::swap(confirmationdocflow_, other->confirmationdocflow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AmendmentRequestDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AmendmentRequestDocflow_descriptor_;
  metadata.reflection = AmendmentRequestDocflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RevocationDocflowV3::kIsFinishedFieldNumber;
const int RevocationDocflowV3::kRevocationRequestFieldNumber;
const int RevocationDocflowV3::kRevocationResponseFieldNumber;
const int RevocationDocflowV3::kInitiatorBoxIdFieldNumber;
const int RevocationDocflowV3::kRevocationStatusFieldNumber;
const int RevocationDocflowV3::kResolutionEntitiesFieldNumber;
const int RevocationDocflowV3::kOuterDocflowEntitiesFieldNumber;
#endif  // !_MSC_VER

RevocationDocflowV3::RevocationDocflowV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.RevocationDocflowV3)
}

void RevocationDocflowV3::InitAsDefaultInstance() {
  revocationrequest_ = const_cast< ::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow*>(&::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow::default_instance());
  revocationresponse_ = const_cast< ::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow*>(&::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow::default_instance());
  resolutionentities_ = const_cast< ::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3*>(&::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3::default_instance());
}

RevocationDocflowV3::RevocationDocflowV3(const RevocationDocflowV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.RevocationDocflowV3)
}

void RevocationDocflowV3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isfinished_ = false;
  revocationrequest_ = NULL;
  revocationresponse_ = NULL;
  initiatorboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revocationstatus_ = 0;
  resolutionentities_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RevocationDocflowV3::~RevocationDocflowV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.RevocationDocflowV3)
  SharedDtor();
}

void RevocationDocflowV3::SharedDtor() {
  if (initiatorboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initiatorboxid_;
  }
  if (this != default_instance_) {
    delete revocationrequest_;
    delete revocationresponse_;
    delete resolutionentities_;
  }
}

void RevocationDocflowV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RevocationDocflowV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RevocationDocflowV3_descriptor_;
}

const RevocationDocflowV3& RevocationDocflowV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  return *default_instance_;
}

RevocationDocflowV3* RevocationDocflowV3::default_instance_ = NULL;

RevocationDocflowV3* RevocationDocflowV3::New() const {
  return new RevocationDocflowV3;
}

void RevocationDocflowV3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RevocationDocflowV3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(isfinished_, revocationstatus_);
    if (has_revocationrequest()) {
      if (revocationrequest_ != NULL) revocationrequest_->::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow::Clear();
    }
    if (has_revocationresponse()) {
      if (revocationresponse_ != NULL) revocationresponse_->::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow::Clear();
    }
    if (has_initiatorboxid()) {
      if (initiatorboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        initiatorboxid_->clear();
      }
    }
    if (has_resolutionentities()) {
      if (resolutionentities_ != NULL) resolutionentities_->::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  outerdocflowentities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RevocationDocflowV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.RevocationDocflowV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RevocationRequest;
        break;
      }

      // required .Diadoc.Api.Proto.Docflow.RevocationRequestDocflow RevocationRequest = 2;
      case 2: {
        if (tag == 18) {
         parse_RevocationRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revocationrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RevocationResponse;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.RevocationResponseDocflow RevocationResponse = 3;
      case 3: {
        if (tag == 26) {
         parse_RevocationResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revocationresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitiatorBoxId;
        break;
      }

      // required string InitiatorBoxId = 4;
      case 4: {
        if (tag == 34) {
         parse_InitiatorBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initiatorboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initiatorboxid().data(), this->initiatorboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "initiatorboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_RevocationStatus;
        break;
      }

      // required .Diadoc.Api.Proto.Documents.RevocationStatus RevocationStatus = 5;
      case 5: {
        if (tag == 40) {
         parse_RevocationStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::RevocationStatus_IsValid(value)) {
            set_revocationstatus(static_cast< ::Diadoc::Api::Proto::Documents::RevocationStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ResolutionEntities;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3 ResolutionEntities = 6;
      case 6: {
        if (tag == 50) {
         parse_ResolutionEntities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolutionentities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_OuterDocflowEntities;
        break;
      }

      // repeated .Diadoc.Api.Proto.Docflow.OuterDocflowEntities OuterDocflowEntities = 7;
      case 7: {
        if (tag == 58) {
         parse_OuterDocflowEntities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outerdocflowentities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_OuterDocflowEntities;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.RevocationDocflowV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.RevocationDocflowV3)
  return false;
#undef DO_
}

void RevocationDocflowV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.RevocationDocflowV3)
  // required bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // required .Diadoc.Api.Proto.Docflow.RevocationRequestDocflow RevocationRequest = 2;
  if (has_revocationrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->revocationrequest(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.RevocationResponseDocflow RevocationResponse = 3;
  if (has_revocationresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->revocationresponse(), output);
  }

  // required string InitiatorBoxId = 4;
  if (has_initiatorboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initiatorboxid().data(), this->initiatorboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initiatorboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->initiatorboxid(), output);
  }

  // required .Diadoc.Api.Proto.Documents.RevocationStatus RevocationStatus = 5;
  if (has_revocationstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->revocationstatus(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3 ResolutionEntities = 6;
  if (has_resolutionentities()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->resolutionentities(), output);
  }

  // repeated .Diadoc.Api.Proto.Docflow.OuterDocflowEntities OuterDocflowEntities = 7;
  for (int i = 0; i < this->outerdocflowentities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->outerdocflowentities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.RevocationDocflowV3)
}

::google::protobuf::uint8* RevocationDocflowV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.RevocationDocflowV3)
  // required bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // required .Diadoc.Api.Proto.Docflow.RevocationRequestDocflow RevocationRequest = 2;
  if (has_revocationrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->revocationrequest(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.RevocationResponseDocflow RevocationResponse = 3;
  if (has_revocationresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->revocationresponse(), target);
  }

  // required string InitiatorBoxId = 4;
  if (has_initiatorboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initiatorboxid().data(), this->initiatorboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initiatorboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->initiatorboxid(), target);
  }

  // required .Diadoc.Api.Proto.Documents.RevocationStatus RevocationStatus = 5;
  if (has_revocationstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->revocationstatus(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3 ResolutionEntities = 6;
  if (has_resolutionentities()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->resolutionentities(), target);
  }

  // repeated .Diadoc.Api.Proto.Docflow.OuterDocflowEntities OuterDocflowEntities = 7;
  for (int i = 0; i < this->outerdocflowentities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->outerdocflowentities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.RevocationDocflowV3)
  return target;
}

int RevocationDocflowV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // required .Diadoc.Api.Proto.Docflow.RevocationRequestDocflow RevocationRequest = 2;
    if (has_revocationrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revocationrequest());
    }

    // optional .Diadoc.Api.Proto.Docflow.RevocationResponseDocflow RevocationResponse = 3;
    if (has_revocationresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revocationresponse());
    }

    // required string InitiatorBoxId = 4;
    if (has_initiatorboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initiatorboxid());
    }

    // required .Diadoc.Api.Proto.Documents.RevocationStatus RevocationStatus = 5;
    if (has_revocationstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->revocationstatus());
    }

    // optional .Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3 ResolutionEntities = 6;
    if (has_resolutionentities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resolutionentities());
    }

  }
  // repeated .Diadoc.Api.Proto.Docflow.OuterDocflowEntities OuterDocflowEntities = 7;
  total_size += 1 * this->outerdocflowentities_size();
  for (int i = 0; i < this->outerdocflowentities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outerdocflowentities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RevocationDocflowV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RevocationDocflowV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RevocationDocflowV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RevocationDocflowV3::MergeFrom(const RevocationDocflowV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  outerdocflowentities_.MergeFrom(from.outerdocflowentities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_revocationrequest()) {
      mutable_revocationrequest()->::Diadoc::Api::Proto::Docflow::RevocationRequestDocflow::MergeFrom(from.revocationrequest());
    }
    if (from.has_revocationresponse()) {
      mutable_revocationresponse()->::Diadoc::Api::Proto::Docflow::RevocationResponseDocflow::MergeFrom(from.revocationresponse());
    }
    if (from.has_initiatorboxid()) {
      set_initiatorboxid(from.initiatorboxid());
    }
    if (from.has_revocationstatus()) {
      set_revocationstatus(from.revocationstatus());
    }
    if (from.has_resolutionentities()) {
      mutable_resolutionentities()->::Diadoc::Api::Proto::Docflow::ResolutionEntitiesV3::MergeFrom(from.resolutionentities());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RevocationDocflowV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevocationDocflowV3::CopyFrom(const RevocationDocflowV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevocationDocflowV3::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  if (has_revocationrequest()) {
    if (!this->revocationrequest().IsInitialized()) return false;
  }
  if (has_revocationresponse()) {
    if (!this->revocationresponse().IsInitialized()) return false;
  }
  if (has_resolutionentities()) {
    if (!this->resolutionentities().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->outerdocflowentities())) return false;
  return true;
}

void RevocationDocflowV3::Swap(RevocationDocflowV3* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(revocationrequest_, other->revocationrequest_);
    std::swap(revocationresponse_, other->revocationresponse_);
    std::swap(initiatorboxid_, other->initiatorboxid_);
    std::swap(revocationstatus_, other->revocationstatus_);
    std::swap(resolutionentities_, other->resolutionentities_);
    outerdocflowentities_.Swap(&other->outerdocflowentities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RevocationDocflowV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RevocationDocflowV3_descriptor_;
  metadata.reflection = RevocationDocflowV3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RevocationRequestDocflow::kRevocationRequestFieldNumber;
const int RevocationRequestDocflow::kSentAtFieldNumber;
const int RevocationRequestDocflow::kDeliveredAtFieldNumber;
const int RevocationRequestDocflow::kRoamingNotificationFieldNumber;
const int RevocationRequestDocflow::kPlainTextFieldNumber;
#endif  // !_MSC_VER

RevocationRequestDocflow::RevocationRequestDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow)
}

void RevocationRequestDocflow::InitAsDefaultInstance() {
  revocationrequest_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3*>(&::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::default_instance());
  sentat_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  deliveredat_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  roamingnotification_ = const_cast< ::Diadoc::Api::Proto::Docflow::RoamingNotification*>(&::Diadoc::Api::Proto::Docflow::RoamingNotification::default_instance());
}

RevocationRequestDocflow::RevocationRequestDocflow(const RevocationRequestDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow)
}

void RevocationRequestDocflow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  revocationrequest_ = NULL;
  sentat_ = NULL;
  deliveredat_ = NULL;
  roamingnotification_ = NULL;
  plaintext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RevocationRequestDocflow::~RevocationRequestDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow)
  SharedDtor();
}

void RevocationRequestDocflow::SharedDtor() {
  if (plaintext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete plaintext_;
  }
  if (this != default_instance_) {
    delete revocationrequest_;
    delete sentat_;
    delete deliveredat_;
    delete roamingnotification_;
  }
}

void RevocationRequestDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RevocationRequestDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RevocationRequestDocflow_descriptor_;
}

const RevocationRequestDocflow& RevocationRequestDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  return *default_instance_;
}

RevocationRequestDocflow* RevocationRequestDocflow::default_instance_ = NULL;

RevocationRequestDocflow* RevocationRequestDocflow::New() const {
  return new RevocationRequestDocflow;
}

void RevocationRequestDocflow::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_revocationrequest()) {
      if (revocationrequest_ != NULL) revocationrequest_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
    }
    if (has_sentat()) {
      if (sentat_ != NULL) sentat_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_deliveredat()) {
      if (deliveredat_ != NULL) deliveredat_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_roamingnotification()) {
      if (roamingnotification_ != NULL) roamingnotification_->::Diadoc::Api::Proto::Docflow::RoamingNotification::Clear();
    }
    if (has_plaintext()) {
      if (plaintext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        plaintext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RevocationRequestDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 RevocationRequest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revocationrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SentAt;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp SentAt = 2;
      case 2: {
        if (tag == 18) {
         parse_SentAt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sentat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DeliveredAt;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 3;
      case 3: {
        if (tag == 26) {
         parse_DeliveredAt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deliveredat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RoamingNotification;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 4;
      case 4: {
        if (tag == 34) {
         parse_RoamingNotification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roamingnotification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_PlainText;
        break;
      }

      // optional string PlainText = 5;
      case 5: {
        if (tag == 42) {
         parse_PlainText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plaintext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plaintext().data(), this->plaintext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "plaintext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow)
  return false;
#undef DO_
}

void RevocationRequestDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow)
  // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 RevocationRequest = 1;
  if (has_revocationrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->revocationrequest(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp SentAt = 2;
  if (has_sentat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sentat(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 3;
  if (has_deliveredat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->deliveredat(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 4;
  if (has_roamingnotification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->roamingnotification(), output);
  }

  // optional string PlainText = 5;
  if (has_plaintext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plaintext().data(), this->plaintext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plaintext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->plaintext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow)
}

::google::protobuf::uint8* RevocationRequestDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow)
  // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 RevocationRequest = 1;
  if (has_revocationrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->revocationrequest(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp SentAt = 2;
  if (has_sentat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sentat(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 3;
  if (has_deliveredat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->deliveredat(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 4;
  if (has_roamingnotification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->roamingnotification(), target);
  }

  // optional string PlainText = 5;
  if (has_plaintext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plaintext().data(), this->plaintext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plaintext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->plaintext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.RevocationRequestDocflow)
  return target;
}

int RevocationRequestDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 RevocationRequest = 1;
    if (has_revocationrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revocationrequest());
    }

    // optional .Diadoc.Api.Proto.Timestamp SentAt = 2;
    if (has_sentat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sentat());
    }

    // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 3;
    if (has_deliveredat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deliveredat());
    }

    // optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 4;
    if (has_roamingnotification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roamingnotification());
    }

    // optional string PlainText = 5;
    if (has_plaintext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plaintext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RevocationRequestDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RevocationRequestDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RevocationRequestDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RevocationRequestDocflow::MergeFrom(const RevocationRequestDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_revocationrequest()) {
      mutable_revocationrequest()->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::MergeFrom(from.revocationrequest());
    }
    if (from.has_sentat()) {
      mutable_sentat()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.sentat());
    }
    if (from.has_deliveredat()) {
      mutable_deliveredat()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.deliveredat());
    }
    if (from.has_roamingnotification()) {
      mutable_roamingnotification()->::Diadoc::Api::Proto::Docflow::RoamingNotification::MergeFrom(from.roamingnotification());
    }
    if (from.has_plaintext()) {
      set_plaintext(from.plaintext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RevocationRequestDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevocationRequestDocflow::CopyFrom(const RevocationRequestDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevocationRequestDocflow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_revocationrequest()) {
    if (!this->revocationrequest().IsInitialized()) return false;
  }
  if (has_sentat()) {
    if (!this->sentat().IsInitialized()) return false;
  }
  if (has_deliveredat()) {
    if (!this->deliveredat().IsInitialized()) return false;
  }
  if (has_roamingnotification()) {
    if (!this->roamingnotification().IsInitialized()) return false;
  }
  return true;
}

void RevocationRequestDocflow::Swap(RevocationRequestDocflow* other) {
  if (other != this) {
    std::swap(revocationrequest_, other->revocationrequest_);
    std::swap(sentat_, other->sentat_);
    std::swap(deliveredat_, other->deliveredat_);
    std::swap(roamingnotification_, other->roamingnotification_);
    std::swap(plaintext_, other->plaintext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RevocationRequestDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RevocationRequestDocflow_descriptor_;
  metadata.reflection = RevocationRequestDocflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RevocationResponseDocflow::kRecipientSignatureFieldNumber;
const int RevocationResponseDocflow::kSignatureRejectionFieldNumber;
#endif  // !_MSC_VER

RevocationResponseDocflow::RevocationResponseDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow)
}

void RevocationResponseDocflow::InitAsDefaultInstance() {
  recipientsignature_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignatureV3*>(&::Diadoc::Api::Proto::Docflow::SignatureV3::default_instance());
  signaturerejection_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow*>(&::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow::default_instance());
}

RevocationResponseDocflow::RevocationResponseDocflow(const RevocationResponseDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow)
}

void RevocationResponseDocflow::SharedCtor() {
  _cached_size_ = 0;
  recipientsignature_ = NULL;
  signaturerejection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RevocationResponseDocflow::~RevocationResponseDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow)
  SharedDtor();
}

void RevocationResponseDocflow::SharedDtor() {
  if (this != default_instance_) {
    delete recipientsignature_;
    delete signaturerejection_;
  }
}

void RevocationResponseDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RevocationResponseDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RevocationResponseDocflow_descriptor_;
}

const RevocationResponseDocflow& RevocationResponseDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  return *default_instance_;
}

RevocationResponseDocflow* RevocationResponseDocflow::default_instance_ = NULL;

RevocationResponseDocflow* RevocationResponseDocflow::New() const {
  return new RevocationResponseDocflow;
}

void RevocationResponseDocflow::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_recipientsignature()) {
      if (recipientsignature_ != NULL) recipientsignature_->::Diadoc::Api::Proto::Docflow::SignatureV3::Clear();
    }
    if (has_signaturerejection()) {
      if (signaturerejection_ != NULL) signaturerejection_->::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RevocationResponseDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Docflow.SignatureV3 RecipientSignature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recipientsignature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SignatureRejection;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow SignatureRejection = 2;
      case 2: {
        if (tag == 18) {
         parse_SignatureRejection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signaturerejection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow)
  return false;
#undef DO_
}

void RevocationResponseDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow)
  // optional .Diadoc.Api.Proto.Docflow.SignatureV3 RecipientSignature = 1;
  if (has_recipientsignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recipientsignature(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow SignatureRejection = 2;
  if (has_signaturerejection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signaturerejection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow)
}

::google::protobuf::uint8* RevocationResponseDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow)
  // optional .Diadoc.Api.Proto.Docflow.SignatureV3 RecipientSignature = 1;
  if (has_recipientsignature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recipientsignature(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow SignatureRejection = 2;
  if (has_signaturerejection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signaturerejection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.RevocationResponseDocflow)
  return target;
}

int RevocationResponseDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Docflow.SignatureV3 RecipientSignature = 1;
    if (has_recipientsignature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recipientsignature());
    }

    // optional .Diadoc.Api.Proto.Docflow.SignatureRejectionDocflow SignatureRejection = 2;
    if (has_signaturerejection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signaturerejection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RevocationResponseDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RevocationResponseDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RevocationResponseDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RevocationResponseDocflow::MergeFrom(const RevocationResponseDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recipientsignature()) {
      mutable_recipientsignature()->::Diadoc::Api::Proto::Docflow::SignatureV3::MergeFrom(from.recipientsignature());
    }
    if (from.has_signaturerejection()) {
      mutable_signaturerejection()->::Diadoc::Api::Proto::Docflow::SignatureRejectionDocflow::MergeFrom(from.signaturerejection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RevocationResponseDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevocationResponseDocflow::CopyFrom(const RevocationResponseDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevocationResponseDocflow::IsInitialized() const {

  if (has_recipientsignature()) {
    if (!this->recipientsignature().IsInitialized()) return false;
  }
  if (has_signaturerejection()) {
    if (!this->signaturerejection().IsInitialized()) return false;
  }
  return true;
}

void RevocationResponseDocflow::Swap(RevocationResponseDocflow* other) {
  if (other != this) {
    std::swap(recipientsignature_, other->recipientsignature_);
    std::swap(signaturerejection_, other->signaturerejection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RevocationResponseDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RevocationResponseDocflow_descriptor_;
  metadata.reflection = RevocationResponseDocflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiptDocflowV3::kIsFinishedFieldNumber;
const int ReceiptDocflowV3::kReceiptAttachmentFieldNumber;
const int ReceiptDocflowV3::kSentAtFieldNumber;
const int ReceiptDocflowV3::kDeliveredAtFieldNumber;
const int ReceiptDocflowV3::kConfirmationFieldNumber;
const int ReceiptDocflowV3::kStatusFieldNumber;
#endif  // !_MSC_VER

ReceiptDocflowV3::ReceiptDocflowV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3)
}

void ReceiptDocflowV3::InitAsDefaultInstance() {
  receiptattachment_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3*>(&::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::default_instance());
  sentat_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  deliveredat_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  confirmation_ = const_cast< ::Diadoc::Api::Proto::Docflow::ConfirmationDocflow*>(&::Diadoc::Api::Proto::Docflow::ConfirmationDocflow::default_instance());
}

ReceiptDocflowV3::ReceiptDocflowV3(const ReceiptDocflowV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3)
}

void ReceiptDocflowV3::SharedCtor() {
  _cached_size_ = 0;
  isfinished_ = false;
  receiptattachment_ = NULL;
  sentat_ = NULL;
  deliveredat_ = NULL;
  confirmation_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiptDocflowV3::~ReceiptDocflowV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3)
  SharedDtor();
}

void ReceiptDocflowV3::SharedDtor() {
  if (this != default_instance_) {
    delete receiptattachment_;
    delete sentat_;
    delete deliveredat_;
    delete confirmation_;
  }
}

void ReceiptDocflowV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiptDocflowV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiptDocflowV3_descriptor_;
}

const ReceiptDocflowV3& ReceiptDocflowV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  return *default_instance_;
}

ReceiptDocflowV3* ReceiptDocflowV3::default_instance_ = NULL;

ReceiptDocflowV3* ReceiptDocflowV3::New() const {
  return new ReceiptDocflowV3;
}

void ReceiptDocflowV3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReceiptDocflowV3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(isfinished_, status_);
    if (has_receiptattachment()) {
      if (receiptattachment_ != NULL) receiptattachment_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
    }
    if (has_sentat()) {
      if (sentat_ != NULL) sentat_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_deliveredat()) {
      if (deliveredat_ != NULL) deliveredat_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_confirmation()) {
      if (confirmation_ != NULL) confirmation_->::Diadoc::Api::Proto::Docflow::ConfirmationDocflow::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiptDocflowV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ReceiptAttachment;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 ReceiptAttachment = 2;
      case 2: {
        if (tag == 18) {
         parse_ReceiptAttachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiptattachment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SentAt;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
      case 3: {
        if (tag == 26) {
         parse_SentAt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sentat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DeliveredAt;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
      case 4: {
        if (tag == 34) {
         parse_DeliveredAt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deliveredat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Confirmation;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow Confirmation = 5;
      case 5: {
        if (tag == 42) {
         parse_Confirmation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Status;
        break;
      }

      // required .Diadoc.Api.Proto.Documents.GeneralReceiptStatus Status = 6;
      case 6: {
        if (tag == 48) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::GeneralReceiptStatus_IsValid(value)) {
            set_status(static_cast< ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3)
  return false;
#undef DO_
}

void ReceiptDocflowV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3)
  // required bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 ReceiptAttachment = 2;
  if (has_receiptattachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->receiptattachment(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
  if (has_sentat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sentat(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
  if (has_deliveredat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->deliveredat(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow Confirmation = 5;
  if (has_confirmation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->confirmation(), output);
  }

  // required .Diadoc.Api.Proto.Documents.GeneralReceiptStatus Status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3)
}

::google::protobuf::uint8* ReceiptDocflowV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3)
  // required bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 ReceiptAttachment = 2;
  if (has_receiptattachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->receiptattachment(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
  if (has_sentat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sentat(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
  if (has_deliveredat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->deliveredat(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow Confirmation = 5;
  if (has_confirmation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->confirmation(), target);
  }

  // required .Diadoc.Api.Proto.Documents.GeneralReceiptStatus Status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.ReceiptDocflowV3)
  return target;
}

int ReceiptDocflowV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 ReceiptAttachment = 2;
    if (has_receiptattachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiptattachment());
    }

    // optional .Diadoc.Api.Proto.Timestamp SentAt = 3;
    if (has_sentat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sentat());
    }

    // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 4;
    if (has_deliveredat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deliveredat());
    }

    // optional .Diadoc.Api.Proto.Docflow.ConfirmationDocflow Confirmation = 5;
    if (has_confirmation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmation());
    }

    // required .Diadoc.Api.Proto.Documents.GeneralReceiptStatus Status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiptDocflowV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiptDocflowV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiptDocflowV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiptDocflowV3::MergeFrom(const ReceiptDocflowV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_receiptattachment()) {
      mutable_receiptattachment()->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::MergeFrom(from.receiptattachment());
    }
    if (from.has_sentat()) {
      mutable_sentat()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.sentat());
    }
    if (from.has_deliveredat()) {
      mutable_deliveredat()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.deliveredat());
    }
    if (from.has_confirmation()) {
      mutable_confirmation()->::Diadoc::Api::Proto::Docflow::ConfirmationDocflow::MergeFrom(from.confirmation());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiptDocflowV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiptDocflowV3::CopyFrom(const ReceiptDocflowV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiptDocflowV3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;

  if (has_receiptattachment()) {
    if (!this->receiptattachment().IsInitialized()) return false;
  }
  if (has_sentat()) {
    if (!this->sentat().IsInitialized()) return false;
  }
  if (has_deliveredat()) {
    if (!this->deliveredat().IsInitialized()) return false;
  }
  if (has_confirmation()) {
    if (!this->confirmation().IsInitialized()) return false;
  }
  return true;
}

void ReceiptDocflowV3::Swap(ReceiptDocflowV3* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(receiptattachment_, other->receiptattachment_);
    std::swap(sentat_, other->sentat_);
    std::swap(deliveredat_, other->deliveredat_);
    std::swap(confirmation_, other->confirmation_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiptDocflowV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiptDocflowV3_descriptor_;
  metadata.reflection = ReceiptDocflowV3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OuterDocflow::kDocflowNamedIdFieldNumber;
const int OuterDocflow::kParentEntityIdFieldNumber;
const int OuterDocflow::kOuterDocflowEntityIdFieldNumber;
#endif  // !_MSC_VER

OuterDocflow::OuterDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.OuterDocflow)
}

void OuterDocflow::InitAsDefaultInstance() {
}

OuterDocflow::OuterDocflow(const OuterDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.OuterDocflow)
}

void OuterDocflow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  docflownamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  outerdocflowentityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OuterDocflow::~OuterDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.OuterDocflow)
  SharedDtor();
}

void OuterDocflow::SharedDtor() {
  if (docflownamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete docflownamedid_;
  }
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (outerdocflowentityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete outerdocflowentityid_;
  }
  if (this != default_instance_) {
  }
}

void OuterDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OuterDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OuterDocflow_descriptor_;
}

const OuterDocflow& OuterDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  return *default_instance_;
}

OuterDocflow* OuterDocflow::default_instance_ = NULL;

OuterDocflow* OuterDocflow::New() const {
  return new OuterDocflow;
}

void OuterDocflow::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_docflownamedid()) {
      if (docflownamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        docflownamedid_->clear();
      }
    }
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parententityid_->clear();
      }
    }
    if (has_outerdocflowentityid()) {
      if (outerdocflowentityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        outerdocflowentityid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OuterDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.OuterDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string DocflowNamedId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docflownamedid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->docflownamedid().data(), this->docflownamedid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "docflownamedid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ParentEntityId;
        break;
      }

      // required string ParentEntityId = 2;
      case 2: {
        if (tag == 18) {
         parse_ParentEntityId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parententityid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_OuterDocflowEntityId;
        break;
      }

      // required string OuterDocflowEntityId = 3;
      case 3: {
        if (tag == 26) {
         parse_OuterDocflowEntityId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outerdocflowentityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->outerdocflowentityid().data(), this->outerdocflowentityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "outerdocflowentityid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.OuterDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.OuterDocflow)
  return false;
#undef DO_
}

void OuterDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.OuterDocflow)
  // required string DocflowNamedId = 1;
  if (has_docflownamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docflownamedid().data(), this->docflownamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "docflownamedid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->docflownamedid(), output);
  }

  // required string ParentEntityId = 2;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->parententityid(), output);
  }

  // required string OuterDocflowEntityId = 3;
  if (has_outerdocflowentityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outerdocflowentityid().data(), this->outerdocflowentityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "outerdocflowentityid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->outerdocflowentityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.OuterDocflow)
}

::google::protobuf::uint8* OuterDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.OuterDocflow)
  // required string DocflowNamedId = 1;
  if (has_docflownamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docflownamedid().data(), this->docflownamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "docflownamedid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->docflownamedid(), target);
  }

  // required string ParentEntityId = 2;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->parententityid(), target);
  }

  // required string OuterDocflowEntityId = 3;
  if (has_outerdocflowentityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outerdocflowentityid().data(), this->outerdocflowentityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "outerdocflowentityid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->outerdocflowentityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.OuterDocflow)
  return target;
}

int OuterDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string DocflowNamedId = 1;
    if (has_docflownamedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->docflownamedid());
    }

    // required string ParentEntityId = 2;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // required string OuterDocflowEntityId = 3;
    if (has_outerdocflowentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outerdocflowentityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OuterDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OuterDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OuterDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OuterDocflow::MergeFrom(const OuterDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_docflownamedid()) {
      set_docflownamedid(from.docflownamedid());
    }
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_outerdocflowentityid()) {
      set_outerdocflowentityid(from.outerdocflowentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OuterDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OuterDocflow::CopyFrom(const OuterDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OuterDocflow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OuterDocflow::Swap(OuterDocflow* other) {
  if (other != this) {
    std::swap(docflownamedid_, other->docflownamedid_);
    std::swap(parententityid_, other->parententityid_);
    std::swap(outerdocflowentityid_, other->outerdocflowentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OuterDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OuterDocflow_descriptor_;
  metadata.reflection = OuterDocflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OuterDocflowEntities::kDocflowNamedIdFieldNumber;
const int OuterDocflowEntities::kDocflowFriendlyNameFieldNumber;
const int OuterDocflowEntities::kStatusEntitiesFieldNumber;
#endif  // !_MSC_VER

OuterDocflowEntities::OuterDocflowEntities()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.OuterDocflowEntities)
}

void OuterDocflowEntities::InitAsDefaultInstance() {
}

OuterDocflowEntities::OuterDocflowEntities(const OuterDocflowEntities& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.OuterDocflowEntities)
}

void OuterDocflowEntities::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  docflownamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  docflowfriendlyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OuterDocflowEntities::~OuterDocflowEntities() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.OuterDocflowEntities)
  SharedDtor();
}

void OuterDocflowEntities::SharedDtor() {
  if (docflownamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete docflownamedid_;
  }
  if (docflowfriendlyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete docflowfriendlyname_;
  }
  if (this != default_instance_) {
  }
}

void OuterDocflowEntities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OuterDocflowEntities::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OuterDocflowEntities_descriptor_;
}

const OuterDocflowEntities& OuterDocflowEntities::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  return *default_instance_;
}

OuterDocflowEntities* OuterDocflowEntities::default_instance_ = NULL;

OuterDocflowEntities* OuterDocflowEntities::New() const {
  return new OuterDocflowEntities;
}

void OuterDocflowEntities::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_docflownamedid()) {
      if (docflownamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        docflownamedid_->clear();
      }
    }
    if (has_docflowfriendlyname()) {
      if (docflowfriendlyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        docflowfriendlyname_->clear();
      }
    }
  }
  statusentities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OuterDocflowEntities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.OuterDocflowEntities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string DocflowNamedId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docflownamedid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->docflownamedid().data(), this->docflownamedid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "docflownamedid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DocflowFriendlyName;
        break;
      }

      // required string DocflowFriendlyName = 2;
      case 2: {
        if (tag == 18) {
         parse_DocflowFriendlyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docflowfriendlyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->docflowfriendlyname().data(), this->docflowfriendlyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "docflowfriendlyname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_StatusEntities;
        break;
      }

      // repeated .Diadoc.Api.Proto.Docflow.StatusEntity StatusEntities = 3;
      case 3: {
        if (tag == 26) {
         parse_StatusEntities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statusentities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_StatusEntities;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.OuterDocflowEntities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.OuterDocflowEntities)
  return false;
#undef DO_
}

void OuterDocflowEntities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.OuterDocflowEntities)
  // required string DocflowNamedId = 1;
  if (has_docflownamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docflownamedid().data(), this->docflownamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "docflownamedid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->docflownamedid(), output);
  }

  // required string DocflowFriendlyName = 2;
  if (has_docflowfriendlyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docflowfriendlyname().data(), this->docflowfriendlyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "docflowfriendlyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->docflowfriendlyname(), output);
  }

  // repeated .Diadoc.Api.Proto.Docflow.StatusEntity StatusEntities = 3;
  for (int i = 0; i < this->statusentities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->statusentities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.OuterDocflowEntities)
}

::google::protobuf::uint8* OuterDocflowEntities::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.OuterDocflowEntities)
  // required string DocflowNamedId = 1;
  if (has_docflownamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docflownamedid().data(), this->docflownamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "docflownamedid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->docflownamedid(), target);
  }

  // required string DocflowFriendlyName = 2;
  if (has_docflowfriendlyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docflowfriendlyname().data(), this->docflowfriendlyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "docflowfriendlyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->docflowfriendlyname(), target);
  }

  // repeated .Diadoc.Api.Proto.Docflow.StatusEntity StatusEntities = 3;
  for (int i = 0; i < this->statusentities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->statusentities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.OuterDocflowEntities)
  return target;
}

int OuterDocflowEntities::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string DocflowNamedId = 1;
    if (has_docflownamedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->docflownamedid());
    }

    // required string DocflowFriendlyName = 2;
    if (has_docflowfriendlyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->docflowfriendlyname());
    }

  }
  // repeated .Diadoc.Api.Proto.Docflow.StatusEntity StatusEntities = 3;
  total_size += 1 * this->statusentities_size();
  for (int i = 0; i < this->statusentities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statusentities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OuterDocflowEntities::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OuterDocflowEntities* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OuterDocflowEntities*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OuterDocflowEntities::MergeFrom(const OuterDocflowEntities& from) {
  GOOGLE_CHECK_NE(&from, this);
  statusentities_.MergeFrom(from.statusentities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_docflownamedid()) {
      set_docflownamedid(from.docflownamedid());
    }
    if (from.has_docflowfriendlyname()) {
      set_docflowfriendlyname(from.docflowfriendlyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OuterDocflowEntities::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OuterDocflowEntities::CopyFrom(const OuterDocflowEntities& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OuterDocflowEntities::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->statusentities())) return false;
  return true;
}

void OuterDocflowEntities::Swap(OuterDocflowEntities* other) {
  if (other != this) {
    std::swap(docflownamedid_, other->docflownamedid_);
    std::swap(docflowfriendlyname_, other->docflowfriendlyname_);
    statusentities_.Swap(&other->statusentities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OuterDocflowEntities::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OuterDocflowEntities_descriptor_;
  metadata.reflection = OuterDocflowEntities_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusEntity::kAttachmentFieldNumber;
const int StatusEntity::kStatusFieldNumber;
#endif  // !_MSC_VER

StatusEntity::StatusEntity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.StatusEntity)
}

void StatusEntity::InitAsDefaultInstance() {
  attachment_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignedAttachmentV3*>(&::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::default_instance());
  status_ = const_cast< ::Diadoc::Api::Proto::Status*>(&::Diadoc::Api::Proto::Status::default_instance());
}

StatusEntity::StatusEntity(const StatusEntity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.StatusEntity)
}

void StatusEntity::SharedCtor() {
  _cached_size_ = 0;
  attachment_ = NULL;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusEntity::~StatusEntity() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.StatusEntity)
  SharedDtor();
}

void StatusEntity::SharedDtor() {
  if (this != default_instance_) {
    delete attachment_;
    delete status_;
  }
}

void StatusEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusEntity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusEntity_descriptor_;
}

const StatusEntity& StatusEntity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowV3_2eproto();
  return *default_instance_;
}

StatusEntity* StatusEntity::default_instance_ = NULL;

StatusEntity* StatusEntity::New() const {
  return new StatusEntity;
}

void StatusEntity::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::Diadoc::Api::Proto::Status::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.StatusEntity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Attachment = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Status;
        break;
      }

      // required .Diadoc.Api.Proto.Status Status = 2;
      case 2: {
        if (tag == 18) {
         parse_Status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.StatusEntity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.StatusEntity)
  return false;
#undef DO_
}

void StatusEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.StatusEntity)
  // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Attachment = 1;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attachment(), output);
  }

  // required .Diadoc.Api.Proto.Status Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.StatusEntity)
}

::google::protobuf::uint8* StatusEntity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.StatusEntity)
  // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Attachment = 1;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attachment(), target);
  }

  // required .Diadoc.Api.Proto.Status Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.StatusEntity)
  return target;
}

int StatusEntity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Docflow.SignedAttachmentV3 Attachment = 1;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

    // required .Diadoc.Api.Proto.Status Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusEntity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusEntity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusEntity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusEntity::MergeFrom(const StatusEntity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attachment()) {
      mutable_attachment()->::Diadoc::Api::Proto::Docflow::SignedAttachmentV3::MergeFrom(from.attachment());
    }
    if (from.has_status()) {
      mutable_status()->::Diadoc::Api::Proto::Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusEntity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusEntity::CopyFrom(const StatusEntity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusEntity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_attachment()) {
    if (!this->attachment().IsInitialized()) return false;
  }
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void StatusEntity::Swap(StatusEntity* other) {
  if (other != this) {
    std::swap(attachment_, other->attachment_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusEntity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusEntity_descriptor_;
  metadata.reflection = StatusEntity_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
