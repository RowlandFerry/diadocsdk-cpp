// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/InvoiceDocflow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Docflow/InvoiceDocflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

namespace {

const ::google::protobuf::Descriptor* InboundInvoiceDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InboundInvoiceDocflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutboundInvoiceDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutboundInvoiceDocflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvoiceConfirmationDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvoiceConfirmationDocflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* InboundInvoiceReceiptDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InboundInvoiceReceiptDocflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvoiceCorrectionRequestDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvoiceCorrectionRequestDocflow_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Docflow_2fInvoiceDocflow_2eproto() {
  protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Docflow/InvoiceDocflow.proto");
  GOOGLE_CHECK(file != NULL);
  InboundInvoiceDocflow_descriptor_ = file->message_type(0);
  static const int InboundInvoiceDocflow_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundInvoiceDocflow, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundInvoiceDocflow, receiptdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundInvoiceDocflow, confirmationdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundInvoiceDocflow, correctionrequestdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundInvoiceDocflow, confirmationtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundInvoiceDocflow, isamendmentrequested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundInvoiceDocflow, isrevised_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundInvoiceDocflow, iscorrected_),
  };
  InboundInvoiceDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InboundInvoiceDocflow_descriptor_,
      InboundInvoiceDocflow::default_instance_,
      InboundInvoiceDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundInvoiceDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundInvoiceDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InboundInvoiceDocflow));
  OutboundInvoiceDocflow_descriptor_ = file->message_type(1);
  static const int OutboundInvoiceDocflow_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundInvoiceDocflow, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundInvoiceDocflow, receiptdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundInvoiceDocflow, confirmationdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundInvoiceDocflow, correctionrequestdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundInvoiceDocflow, confirmationtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundInvoiceDocflow, isamendmentrequested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundInvoiceDocflow, isrevised_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundInvoiceDocflow, iscorrected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundInvoiceDocflow, candocumentbesignedbysender_),
  };
  OutboundInvoiceDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutboundInvoiceDocflow_descriptor_,
      OutboundInvoiceDocflow::default_instance_,
      OutboundInvoiceDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundInvoiceDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundInvoiceDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutboundInvoiceDocflow));
  InvoiceConfirmationDocflow_descriptor_ = file->message_type(2);
  static const int InvoiceConfirmationDocflow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceConfirmationDocflow, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceConfirmationDocflow, confirmationattachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceConfirmationDocflow, receiptdocflow_),
  };
  InvoiceConfirmationDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvoiceConfirmationDocflow_descriptor_,
      InvoiceConfirmationDocflow::default_instance_,
      InvoiceConfirmationDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceConfirmationDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceConfirmationDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvoiceConfirmationDocflow));
  InboundInvoiceReceiptDocflow_descriptor_ = file->message_type(3);
  static const int InboundInvoiceReceiptDocflow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundInvoiceReceiptDocflow, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundInvoiceReceiptDocflow, receiptattachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundInvoiceReceiptDocflow, confirmationdocflow_),
  };
  InboundInvoiceReceiptDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InboundInvoiceReceiptDocflow_descriptor_,
      InboundInvoiceReceiptDocflow::default_instance_,
      InboundInvoiceReceiptDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundInvoiceReceiptDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundInvoiceReceiptDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InboundInvoiceReceiptDocflow));
  InvoiceCorrectionRequestDocflow_descriptor_ = file->message_type(4);
  static const int InvoiceCorrectionRequestDocflow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionRequestDocflow, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionRequestDocflow, correctionrequestattachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionRequestDocflow, receiptdocflow_),
  };
  InvoiceCorrectionRequestDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvoiceCorrectionRequestDocflow_descriptor_,
      InvoiceCorrectionRequestDocflow::default_instance_,
      InvoiceCorrectionRequestDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionRequestDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionRequestDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvoiceCorrectionRequestDocflow));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Docflow_2fInvoiceDocflow_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InboundInvoiceDocflow_descriptor_, &InboundInvoiceDocflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutboundInvoiceDocflow_descriptor_, &OutboundInvoiceDocflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvoiceConfirmationDocflow_descriptor_, &InvoiceConfirmationDocflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InboundInvoiceReceiptDocflow_descriptor_, &InboundInvoiceReceiptDocflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvoiceCorrectionRequestDocflow_descriptor_, &InvoiceCorrectionRequestDocflow::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Docflow_2fInvoiceDocflow_2eproto() {
  delete InboundInvoiceDocflow::default_instance_;
  delete InboundInvoiceDocflow_reflection_;
  delete OutboundInvoiceDocflow::default_instance_;
  delete OutboundInvoiceDocflow_reflection_;
  delete InvoiceConfirmationDocflow::default_instance_;
  delete InvoiceConfirmationDocflow_reflection_;
  delete InboundInvoiceReceiptDocflow::default_instance_;
  delete InboundInvoiceReceiptDocflow_reflection_;
  delete InvoiceCorrectionRequestDocflow::default_instance_;
  delete InvoiceCorrectionRequestDocflow_reflection_;
}

void protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fAttachment_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fReceiptDocflow_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034Docflow/InvoiceDocflow.proto\022\030Diadoc.A"
    "pi.Proto.Docflow\032\017Timestamp.proto\032\030Docfl"
    "ow/Attachment.proto\032\034Docflow/ReceiptDocf"
    "low.proto\"\255\003\n\025InboundInvoiceDocflow\022\022\n\nI"
    "sFinished\030\001 \001(\010\022N\n\016ReceiptDocflow\030\002 \001(\0132"
    "6.Diadoc.Api.Proto.Docflow.InboundInvoic"
    "eReceiptDocflow\022Q\n\023ConfirmationDocflow\030\003"
    " \001(\01324.Diadoc.Api.Proto.Docflow.InvoiceC"
    "onfirmationDocflow\022[\n\030CorrectionRequestD"
    "ocflow\030\004 \001(\01329.Diadoc.Api.Proto.Docflow."
    "InvoiceCorrectionRequestDocflow\022:\n\025Confi"
    "rmationTimestamp\030\005 \001(\0132\033.Diadoc.Api.Prot"
    "o.Timestamp\022\034\n\024IsAmendmentRequested\030\006 \001("
    "\010\022\021\n\tIsRevised\030\007 \001(\010\022\023\n\013IsCorrected\030\010 \001("
    "\010\"\305\003\n\026OutboundInvoiceDocflow\022\022\n\nIsFinish"
    "ed\030\001 \001(\010\022@\n\016ReceiptDocflow\030\002 \001(\0132(.Diado"
    "c.Api.Proto.Docflow.ReceiptDocflow\022Q\n\023Co"
    "nfirmationDocflow\030\003 \001(\01324.Diadoc.Api.Pro"
    "to.Docflow.InvoiceConfirmationDocflow\022[\n"
    "\030CorrectionRequestDocflow\030\004 \001(\01329.Diadoc"
    ".Api.Proto.Docflow.InvoiceCorrectionRequ"
    "estDocflow\022:\n\025ConfirmationTimestamp\030\005 \001("
    "\0132\033.Diadoc.Api.Proto.Timestamp\022\034\n\024IsAmen"
    "dmentRequested\030\006 \001(\010\022\021\n\tIsRevised\030\007 \001(\010\022"
    "\023\n\013IsCorrected\030\010 \001(\010\022#\n\033CanDocumentBeSig"
    "nedBySender\030\t \001(\010\"\276\001\n\032InvoiceConfirmatio"
    "nDocflow\022\022\n\nIsFinished\030\001 \001(\010\022J\n\026Confirma"
    "tionAttachment\030\002 \001(\0132*.Diadoc.Api.Proto."
    "Docflow.SignedAttachment\022@\n\016ReceiptDocfl"
    "ow\030\003 \001(\0132(.Diadoc.Api.Proto.Docflow.Rece"
    "iptDocflow\"\314\001\n\034InboundInvoiceReceiptDocf"
    "low\022\022\n\nIsFinished\030\001 \001(\010\022E\n\021ReceiptAttach"
    "ment\030\002 \001(\0132*.Diadoc.Api.Proto.Docflow.Si"
    "gnedAttachment\022Q\n\023ConfirmationDocflow\030\003 "
    "\001(\01324.Diadoc.Api.Proto.Docflow.InvoiceCo"
    "nfirmationDocflow\"\310\001\n\037InvoiceCorrectionR"
    "equestDocflow\022\022\n\nIsFinished\030\001 \001(\010\022O\n\033Cor"
    "rectionRequestAttachment\030\002 \001(\0132*.Diadoc."
    "Api.Proto.Docflow.SignedAttachment\022@\n\016Re"
    "ceiptDocflow\030\003 \001(\0132(.Diadoc.Api.Proto.Do"
    "cflow.ReceiptDocflow", 1620);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Docflow/InvoiceDocflow.proto", &protobuf_RegisterTypes);
  InboundInvoiceDocflow::default_instance_ = new InboundInvoiceDocflow();
  OutboundInvoiceDocflow::default_instance_ = new OutboundInvoiceDocflow();
  InvoiceConfirmationDocflow::default_instance_ = new InvoiceConfirmationDocflow();
  InboundInvoiceReceiptDocflow::default_instance_ = new InboundInvoiceReceiptDocflow();
  InvoiceCorrectionRequestDocflow::default_instance_ = new InvoiceCorrectionRequestDocflow();
  InboundInvoiceDocflow::default_instance_->InitAsDefaultInstance();
  OutboundInvoiceDocflow::default_instance_->InitAsDefaultInstance();
  InvoiceConfirmationDocflow::default_instance_->InitAsDefaultInstance();
  InboundInvoiceReceiptDocflow::default_instance_->InitAsDefaultInstance();
  InvoiceCorrectionRequestDocflow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Docflow_2fInvoiceDocflow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Docflow_2fInvoiceDocflow_2eproto {
  StaticDescriptorInitializer_Docflow_2fInvoiceDocflow_2eproto() {
    protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto();
  }
} static_descriptor_initializer_Docflow_2fInvoiceDocflow_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int InboundInvoiceDocflow::kIsFinishedFieldNumber;
const int InboundInvoiceDocflow::kReceiptDocflowFieldNumber;
const int InboundInvoiceDocflow::kConfirmationDocflowFieldNumber;
const int InboundInvoiceDocflow::kCorrectionRequestDocflowFieldNumber;
const int InboundInvoiceDocflow::kConfirmationTimestampFieldNumber;
const int InboundInvoiceDocflow::kIsAmendmentRequestedFieldNumber;
const int InboundInvoiceDocflow::kIsRevisedFieldNumber;
const int InboundInvoiceDocflow::kIsCorrectedFieldNumber;
#endif  // !_MSC_VER

InboundInvoiceDocflow::InboundInvoiceDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow)
}

void InboundInvoiceDocflow::InitAsDefaultInstance() {
  receiptdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow*>(&::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow::default_instance());
  confirmationdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow*>(&::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::default_instance());
  correctionrequestdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow*>(&::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::default_instance());
  confirmationtimestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
}

InboundInvoiceDocflow::InboundInvoiceDocflow(const InboundInvoiceDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow)
}

void InboundInvoiceDocflow::SharedCtor() {
  _cached_size_ = 0;
  isfinished_ = false;
  receiptdocflow_ = NULL;
  confirmationdocflow_ = NULL;
  correctionrequestdocflow_ = NULL;
  confirmationtimestamp_ = NULL;
  isamendmentrequested_ = false;
  isrevised_ = false;
  iscorrected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InboundInvoiceDocflow::~InboundInvoiceDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow)
  SharedDtor();
}

void InboundInvoiceDocflow::SharedDtor() {
  if (this != default_instance_) {
    delete receiptdocflow_;
    delete confirmationdocflow_;
    delete correctionrequestdocflow_;
    delete confirmationtimestamp_;
  }
}

void InboundInvoiceDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InboundInvoiceDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InboundInvoiceDocflow_descriptor_;
}

const InboundInvoiceDocflow& InboundInvoiceDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto();
  return *default_instance_;
}

InboundInvoiceDocflow* InboundInvoiceDocflow::default_instance_ = NULL;

InboundInvoiceDocflow* InboundInvoiceDocflow::New() const {
  return new InboundInvoiceDocflow;
}

void InboundInvoiceDocflow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InboundInvoiceDocflow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(isfinished_, iscorrected_);
    if (has_receiptdocflow()) {
      if (receiptdocflow_ != NULL) receiptdocflow_->::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow::Clear();
    }
    if (has_confirmationdocflow()) {
      if (confirmationdocflow_ != NULL) confirmationdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::Clear();
    }
    if (has_correctionrequestdocflow()) {
      if (correctionrequestdocflow_ != NULL) correctionrequestdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::Clear();
    }
    if (has_confirmationtimestamp()) {
      if (confirmationtimestamp_ != NULL) confirmationtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InboundInvoiceDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ReceiptDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow ReceiptDocflow = 2;
      case 2: {
        if (tag == 18) {
         parse_ReceiptDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiptdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ConfirmationDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
      case 3: {
        if (tag == 26) {
         parse_ConfirmationDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmationdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CorrectionRequestDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
      case 4: {
        if (tag == 34) {
         parse_CorrectionRequestDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_correctionrequestdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ConfirmationTimestamp;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
      case 5: {
        if (tag == 42) {
         parse_ConfirmationTimestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmationtimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsAmendmentRequested;
        break;
      }

      // optional bool IsAmendmentRequested = 6;
      case 6: {
        if (tag == 48) {
         parse_IsAmendmentRequested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isamendmentrequested_)));
          set_has_isamendmentrequested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_IsRevised;
        break;
      }

      // optional bool IsRevised = 7;
      case 7: {
        if (tag == 56) {
         parse_IsRevised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrevised_)));
          set_has_isrevised();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_IsCorrected;
        break;
      }

      // optional bool IsCorrected = 8;
      case 8: {
        if (tag == 64) {
         parse_IsCorrected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscorrected_)));
          set_has_iscorrected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow)
  return false;
#undef DO_
}

void InboundInvoiceDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow ReceiptDocflow = 2;
  if (has_receiptdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->receiptdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
  if (has_confirmationdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->confirmationdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
  if (has_correctionrequestdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->correctionrequestdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
  if (has_confirmationtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->confirmationtimestamp(), output);
  }

  // optional bool IsAmendmentRequested = 6;
  if (has_isamendmentrequested()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isamendmentrequested(), output);
  }

  // optional bool IsRevised = 7;
  if (has_isrevised()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isrevised(), output);
  }

  // optional bool IsCorrected = 8;
  if (has_iscorrected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->iscorrected(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow)
}

::google::protobuf::uint8* InboundInvoiceDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow ReceiptDocflow = 2;
  if (has_receiptdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->receiptdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
  if (has_confirmationdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->confirmationdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
  if (has_correctionrequestdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->correctionrequestdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
  if (has_confirmationtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->confirmationtimestamp(), target);
  }

  // optional bool IsAmendmentRequested = 6;
  if (has_isamendmentrequested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isamendmentrequested(), target);
  }

  // optional bool IsRevised = 7;
  if (has_isrevised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isrevised(), target);
  }

  // optional bool IsCorrected = 8;
  if (has_iscorrected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->iscorrected(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow)
  return target;
}

int InboundInvoiceDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow ReceiptDocflow = 2;
    if (has_receiptdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiptdocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
    if (has_confirmationdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmationdocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
    if (has_correctionrequestdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->correctionrequestdocflow());
    }

    // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
    if (has_confirmationtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmationtimestamp());
    }

    // optional bool IsAmendmentRequested = 6;
    if (has_isamendmentrequested()) {
      total_size += 1 + 1;
    }

    // optional bool IsRevised = 7;
    if (has_isrevised()) {
      total_size += 1 + 1;
    }

    // optional bool IsCorrected = 8;
    if (has_iscorrected()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InboundInvoiceDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InboundInvoiceDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InboundInvoiceDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InboundInvoiceDocflow::MergeFrom(const InboundInvoiceDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_receiptdocflow()) {
      mutable_receiptdocflow()->::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow::MergeFrom(from.receiptdocflow());
    }
    if (from.has_confirmationdocflow()) {
      mutable_confirmationdocflow()->::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::MergeFrom(from.confirmationdocflow());
    }
    if (from.has_correctionrequestdocflow()) {
      mutable_correctionrequestdocflow()->::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::MergeFrom(from.correctionrequestdocflow());
    }
    if (from.has_confirmationtimestamp()) {
      mutable_confirmationtimestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.confirmationtimestamp());
    }
    if (from.has_isamendmentrequested()) {
      set_isamendmentrequested(from.isamendmentrequested());
    }
    if (from.has_isrevised()) {
      set_isrevised(from.isrevised());
    }
    if (from.has_iscorrected()) {
      set_iscorrected(from.iscorrected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InboundInvoiceDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InboundInvoiceDocflow::CopyFrom(const InboundInvoiceDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InboundInvoiceDocflow::IsInitialized() const {

  if (has_receiptdocflow()) {
    if (!this->receiptdocflow().IsInitialized()) return false;
  }
  if (has_confirmationdocflow()) {
    if (!this->confirmationdocflow().IsInitialized()) return false;
  }
  if (has_correctionrequestdocflow()) {
    if (!this->correctionrequestdocflow().IsInitialized()) return false;
  }
  if (has_confirmationtimestamp()) {
    if (!this->confirmationtimestamp().IsInitialized()) return false;
  }
  return true;
}

void InboundInvoiceDocflow::Swap(InboundInvoiceDocflow* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(receiptdocflow_, other->receiptdocflow_);
    std::swap(confirmationdocflow_, other->confirmationdocflow_);
    std::swap(correctionrequestdocflow_, other->correctionrequestdocflow_);
    std::swap(confirmationtimestamp_, other->confirmationtimestamp_);
    std::swap(isamendmentrequested_, other->isamendmentrequested_);
    std::swap(isrevised_, other->isrevised_);
    std::swap(iscorrected_, other->iscorrected_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InboundInvoiceDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InboundInvoiceDocflow_descriptor_;
  metadata.reflection = InboundInvoiceDocflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OutboundInvoiceDocflow::kIsFinishedFieldNumber;
const int OutboundInvoiceDocflow::kReceiptDocflowFieldNumber;
const int OutboundInvoiceDocflow::kConfirmationDocflowFieldNumber;
const int OutboundInvoiceDocflow::kCorrectionRequestDocflowFieldNumber;
const int OutboundInvoiceDocflow::kConfirmationTimestampFieldNumber;
const int OutboundInvoiceDocflow::kIsAmendmentRequestedFieldNumber;
const int OutboundInvoiceDocflow::kIsRevisedFieldNumber;
const int OutboundInvoiceDocflow::kIsCorrectedFieldNumber;
const int OutboundInvoiceDocflow::kCanDocumentBeSignedBySenderFieldNumber;
#endif  // !_MSC_VER

OutboundInvoiceDocflow::OutboundInvoiceDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow)
}

void OutboundInvoiceDocflow::InitAsDefaultInstance() {
  receiptdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::ReceiptDocflow*>(&::Diadoc::Api::Proto::Docflow::ReceiptDocflow::default_instance());
  confirmationdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow*>(&::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::default_instance());
  correctionrequestdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow*>(&::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::default_instance());
  confirmationtimestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
}

OutboundInvoiceDocflow::OutboundInvoiceDocflow(const OutboundInvoiceDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow)
}

void OutboundInvoiceDocflow::SharedCtor() {
  _cached_size_ = 0;
  isfinished_ = false;
  receiptdocflow_ = NULL;
  confirmationdocflow_ = NULL;
  correctionrequestdocflow_ = NULL;
  confirmationtimestamp_ = NULL;
  isamendmentrequested_ = false;
  isrevised_ = false;
  iscorrected_ = false;
  candocumentbesignedbysender_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutboundInvoiceDocflow::~OutboundInvoiceDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow)
  SharedDtor();
}

void OutboundInvoiceDocflow::SharedDtor() {
  if (this != default_instance_) {
    delete receiptdocflow_;
    delete confirmationdocflow_;
    delete correctionrequestdocflow_;
    delete confirmationtimestamp_;
  }
}

void OutboundInvoiceDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutboundInvoiceDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutboundInvoiceDocflow_descriptor_;
}

const OutboundInvoiceDocflow& OutboundInvoiceDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto();
  return *default_instance_;
}

OutboundInvoiceDocflow* OutboundInvoiceDocflow::default_instance_ = NULL;

OutboundInvoiceDocflow* OutboundInvoiceDocflow::New() const {
  return new OutboundInvoiceDocflow;
}

void OutboundInvoiceDocflow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OutboundInvoiceDocflow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(isfinished_, iscorrected_);
    if (has_receiptdocflow()) {
      if (receiptdocflow_ != NULL) receiptdocflow_->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::Clear();
    }
    if (has_confirmationdocflow()) {
      if (confirmationdocflow_ != NULL) confirmationdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::Clear();
    }
    if (has_correctionrequestdocflow()) {
      if (correctionrequestdocflow_ != NULL) correctionrequestdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::Clear();
    }
    if (has_confirmationtimestamp()) {
      if (confirmationtimestamp_ != NULL) confirmationtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
  }
  candocumentbesignedbysender_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutboundInvoiceDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ReceiptDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
      case 2: {
        if (tag == 18) {
         parse_ReceiptDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiptdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ConfirmationDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
      case 3: {
        if (tag == 26) {
         parse_ConfirmationDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmationdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CorrectionRequestDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
      case 4: {
        if (tag == 34) {
         parse_CorrectionRequestDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_correctionrequestdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ConfirmationTimestamp;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
      case 5: {
        if (tag == 42) {
         parse_ConfirmationTimestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmationtimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsAmendmentRequested;
        break;
      }

      // optional bool IsAmendmentRequested = 6;
      case 6: {
        if (tag == 48) {
         parse_IsAmendmentRequested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isamendmentrequested_)));
          set_has_isamendmentrequested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_IsRevised;
        break;
      }

      // optional bool IsRevised = 7;
      case 7: {
        if (tag == 56) {
         parse_IsRevised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrevised_)));
          set_has_isrevised();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_IsCorrected;
        break;
      }

      // optional bool IsCorrected = 8;
      case 8: {
        if (tag == 64) {
         parse_IsCorrected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscorrected_)));
          set_has_iscorrected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_CanDocumentBeSignedBySender;
        break;
      }

      // optional bool CanDocumentBeSignedBySender = 9;
      case 9: {
        if (tag == 72) {
         parse_CanDocumentBeSignedBySender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &candocumentbesignedbysender_)));
          set_has_candocumentbesignedbysender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow)
  return false;
#undef DO_
}

void OutboundInvoiceDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
  if (has_receiptdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->receiptdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
  if (has_confirmationdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->confirmationdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
  if (has_correctionrequestdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->correctionrequestdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
  if (has_confirmationtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->confirmationtimestamp(), output);
  }

  // optional bool IsAmendmentRequested = 6;
  if (has_isamendmentrequested()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isamendmentrequested(), output);
  }

  // optional bool IsRevised = 7;
  if (has_isrevised()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isrevised(), output);
  }

  // optional bool IsCorrected = 8;
  if (has_iscorrected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->iscorrected(), output);
  }

  // optional bool CanDocumentBeSignedBySender = 9;
  if (has_candocumentbesignedbysender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->candocumentbesignedbysender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow)
}

::google::protobuf::uint8* OutboundInvoiceDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
  if (has_receiptdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->receiptdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
  if (has_confirmationdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->confirmationdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
  if (has_correctionrequestdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->correctionrequestdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
  if (has_confirmationtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->confirmationtimestamp(), target);
  }

  // optional bool IsAmendmentRequested = 6;
  if (has_isamendmentrequested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isamendmentrequested(), target);
  }

  // optional bool IsRevised = 7;
  if (has_isrevised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isrevised(), target);
  }

  // optional bool IsCorrected = 8;
  if (has_iscorrected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->iscorrected(), target);
  }

  // optional bool CanDocumentBeSignedBySender = 9;
  if (has_candocumentbesignedbysender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->candocumentbesignedbysender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow)
  return target;
}

int OutboundInvoiceDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
    if (has_receiptdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiptdocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
    if (has_confirmationdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmationdocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
    if (has_correctionrequestdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->correctionrequestdocflow());
    }

    // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
    if (has_confirmationtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmationtimestamp());
    }

    // optional bool IsAmendmentRequested = 6;
    if (has_isamendmentrequested()) {
      total_size += 1 + 1;
    }

    // optional bool IsRevised = 7;
    if (has_isrevised()) {
      total_size += 1 + 1;
    }

    // optional bool IsCorrected = 8;
    if (has_iscorrected()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool CanDocumentBeSignedBySender = 9;
    if (has_candocumentbesignedbysender()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutboundInvoiceDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutboundInvoiceDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutboundInvoiceDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutboundInvoiceDocflow::MergeFrom(const OutboundInvoiceDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_receiptdocflow()) {
      mutable_receiptdocflow()->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::MergeFrom(from.receiptdocflow());
    }
    if (from.has_confirmationdocflow()) {
      mutable_confirmationdocflow()->::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::MergeFrom(from.confirmationdocflow());
    }
    if (from.has_correctionrequestdocflow()) {
      mutable_correctionrequestdocflow()->::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::MergeFrom(from.correctionrequestdocflow());
    }
    if (from.has_confirmationtimestamp()) {
      mutable_confirmationtimestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.confirmationtimestamp());
    }
    if (from.has_isamendmentrequested()) {
      set_isamendmentrequested(from.isamendmentrequested());
    }
    if (from.has_isrevised()) {
      set_isrevised(from.isrevised());
    }
    if (from.has_iscorrected()) {
      set_iscorrected(from.iscorrected());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_candocumentbesignedbysender()) {
      set_candocumentbesignedbysender(from.candocumentbesignedbysender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutboundInvoiceDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutboundInvoiceDocflow::CopyFrom(const OutboundInvoiceDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutboundInvoiceDocflow::IsInitialized() const {

  if (has_receiptdocflow()) {
    if (!this->receiptdocflow().IsInitialized()) return false;
  }
  if (has_confirmationdocflow()) {
    if (!this->confirmationdocflow().IsInitialized()) return false;
  }
  if (has_correctionrequestdocflow()) {
    if (!this->correctionrequestdocflow().IsInitialized()) return false;
  }
  if (has_confirmationtimestamp()) {
    if (!this->confirmationtimestamp().IsInitialized()) return false;
  }
  return true;
}

void OutboundInvoiceDocflow::Swap(OutboundInvoiceDocflow* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(receiptdocflow_, other->receiptdocflow_);
    std::swap(confirmationdocflow_, other->confirmationdocflow_);
    std::swap(correctionrequestdocflow_, other->correctionrequestdocflow_);
    std::swap(confirmationtimestamp_, other->confirmationtimestamp_);
    std::swap(isamendmentrequested_, other->isamendmentrequested_);
    std::swap(isrevised_, other->isrevised_);
    std::swap(iscorrected_, other->iscorrected_);
    std::swap(candocumentbesignedbysender_, other->candocumentbesignedbysender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OutboundInvoiceDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutboundInvoiceDocflow_descriptor_;
  metadata.reflection = OutboundInvoiceDocflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvoiceConfirmationDocflow::kIsFinishedFieldNumber;
const int InvoiceConfirmationDocflow::kConfirmationAttachmentFieldNumber;
const int InvoiceConfirmationDocflow::kReceiptDocflowFieldNumber;
#endif  // !_MSC_VER

InvoiceConfirmationDocflow::InvoiceConfirmationDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow)
}

void InvoiceConfirmationDocflow::InitAsDefaultInstance() {
  confirmationattachment_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignedAttachment*>(&::Diadoc::Api::Proto::Docflow::SignedAttachment::default_instance());
  receiptdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::ReceiptDocflow*>(&::Diadoc::Api::Proto::Docflow::ReceiptDocflow::default_instance());
}

InvoiceConfirmationDocflow::InvoiceConfirmationDocflow(const InvoiceConfirmationDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow)
}

void InvoiceConfirmationDocflow::SharedCtor() {
  _cached_size_ = 0;
  isfinished_ = false;
  confirmationattachment_ = NULL;
  receiptdocflow_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvoiceConfirmationDocflow::~InvoiceConfirmationDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow)
  SharedDtor();
}

void InvoiceConfirmationDocflow::SharedDtor() {
  if (this != default_instance_) {
    delete confirmationattachment_;
    delete receiptdocflow_;
  }
}

void InvoiceConfirmationDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvoiceConfirmationDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvoiceConfirmationDocflow_descriptor_;
}

const InvoiceConfirmationDocflow& InvoiceConfirmationDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto();
  return *default_instance_;
}

InvoiceConfirmationDocflow* InvoiceConfirmationDocflow::default_instance_ = NULL;

InvoiceConfirmationDocflow* InvoiceConfirmationDocflow::New() const {
  return new InvoiceConfirmationDocflow;
}

void InvoiceConfirmationDocflow::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    isfinished_ = false;
    if (has_confirmationattachment()) {
      if (confirmationattachment_ != NULL) confirmationattachment_->::Diadoc::Api::Proto::Docflow::SignedAttachment::Clear();
    }
    if (has_receiptdocflow()) {
      if (receiptdocflow_ != NULL) receiptdocflow_->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvoiceConfirmationDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ConfirmationAttachment;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.SignedAttachment ConfirmationAttachment = 2;
      case 2: {
        if (tag == 18) {
         parse_ConfirmationAttachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmationattachment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ReceiptDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 3;
      case 3: {
        if (tag == 26) {
         parse_ReceiptDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiptdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow)
  return false;
#undef DO_
}

void InvoiceConfirmationDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachment ConfirmationAttachment = 2;
  if (has_confirmationattachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->confirmationattachment(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 3;
  if (has_receiptdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->receiptdocflow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow)
}

::google::protobuf::uint8* InvoiceConfirmationDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachment ConfirmationAttachment = 2;
  if (has_confirmationattachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->confirmationattachment(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 3;
  if (has_receiptdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->receiptdocflow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow)
  return target;
}

int InvoiceConfirmationDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.SignedAttachment ConfirmationAttachment = 2;
    if (has_confirmationattachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmationattachment());
    }

    // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 3;
    if (has_receiptdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiptdocflow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvoiceConfirmationDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvoiceConfirmationDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvoiceConfirmationDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvoiceConfirmationDocflow::MergeFrom(const InvoiceConfirmationDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_confirmationattachment()) {
      mutable_confirmationattachment()->::Diadoc::Api::Proto::Docflow::SignedAttachment::MergeFrom(from.confirmationattachment());
    }
    if (from.has_receiptdocflow()) {
      mutable_receiptdocflow()->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::MergeFrom(from.receiptdocflow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvoiceConfirmationDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvoiceConfirmationDocflow::CopyFrom(const InvoiceConfirmationDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceConfirmationDocflow::IsInitialized() const {

  if (has_confirmationattachment()) {
    if (!this->confirmationattachment().IsInitialized()) return false;
  }
  if (has_receiptdocflow()) {
    if (!this->receiptdocflow().IsInitialized()) return false;
  }
  return true;
}

void InvoiceConfirmationDocflow::Swap(InvoiceConfirmationDocflow* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(confirmationattachment_, other->confirmationattachment_);
    std::swap(receiptdocflow_, other->receiptdocflow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvoiceConfirmationDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvoiceConfirmationDocflow_descriptor_;
  metadata.reflection = InvoiceConfirmationDocflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InboundInvoiceReceiptDocflow::kIsFinishedFieldNumber;
const int InboundInvoiceReceiptDocflow::kReceiptAttachmentFieldNumber;
const int InboundInvoiceReceiptDocflow::kConfirmationDocflowFieldNumber;
#endif  // !_MSC_VER

InboundInvoiceReceiptDocflow::InboundInvoiceReceiptDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow)
}

void InboundInvoiceReceiptDocflow::InitAsDefaultInstance() {
  receiptattachment_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignedAttachment*>(&::Diadoc::Api::Proto::Docflow::SignedAttachment::default_instance());
  confirmationdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow*>(&::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::default_instance());
}

InboundInvoiceReceiptDocflow::InboundInvoiceReceiptDocflow(const InboundInvoiceReceiptDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow)
}

void InboundInvoiceReceiptDocflow::SharedCtor() {
  _cached_size_ = 0;
  isfinished_ = false;
  receiptattachment_ = NULL;
  confirmationdocflow_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InboundInvoiceReceiptDocflow::~InboundInvoiceReceiptDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow)
  SharedDtor();
}

void InboundInvoiceReceiptDocflow::SharedDtor() {
  if (this != default_instance_) {
    delete receiptattachment_;
    delete confirmationdocflow_;
  }
}

void InboundInvoiceReceiptDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InboundInvoiceReceiptDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InboundInvoiceReceiptDocflow_descriptor_;
}

const InboundInvoiceReceiptDocflow& InboundInvoiceReceiptDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto();
  return *default_instance_;
}

InboundInvoiceReceiptDocflow* InboundInvoiceReceiptDocflow::default_instance_ = NULL;

InboundInvoiceReceiptDocflow* InboundInvoiceReceiptDocflow::New() const {
  return new InboundInvoiceReceiptDocflow;
}

void InboundInvoiceReceiptDocflow::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    isfinished_ = false;
    if (has_receiptattachment()) {
      if (receiptattachment_ != NULL) receiptattachment_->::Diadoc::Api::Proto::Docflow::SignedAttachment::Clear();
    }
    if (has_confirmationdocflow()) {
      if (confirmationdocflow_ != NULL) confirmationdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InboundInvoiceReceiptDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ReceiptAttachment;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.SignedAttachment ReceiptAttachment = 2;
      case 2: {
        if (tag == 18) {
         parse_ReceiptAttachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiptattachment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ConfirmationDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
      case 3: {
        if (tag == 26) {
         parse_ConfirmationDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmationdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow)
  return false;
#undef DO_
}

void InboundInvoiceReceiptDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachment ReceiptAttachment = 2;
  if (has_receiptattachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->receiptattachment(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
  if (has_confirmationdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->confirmationdocflow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow)
}

::google::protobuf::uint8* InboundInvoiceReceiptDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachment ReceiptAttachment = 2;
  if (has_receiptattachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->receiptattachment(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
  if (has_confirmationdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->confirmationdocflow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow)
  return target;
}

int InboundInvoiceReceiptDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.SignedAttachment ReceiptAttachment = 2;
    if (has_receiptattachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiptattachment());
    }

    // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
    if (has_confirmationdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmationdocflow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InboundInvoiceReceiptDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InboundInvoiceReceiptDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InboundInvoiceReceiptDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InboundInvoiceReceiptDocflow::MergeFrom(const InboundInvoiceReceiptDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_receiptattachment()) {
      mutable_receiptattachment()->::Diadoc::Api::Proto::Docflow::SignedAttachment::MergeFrom(from.receiptattachment());
    }
    if (from.has_confirmationdocflow()) {
      mutable_confirmationdocflow()->::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::MergeFrom(from.confirmationdocflow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InboundInvoiceReceiptDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InboundInvoiceReceiptDocflow::CopyFrom(const InboundInvoiceReceiptDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InboundInvoiceReceiptDocflow::IsInitialized() const {

  if (has_receiptattachment()) {
    if (!this->receiptattachment().IsInitialized()) return false;
  }
  if (has_confirmationdocflow()) {
    if (!this->confirmationdocflow().IsInitialized()) return false;
  }
  return true;
}

void InboundInvoiceReceiptDocflow::Swap(InboundInvoiceReceiptDocflow* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(receiptattachment_, other->receiptattachment_);
    std::swap(confirmationdocflow_, other->confirmationdocflow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InboundInvoiceReceiptDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InboundInvoiceReceiptDocflow_descriptor_;
  metadata.reflection = InboundInvoiceReceiptDocflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvoiceCorrectionRequestDocflow::kIsFinishedFieldNumber;
const int InvoiceCorrectionRequestDocflow::kCorrectionRequestAttachmentFieldNumber;
const int InvoiceCorrectionRequestDocflow::kReceiptDocflowFieldNumber;
#endif  // !_MSC_VER

InvoiceCorrectionRequestDocflow::InvoiceCorrectionRequestDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow)
}

void InvoiceCorrectionRequestDocflow::InitAsDefaultInstance() {
  correctionrequestattachment_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignedAttachment*>(&::Diadoc::Api::Proto::Docflow::SignedAttachment::default_instance());
  receiptdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::ReceiptDocflow*>(&::Diadoc::Api::Proto::Docflow::ReceiptDocflow::default_instance());
}

InvoiceCorrectionRequestDocflow::InvoiceCorrectionRequestDocflow(const InvoiceCorrectionRequestDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow)
}

void InvoiceCorrectionRequestDocflow::SharedCtor() {
  _cached_size_ = 0;
  isfinished_ = false;
  correctionrequestattachment_ = NULL;
  receiptdocflow_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvoiceCorrectionRequestDocflow::~InvoiceCorrectionRequestDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow)
  SharedDtor();
}

void InvoiceCorrectionRequestDocflow::SharedDtor() {
  if (this != default_instance_) {
    delete correctionrequestattachment_;
    delete receiptdocflow_;
  }
}

void InvoiceCorrectionRequestDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvoiceCorrectionRequestDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvoiceCorrectionRequestDocflow_descriptor_;
}

const InvoiceCorrectionRequestDocflow& InvoiceCorrectionRequestDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto();
  return *default_instance_;
}

InvoiceCorrectionRequestDocflow* InvoiceCorrectionRequestDocflow::default_instance_ = NULL;

InvoiceCorrectionRequestDocflow* InvoiceCorrectionRequestDocflow::New() const {
  return new InvoiceCorrectionRequestDocflow;
}

void InvoiceCorrectionRequestDocflow::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    isfinished_ = false;
    if (has_correctionrequestattachment()) {
      if (correctionrequestattachment_ != NULL) correctionrequestattachment_->::Diadoc::Api::Proto::Docflow::SignedAttachment::Clear();
    }
    if (has_receiptdocflow()) {
      if (receiptdocflow_ != NULL) receiptdocflow_->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvoiceCorrectionRequestDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CorrectionRequestAttachment;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.SignedAttachment CorrectionRequestAttachment = 2;
      case 2: {
        if (tag == 18) {
         parse_CorrectionRequestAttachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_correctionrequestattachment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ReceiptDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 3;
      case 3: {
        if (tag == 26) {
         parse_ReceiptDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiptdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow)
  return false;
#undef DO_
}

void InvoiceCorrectionRequestDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachment CorrectionRequestAttachment = 2;
  if (has_correctionrequestattachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->correctionrequestattachment(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 3;
  if (has_receiptdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->receiptdocflow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow)
}

::google::protobuf::uint8* InvoiceCorrectionRequestDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachment CorrectionRequestAttachment = 2;
  if (has_correctionrequestattachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->correctionrequestattachment(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 3;
  if (has_receiptdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->receiptdocflow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow)
  return target;
}

int InvoiceCorrectionRequestDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.SignedAttachment CorrectionRequestAttachment = 2;
    if (has_correctionrequestattachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->correctionrequestattachment());
    }

    // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 3;
    if (has_receiptdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiptdocflow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvoiceCorrectionRequestDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvoiceCorrectionRequestDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvoiceCorrectionRequestDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvoiceCorrectionRequestDocflow::MergeFrom(const InvoiceCorrectionRequestDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_correctionrequestattachment()) {
      mutable_correctionrequestattachment()->::Diadoc::Api::Proto::Docflow::SignedAttachment::MergeFrom(from.correctionrequestattachment());
    }
    if (from.has_receiptdocflow()) {
      mutable_receiptdocflow()->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::MergeFrom(from.receiptdocflow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvoiceCorrectionRequestDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvoiceCorrectionRequestDocflow::CopyFrom(const InvoiceCorrectionRequestDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceCorrectionRequestDocflow::IsInitialized() const {

  if (has_correctionrequestattachment()) {
    if (!this->correctionrequestattachment().IsInitialized()) return false;
  }
  if (has_receiptdocflow()) {
    if (!this->receiptdocflow().IsInitialized()) return false;
  }
  return true;
}

void InvoiceCorrectionRequestDocflow::Swap(InvoiceCorrectionRequestDocflow* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(correctionrequestattachment_, other->correctionrequestattachment_);
    std::swap(receiptdocflow_, other->receiptdocflow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvoiceCorrectionRequestDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvoiceCorrectionRequestDocflow_descriptor_;
  metadata.reflection = InvoiceCorrectionRequestDocflow_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
