// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/Docflow.proto

#ifndef PROTOBUF_Docflow_2fDocflow_2eproto__INCLUDED
#define PROTOBUF_Docflow_2fDocflow_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Timestamp.pb.h"
#include "CustomDataItem.pb.h"
#include "Docflow/Attachment.pb.h"
#include "Docflow/InvoiceDocflow.pb.h"
#include "Docflow/UnilateralDocflow.pb.h"
#include "Docflow/BilateralDocflow.pb.h"
#include "Docflow/XmlBilateralDocflow.pb.h"
#include "Docflow/RevocationDocflow.pb.h"
#include "Docflow/ResolutionDocflow.pb.h"
#include "Docflow/UniversalTransferDocumentDocflow.pb.h"
#include "Docflow/RoamingNotification.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Docflow_2fDocflow_2eproto();
void protobuf_AssignDesc_Docflow_2fDocflow_2eproto();
void protobuf_ShutdownFile_Docflow_2fDocflow_2eproto();

class Docflow;
class DocflowStatus;
class DocflowStatusModel;

enum DocflowStatusSeverity {
  UnknownDocflowStatusSeverity = 0,
  Info = 1,
  Success = 2,
  Warning = 3,
  Error = 4
};
bool DocflowStatusSeverity_IsValid(int value);
const DocflowStatusSeverity DocflowStatusSeverity_MIN = UnknownDocflowStatusSeverity;
const DocflowStatusSeverity DocflowStatusSeverity_MAX = Error;
const int DocflowStatusSeverity_ARRAYSIZE = DocflowStatusSeverity_MAX + 1;

const ::google::protobuf::EnumDescriptor* DocflowStatusSeverity_descriptor();
inline const ::std::string& DocflowStatusSeverity_Name(DocflowStatusSeverity value) {
  return ::google::protobuf::internal::NameOfEnum(
    DocflowStatusSeverity_descriptor(), value);
}
inline bool DocflowStatusSeverity_Parse(
    const ::std::string& name, DocflowStatusSeverity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DocflowStatusSeverity>(
    DocflowStatusSeverity_descriptor(), name, value);
}
// ===================================================================

class Docflow : public ::google::protobuf::Message {
 public:
  Docflow();
  virtual ~Docflow();

  Docflow(const Docflow& from);

  inline Docflow& operator=(const Docflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Docflow& default_instance();

  void Swap(Docflow* other);

  // implements Message ----------------------------------------------

  Docflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Docflow& from);
  void MergeFrom(const Docflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachment DocumentAttachment = 2;
  inline bool has_documentattachment() const;
  inline void clear_documentattachment();
  static const int kDocumentAttachmentFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::SignedAttachment& documentattachment() const;
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* mutable_documentattachment();
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* release_documentattachment();
  inline void set_allocated_documentattachment(::Diadoc::Api::Proto::Docflow::SignedAttachment* documentattachment);

  // optional string DepartmentId = 3;
  inline bool has_departmentid() const;
  inline void clear_departmentid();
  static const int kDepartmentIdFieldNumber = 3;
  inline const ::std::string& departmentid() const;
  inline void set_departmentid(const ::std::string& value);
  inline void set_departmentid(const char* value);
  inline void set_departmentid(const char* value, size_t size);
  inline ::std::string* mutable_departmentid();
  inline ::std::string* release_departmentid();
  inline void set_allocated_departmentid(::std::string* departmentid);

  // optional bool DocumentIsDeleted = 4;
  inline bool has_documentisdeleted() const;
  inline void clear_documentisdeleted();
  static const int kDocumentIsDeletedFieldNumber = 4;
  inline bool documentisdeleted() const;
  inline void set_documentisdeleted(bool value);

  // optional .Diadoc.Api.Proto.Docflow.DocflowStatus DocflowStatus = 5;
  inline bool has_docflowstatus() const;
  inline void clear_docflowstatus();
  static const int kDocflowStatusFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Docflow::DocflowStatus& docflowstatus() const;
  inline ::Diadoc::Api::Proto::Docflow::DocflowStatus* mutable_docflowstatus();
  inline ::Diadoc::Api::Proto::Docflow::DocflowStatus* release_docflowstatus();
  inline void set_allocated_docflowstatus(::Diadoc::Api::Proto::Docflow::DocflowStatus* docflowstatus);

  // optional .Diadoc.Api.Proto.Timestamp SendTimestamp = 6;
  inline bool has_sendtimestamp() const;
  inline void clear_sendtimestamp();
  static const int kSendTimestampFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::Timestamp& sendtimestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_sendtimestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_sendtimestamp();
  inline void set_allocated_sendtimestamp(::Diadoc::Api::Proto::Timestamp* sendtimestamp);

  // optional .Diadoc.Api.Proto.Timestamp DeliveryTimestamp = 7;
  inline bool has_deliverytimestamp() const;
  inline void clear_deliverytimestamp();
  static const int kDeliveryTimestampFieldNumber = 7;
  inline const ::Diadoc::Api::Proto::Timestamp& deliverytimestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_deliverytimestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_deliverytimestamp();
  inline void set_allocated_deliverytimestamp(::Diadoc::Api::Proto::Timestamp* deliverytimestamp);

  // optional .Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow InboundInvoiceDocflow = 8;
  inline bool has_inboundinvoicedocflow() const;
  inline void clear_inboundinvoicedocflow();
  static const int kInboundInvoiceDocflowFieldNumber = 8;
  inline const ::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow& inboundinvoicedocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow* mutable_inboundinvoicedocflow();
  inline ::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow* release_inboundinvoicedocflow();
  inline void set_allocated_inboundinvoicedocflow(::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow* inboundinvoicedocflow);

  // optional .Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow OutboundInvoiceDocflow = 9;
  inline bool has_outboundinvoicedocflow() const;
  inline void clear_outboundinvoicedocflow();
  static const int kOutboundInvoiceDocflowFieldNumber = 9;
  inline const ::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow& outboundinvoicedocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow* mutable_outboundinvoicedocflow();
  inline ::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow* release_outboundinvoicedocflow();
  inline void set_allocated_outboundinvoicedocflow(::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow* outboundinvoicedocflow);

  // optional .Diadoc.Api.Proto.Docflow.XmlBilateralDocflow XmlBilateralDocflow = 10;
  inline bool has_xmlbilateraldocflow() const;
  inline void clear_xmlbilateraldocflow();
  static const int kXmlBilateralDocflowFieldNumber = 10;
  inline const ::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow& xmlbilateraldocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow* mutable_xmlbilateraldocflow();
  inline ::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow* release_xmlbilateraldocflow();
  inline void set_allocated_xmlbilateraldocflow(::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow* xmlbilateraldocflow);

  // optional .Diadoc.Api.Proto.Docflow.BilateralDocflow BilateralDocflow = 11;
  inline bool has_bilateraldocflow() const;
  inline void clear_bilateraldocflow();
  static const int kBilateralDocflowFieldNumber = 11;
  inline const ::Diadoc::Api::Proto::Docflow::BilateralDocflow& bilateraldocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::BilateralDocflow* mutable_bilateraldocflow();
  inline ::Diadoc::Api::Proto::Docflow::BilateralDocflow* release_bilateraldocflow();
  inline void set_allocated_bilateraldocflow(::Diadoc::Api::Proto::Docflow::BilateralDocflow* bilateraldocflow);

  // optional .Diadoc.Api.Proto.Docflow.UnilateralDocflow UnilateralDocflow = 12;
  inline bool has_unilateraldocflow() const;
  inline void clear_unilateraldocflow();
  static const int kUnilateralDocflowFieldNumber = 12;
  inline const ::Diadoc::Api::Proto::Docflow::UnilateralDocflow& unilateraldocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::UnilateralDocflow* mutable_unilateraldocflow();
  inline ::Diadoc::Api::Proto::Docflow::UnilateralDocflow* release_unilateraldocflow();
  inline void set_allocated_unilateraldocflow(::Diadoc::Api::Proto::Docflow::UnilateralDocflow* unilateraldocflow);

  // optional .Diadoc.Api.Proto.Docflow.RevocationDocflow RevocationDocflow = 13;
  inline bool has_revocationdocflow() const;
  inline void clear_revocationdocflow();
  static const int kRevocationDocflowFieldNumber = 13;
  inline const ::Diadoc::Api::Proto::Docflow::RevocationDocflow& revocationdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::RevocationDocflow* mutable_revocationdocflow();
  inline ::Diadoc::Api::Proto::Docflow::RevocationDocflow* release_revocationdocflow();
  inline void set_allocated_revocationdocflow(::Diadoc::Api::Proto::Docflow::RevocationDocflow* revocationdocflow);

  // optional .Diadoc.Api.Proto.Docflow.ResolutionDocflow ResolutionDocflow = 14;
  inline bool has_resolutiondocflow() const;
  inline void clear_resolutiondocflow();
  static const int kResolutionDocflowFieldNumber = 14;
  inline const ::Diadoc::Api::Proto::Docflow::ResolutionDocflow& resolutiondocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::ResolutionDocflow* mutable_resolutiondocflow();
  inline ::Diadoc::Api::Proto::Docflow::ResolutionDocflow* release_resolutiondocflow();
  inline void set_allocated_resolutiondocflow(::Diadoc::Api::Proto::Docflow::ResolutionDocflow* resolutiondocflow);

  // optional bool CanDocumentBeRevokedUnilaterallyBySender = 15;
  inline bool has_candocumentberevokedunilaterallybysender() const;
  inline void clear_candocumentberevokedunilaterallybysender();
  static const int kCanDocumentBeRevokedUnilaterallyBySenderFieldNumber = 15;
  inline bool candocumentberevokedunilaterallybysender() const;
  inline void set_candocumentberevokedunilaterallybysender(bool value);

  // optional string PacketId = 16;
  inline bool has_packetid() const;
  inline void clear_packetid();
  static const int kPacketIdFieldNumber = 16;
  inline const ::std::string& packetid() const;
  inline void set_packetid(const ::std::string& value);
  inline void set_packetid(const char* value);
  inline void set_packetid(const char* value, size_t size);
  inline ::std::string* mutable_packetid();
  inline ::std::string* release_packetid();
  inline void set_allocated_packetid(::std::string* packetid);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 17;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 17;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // optional .Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow InboundUniversalTransferDocumentDocflow = 18;
  inline bool has_inbounduniversaltransferdocumentdocflow() const;
  inline void clear_inbounduniversaltransferdocumentdocflow();
  static const int kInboundUniversalTransferDocumentDocflowFieldNumber = 18;
  inline const ::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow& inbounduniversaltransferdocumentdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow* mutable_inbounduniversaltransferdocumentdocflow();
  inline ::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow* release_inbounduniversaltransferdocumentdocflow();
  inline void set_allocated_inbounduniversaltransferdocumentdocflow(::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow* inbounduniversaltransferdocumentdocflow);

  // optional .Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow OutboundUniversalTransferDocumentDocflow = 19;
  inline bool has_outbounduniversaltransferdocumentdocflow() const;
  inline void clear_outbounduniversaltransferdocumentdocflow();
  static const int kOutboundUniversalTransferDocumentDocflowFieldNumber = 19;
  inline const ::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow& outbounduniversaltransferdocumentdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow* mutable_outbounduniversaltransferdocumentdocflow();
  inline ::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow* release_outbounduniversaltransferdocumentdocflow();
  inline void set_allocated_outbounduniversaltransferdocumentdocflow(::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow* outbounduniversaltransferdocumentdocflow);

  // optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 20;
  inline bool has_roamingnotification() const;
  inline void clear_roamingnotification();
  static const int kRoamingNotificationFieldNumber = 20;
  inline const ::Diadoc::Api::Proto::Docflow::RoamingNotification& roamingnotification() const;
  inline ::Diadoc::Api::Proto::Docflow::RoamingNotification* mutable_roamingnotification();
  inline ::Diadoc::Api::Proto::Docflow::RoamingNotification* release_roamingnotification();
  inline void set_allocated_roamingnotification(::Diadoc::Api::Proto::Docflow::RoamingNotification* roamingnotification);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.Docflow)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_documentattachment();
  inline void clear_has_documentattachment();
  inline void set_has_departmentid();
  inline void clear_has_departmentid();
  inline void set_has_documentisdeleted();
  inline void clear_has_documentisdeleted();
  inline void set_has_docflowstatus();
  inline void clear_has_docflowstatus();
  inline void set_has_sendtimestamp();
  inline void clear_has_sendtimestamp();
  inline void set_has_deliverytimestamp();
  inline void clear_has_deliverytimestamp();
  inline void set_has_inboundinvoicedocflow();
  inline void clear_has_inboundinvoicedocflow();
  inline void set_has_outboundinvoicedocflow();
  inline void clear_has_outboundinvoicedocflow();
  inline void set_has_xmlbilateraldocflow();
  inline void clear_has_xmlbilateraldocflow();
  inline void set_has_bilateraldocflow();
  inline void clear_has_bilateraldocflow();
  inline void set_has_unilateraldocflow();
  inline void clear_has_unilateraldocflow();
  inline void set_has_revocationdocflow();
  inline void clear_has_revocationdocflow();
  inline void set_has_resolutiondocflow();
  inline void clear_has_resolutiondocflow();
  inline void set_has_candocumentberevokedunilaterallybysender();
  inline void clear_has_candocumentberevokedunilaterallybysender();
  inline void set_has_packetid();
  inline void clear_has_packetid();
  inline void set_has_inbounduniversaltransferdocumentdocflow();
  inline void clear_has_inbounduniversaltransferdocumentdocflow();
  inline void set_has_outbounduniversaltransferdocumentdocflow();
  inline void clear_has_outbounduniversaltransferdocumentdocflow();
  inline void set_has_roamingnotification();
  inline void clear_has_roamingnotification();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SignedAttachment* documentattachment_;
  ::std::string* departmentid_;
  ::Diadoc::Api::Proto::Docflow::DocflowStatus* docflowstatus_;
  ::Diadoc::Api::Proto::Timestamp* sendtimestamp_;
  ::Diadoc::Api::Proto::Timestamp* deliverytimestamp_;
  ::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow* inboundinvoicedocflow_;
  ::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow* outboundinvoicedocflow_;
  ::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow* xmlbilateraldocflow_;
  ::Diadoc::Api::Proto::Docflow::BilateralDocflow* bilateraldocflow_;
  ::Diadoc::Api::Proto::Docflow::UnilateralDocflow* unilateraldocflow_;
  ::Diadoc::Api::Proto::Docflow::RevocationDocflow* revocationdocflow_;
  ::Diadoc::Api::Proto::Docflow::ResolutionDocflow* resolutiondocflow_;
  ::std::string* packetid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  ::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow* inbounduniversaltransferdocumentdocflow_;
  ::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow* outbounduniversaltransferdocumentdocflow_;
  ::Diadoc::Api::Proto::Docflow::RoamingNotification* roamingnotification_;
  bool isfinished_;
  bool documentisdeleted_;
  bool candocumentberevokedunilaterallybysender_;
  friend void  protobuf_AddDesc_Docflow_2fDocflow_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflow_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflow_2eproto();

  void InitAsDefaultInstance();
  static Docflow* default_instance_;
};
// -------------------------------------------------------------------

class DocflowStatus : public ::google::protobuf::Message {
 public:
  DocflowStatus();
  virtual ~DocflowStatus();

  DocflowStatus(const DocflowStatus& from);

  inline DocflowStatus& operator=(const DocflowStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocflowStatus& default_instance();

  void Swap(DocflowStatus* other);

  // implements Message ----------------------------------------------

  DocflowStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocflowStatus& from);
  void MergeFrom(const DocflowStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Docflow.DocflowStatusModel PrimaryStatus = 1;
  inline bool has_primarystatus() const;
  inline void clear_primarystatus();
  static const int kPrimaryStatusFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::DocflowStatusModel& primarystatus() const;
  inline ::Diadoc::Api::Proto::Docflow::DocflowStatusModel* mutable_primarystatus();
  inline ::Diadoc::Api::Proto::Docflow::DocflowStatusModel* release_primarystatus();
  inline void set_allocated_primarystatus(::Diadoc::Api::Proto::Docflow::DocflowStatusModel* primarystatus);

  // optional .Diadoc.Api.Proto.Docflow.DocflowStatusModel SecondaryStatus = 2;
  inline bool has_secondarystatus() const;
  inline void clear_secondarystatus();
  static const int kSecondaryStatusFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::DocflowStatusModel& secondarystatus() const;
  inline ::Diadoc::Api::Proto::Docflow::DocflowStatusModel* mutable_secondarystatus();
  inline ::Diadoc::Api::Proto::Docflow::DocflowStatusModel* release_secondarystatus();
  inline void set_allocated_secondarystatus(::Diadoc::Api::Proto::Docflow::DocflowStatusModel* secondarystatus);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.DocflowStatus)
 private:
  inline void set_has_primarystatus();
  inline void clear_has_primarystatus();
  inline void set_has_secondarystatus();
  inline void clear_has_secondarystatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::DocflowStatusModel* primarystatus_;
  ::Diadoc::Api::Proto::Docflow::DocflowStatusModel* secondarystatus_;
  friend void  protobuf_AddDesc_Docflow_2fDocflow_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflow_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflow_2eproto();

  void InitAsDefaultInstance();
  static DocflowStatus* default_instance_;
};
// -------------------------------------------------------------------

class DocflowStatusModel : public ::google::protobuf::Message {
 public:
  DocflowStatusModel();
  virtual ~DocflowStatusModel();

  DocflowStatusModel(const DocflowStatusModel& from);

  inline DocflowStatusModel& operator=(const DocflowStatusModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocflowStatusModel& default_instance();

  void Swap(DocflowStatusModel* other);

  // implements Message ----------------------------------------------

  DocflowStatusModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocflowStatusModel& from);
  void MergeFrom(const DocflowStatusModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Docflow.DocflowStatusSeverity Severity = 1 [default = UnknownDocflowStatusSeverity];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Docflow::DocflowStatusSeverity severity() const;
  inline void set_severity(::Diadoc::Api::Proto::Docflow::DocflowStatusSeverity value);

  // optional string StatusText = 2;
  inline bool has_statustext() const;
  inline void clear_statustext();
  static const int kStatusTextFieldNumber = 2;
  inline const ::std::string& statustext() const;
  inline void set_statustext(const ::std::string& value);
  inline void set_statustext(const char* value);
  inline void set_statustext(const char* value, size_t size);
  inline ::std::string* mutable_statustext();
  inline ::std::string* release_statustext();
  inline void set_allocated_statustext(::std::string* statustext);

  // optional string StatusHint = 3;
  inline bool has_statushint() const;
  inline void clear_statushint();
  static const int kStatusHintFieldNumber = 3;
  inline const ::std::string& statushint() const;
  inline void set_statushint(const ::std::string& value);
  inline void set_statushint(const char* value);
  inline void set_statushint(const char* value, size_t size);
  inline ::std::string* mutable_statushint();
  inline ::std::string* release_statushint();
  inline void set_allocated_statushint(::std::string* statushint);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.DocflowStatusModel)
 private:
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_statustext();
  inline void clear_has_statustext();
  inline void set_has_statushint();
  inline void clear_has_statushint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* statustext_;
  ::std::string* statushint_;
  int severity_;
  friend void  protobuf_AddDesc_Docflow_2fDocflow_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocflow_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocflow_2eproto();

  void InitAsDefaultInstance();
  static DocflowStatusModel* default_instance_;
};
// ===================================================================


// ===================================================================

// Docflow

// optional bool IsFinished = 1;
inline bool Docflow::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Docflow::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Docflow::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Docflow::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool Docflow::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.IsFinished)
  return isfinished_;
}
inline void Docflow::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.Docflow.IsFinished)
}

// optional .Diadoc.Api.Proto.Docflow.SignedAttachment DocumentAttachment = 2;
inline bool Docflow::has_documentattachment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Docflow::set_has_documentattachment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Docflow::clear_has_documentattachment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Docflow::clear_documentattachment() {
  if (documentattachment_ != NULL) documentattachment_->::Diadoc::Api::Proto::Docflow::SignedAttachment::Clear();
  clear_has_documentattachment();
}
inline const ::Diadoc::Api::Proto::Docflow::SignedAttachment& Docflow::documentattachment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.DocumentAttachment)
  return documentattachment_ != NULL ? *documentattachment_ : *default_instance_->documentattachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* Docflow::mutable_documentattachment() {
  set_has_documentattachment();
  if (documentattachment_ == NULL) documentattachment_ = new ::Diadoc::Api::Proto::Docflow::SignedAttachment;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.DocumentAttachment)
  return documentattachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* Docflow::release_documentattachment() {
  clear_has_documentattachment();
  ::Diadoc::Api::Proto::Docflow::SignedAttachment* temp = documentattachment_;
  documentattachment_ = NULL;
  return temp;
}
inline void Docflow::set_allocated_documentattachment(::Diadoc::Api::Proto::Docflow::SignedAttachment* documentattachment) {
  delete documentattachment_;
  documentattachment_ = documentattachment;
  if (documentattachment) {
    set_has_documentattachment();
  } else {
    clear_has_documentattachment();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.DocumentAttachment)
}

// optional string DepartmentId = 3;
inline bool Docflow::has_departmentid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Docflow::set_has_departmentid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Docflow::clear_has_departmentid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Docflow::clear_departmentid() {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_->clear();
  }
  clear_has_departmentid();
}
inline const ::std::string& Docflow::departmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.DepartmentId)
  return *departmentid_;
}
inline void Docflow::set_departmentid(const ::std::string& value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.Docflow.DepartmentId)
}
inline void Docflow::set_departmentid(const char* value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.Docflow.DepartmentId)
}
inline void Docflow::set_departmentid(const char* value, size_t size) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.Docflow.DepartmentId)
}
inline ::std::string* Docflow::mutable_departmentid() {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.DepartmentId)
  return departmentid_;
}
inline ::std::string* Docflow::release_departmentid() {
  clear_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = departmentid_;
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Docflow::set_allocated_departmentid(::std::string* departmentid) {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete departmentid_;
  }
  if (departmentid) {
    set_has_departmentid();
    departmentid_ = departmentid;
  } else {
    clear_has_departmentid();
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.DepartmentId)
}

// optional bool DocumentIsDeleted = 4;
inline bool Docflow::has_documentisdeleted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Docflow::set_has_documentisdeleted() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Docflow::clear_has_documentisdeleted() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Docflow::clear_documentisdeleted() {
  documentisdeleted_ = false;
  clear_has_documentisdeleted();
}
inline bool Docflow::documentisdeleted() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.DocumentIsDeleted)
  return documentisdeleted_;
}
inline void Docflow::set_documentisdeleted(bool value) {
  set_has_documentisdeleted();
  documentisdeleted_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.Docflow.DocumentIsDeleted)
}

// optional .Diadoc.Api.Proto.Docflow.DocflowStatus DocflowStatus = 5;
inline bool Docflow::has_docflowstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Docflow::set_has_docflowstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Docflow::clear_has_docflowstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Docflow::clear_docflowstatus() {
  if (docflowstatus_ != NULL) docflowstatus_->::Diadoc::Api::Proto::Docflow::DocflowStatus::Clear();
  clear_has_docflowstatus();
}
inline const ::Diadoc::Api::Proto::Docflow::DocflowStatus& Docflow::docflowstatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.DocflowStatus)
  return docflowstatus_ != NULL ? *docflowstatus_ : *default_instance_->docflowstatus_;
}
inline ::Diadoc::Api::Proto::Docflow::DocflowStatus* Docflow::mutable_docflowstatus() {
  set_has_docflowstatus();
  if (docflowstatus_ == NULL) docflowstatus_ = new ::Diadoc::Api::Proto::Docflow::DocflowStatus;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.DocflowStatus)
  return docflowstatus_;
}
inline ::Diadoc::Api::Proto::Docflow::DocflowStatus* Docflow::release_docflowstatus() {
  clear_has_docflowstatus();
  ::Diadoc::Api::Proto::Docflow::DocflowStatus* temp = docflowstatus_;
  docflowstatus_ = NULL;
  return temp;
}
inline void Docflow::set_allocated_docflowstatus(::Diadoc::Api::Proto::Docflow::DocflowStatus* docflowstatus) {
  delete docflowstatus_;
  docflowstatus_ = docflowstatus;
  if (docflowstatus) {
    set_has_docflowstatus();
  } else {
    clear_has_docflowstatus();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.DocflowStatus)
}

// optional .Diadoc.Api.Proto.Timestamp SendTimestamp = 6;
inline bool Docflow::has_sendtimestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Docflow::set_has_sendtimestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Docflow::clear_has_sendtimestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Docflow::clear_sendtimestamp() {
  if (sendtimestamp_ != NULL) sendtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_sendtimestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& Docflow::sendtimestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.SendTimestamp)
  return sendtimestamp_ != NULL ? *sendtimestamp_ : *default_instance_->sendtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* Docflow::mutable_sendtimestamp() {
  set_has_sendtimestamp();
  if (sendtimestamp_ == NULL) sendtimestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.SendTimestamp)
  return sendtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* Docflow::release_sendtimestamp() {
  clear_has_sendtimestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = sendtimestamp_;
  sendtimestamp_ = NULL;
  return temp;
}
inline void Docflow::set_allocated_sendtimestamp(::Diadoc::Api::Proto::Timestamp* sendtimestamp) {
  delete sendtimestamp_;
  sendtimestamp_ = sendtimestamp;
  if (sendtimestamp) {
    set_has_sendtimestamp();
  } else {
    clear_has_sendtimestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.SendTimestamp)
}

// optional .Diadoc.Api.Proto.Timestamp DeliveryTimestamp = 7;
inline bool Docflow::has_deliverytimestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Docflow::set_has_deliverytimestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Docflow::clear_has_deliverytimestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Docflow::clear_deliverytimestamp() {
  if (deliverytimestamp_ != NULL) deliverytimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_deliverytimestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& Docflow::deliverytimestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.DeliveryTimestamp)
  return deliverytimestamp_ != NULL ? *deliverytimestamp_ : *default_instance_->deliverytimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* Docflow::mutable_deliverytimestamp() {
  set_has_deliverytimestamp();
  if (deliverytimestamp_ == NULL) deliverytimestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.DeliveryTimestamp)
  return deliverytimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* Docflow::release_deliverytimestamp() {
  clear_has_deliverytimestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = deliverytimestamp_;
  deliverytimestamp_ = NULL;
  return temp;
}
inline void Docflow::set_allocated_deliverytimestamp(::Diadoc::Api::Proto::Timestamp* deliverytimestamp) {
  delete deliverytimestamp_;
  deliverytimestamp_ = deliverytimestamp;
  if (deliverytimestamp) {
    set_has_deliverytimestamp();
  } else {
    clear_has_deliverytimestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.DeliveryTimestamp)
}

// optional .Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow InboundInvoiceDocflow = 8;
inline bool Docflow::has_inboundinvoicedocflow() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Docflow::set_has_inboundinvoicedocflow() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Docflow::clear_has_inboundinvoicedocflow() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Docflow::clear_inboundinvoicedocflow() {
  if (inboundinvoicedocflow_ != NULL) inboundinvoicedocflow_->::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow::Clear();
  clear_has_inboundinvoicedocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow& Docflow::inboundinvoicedocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.InboundInvoiceDocflow)
  return inboundinvoicedocflow_ != NULL ? *inboundinvoicedocflow_ : *default_instance_->inboundinvoicedocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow* Docflow::mutable_inboundinvoicedocflow() {
  set_has_inboundinvoicedocflow();
  if (inboundinvoicedocflow_ == NULL) inboundinvoicedocflow_ = new ::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.InboundInvoiceDocflow)
  return inboundinvoicedocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow* Docflow::release_inboundinvoicedocflow() {
  clear_has_inboundinvoicedocflow();
  ::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow* temp = inboundinvoicedocflow_;
  inboundinvoicedocflow_ = NULL;
  return temp;
}
inline void Docflow::set_allocated_inboundinvoicedocflow(::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow* inboundinvoicedocflow) {
  delete inboundinvoicedocflow_;
  inboundinvoicedocflow_ = inboundinvoicedocflow;
  if (inboundinvoicedocflow) {
    set_has_inboundinvoicedocflow();
  } else {
    clear_has_inboundinvoicedocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.InboundInvoiceDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow OutboundInvoiceDocflow = 9;
inline bool Docflow::has_outboundinvoicedocflow() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Docflow::set_has_outboundinvoicedocflow() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Docflow::clear_has_outboundinvoicedocflow() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Docflow::clear_outboundinvoicedocflow() {
  if (outboundinvoicedocflow_ != NULL) outboundinvoicedocflow_->::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow::Clear();
  clear_has_outboundinvoicedocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow& Docflow::outboundinvoicedocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.OutboundInvoiceDocflow)
  return outboundinvoicedocflow_ != NULL ? *outboundinvoicedocflow_ : *default_instance_->outboundinvoicedocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow* Docflow::mutable_outboundinvoicedocflow() {
  set_has_outboundinvoicedocflow();
  if (outboundinvoicedocflow_ == NULL) outboundinvoicedocflow_ = new ::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.OutboundInvoiceDocflow)
  return outboundinvoicedocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow* Docflow::release_outboundinvoicedocflow() {
  clear_has_outboundinvoicedocflow();
  ::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow* temp = outboundinvoicedocflow_;
  outboundinvoicedocflow_ = NULL;
  return temp;
}
inline void Docflow::set_allocated_outboundinvoicedocflow(::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow* outboundinvoicedocflow) {
  delete outboundinvoicedocflow_;
  outboundinvoicedocflow_ = outboundinvoicedocflow;
  if (outboundinvoicedocflow) {
    set_has_outboundinvoicedocflow();
  } else {
    clear_has_outboundinvoicedocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.OutboundInvoiceDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.XmlBilateralDocflow XmlBilateralDocflow = 10;
inline bool Docflow::has_xmlbilateraldocflow() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Docflow::set_has_xmlbilateraldocflow() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Docflow::clear_has_xmlbilateraldocflow() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Docflow::clear_xmlbilateraldocflow() {
  if (xmlbilateraldocflow_ != NULL) xmlbilateraldocflow_->::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow::Clear();
  clear_has_xmlbilateraldocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow& Docflow::xmlbilateraldocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.XmlBilateralDocflow)
  return xmlbilateraldocflow_ != NULL ? *xmlbilateraldocflow_ : *default_instance_->xmlbilateraldocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow* Docflow::mutable_xmlbilateraldocflow() {
  set_has_xmlbilateraldocflow();
  if (xmlbilateraldocflow_ == NULL) xmlbilateraldocflow_ = new ::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.XmlBilateralDocflow)
  return xmlbilateraldocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow* Docflow::release_xmlbilateraldocflow() {
  clear_has_xmlbilateraldocflow();
  ::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow* temp = xmlbilateraldocflow_;
  xmlbilateraldocflow_ = NULL;
  return temp;
}
inline void Docflow::set_allocated_xmlbilateraldocflow(::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow* xmlbilateraldocflow) {
  delete xmlbilateraldocflow_;
  xmlbilateraldocflow_ = xmlbilateraldocflow;
  if (xmlbilateraldocflow) {
    set_has_xmlbilateraldocflow();
  } else {
    clear_has_xmlbilateraldocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.XmlBilateralDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.BilateralDocflow BilateralDocflow = 11;
inline bool Docflow::has_bilateraldocflow() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Docflow::set_has_bilateraldocflow() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Docflow::clear_has_bilateraldocflow() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Docflow::clear_bilateraldocflow() {
  if (bilateraldocflow_ != NULL) bilateraldocflow_->::Diadoc::Api::Proto::Docflow::BilateralDocflow::Clear();
  clear_has_bilateraldocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::BilateralDocflow& Docflow::bilateraldocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.BilateralDocflow)
  return bilateraldocflow_ != NULL ? *bilateraldocflow_ : *default_instance_->bilateraldocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::BilateralDocflow* Docflow::mutable_bilateraldocflow() {
  set_has_bilateraldocflow();
  if (bilateraldocflow_ == NULL) bilateraldocflow_ = new ::Diadoc::Api::Proto::Docflow::BilateralDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.BilateralDocflow)
  return bilateraldocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::BilateralDocflow* Docflow::release_bilateraldocflow() {
  clear_has_bilateraldocflow();
  ::Diadoc::Api::Proto::Docflow::BilateralDocflow* temp = bilateraldocflow_;
  bilateraldocflow_ = NULL;
  return temp;
}
inline void Docflow::set_allocated_bilateraldocflow(::Diadoc::Api::Proto::Docflow::BilateralDocflow* bilateraldocflow) {
  delete bilateraldocflow_;
  bilateraldocflow_ = bilateraldocflow;
  if (bilateraldocflow) {
    set_has_bilateraldocflow();
  } else {
    clear_has_bilateraldocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.BilateralDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.UnilateralDocflow UnilateralDocflow = 12;
inline bool Docflow::has_unilateraldocflow() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Docflow::set_has_unilateraldocflow() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Docflow::clear_has_unilateraldocflow() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Docflow::clear_unilateraldocflow() {
  if (unilateraldocflow_ != NULL) unilateraldocflow_->::Diadoc::Api::Proto::Docflow::UnilateralDocflow::Clear();
  clear_has_unilateraldocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::UnilateralDocflow& Docflow::unilateraldocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.UnilateralDocflow)
  return unilateraldocflow_ != NULL ? *unilateraldocflow_ : *default_instance_->unilateraldocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::UnilateralDocflow* Docflow::mutable_unilateraldocflow() {
  set_has_unilateraldocflow();
  if (unilateraldocflow_ == NULL) unilateraldocflow_ = new ::Diadoc::Api::Proto::Docflow::UnilateralDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.UnilateralDocflow)
  return unilateraldocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::UnilateralDocflow* Docflow::release_unilateraldocflow() {
  clear_has_unilateraldocflow();
  ::Diadoc::Api::Proto::Docflow::UnilateralDocflow* temp = unilateraldocflow_;
  unilateraldocflow_ = NULL;
  return temp;
}
inline void Docflow::set_allocated_unilateraldocflow(::Diadoc::Api::Proto::Docflow::UnilateralDocflow* unilateraldocflow) {
  delete unilateraldocflow_;
  unilateraldocflow_ = unilateraldocflow;
  if (unilateraldocflow) {
    set_has_unilateraldocflow();
  } else {
    clear_has_unilateraldocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.UnilateralDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.RevocationDocflow RevocationDocflow = 13;
inline bool Docflow::has_revocationdocflow() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Docflow::set_has_revocationdocflow() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Docflow::clear_has_revocationdocflow() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Docflow::clear_revocationdocflow() {
  if (revocationdocflow_ != NULL) revocationdocflow_->::Diadoc::Api::Proto::Docflow::RevocationDocflow::Clear();
  clear_has_revocationdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::RevocationDocflow& Docflow::revocationdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.RevocationDocflow)
  return revocationdocflow_ != NULL ? *revocationdocflow_ : *default_instance_->revocationdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::RevocationDocflow* Docflow::mutable_revocationdocflow() {
  set_has_revocationdocflow();
  if (revocationdocflow_ == NULL) revocationdocflow_ = new ::Diadoc::Api::Proto::Docflow::RevocationDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.RevocationDocflow)
  return revocationdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::RevocationDocflow* Docflow::release_revocationdocflow() {
  clear_has_revocationdocflow();
  ::Diadoc::Api::Proto::Docflow::RevocationDocflow* temp = revocationdocflow_;
  revocationdocflow_ = NULL;
  return temp;
}
inline void Docflow::set_allocated_revocationdocflow(::Diadoc::Api::Proto::Docflow::RevocationDocflow* revocationdocflow) {
  delete revocationdocflow_;
  revocationdocflow_ = revocationdocflow;
  if (revocationdocflow) {
    set_has_revocationdocflow();
  } else {
    clear_has_revocationdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.RevocationDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.ResolutionDocflow ResolutionDocflow = 14;
inline bool Docflow::has_resolutiondocflow() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Docflow::set_has_resolutiondocflow() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Docflow::clear_has_resolutiondocflow() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Docflow::clear_resolutiondocflow() {
  if (resolutiondocflow_ != NULL) resolutiondocflow_->::Diadoc::Api::Proto::Docflow::ResolutionDocflow::Clear();
  clear_has_resolutiondocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::ResolutionDocflow& Docflow::resolutiondocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.ResolutionDocflow)
  return resolutiondocflow_ != NULL ? *resolutiondocflow_ : *default_instance_->resolutiondocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::ResolutionDocflow* Docflow::mutable_resolutiondocflow() {
  set_has_resolutiondocflow();
  if (resolutiondocflow_ == NULL) resolutiondocflow_ = new ::Diadoc::Api::Proto::Docflow::ResolutionDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.ResolutionDocflow)
  return resolutiondocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::ResolutionDocflow* Docflow::release_resolutiondocflow() {
  clear_has_resolutiondocflow();
  ::Diadoc::Api::Proto::Docflow::ResolutionDocflow* temp = resolutiondocflow_;
  resolutiondocflow_ = NULL;
  return temp;
}
inline void Docflow::set_allocated_resolutiondocflow(::Diadoc::Api::Proto::Docflow::ResolutionDocflow* resolutiondocflow) {
  delete resolutiondocflow_;
  resolutiondocflow_ = resolutiondocflow;
  if (resolutiondocflow) {
    set_has_resolutiondocflow();
  } else {
    clear_has_resolutiondocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.ResolutionDocflow)
}

// optional bool CanDocumentBeRevokedUnilaterallyBySender = 15;
inline bool Docflow::has_candocumentberevokedunilaterallybysender() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Docflow::set_has_candocumentberevokedunilaterallybysender() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Docflow::clear_has_candocumentberevokedunilaterallybysender() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Docflow::clear_candocumentberevokedunilaterallybysender() {
  candocumentberevokedunilaterallybysender_ = false;
  clear_has_candocumentberevokedunilaterallybysender();
}
inline bool Docflow::candocumentberevokedunilaterallybysender() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.CanDocumentBeRevokedUnilaterallyBySender)
  return candocumentberevokedunilaterallybysender_;
}
inline void Docflow::set_candocumentberevokedunilaterallybysender(bool value) {
  set_has_candocumentberevokedunilaterallybysender();
  candocumentberevokedunilaterallybysender_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.Docflow.CanDocumentBeRevokedUnilaterallyBySender)
}

// optional string PacketId = 16;
inline bool Docflow::has_packetid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Docflow::set_has_packetid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Docflow::clear_has_packetid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Docflow::clear_packetid() {
  if (packetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packetid_->clear();
  }
  clear_has_packetid();
}
inline const ::std::string& Docflow::packetid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.PacketId)
  return *packetid_;
}
inline void Docflow::set_packetid(const ::std::string& value) {
  set_has_packetid();
  if (packetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packetid_ = new ::std::string;
  }
  packetid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.Docflow.PacketId)
}
inline void Docflow::set_packetid(const char* value) {
  set_has_packetid();
  if (packetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packetid_ = new ::std::string;
  }
  packetid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.Docflow.PacketId)
}
inline void Docflow::set_packetid(const char* value, size_t size) {
  set_has_packetid();
  if (packetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packetid_ = new ::std::string;
  }
  packetid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.Docflow.PacketId)
}
inline ::std::string* Docflow::mutable_packetid() {
  set_has_packetid();
  if (packetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packetid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.PacketId)
  return packetid_;
}
inline ::std::string* Docflow::release_packetid() {
  clear_has_packetid();
  if (packetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = packetid_;
    packetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Docflow::set_allocated_packetid(::std::string* packetid) {
  if (packetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete packetid_;
  }
  if (packetid) {
    set_has_packetid();
    packetid_ = packetid;
  } else {
    clear_has_packetid();
    packetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.PacketId)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 17;
inline int Docflow::customdata_size() const {
  return customdata_.size();
}
inline void Docflow::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& Docflow::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* Docflow::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* Docflow::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.Docflow.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
Docflow::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.Docflow.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
Docflow::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.Docflow.CustomData)
  return &customdata_;
}

// optional .Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow InboundUniversalTransferDocumentDocflow = 18;
inline bool Docflow::has_inbounduniversaltransferdocumentdocflow() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Docflow::set_has_inbounduniversaltransferdocumentdocflow() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Docflow::clear_has_inbounduniversaltransferdocumentdocflow() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Docflow::clear_inbounduniversaltransferdocumentdocflow() {
  if (inbounduniversaltransferdocumentdocflow_ != NULL) inbounduniversaltransferdocumentdocflow_->::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow::Clear();
  clear_has_inbounduniversaltransferdocumentdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow& Docflow::inbounduniversaltransferdocumentdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.InboundUniversalTransferDocumentDocflow)
  return inbounduniversaltransferdocumentdocflow_ != NULL ? *inbounduniversaltransferdocumentdocflow_ : *default_instance_->inbounduniversaltransferdocumentdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow* Docflow::mutable_inbounduniversaltransferdocumentdocflow() {
  set_has_inbounduniversaltransferdocumentdocflow();
  if (inbounduniversaltransferdocumentdocflow_ == NULL) inbounduniversaltransferdocumentdocflow_ = new ::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.InboundUniversalTransferDocumentDocflow)
  return inbounduniversaltransferdocumentdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow* Docflow::release_inbounduniversaltransferdocumentdocflow() {
  clear_has_inbounduniversaltransferdocumentdocflow();
  ::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow* temp = inbounduniversaltransferdocumentdocflow_;
  inbounduniversaltransferdocumentdocflow_ = NULL;
  return temp;
}
inline void Docflow::set_allocated_inbounduniversaltransferdocumentdocflow(::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow* inbounduniversaltransferdocumentdocflow) {
  delete inbounduniversaltransferdocumentdocflow_;
  inbounduniversaltransferdocumentdocflow_ = inbounduniversaltransferdocumentdocflow;
  if (inbounduniversaltransferdocumentdocflow) {
    set_has_inbounduniversaltransferdocumentdocflow();
  } else {
    clear_has_inbounduniversaltransferdocumentdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.InboundUniversalTransferDocumentDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow OutboundUniversalTransferDocumentDocflow = 19;
inline bool Docflow::has_outbounduniversaltransferdocumentdocflow() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Docflow::set_has_outbounduniversaltransferdocumentdocflow() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Docflow::clear_has_outbounduniversaltransferdocumentdocflow() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Docflow::clear_outbounduniversaltransferdocumentdocflow() {
  if (outbounduniversaltransferdocumentdocflow_ != NULL) outbounduniversaltransferdocumentdocflow_->::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow::Clear();
  clear_has_outbounduniversaltransferdocumentdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow& Docflow::outbounduniversaltransferdocumentdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.OutboundUniversalTransferDocumentDocflow)
  return outbounduniversaltransferdocumentdocflow_ != NULL ? *outbounduniversaltransferdocumentdocflow_ : *default_instance_->outbounduniversaltransferdocumentdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow* Docflow::mutable_outbounduniversaltransferdocumentdocflow() {
  set_has_outbounduniversaltransferdocumentdocflow();
  if (outbounduniversaltransferdocumentdocflow_ == NULL) outbounduniversaltransferdocumentdocflow_ = new ::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.OutboundUniversalTransferDocumentDocflow)
  return outbounduniversaltransferdocumentdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow* Docflow::release_outbounduniversaltransferdocumentdocflow() {
  clear_has_outbounduniversaltransferdocumentdocflow();
  ::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow* temp = outbounduniversaltransferdocumentdocflow_;
  outbounduniversaltransferdocumentdocflow_ = NULL;
  return temp;
}
inline void Docflow::set_allocated_outbounduniversaltransferdocumentdocflow(::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow* outbounduniversaltransferdocumentdocflow) {
  delete outbounduniversaltransferdocumentdocflow_;
  outbounduniversaltransferdocumentdocflow_ = outbounduniversaltransferdocumentdocflow;
  if (outbounduniversaltransferdocumentdocflow) {
    set_has_outbounduniversaltransferdocumentdocflow();
  } else {
    clear_has_outbounduniversaltransferdocumentdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.OutboundUniversalTransferDocumentDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 20;
inline bool Docflow::has_roamingnotification() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Docflow::set_has_roamingnotification() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Docflow::clear_has_roamingnotification() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Docflow::clear_roamingnotification() {
  if (roamingnotification_ != NULL) roamingnotification_->::Diadoc::Api::Proto::Docflow::RoamingNotification::Clear();
  clear_has_roamingnotification();
}
inline const ::Diadoc::Api::Proto::Docflow::RoamingNotification& Docflow::roamingnotification() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.Docflow.RoamingNotification)
  return roamingnotification_ != NULL ? *roamingnotification_ : *default_instance_->roamingnotification_;
}
inline ::Diadoc::Api::Proto::Docflow::RoamingNotification* Docflow::mutable_roamingnotification() {
  set_has_roamingnotification();
  if (roamingnotification_ == NULL) roamingnotification_ = new ::Diadoc::Api::Proto::Docflow::RoamingNotification;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.Docflow.RoamingNotification)
  return roamingnotification_;
}
inline ::Diadoc::Api::Proto::Docflow::RoamingNotification* Docflow::release_roamingnotification() {
  clear_has_roamingnotification();
  ::Diadoc::Api::Proto::Docflow::RoamingNotification* temp = roamingnotification_;
  roamingnotification_ = NULL;
  return temp;
}
inline void Docflow::set_allocated_roamingnotification(::Diadoc::Api::Proto::Docflow::RoamingNotification* roamingnotification) {
  delete roamingnotification_;
  roamingnotification_ = roamingnotification;
  if (roamingnotification) {
    set_has_roamingnotification();
  } else {
    clear_has_roamingnotification();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.Docflow.RoamingNotification)
}

// -------------------------------------------------------------------

// DocflowStatus

// optional .Diadoc.Api.Proto.Docflow.DocflowStatusModel PrimaryStatus = 1;
inline bool DocflowStatus::has_primarystatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocflowStatus::set_has_primarystatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocflowStatus::clear_has_primarystatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocflowStatus::clear_primarystatus() {
  if (primarystatus_ != NULL) primarystatus_->::Diadoc::Api::Proto::Docflow::DocflowStatusModel::Clear();
  clear_has_primarystatus();
}
inline const ::Diadoc::Api::Proto::Docflow::DocflowStatusModel& DocflowStatus::primarystatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowStatus.PrimaryStatus)
  return primarystatus_ != NULL ? *primarystatus_ : *default_instance_->primarystatus_;
}
inline ::Diadoc::Api::Proto::Docflow::DocflowStatusModel* DocflowStatus::mutable_primarystatus() {
  set_has_primarystatus();
  if (primarystatus_ == NULL) primarystatus_ = new ::Diadoc::Api::Proto::Docflow::DocflowStatusModel;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowStatus.PrimaryStatus)
  return primarystatus_;
}
inline ::Diadoc::Api::Proto::Docflow::DocflowStatusModel* DocflowStatus::release_primarystatus() {
  clear_has_primarystatus();
  ::Diadoc::Api::Proto::Docflow::DocflowStatusModel* temp = primarystatus_;
  primarystatus_ = NULL;
  return temp;
}
inline void DocflowStatus::set_allocated_primarystatus(::Diadoc::Api::Proto::Docflow::DocflowStatusModel* primarystatus) {
  delete primarystatus_;
  primarystatus_ = primarystatus;
  if (primarystatus) {
    set_has_primarystatus();
  } else {
    clear_has_primarystatus();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowStatus.PrimaryStatus)
}

// optional .Diadoc.Api.Proto.Docflow.DocflowStatusModel SecondaryStatus = 2;
inline bool DocflowStatus::has_secondarystatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocflowStatus::set_has_secondarystatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocflowStatus::clear_has_secondarystatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocflowStatus::clear_secondarystatus() {
  if (secondarystatus_ != NULL) secondarystatus_->::Diadoc::Api::Proto::Docflow::DocflowStatusModel::Clear();
  clear_has_secondarystatus();
}
inline const ::Diadoc::Api::Proto::Docflow::DocflowStatusModel& DocflowStatus::secondarystatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowStatus.SecondaryStatus)
  return secondarystatus_ != NULL ? *secondarystatus_ : *default_instance_->secondarystatus_;
}
inline ::Diadoc::Api::Proto::Docflow::DocflowStatusModel* DocflowStatus::mutable_secondarystatus() {
  set_has_secondarystatus();
  if (secondarystatus_ == NULL) secondarystatus_ = new ::Diadoc::Api::Proto::Docflow::DocflowStatusModel;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowStatus.SecondaryStatus)
  return secondarystatus_;
}
inline ::Diadoc::Api::Proto::Docflow::DocflowStatusModel* DocflowStatus::release_secondarystatus() {
  clear_has_secondarystatus();
  ::Diadoc::Api::Proto::Docflow::DocflowStatusModel* temp = secondarystatus_;
  secondarystatus_ = NULL;
  return temp;
}
inline void DocflowStatus::set_allocated_secondarystatus(::Diadoc::Api::Proto::Docflow::DocflowStatusModel* secondarystatus) {
  delete secondarystatus_;
  secondarystatus_ = secondarystatus;
  if (secondarystatus) {
    set_has_secondarystatus();
  } else {
    clear_has_secondarystatus();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowStatus.SecondaryStatus)
}

// -------------------------------------------------------------------

// DocflowStatusModel

// optional .Diadoc.Api.Proto.Docflow.DocflowStatusSeverity Severity = 1 [default = UnknownDocflowStatusSeverity];
inline bool DocflowStatusModel::has_severity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocflowStatusModel::set_has_severity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocflowStatusModel::clear_has_severity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocflowStatusModel::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::Diadoc::Api::Proto::Docflow::DocflowStatusSeverity DocflowStatusModel::severity() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowStatusModel.Severity)
  return static_cast< ::Diadoc::Api::Proto::Docflow::DocflowStatusSeverity >(severity_);
}
inline void DocflowStatusModel::set_severity(::Diadoc::Api::Proto::Docflow::DocflowStatusSeverity value) {
  assert(::Diadoc::Api::Proto::Docflow::DocflowStatusSeverity_IsValid(value));
  set_has_severity();
  severity_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocflowStatusModel.Severity)
}

// optional string StatusText = 2;
inline bool DocflowStatusModel::has_statustext() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocflowStatusModel::set_has_statustext() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocflowStatusModel::clear_has_statustext() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocflowStatusModel::clear_statustext() {
  if (statustext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statustext_->clear();
  }
  clear_has_statustext();
}
inline const ::std::string& DocflowStatusModel::statustext() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowStatusModel.StatusText)
  return *statustext_;
}
inline void DocflowStatusModel::set_statustext(const ::std::string& value) {
  set_has_statustext();
  if (statustext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statustext_ = new ::std::string;
  }
  statustext_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocflowStatusModel.StatusText)
}
inline void DocflowStatusModel::set_statustext(const char* value) {
  set_has_statustext();
  if (statustext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statustext_ = new ::std::string;
  }
  statustext_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.DocflowStatusModel.StatusText)
}
inline void DocflowStatusModel::set_statustext(const char* value, size_t size) {
  set_has_statustext();
  if (statustext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statustext_ = new ::std::string;
  }
  statustext_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.DocflowStatusModel.StatusText)
}
inline ::std::string* DocflowStatusModel::mutable_statustext() {
  set_has_statustext();
  if (statustext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statustext_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowStatusModel.StatusText)
  return statustext_;
}
inline ::std::string* DocflowStatusModel::release_statustext() {
  clear_has_statustext();
  if (statustext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = statustext_;
    statustext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocflowStatusModel::set_allocated_statustext(::std::string* statustext) {
  if (statustext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statustext_;
  }
  if (statustext) {
    set_has_statustext();
    statustext_ = statustext;
  } else {
    clear_has_statustext();
    statustext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowStatusModel.StatusText)
}

// optional string StatusHint = 3;
inline bool DocflowStatusModel::has_statushint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocflowStatusModel::set_has_statushint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocflowStatusModel::clear_has_statushint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocflowStatusModel::clear_statushint() {
  if (statushint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statushint_->clear();
  }
  clear_has_statushint();
}
inline const ::std::string& DocflowStatusModel::statushint() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocflowStatusModel.StatusHint)
  return *statushint_;
}
inline void DocflowStatusModel::set_statushint(const ::std::string& value) {
  set_has_statushint();
  if (statushint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statushint_ = new ::std::string;
  }
  statushint_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocflowStatusModel.StatusHint)
}
inline void DocflowStatusModel::set_statushint(const char* value) {
  set_has_statushint();
  if (statushint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statushint_ = new ::std::string;
  }
  statushint_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.DocflowStatusModel.StatusHint)
}
inline void DocflowStatusModel::set_statushint(const char* value, size_t size) {
  set_has_statushint();
  if (statushint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statushint_ = new ::std::string;
  }
  statushint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.DocflowStatusModel.StatusHint)
}
inline ::std::string* DocflowStatusModel::mutable_statushint() {
  set_has_statushint();
  if (statushint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statushint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocflowStatusModel.StatusHint)
  return statushint_;
}
inline ::std::string* DocflowStatusModel::release_statushint() {
  clear_has_statushint();
  if (statushint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = statushint_;
    statushint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocflowStatusModel::set_allocated_statushint(::std::string* statushint) {
  if (statushint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statushint_;
  }
  if (statushint) {
    set_has_statushint();
    statushint_ = statushint;
  } else {
    clear_has_statushint();
    statushint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocflowStatusModel.StatusHint)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Diadoc::Api::Proto::Docflow::DocflowStatusSeverity> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Docflow::DocflowStatusSeverity>() {
  return ::Diadoc::Api::Proto::Docflow::DocflowStatusSeverity_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Docflow_2fDocflow_2eproto__INCLUDED
