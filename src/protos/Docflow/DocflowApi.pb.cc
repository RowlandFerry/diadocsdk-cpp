// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/DocflowApi.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Docflow/DocflowApi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

namespace {

const ::google::protobuf::Descriptor* GetDocflowBatchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDocflowBatchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDocflowRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDocflowRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDocflowBatchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDocflowBatchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchDocflowsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchDocflowsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchDocflowsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchDocflowsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDocflowsByPacketIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDocflowsByPacketIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchedDocument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchedDocument_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDocflowsByPacketIdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDocflowsByPacketIdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDocflowEventsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDocflowEventsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDocflowEventsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDocflowEventsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocflowEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocflowEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SearchScope_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Docflow_2fDocflowApi_2eproto() {
  protobuf_AddDesc_Docflow_2fDocflowApi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Docflow/DocflowApi.proto");
  GOOGLE_CHECK(file != NULL);
  GetDocflowBatchRequest_descriptor_ = file->message_type(0);
  static const int GetDocflowBatchRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowBatchRequest, requests_),
  };
  GetDocflowBatchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDocflowBatchRequest_descriptor_,
      GetDocflowBatchRequest::default_instance_,
      GetDocflowBatchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowBatchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowBatchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDocflowBatchRequest));
  GetDocflowRequest_descriptor_ = file->message_type(1);
  static const int GetDocflowRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowRequest, documentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowRequest, lasteventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowRequest, injectentitycontent_),
  };
  GetDocflowRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDocflowRequest_descriptor_,
      GetDocflowRequest::default_instance_,
      GetDocflowRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDocflowRequest));
  GetDocflowBatchResponse_descriptor_ = file->message_type(2);
  static const int GetDocflowBatchResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowBatchResponse, documents_),
  };
  GetDocflowBatchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDocflowBatchResponse_descriptor_,
      GetDocflowBatchResponse::default_instance_,
      GetDocflowBatchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowBatchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowBatchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDocflowBatchResponse));
  SearchDocflowsRequest_descriptor_ = file->message_type(3);
  static const int SearchDocflowsRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDocflowsRequest, querystring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDocflowsRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDocflowsRequest, firstindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDocflowsRequest, scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDocflowsRequest, injectentitycontent_),
  };
  SearchDocflowsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchDocflowsRequest_descriptor_,
      SearchDocflowsRequest::default_instance_,
      SearchDocflowsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDocflowsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDocflowsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchDocflowsRequest));
  SearchDocflowsResponse_descriptor_ = file->message_type(4);
  static const int SearchDocflowsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDocflowsResponse, documents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDocflowsResponse, havemoredocuments_),
  };
  SearchDocflowsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchDocflowsResponse_descriptor_,
      SearchDocflowsResponse::default_instance_,
      SearchDocflowsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDocflowsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDocflowsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchDocflowsResponse));
  GetDocflowsByPacketIdRequest_descriptor_ = file->message_type(5);
  static const int GetDocflowsByPacketIdRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowsByPacketIdRequest, packetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowsByPacketIdRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowsByPacketIdRequest, injectentitycontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowsByPacketIdRequest, afterindexkey_),
  };
  GetDocflowsByPacketIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDocflowsByPacketIdRequest_descriptor_,
      GetDocflowsByPacketIdRequest::default_instance_,
      GetDocflowsByPacketIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowsByPacketIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowsByPacketIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDocflowsByPacketIdRequest));
  FetchedDocument_descriptor_ = file->message_type(6);
  static const int FetchedDocument_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchedDocument, document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchedDocument, indexkey_),
  };
  FetchedDocument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchedDocument_descriptor_,
      FetchedDocument::default_instance_,
      FetchedDocument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchedDocument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchedDocument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchedDocument));
  GetDocflowsByPacketIdResponse_descriptor_ = file->message_type(7);
  static const int GetDocflowsByPacketIdResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowsByPacketIdResponse, documents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowsByPacketIdResponse, nextpageindexkey_),
  };
  GetDocflowsByPacketIdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDocflowsByPacketIdResponse_descriptor_,
      GetDocflowsByPacketIdResponse::default_instance_,
      GetDocflowsByPacketIdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowsByPacketIdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowsByPacketIdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDocflowsByPacketIdResponse));
  GetDocflowEventsRequest_descriptor_ = file->message_type(8);
  static const int GetDocflowEventsRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsRequest, afterindexkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsRequest, populatedocuments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsRequest, injectentitycontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsRequest, populatepreviousdocumentstates_),
  };
  GetDocflowEventsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDocflowEventsRequest_descriptor_,
      GetDocflowEventsRequest::default_instance_,
      GetDocflowEventsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDocflowEventsRequest));
  GetDocflowEventsResponse_descriptor_ = file->message_type(9);
  static const int GetDocflowEventsResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsResponse, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsResponse, events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsResponse, totalcounttype_),
  };
  GetDocflowEventsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDocflowEventsResponse_descriptor_,
      GetDocflowEventsResponse::default_instance_,
      GetDocflowEventsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocflowEventsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDocflowEventsResponse));
  DocflowEvent_descriptor_ = file->message_type(10);
  static const int DocflowEvent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEvent, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEvent, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEvent, documentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEvent, indexkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEvent, document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEvent, previouseventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEvent, previousdocumentstate_),
  };
  DocflowEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocflowEvent_descriptor_,
      DocflowEvent::default_instance_,
      DocflowEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocflowEvent));
  SearchScope_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Docflow_2fDocflowApi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDocflowBatchRequest_descriptor_, &GetDocflowBatchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDocflowRequest_descriptor_, &GetDocflowRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDocflowBatchResponse_descriptor_, &GetDocflowBatchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchDocflowsRequest_descriptor_, &SearchDocflowsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchDocflowsResponse_descriptor_, &SearchDocflowsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDocflowsByPacketIdRequest_descriptor_, &GetDocflowsByPacketIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchedDocument_descriptor_, &FetchedDocument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDocflowsByPacketIdResponse_descriptor_, &GetDocflowsByPacketIdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDocflowEventsRequest_descriptor_, &GetDocflowEventsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDocflowEventsResponse_descriptor_, &GetDocflowEventsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocflowEvent_descriptor_, &DocflowEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Docflow_2fDocflowApi_2eproto() {
  delete GetDocflowBatchRequest::default_instance_;
  delete GetDocflowBatchRequest_reflection_;
  delete GetDocflowRequest::default_instance_;
  delete GetDocflowRequest_reflection_;
  delete GetDocflowBatchResponse::default_instance_;
  delete GetDocflowBatchResponse_reflection_;
  delete SearchDocflowsRequest::default_instance_;
  delete SearchDocflowsRequest_reflection_;
  delete SearchDocflowsResponse::default_instance_;
  delete SearchDocflowsResponse_reflection_;
  delete GetDocflowsByPacketIdRequest::default_instance_;
  delete GetDocflowsByPacketIdRequest_reflection_;
  delete FetchedDocument::default_instance_;
  delete FetchedDocument_reflection_;
  delete GetDocflowsByPacketIdResponse::default_instance_;
  delete GetDocflowsByPacketIdResponse_reflection_;
  delete GetDocflowEventsRequest::default_instance_;
  delete GetDocflowEventsRequest_reflection_;
  delete GetDocflowEventsResponse::default_instance_;
  delete GetDocflowEventsResponse_reflection_;
  delete DocflowEvent::default_instance_;
  delete DocflowEvent_reflection_;
}

void protobuf_AddDesc_Docflow_2fDocflowApi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_DocumentId_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_TotalCountType_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_TimeBasedFilter_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fDocumentWithDocflow_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030Docflow/DocflowApi.proto\022\030Diadoc.Api.P"
    "roto.Docflow\032\017Timestamp.proto\032\020DocumentI"
    "d.proto\032\024TotalCountType.proto\032\025TimeBased"
    "Filter.proto\032!Docflow/DocumentWithDocflo"
    "w.proto\"W\n\026GetDocflowBatchRequest\022=\n\010Req"
    "uests\030\001 \003(\0132+.Diadoc.Api.Proto.Docflow.G"
    "etDocflowRequest\"~\n\021GetDocflowRequest\0220\n"
    "\nDocumentId\030\001 \002(\0132\034.Diadoc.Api.Proto.Doc"
    "umentId\022\023\n\013LastEventId\030\002 \001(\t\022\"\n\023InjectEn"
    "tityContent\030\003 \001(\010:\005false\"[\n\027GetDocflowBa"
    "tchResponse\022@\n\tDocuments\030\001 \003(\0132-.Diadoc."
    "Api.Proto.Docflow.DocumentWithDocflow\"\276\001"
    "\n\025SearchDocflowsRequest\022\023\n\013QueryString\030\001"
    " \002(\t\022\022\n\005Count\030\002 \001(\005:\003100\022\022\n\nFirstIndex\030\003"
    " \001(\005\022D\n\005Scope\030\004 \001(\0162%.Diadoc.Api.Proto.D"
    "ocflow.SearchScope:\016SearchScopeAny\022\"\n\023In"
    "jectEntityContent\030\005 \001(\010:\005false\"u\n\026Search"
    "DocflowsResponse\022@\n\tDocuments\030\001 \003(\0132-.Di"
    "adoc.Api.Proto.Docflow.DocumentWithDocfl"
    "ow\022\031\n\021HaveMoreDocuments\030\002 \001(\010\"\177\n\034GetDocf"
    "lowsByPacketIdRequest\022\020\n\010PacketId\030\001 \002(\t\022"
    "\022\n\005Count\030\002 \001(\005:\003100\022\"\n\023InjectEntityConte"
    "nt\030\003 \001(\010:\005false\022\025\n\rAfterIndexKey\030\004 \001(\014\"d"
    "\n\017FetchedDocument\022\?\n\010Document\030\001 \002(\0132-.Di"
    "adoc.Api.Proto.Docflow.DocumentWithDocfl"
    "ow\022\020\n\010IndexKey\030\002 \002(\014\"w\n\035GetDocflowsByPac"
    "ketIdResponse\022<\n\tDocuments\030\001 \003(\0132).Diado"
    "c.Api.Proto.Docflow.FetchedDocument\022\030\n\020N"
    "extPageIndexKey\030\002 \001(\014\"\330\001\n\027GetDocflowEven"
    "tsRequest\0221\n\006Filter\030\001 \002(\0132!.Diadoc.Api.P"
    "roto.TimeBasedFilter\022\025\n\rAfterIndexKey\030\002 "
    "\001(\014\022 \n\021PopulateDocuments\030\003 \001(\010:\005false\022\"\n"
    "\023InjectEntityContent\030\004 \001(\010:\005false\022-\n\036Pop"
    "ulatePreviousDocumentStates\030\005 \001(\010:\005false"
    "\"\240\001\n\030GetDocflowEventsResponse\022\022\n\nTotalCo"
    "unt\030\001 \001(\005\0226\n\006Events\030\002 \003(\0132&.Diadoc.Api.P"
    "roto.Docflow.DocflowEvent\0228\n\016TotalCountT"
    "ype\030\003 \002(\0162 .Diadoc.Api.Proto.TotalCountT"
    "ype\"\273\002\n\014DocflowEvent\022\017\n\007EventId\030\001 \001(\t\022.\n"
    "\tTimestamp\030\002 \001(\0132\033.Diadoc.Api.Proto.Time"
    "stamp\0220\n\nDocumentId\030\003 \001(\0132\034.Diadoc.Api.P"
    "roto.DocumentId\022\020\n\010IndexKey\030\004 \001(\014\022\?\n\010Doc"
    "ument\030\005 \001(\0132-.Diadoc.Api.Proto.Docflow.D"
    "ocumentWithDocflow\022\027\n\017PreviousEventId\030\006 "
    "\001(\t\022L\n\025PreviousDocumentState\030\007 \001(\0132-.Dia"
    "doc.Api.Proto.Docflow.DocumentWithDocflo"
    "w*\204\001\n\013SearchScope\022\022\n\016SearchScopeAny\020\000\022\027\n"
    "\023SearchScopeIncoming\020\001\022\027\n\023SearchScopeOut"
    "going\020\002\022\026\n\022SearchScopeDeleted\020\003\022\027\n\023Searc"
    "hScopeInternal\020\004", 1976);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Docflow/DocflowApi.proto", &protobuf_RegisterTypes);
  GetDocflowBatchRequest::default_instance_ = new GetDocflowBatchRequest();
  GetDocflowRequest::default_instance_ = new GetDocflowRequest();
  GetDocflowBatchResponse::default_instance_ = new GetDocflowBatchResponse();
  SearchDocflowsRequest::default_instance_ = new SearchDocflowsRequest();
  SearchDocflowsResponse::default_instance_ = new SearchDocflowsResponse();
  GetDocflowsByPacketIdRequest::default_instance_ = new GetDocflowsByPacketIdRequest();
  FetchedDocument::default_instance_ = new FetchedDocument();
  GetDocflowsByPacketIdResponse::default_instance_ = new GetDocflowsByPacketIdResponse();
  GetDocflowEventsRequest::default_instance_ = new GetDocflowEventsRequest();
  GetDocflowEventsResponse::default_instance_ = new GetDocflowEventsResponse();
  DocflowEvent::default_instance_ = new DocflowEvent();
  GetDocflowBatchRequest::default_instance_->InitAsDefaultInstance();
  GetDocflowRequest::default_instance_->InitAsDefaultInstance();
  GetDocflowBatchResponse::default_instance_->InitAsDefaultInstance();
  SearchDocflowsRequest::default_instance_->InitAsDefaultInstance();
  SearchDocflowsResponse::default_instance_->InitAsDefaultInstance();
  GetDocflowsByPacketIdRequest::default_instance_->InitAsDefaultInstance();
  FetchedDocument::default_instance_->InitAsDefaultInstance();
  GetDocflowsByPacketIdResponse::default_instance_->InitAsDefaultInstance();
  GetDocflowEventsRequest::default_instance_->InitAsDefaultInstance();
  GetDocflowEventsResponse::default_instance_->InitAsDefaultInstance();
  DocflowEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Docflow_2fDocflowApi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Docflow_2fDocflowApi_2eproto {
  StaticDescriptorInitializer_Docflow_2fDocflowApi_2eproto() {
    protobuf_AddDesc_Docflow_2fDocflowApi_2eproto();
  }
} static_descriptor_initializer_Docflow_2fDocflowApi_2eproto_;
const ::google::protobuf::EnumDescriptor* SearchScope_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchScope_descriptor_;
}
bool SearchScope_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GetDocflowBatchRequest::kRequestsFieldNumber;
#endif  // !_MSC_VER

GetDocflowBatchRequest::GetDocflowBatchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.GetDocflowBatchRequest)
}

void GetDocflowBatchRequest::InitAsDefaultInstance() {
}

GetDocflowBatchRequest::GetDocflowBatchRequest(const GetDocflowBatchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.GetDocflowBatchRequest)
}

void GetDocflowBatchRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDocflowBatchRequest::~GetDocflowBatchRequest() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.GetDocflowBatchRequest)
  SharedDtor();
}

void GetDocflowBatchRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDocflowBatchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDocflowBatchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDocflowBatchRequest_descriptor_;
}

const GetDocflowBatchRequest& GetDocflowBatchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApi_2eproto();
  return *default_instance_;
}

GetDocflowBatchRequest* GetDocflowBatchRequest::default_instance_ = NULL;

GetDocflowBatchRequest* GetDocflowBatchRequest::New() const {
  return new GetDocflowBatchRequest;
}

void GetDocflowBatchRequest::Clear() {
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDocflowBatchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.GetDocflowBatchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Docflow.GetDocflowRequest Requests = 1;
      case 1: {
        if (tag == 10) {
         parse_Requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Requests;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.GetDocflowBatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.GetDocflowBatchRequest)
  return false;
#undef DO_
}

void GetDocflowBatchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.GetDocflowBatchRequest)
  // repeated .Diadoc.Api.Proto.Docflow.GetDocflowRequest Requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.GetDocflowBatchRequest)
}

::google::protobuf::uint8* GetDocflowBatchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.GetDocflowBatchRequest)
  // repeated .Diadoc.Api.Proto.Docflow.GetDocflowRequest Requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.GetDocflowBatchRequest)
  return target;
}

int GetDocflowBatchRequest::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.Docflow.GetDocflowRequest Requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDocflowBatchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDocflowBatchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDocflowBatchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDocflowBatchRequest::MergeFrom(const GetDocflowBatchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDocflowBatchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDocflowBatchRequest::CopyFrom(const GetDocflowBatchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocflowBatchRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->requests())) return false;
  return true;
}

void GetDocflowBatchRequest::Swap(GetDocflowBatchRequest* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDocflowBatchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDocflowBatchRequest_descriptor_;
  metadata.reflection = GetDocflowBatchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDocflowRequest::kDocumentIdFieldNumber;
const int GetDocflowRequest::kLastEventIdFieldNumber;
const int GetDocflowRequest::kInjectEntityContentFieldNumber;
#endif  // !_MSC_VER

GetDocflowRequest::GetDocflowRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.GetDocflowRequest)
}

void GetDocflowRequest::InitAsDefaultInstance() {
  documentid_ = const_cast< ::Diadoc::Api::Proto::DocumentId*>(&::Diadoc::Api::Proto::DocumentId::default_instance());
}

GetDocflowRequest::GetDocflowRequest(const GetDocflowRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.GetDocflowRequest)
}

void GetDocflowRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documentid_ = NULL;
  lasteventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  injectentitycontent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDocflowRequest::~GetDocflowRequest() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.GetDocflowRequest)
  SharedDtor();
}

void GetDocflowRequest::SharedDtor() {
  if (lasteventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lasteventid_;
  }
  if (this != default_instance_) {
    delete documentid_;
  }
}

void GetDocflowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDocflowRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDocflowRequest_descriptor_;
}

const GetDocflowRequest& GetDocflowRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApi_2eproto();
  return *default_instance_;
}

GetDocflowRequest* GetDocflowRequest::default_instance_ = NULL;

GetDocflowRequest* GetDocflowRequest::New() const {
  return new GetDocflowRequest;
}

void GetDocflowRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_documentid()) {
      if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
    }
    if (has_lasteventid()) {
      if (lasteventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lasteventid_->clear();
      }
    }
    injectentitycontent_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDocflowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.GetDocflowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LastEventId;
        break;
      }

      // optional string LastEventId = 2;
      case 2: {
        if (tag == 18) {
         parse_LastEventId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lasteventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lasteventid().data(), this->lasteventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lasteventid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_InjectEntityContent;
        break;
      }

      // optional bool InjectEntityContent = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_InjectEntityContent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &injectentitycontent_)));
          set_has_injectentitycontent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.GetDocflowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.GetDocflowRequest)
  return false;
#undef DO_
}

void GetDocflowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.GetDocflowRequest)
  // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
  if (has_documentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documentid(), output);
  }

  // optional string LastEventId = 2;
  if (has_lasteventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lasteventid().data(), this->lasteventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lasteventid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lasteventid(), output);
  }

  // optional bool InjectEntityContent = 3 [default = false];
  if (has_injectentitycontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->injectentitycontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.GetDocflowRequest)
}

::google::protobuf::uint8* GetDocflowRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.GetDocflowRequest)
  // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
  if (has_documentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documentid(), target);
  }

  // optional string LastEventId = 2;
  if (has_lasteventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lasteventid().data(), this->lasteventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lasteventid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lasteventid(), target);
  }

  // optional bool InjectEntityContent = 3 [default = false];
  if (has_injectentitycontent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->injectentitycontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.GetDocflowRequest)
  return target;
}

int GetDocflowRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
    if (has_documentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentid());
    }

    // optional string LastEventId = 2;
    if (has_lasteventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lasteventid());
    }

    // optional bool InjectEntityContent = 3 [default = false];
    if (has_injectentitycontent()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDocflowRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDocflowRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDocflowRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDocflowRequest::MergeFrom(const GetDocflowRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentid()) {
      mutable_documentid()->::Diadoc::Api::Proto::DocumentId::MergeFrom(from.documentid());
    }
    if (from.has_lasteventid()) {
      set_lasteventid(from.lasteventid());
    }
    if (from.has_injectentitycontent()) {
      set_injectentitycontent(from.injectentitycontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDocflowRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDocflowRequest::CopyFrom(const GetDocflowRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocflowRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_documentid()) {
    if (!this->documentid().IsInitialized()) return false;
  }
  return true;
}

void GetDocflowRequest::Swap(GetDocflowRequest* other) {
  if (other != this) {
    std::swap(documentid_, other->documentid_);
    std::swap(lasteventid_, other->lasteventid_);
    std::swap(injectentitycontent_, other->injectentitycontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDocflowRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDocflowRequest_descriptor_;
  metadata.reflection = GetDocflowRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDocflowBatchResponse::kDocumentsFieldNumber;
#endif  // !_MSC_VER

GetDocflowBatchResponse::GetDocflowBatchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponse)
}

void GetDocflowBatchResponse::InitAsDefaultInstance() {
}

GetDocflowBatchResponse::GetDocflowBatchResponse(const GetDocflowBatchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponse)
}

void GetDocflowBatchResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDocflowBatchResponse::~GetDocflowBatchResponse() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponse)
  SharedDtor();
}

void GetDocflowBatchResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDocflowBatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDocflowBatchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDocflowBatchResponse_descriptor_;
}

const GetDocflowBatchResponse& GetDocflowBatchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApi_2eproto();
  return *default_instance_;
}

GetDocflowBatchResponse* GetDocflowBatchResponse::default_instance_ = NULL;

GetDocflowBatchResponse* GetDocflowBatchResponse::New() const {
  return new GetDocflowBatchResponse;
}

void GetDocflowBatchResponse::Clear() {
  documents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDocflowBatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Documents = 1;
      case 1: {
        if (tag == 10) {
         parse_Documents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Documents;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponse)
  return false;
#undef DO_
}

void GetDocflowBatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponse)
  // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Documents = 1;
  for (int i = 0; i < this->documents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponse)
}

::google::protobuf::uint8* GetDocflowBatchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponse)
  // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Documents = 1;
  for (int i = 0; i < this->documents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.GetDocflowBatchResponse)
  return target;
}

int GetDocflowBatchResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Documents = 1;
  total_size += 1 * this->documents_size();
  for (int i = 0; i < this->documents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDocflowBatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDocflowBatchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDocflowBatchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDocflowBatchResponse::MergeFrom(const GetDocflowBatchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  documents_.MergeFrom(from.documents_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDocflowBatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDocflowBatchResponse::CopyFrom(const GetDocflowBatchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocflowBatchResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->documents())) return false;
  return true;
}

void GetDocflowBatchResponse::Swap(GetDocflowBatchResponse* other) {
  if (other != this) {
    documents_.Swap(&other->documents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDocflowBatchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDocflowBatchResponse_descriptor_;
  metadata.reflection = GetDocflowBatchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchDocflowsRequest::kQueryStringFieldNumber;
const int SearchDocflowsRequest::kCountFieldNumber;
const int SearchDocflowsRequest::kFirstIndexFieldNumber;
const int SearchDocflowsRequest::kScopeFieldNumber;
const int SearchDocflowsRequest::kInjectEntityContentFieldNumber;
#endif  // !_MSC_VER

SearchDocflowsRequest::SearchDocflowsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.SearchDocflowsRequest)
}

void SearchDocflowsRequest::InitAsDefaultInstance() {
}

SearchDocflowsRequest::SearchDocflowsRequest(const SearchDocflowsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.SearchDocflowsRequest)
}

void SearchDocflowsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  querystring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 100;
  firstindex_ = 0;
  scope_ = 0;
  injectentitycontent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchDocflowsRequest::~SearchDocflowsRequest() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.SearchDocflowsRequest)
  SharedDtor();
}

void SearchDocflowsRequest::SharedDtor() {
  if (querystring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete querystring_;
  }
  if (this != default_instance_) {
  }
}

void SearchDocflowsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchDocflowsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchDocflowsRequest_descriptor_;
}

const SearchDocflowsRequest& SearchDocflowsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApi_2eproto();
  return *default_instance_;
}

SearchDocflowsRequest* SearchDocflowsRequest::default_instance_ = NULL;

SearchDocflowsRequest* SearchDocflowsRequest::New() const {
  return new SearchDocflowsRequest;
}

void SearchDocflowsRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SearchDocflowsRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(firstindex_, injectentitycontent_);
    if (has_querystring()) {
      if (querystring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        querystring_->clear();
      }
    }
    count_ = 100;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchDocflowsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.SearchDocflowsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string QueryString = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_querystring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->querystring().data(), this->querystring().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "querystring");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Count;
        break;
      }

      // optional int32 Count = 2 [default = 100];
      case 2: {
        if (tag == 16) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FirstIndex;
        break;
      }

      // optional int32 FirstIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_FirstIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstindex_)));
          set_has_firstindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Scope;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.SearchScope Scope = 4 [default = SearchScopeAny];
      case 4: {
        if (tag == 32) {
         parse_Scope:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Docflow::SearchScope_IsValid(value)) {
            set_scope(static_cast< ::Diadoc::Api::Proto::Docflow::SearchScope >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_InjectEntityContent;
        break;
      }

      // optional bool InjectEntityContent = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_InjectEntityContent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &injectentitycontent_)));
          set_has_injectentitycontent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.SearchDocflowsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.SearchDocflowsRequest)
  return false;
#undef DO_
}

void SearchDocflowsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.SearchDocflowsRequest)
  // required string QueryString = 1;
  if (has_querystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->querystring().data(), this->querystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "querystring");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->querystring(), output);
  }

  // optional int32 Count = 2 [default = 100];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional int32 FirstIndex = 3;
  if (has_firstindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->firstindex(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.SearchScope Scope = 4 [default = SearchScopeAny];
  if (has_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scope(), output);
  }

  // optional bool InjectEntityContent = 5 [default = false];
  if (has_injectentitycontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->injectentitycontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.SearchDocflowsRequest)
}

::google::protobuf::uint8* SearchDocflowsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.SearchDocflowsRequest)
  // required string QueryString = 1;
  if (has_querystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->querystring().data(), this->querystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "querystring");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->querystring(), target);
  }

  // optional int32 Count = 2 [default = 100];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional int32 FirstIndex = 3;
  if (has_firstindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->firstindex(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.SearchScope Scope = 4 [default = SearchScopeAny];
  if (has_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scope(), target);
  }

  // optional bool InjectEntityContent = 5 [default = false];
  if (has_injectentitycontent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->injectentitycontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.SearchDocflowsRequest)
  return target;
}

int SearchDocflowsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string QueryString = 1;
    if (has_querystring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->querystring());
    }

    // optional int32 Count = 2 [default = 100];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 FirstIndex = 3;
    if (has_firstindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstindex());
    }

    // optional .Diadoc.Api.Proto.Docflow.SearchScope Scope = 4 [default = SearchScopeAny];
    if (has_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scope());
    }

    // optional bool InjectEntityContent = 5 [default = false];
    if (has_injectentitycontent()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchDocflowsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchDocflowsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchDocflowsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchDocflowsRequest::MergeFrom(const SearchDocflowsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_querystring()) {
      set_querystring(from.querystring());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_firstindex()) {
      set_firstindex(from.firstindex());
    }
    if (from.has_scope()) {
      set_scope(from.scope());
    }
    if (from.has_injectentitycontent()) {
      set_injectentitycontent(from.injectentitycontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchDocflowsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchDocflowsRequest::CopyFrom(const SearchDocflowsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchDocflowsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SearchDocflowsRequest::Swap(SearchDocflowsRequest* other) {
  if (other != this) {
    std::swap(querystring_, other->querystring_);
    std::swap(count_, other->count_);
    std::swap(firstindex_, other->firstindex_);
    std::swap(scope_, other->scope_);
    std::swap(injectentitycontent_, other->injectentitycontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchDocflowsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchDocflowsRequest_descriptor_;
  metadata.reflection = SearchDocflowsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchDocflowsResponse::kDocumentsFieldNumber;
const int SearchDocflowsResponse::kHaveMoreDocumentsFieldNumber;
#endif  // !_MSC_VER

SearchDocflowsResponse::SearchDocflowsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.SearchDocflowsResponse)
}

void SearchDocflowsResponse::InitAsDefaultInstance() {
}

SearchDocflowsResponse::SearchDocflowsResponse(const SearchDocflowsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.SearchDocflowsResponse)
}

void SearchDocflowsResponse::SharedCtor() {
  _cached_size_ = 0;
  havemoredocuments_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchDocflowsResponse::~SearchDocflowsResponse() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.SearchDocflowsResponse)
  SharedDtor();
}

void SearchDocflowsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchDocflowsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchDocflowsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchDocflowsResponse_descriptor_;
}

const SearchDocflowsResponse& SearchDocflowsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApi_2eproto();
  return *default_instance_;
}

SearchDocflowsResponse* SearchDocflowsResponse::default_instance_ = NULL;

SearchDocflowsResponse* SearchDocflowsResponse::New() const {
  return new SearchDocflowsResponse;
}

void SearchDocflowsResponse::Clear() {
  havemoredocuments_ = false;
  documents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchDocflowsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.SearchDocflowsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Documents = 1;
      case 1: {
        if (tag == 10) {
         parse_Documents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Documents;
        if (input->ExpectTag(16)) goto parse_HaveMoreDocuments;
        break;
      }

      // optional bool HaveMoreDocuments = 2;
      case 2: {
        if (tag == 16) {
         parse_HaveMoreDocuments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &havemoredocuments_)));
          set_has_havemoredocuments();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.SearchDocflowsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.SearchDocflowsResponse)
  return false;
#undef DO_
}

void SearchDocflowsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.SearchDocflowsResponse)
  // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Documents = 1;
  for (int i = 0; i < this->documents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documents(i), output);
  }

  // optional bool HaveMoreDocuments = 2;
  if (has_havemoredocuments()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->havemoredocuments(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.SearchDocflowsResponse)
}

::google::protobuf::uint8* SearchDocflowsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.SearchDocflowsResponse)
  // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Documents = 1;
  for (int i = 0; i < this->documents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documents(i), target);
  }

  // optional bool HaveMoreDocuments = 2;
  if (has_havemoredocuments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->havemoredocuments(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.SearchDocflowsResponse)
  return target;
}

int SearchDocflowsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool HaveMoreDocuments = 2;
    if (has_havemoredocuments()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Documents = 1;
  total_size += 1 * this->documents_size();
  for (int i = 0; i < this->documents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchDocflowsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchDocflowsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchDocflowsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchDocflowsResponse::MergeFrom(const SearchDocflowsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  documents_.MergeFrom(from.documents_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_havemoredocuments()) {
      set_havemoredocuments(from.havemoredocuments());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchDocflowsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchDocflowsResponse::CopyFrom(const SearchDocflowsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchDocflowsResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->documents())) return false;
  return true;
}

void SearchDocflowsResponse::Swap(SearchDocflowsResponse* other) {
  if (other != this) {
    documents_.Swap(&other->documents_);
    std::swap(havemoredocuments_, other->havemoredocuments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchDocflowsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchDocflowsResponse_descriptor_;
  metadata.reflection = SearchDocflowsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDocflowsByPacketIdRequest::kPacketIdFieldNumber;
const int GetDocflowsByPacketIdRequest::kCountFieldNumber;
const int GetDocflowsByPacketIdRequest::kInjectEntityContentFieldNumber;
const int GetDocflowsByPacketIdRequest::kAfterIndexKeyFieldNumber;
#endif  // !_MSC_VER

GetDocflowsByPacketIdRequest::GetDocflowsByPacketIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdRequest)
}

void GetDocflowsByPacketIdRequest::InitAsDefaultInstance() {
}

GetDocflowsByPacketIdRequest::GetDocflowsByPacketIdRequest(const GetDocflowsByPacketIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdRequest)
}

void GetDocflowsByPacketIdRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 100;
  injectentitycontent_ = false;
  afterindexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDocflowsByPacketIdRequest::~GetDocflowsByPacketIdRequest() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdRequest)
  SharedDtor();
}

void GetDocflowsByPacketIdRequest::SharedDtor() {
  if (packetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete packetid_;
  }
  if (afterindexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete afterindexkey_;
  }
  if (this != default_instance_) {
  }
}

void GetDocflowsByPacketIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDocflowsByPacketIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDocflowsByPacketIdRequest_descriptor_;
}

const GetDocflowsByPacketIdRequest& GetDocflowsByPacketIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApi_2eproto();
  return *default_instance_;
}

GetDocflowsByPacketIdRequest* GetDocflowsByPacketIdRequest::default_instance_ = NULL;

GetDocflowsByPacketIdRequest* GetDocflowsByPacketIdRequest::New() const {
  return new GetDocflowsByPacketIdRequest;
}

void GetDocflowsByPacketIdRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_packetid()) {
      if (packetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        packetid_->clear();
      }
    }
    count_ = 100;
    injectentitycontent_ = false;
    if (has_afterindexkey()) {
      if (afterindexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        afterindexkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDocflowsByPacketIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PacketId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packetid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packetid().data(), this->packetid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "packetid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Count;
        break;
      }

      // optional int32 Count = 2 [default = 100];
      case 2: {
        if (tag == 16) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_InjectEntityContent;
        break;
      }

      // optional bool InjectEntityContent = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_InjectEntityContent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &injectentitycontent_)));
          set_has_injectentitycontent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AfterIndexKey;
        break;
      }

      // optional bytes AfterIndexKey = 4;
      case 4: {
        if (tag == 34) {
         parse_AfterIndexKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_afterindexkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdRequest)
  return false;
#undef DO_
}

void GetDocflowsByPacketIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdRequest)
  // required string PacketId = 1;
  if (has_packetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packetid().data(), this->packetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "packetid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->packetid(), output);
  }

  // optional int32 Count = 2 [default = 100];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional bool InjectEntityContent = 3 [default = false];
  if (has_injectentitycontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->injectentitycontent(), output);
  }

  // optional bytes AfterIndexKey = 4;
  if (has_afterindexkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->afterindexkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdRequest)
}

::google::protobuf::uint8* GetDocflowsByPacketIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdRequest)
  // required string PacketId = 1;
  if (has_packetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packetid().data(), this->packetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "packetid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->packetid(), target);
  }

  // optional int32 Count = 2 [default = 100];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional bool InjectEntityContent = 3 [default = false];
  if (has_injectentitycontent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->injectentitycontent(), target);
  }

  // optional bytes AfterIndexKey = 4;
  if (has_afterindexkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->afterindexkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdRequest)
  return target;
}

int GetDocflowsByPacketIdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PacketId = 1;
    if (has_packetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packetid());
    }

    // optional int32 Count = 2 [default = 100];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional bool InjectEntityContent = 3 [default = false];
    if (has_injectentitycontent()) {
      total_size += 1 + 1;
    }

    // optional bytes AfterIndexKey = 4;
    if (has_afterindexkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->afterindexkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDocflowsByPacketIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDocflowsByPacketIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDocflowsByPacketIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDocflowsByPacketIdRequest::MergeFrom(const GetDocflowsByPacketIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packetid()) {
      set_packetid(from.packetid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_injectentitycontent()) {
      set_injectentitycontent(from.injectentitycontent());
    }
    if (from.has_afterindexkey()) {
      set_afterindexkey(from.afterindexkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDocflowsByPacketIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDocflowsByPacketIdRequest::CopyFrom(const GetDocflowsByPacketIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocflowsByPacketIdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetDocflowsByPacketIdRequest::Swap(GetDocflowsByPacketIdRequest* other) {
  if (other != this) {
    std::swap(packetid_, other->packetid_);
    std::swap(count_, other->count_);
    std::swap(injectentitycontent_, other->injectentitycontent_);
    std::swap(afterindexkey_, other->afterindexkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDocflowsByPacketIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDocflowsByPacketIdRequest_descriptor_;
  metadata.reflection = GetDocflowsByPacketIdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FetchedDocument::kDocumentFieldNumber;
const int FetchedDocument::kIndexKeyFieldNumber;
#endif  // !_MSC_VER

FetchedDocument::FetchedDocument()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.FetchedDocument)
}

void FetchedDocument::InitAsDefaultInstance() {
  document_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflow*>(&::Diadoc::Api::Proto::Docflow::DocumentWithDocflow::default_instance());
}

FetchedDocument::FetchedDocument(const FetchedDocument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.FetchedDocument)
}

void FetchedDocument::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  document_ = NULL;
  indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchedDocument::~FetchedDocument() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.FetchedDocument)
  SharedDtor();
}

void FetchedDocument::SharedDtor() {
  if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete indexkey_;
  }
  if (this != default_instance_) {
    delete document_;
  }
}

void FetchedDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchedDocument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchedDocument_descriptor_;
}

const FetchedDocument& FetchedDocument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApi_2eproto();
  return *default_instance_;
}

FetchedDocument* FetchedDocument::default_instance_ = NULL;

FetchedDocument* FetchedDocument::New() const {
  return new FetchedDocument;
}

void FetchedDocument::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_document()) {
      if (document_ != NULL) document_->::Diadoc::Api::Proto::Docflow::DocumentWithDocflow::Clear();
    }
    if (has_indexkey()) {
      if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        indexkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchedDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.FetchedDocument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Document = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_IndexKey;
        break;
      }

      // required bytes IndexKey = 2;
      case 2: {
        if (tag == 18) {
         parse_IndexKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_indexkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.FetchedDocument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.FetchedDocument)
  return false;
#undef DO_
}

void FetchedDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.FetchedDocument)
  // required .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Document = 1;
  if (has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->document(), output);
  }

  // required bytes IndexKey = 2;
  if (has_indexkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->indexkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.FetchedDocument)
}

::google::protobuf::uint8* FetchedDocument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.FetchedDocument)
  // required .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Document = 1;
  if (has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->document(), target);
  }

  // required bytes IndexKey = 2;
  if (has_indexkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->indexkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.FetchedDocument)
  return target;
}

int FetchedDocument::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Document = 1;
    if (has_document()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->document());
    }

    // required bytes IndexKey = 2;
    if (has_indexkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->indexkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchedDocument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchedDocument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchedDocument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchedDocument::MergeFrom(const FetchedDocument& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_document()) {
      mutable_document()->::Diadoc::Api::Proto::Docflow::DocumentWithDocflow::MergeFrom(from.document());
    }
    if (from.has_indexkey()) {
      set_indexkey(from.indexkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchedDocument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchedDocument::CopyFrom(const FetchedDocument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchedDocument::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_document()) {
    if (!this->document().IsInitialized()) return false;
  }
  return true;
}

void FetchedDocument::Swap(FetchedDocument* other) {
  if (other != this) {
    std::swap(document_, other->document_);
    std::swap(indexkey_, other->indexkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchedDocument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchedDocument_descriptor_;
  metadata.reflection = FetchedDocument_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDocflowsByPacketIdResponse::kDocumentsFieldNumber;
const int GetDocflowsByPacketIdResponse::kNextPageIndexKeyFieldNumber;
#endif  // !_MSC_VER

GetDocflowsByPacketIdResponse::GetDocflowsByPacketIdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponse)
}

void GetDocflowsByPacketIdResponse::InitAsDefaultInstance() {
}

GetDocflowsByPacketIdResponse::GetDocflowsByPacketIdResponse(const GetDocflowsByPacketIdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponse)
}

void GetDocflowsByPacketIdResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nextpageindexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDocflowsByPacketIdResponse::~GetDocflowsByPacketIdResponse() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponse)
  SharedDtor();
}

void GetDocflowsByPacketIdResponse::SharedDtor() {
  if (nextpageindexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nextpageindexkey_;
  }
  if (this != default_instance_) {
  }
}

void GetDocflowsByPacketIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDocflowsByPacketIdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDocflowsByPacketIdResponse_descriptor_;
}

const GetDocflowsByPacketIdResponse& GetDocflowsByPacketIdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApi_2eproto();
  return *default_instance_;
}

GetDocflowsByPacketIdResponse* GetDocflowsByPacketIdResponse::default_instance_ = NULL;

GetDocflowsByPacketIdResponse* GetDocflowsByPacketIdResponse::New() const {
  return new GetDocflowsByPacketIdResponse;
}

void GetDocflowsByPacketIdResponse::Clear() {
  if (has_nextpageindexkey()) {
    if (nextpageindexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      nextpageindexkey_->clear();
    }
  }
  documents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDocflowsByPacketIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Docflow.FetchedDocument Documents = 1;
      case 1: {
        if (tag == 10) {
         parse_Documents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Documents;
        if (input->ExpectTag(18)) goto parse_NextPageIndexKey;
        break;
      }

      // optional bytes NextPageIndexKey = 2;
      case 2: {
        if (tag == 18) {
         parse_NextPageIndexKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nextpageindexkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponse)
  return false;
#undef DO_
}

void GetDocflowsByPacketIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponse)
  // repeated .Diadoc.Api.Proto.Docflow.FetchedDocument Documents = 1;
  for (int i = 0; i < this->documents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documents(i), output);
  }

  // optional bytes NextPageIndexKey = 2;
  if (has_nextpageindexkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nextpageindexkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponse)
}

::google::protobuf::uint8* GetDocflowsByPacketIdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponse)
  // repeated .Diadoc.Api.Proto.Docflow.FetchedDocument Documents = 1;
  for (int i = 0; i < this->documents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documents(i), target);
  }

  // optional bytes NextPageIndexKey = 2;
  if (has_nextpageindexkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nextpageindexkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.GetDocflowsByPacketIdResponse)
  return target;
}

int GetDocflowsByPacketIdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes NextPageIndexKey = 2;
    if (has_nextpageindexkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nextpageindexkey());
    }

  }
  // repeated .Diadoc.Api.Proto.Docflow.FetchedDocument Documents = 1;
  total_size += 1 * this->documents_size();
  for (int i = 0; i < this->documents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDocflowsByPacketIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDocflowsByPacketIdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDocflowsByPacketIdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDocflowsByPacketIdResponse::MergeFrom(const GetDocflowsByPacketIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  documents_.MergeFrom(from.documents_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_nextpageindexkey()) {
      set_nextpageindexkey(from.nextpageindexkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDocflowsByPacketIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDocflowsByPacketIdResponse::CopyFrom(const GetDocflowsByPacketIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocflowsByPacketIdResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->documents())) return false;
  return true;
}

void GetDocflowsByPacketIdResponse::Swap(GetDocflowsByPacketIdResponse* other) {
  if (other != this) {
    documents_.Swap(&other->documents_);
    std::swap(nextpageindexkey_, other->nextpageindexkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDocflowsByPacketIdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDocflowsByPacketIdResponse_descriptor_;
  metadata.reflection = GetDocflowsByPacketIdResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDocflowEventsRequest::kFilterFieldNumber;
const int GetDocflowEventsRequest::kAfterIndexKeyFieldNumber;
const int GetDocflowEventsRequest::kPopulateDocumentsFieldNumber;
const int GetDocflowEventsRequest::kInjectEntityContentFieldNumber;
const int GetDocflowEventsRequest::kPopulatePreviousDocumentStatesFieldNumber;
#endif  // !_MSC_VER

GetDocflowEventsRequest::GetDocflowEventsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.GetDocflowEventsRequest)
}

void GetDocflowEventsRequest::InitAsDefaultInstance() {
  filter_ = const_cast< ::Diadoc::Api::Proto::TimeBasedFilter*>(&::Diadoc::Api::Proto::TimeBasedFilter::default_instance());
}

GetDocflowEventsRequest::GetDocflowEventsRequest(const GetDocflowEventsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.GetDocflowEventsRequest)
}

void GetDocflowEventsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filter_ = NULL;
  afterindexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  populatedocuments_ = false;
  injectentitycontent_ = false;
  populatepreviousdocumentstates_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDocflowEventsRequest::~GetDocflowEventsRequest() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.GetDocflowEventsRequest)
  SharedDtor();
}

void GetDocflowEventsRequest::SharedDtor() {
  if (afterindexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete afterindexkey_;
  }
  if (this != default_instance_) {
    delete filter_;
  }
}

void GetDocflowEventsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDocflowEventsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDocflowEventsRequest_descriptor_;
}

const GetDocflowEventsRequest& GetDocflowEventsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApi_2eproto();
  return *default_instance_;
}

GetDocflowEventsRequest* GetDocflowEventsRequest::default_instance_ = NULL;

GetDocflowEventsRequest* GetDocflowEventsRequest::New() const {
  return new GetDocflowEventsRequest;
}

void GetDocflowEventsRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetDocflowEventsRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(populatedocuments_, populatepreviousdocumentstates_);
    if (has_filter()) {
      if (filter_ != NULL) filter_->::Diadoc::Api::Proto::TimeBasedFilter::Clear();
    }
    if (has_afterindexkey()) {
      if (afterindexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        afterindexkey_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDocflowEventsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.GetDocflowEventsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.TimeBasedFilter Filter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AfterIndexKey;
        break;
      }

      // optional bytes AfterIndexKey = 2;
      case 2: {
        if (tag == 18) {
         parse_AfterIndexKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_afterindexkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PopulateDocuments;
        break;
      }

      // optional bool PopulateDocuments = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_PopulateDocuments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &populatedocuments_)));
          set_has_populatedocuments();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_InjectEntityContent;
        break;
      }

      // optional bool InjectEntityContent = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_InjectEntityContent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &injectentitycontent_)));
          set_has_injectentitycontent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_PopulatePreviousDocumentStates;
        break;
      }

      // optional bool PopulatePreviousDocumentStates = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_PopulatePreviousDocumentStates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &populatepreviousdocumentstates_)));
          set_has_populatepreviousdocumentstates();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.GetDocflowEventsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.GetDocflowEventsRequest)
  return false;
#undef DO_
}

void GetDocflowEventsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.GetDocflowEventsRequest)
  // required .Diadoc.Api.Proto.TimeBasedFilter Filter = 1;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filter(), output);
  }

  // optional bytes AfterIndexKey = 2;
  if (has_afterindexkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->afterindexkey(), output);
  }

  // optional bool PopulateDocuments = 3 [default = false];
  if (has_populatedocuments()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->populatedocuments(), output);
  }

  // optional bool InjectEntityContent = 4 [default = false];
  if (has_injectentitycontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->injectentitycontent(), output);
  }

  // optional bool PopulatePreviousDocumentStates = 5 [default = false];
  if (has_populatepreviousdocumentstates()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->populatepreviousdocumentstates(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.GetDocflowEventsRequest)
}

::google::protobuf::uint8* GetDocflowEventsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.GetDocflowEventsRequest)
  // required .Diadoc.Api.Proto.TimeBasedFilter Filter = 1;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->filter(), target);
  }

  // optional bytes AfterIndexKey = 2;
  if (has_afterindexkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->afterindexkey(), target);
  }

  // optional bool PopulateDocuments = 3 [default = false];
  if (has_populatedocuments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->populatedocuments(), target);
  }

  // optional bool InjectEntityContent = 4 [default = false];
  if (has_injectentitycontent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->injectentitycontent(), target);
  }

  // optional bool PopulatePreviousDocumentStates = 5 [default = false];
  if (has_populatepreviousdocumentstates()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->populatepreviousdocumentstates(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.GetDocflowEventsRequest)
  return target;
}

int GetDocflowEventsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.TimeBasedFilter Filter = 1;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }

    // optional bytes AfterIndexKey = 2;
    if (has_afterindexkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->afterindexkey());
    }

    // optional bool PopulateDocuments = 3 [default = false];
    if (has_populatedocuments()) {
      total_size += 1 + 1;
    }

    // optional bool InjectEntityContent = 4 [default = false];
    if (has_injectentitycontent()) {
      total_size += 1 + 1;
    }

    // optional bool PopulatePreviousDocumentStates = 5 [default = false];
    if (has_populatepreviousdocumentstates()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDocflowEventsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDocflowEventsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDocflowEventsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDocflowEventsRequest::MergeFrom(const GetDocflowEventsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter()) {
      mutable_filter()->::Diadoc::Api::Proto::TimeBasedFilter::MergeFrom(from.filter());
    }
    if (from.has_afterindexkey()) {
      set_afterindexkey(from.afterindexkey());
    }
    if (from.has_populatedocuments()) {
      set_populatedocuments(from.populatedocuments());
    }
    if (from.has_injectentitycontent()) {
      set_injectentitycontent(from.injectentitycontent());
    }
    if (from.has_populatepreviousdocumentstates()) {
      set_populatepreviousdocumentstates(from.populatepreviousdocumentstates());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDocflowEventsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDocflowEventsRequest::CopyFrom(const GetDocflowEventsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocflowEventsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  return true;
}

void GetDocflowEventsRequest::Swap(GetDocflowEventsRequest* other) {
  if (other != this) {
    std::swap(filter_, other->filter_);
    std::swap(afterindexkey_, other->afterindexkey_);
    std::swap(populatedocuments_, other->populatedocuments_);
    std::swap(injectentitycontent_, other->injectentitycontent_);
    std::swap(populatepreviousdocumentstates_, other->populatepreviousdocumentstates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDocflowEventsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDocflowEventsRequest_descriptor_;
  metadata.reflection = GetDocflowEventsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDocflowEventsResponse::kTotalCountFieldNumber;
const int GetDocflowEventsResponse::kEventsFieldNumber;
const int GetDocflowEventsResponse::kTotalCountTypeFieldNumber;
#endif  // !_MSC_VER

GetDocflowEventsResponse::GetDocflowEventsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponse)
}

void GetDocflowEventsResponse::InitAsDefaultInstance() {
}

GetDocflowEventsResponse::GetDocflowEventsResponse(const GetDocflowEventsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponse)
}

void GetDocflowEventsResponse::SharedCtor() {
  _cached_size_ = 0;
  totalcount_ = 0;
  totalcounttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDocflowEventsResponse::~GetDocflowEventsResponse() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponse)
  SharedDtor();
}

void GetDocflowEventsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDocflowEventsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDocflowEventsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDocflowEventsResponse_descriptor_;
}

const GetDocflowEventsResponse& GetDocflowEventsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApi_2eproto();
  return *default_instance_;
}

GetDocflowEventsResponse* GetDocflowEventsResponse::default_instance_ = NULL;

GetDocflowEventsResponse* GetDocflowEventsResponse::New() const {
  return new GetDocflowEventsResponse;
}

void GetDocflowEventsResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetDocflowEventsResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(totalcount_, totalcounttype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDocflowEventsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TotalCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Events;
        break;
      }

      // repeated .Diadoc.Api.Proto.Docflow.DocflowEvent Events = 2;
      case 2: {
        if (tag == 18) {
         parse_Events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Events;
        if (input->ExpectTag(24)) goto parse_TotalCountType;
        break;
      }

      // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
      case 3: {
        if (tag == 24) {
         parse_TotalCountType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::TotalCountType_IsValid(value)) {
            set_totalcounttype(static_cast< ::Diadoc::Api::Proto::TotalCountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponse)
  return false;
#undef DO_
}

void GetDocflowEventsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponse)
  // optional int32 TotalCount = 1;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalcount(), output);
  }

  // repeated .Diadoc.Api.Proto.Docflow.DocflowEvent Events = 2;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->events(i), output);
  }

  // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
  if (has_totalcounttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->totalcounttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponse)
}

::google::protobuf::uint8* GetDocflowEventsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponse)
  // optional int32 TotalCount = 1;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalcount(), target);
  }

  // repeated .Diadoc.Api.Proto.Docflow.DocflowEvent Events = 2;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->events(i), target);
  }

  // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
  if (has_totalcounttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->totalcounttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.GetDocflowEventsResponse)
  return target;
}

int GetDocflowEventsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TotalCount = 1;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

    // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
    if (has_totalcounttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->totalcounttype());
    }

  }
  // repeated .Diadoc.Api.Proto.Docflow.DocflowEvent Events = 2;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDocflowEventsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDocflowEventsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDocflowEventsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDocflowEventsResponse::MergeFrom(const GetDocflowEventsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
    if (from.has_totalcounttype()) {
      set_totalcounttype(from.totalcounttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDocflowEventsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDocflowEventsResponse::CopyFrom(const GetDocflowEventsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocflowEventsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->events())) return false;
  return true;
}

void GetDocflowEventsResponse::Swap(GetDocflowEventsResponse* other) {
  if (other != this) {
    std::swap(totalcount_, other->totalcount_);
    events_.Swap(&other->events_);
    std::swap(totalcounttype_, other->totalcounttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDocflowEventsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDocflowEventsResponse_descriptor_;
  metadata.reflection = GetDocflowEventsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocflowEvent::kEventIdFieldNumber;
const int DocflowEvent::kTimestampFieldNumber;
const int DocflowEvent::kDocumentIdFieldNumber;
const int DocflowEvent::kIndexKeyFieldNumber;
const int DocflowEvent::kDocumentFieldNumber;
const int DocflowEvent::kPreviousEventIdFieldNumber;
const int DocflowEvent::kPreviousDocumentStateFieldNumber;
#endif  // !_MSC_VER

DocflowEvent::DocflowEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.DocflowEvent)
}

void DocflowEvent::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  documentid_ = const_cast< ::Diadoc::Api::Proto::DocumentId*>(&::Diadoc::Api::Proto::DocumentId::default_instance());
  document_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflow*>(&::Diadoc::Api::Proto::Docflow::DocumentWithDocflow::default_instance());
  previousdocumentstate_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflow*>(&::Diadoc::Api::Proto::Docflow::DocumentWithDocflow::default_instance());
}

DocflowEvent::DocflowEvent(const DocflowEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.DocflowEvent)
}

void DocflowEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
  documentid_ = NULL;
  indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_ = NULL;
  previouseventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousdocumentstate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocflowEvent::~DocflowEvent() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.DocflowEvent)
  SharedDtor();
}

void DocflowEvent::SharedDtor() {
  if (eventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eventid_;
  }
  if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete indexkey_;
  }
  if (previouseventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete previouseventid_;
  }
  if (this != default_instance_) {
    delete timestamp_;
    delete documentid_;
    delete document_;
    delete previousdocumentstate_;
  }
}

void DocflowEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocflowEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocflowEvent_descriptor_;
}

const DocflowEvent& DocflowEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflowApi_2eproto();
  return *default_instance_;
}

DocflowEvent* DocflowEvent::default_instance_ = NULL;

DocflowEvent* DocflowEvent::New() const {
  return new DocflowEvent;
}

void DocflowEvent::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        eventid_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_documentid()) {
      if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
    }
    if (has_indexkey()) {
      if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        indexkey_->clear();
      }
    }
    if (has_document()) {
      if (document_ != NULL) document_->::Diadoc::Api::Proto::Docflow::DocumentWithDocflow::Clear();
    }
    if (has_previouseventid()) {
      if (previouseventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        previouseventid_->clear();
      }
    }
    if (has_previousdocumentstate()) {
      if (previousdocumentstate_ != NULL) previousdocumentstate_->::Diadoc::Api::Proto::Docflow::DocumentWithDocflow::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocflowEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.DocflowEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string EventId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "eventid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Timestamp;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp Timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_Timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DocumentId;
        break;
      }

      // optional .Diadoc.Api.Proto.DocumentId DocumentId = 3;
      case 3: {
        if (tag == 26) {
         parse_DocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_IndexKey;
        break;
      }

      // optional bytes IndexKey = 4;
      case 4: {
        if (tag == 34) {
         parse_IndexKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_indexkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Document;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Document = 5;
      case 5: {
        if (tag == 42) {
         parse_Document:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_PreviousEventId;
        break;
      }

      // optional string PreviousEventId = 6;
      case 6: {
        if (tag == 50) {
         parse_PreviousEventId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previouseventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->previouseventid().data(), this->previouseventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "previouseventid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_PreviousDocumentState;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflow PreviousDocumentState = 7;
      case 7: {
        if (tag == 58) {
         parse_PreviousDocumentState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_previousdocumentstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.DocflowEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.DocflowEvent)
  return false;
#undef DO_
}

void DocflowEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.DocflowEvent)
  // optional string EventId = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "eventid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->eventid(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp Timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->timestamp(), output);
  }

  // optional .Diadoc.Api.Proto.DocumentId DocumentId = 3;
  if (has_documentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->documentid(), output);
  }

  // optional bytes IndexKey = 4;
  if (has_indexkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->indexkey(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Document = 5;
  if (has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->document(), output);
  }

  // optional string PreviousEventId = 6;
  if (has_previouseventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previouseventid().data(), this->previouseventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "previouseventid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->previouseventid(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflow PreviousDocumentState = 7;
  if (has_previousdocumentstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->previousdocumentstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.DocflowEvent)
}

::google::protobuf::uint8* DocflowEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.DocflowEvent)
  // optional string EventId = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "eventid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->eventid(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp Timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->timestamp(), target);
  }

  // optional .Diadoc.Api.Proto.DocumentId DocumentId = 3;
  if (has_documentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->documentid(), target);
  }

  // optional bytes IndexKey = 4;
  if (has_indexkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->indexkey(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Document = 5;
  if (has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->document(), target);
  }

  // optional string PreviousEventId = 6;
  if (has_previouseventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previouseventid().data(), this->previouseventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "previouseventid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->previouseventid(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflow PreviousDocumentState = 7;
  if (has_previousdocumentstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->previousdocumentstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.DocflowEvent)
  return target;
}

int DocflowEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string EventId = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // optional .Diadoc.Api.Proto.Timestamp Timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional .Diadoc.Api.Proto.DocumentId DocumentId = 3;
    if (has_documentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentid());
    }

    // optional bytes IndexKey = 4;
    if (has_indexkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->indexkey());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflow Document = 5;
    if (has_document()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->document());
    }

    // optional string PreviousEventId = 6;
    if (has_previouseventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->previouseventid());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflow PreviousDocumentState = 7;
    if (has_previousdocumentstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->previousdocumentstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocflowEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocflowEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocflowEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocflowEvent::MergeFrom(const DocflowEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_documentid()) {
      mutable_documentid()->::Diadoc::Api::Proto::DocumentId::MergeFrom(from.documentid());
    }
    if (from.has_indexkey()) {
      set_indexkey(from.indexkey());
    }
    if (from.has_document()) {
      mutable_document()->::Diadoc::Api::Proto::Docflow::DocumentWithDocflow::MergeFrom(from.document());
    }
    if (from.has_previouseventid()) {
      set_previouseventid(from.previouseventid());
    }
    if (from.has_previousdocumentstate()) {
      mutable_previousdocumentstate()->::Diadoc::Api::Proto::Docflow::DocumentWithDocflow::MergeFrom(from.previousdocumentstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocflowEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocflowEvent::CopyFrom(const DocflowEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocflowEvent::IsInitialized() const {

  if (has_timestamp()) {
    if (!this->timestamp().IsInitialized()) return false;
  }
  if (has_documentid()) {
    if (!this->documentid().IsInitialized()) return false;
  }
  if (has_document()) {
    if (!this->document().IsInitialized()) return false;
  }
  if (has_previousdocumentstate()) {
    if (!this->previousdocumentstate().IsInitialized()) return false;
  }
  return true;
}

void DocflowEvent::Swap(DocflowEvent* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(documentid_, other->documentid_);
    std::swap(indexkey_, other->indexkey_);
    std::swap(document_, other->document_);
    std::swap(previouseventid_, other->previouseventid_);
    std::swap(previousdocumentstate_, other->previousdocumentstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocflowEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocflowEvent_descriptor_;
  metadata.reflection = DocflowEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
