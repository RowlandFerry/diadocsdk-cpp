// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/ResolutionDocflowV3.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Docflow/ResolutionDocflowV3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

namespace {

const ::google::protobuf::Descriptor* ResolutionDocflowV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionDocflowV3_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionEntitiesV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionEntitiesV3_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionRequestV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionRequestV3_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionV3_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApprovementSignatureV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApprovementSignatureV3_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignatureDenialV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignatureDenialV3_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResolutionStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Docflow_2fResolutionDocflowV3_2eproto() {
  protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Docflow/ResolutionDocflowV3.proto");
  GOOGLE_CHECK(file != NULL);
  ResolutionDocflowV3_descriptor_ = file->message_type(0);
  static const int ResolutionDocflowV3_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionDocflowV3, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionDocflowV3, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionDocflowV3, resolutionstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionDocflowV3, resolutionentityid_),
  };
  ResolutionDocflowV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionDocflowV3_descriptor_,
      ResolutionDocflowV3::default_instance_,
      ResolutionDocflowV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionDocflowV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionDocflowV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionDocflowV3));
  ResolutionEntitiesV3_descriptor_ = file->message_type(1);
  static const int ResolutionEntitiesV3_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionEntitiesV3, requests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionEntitiesV3, resolutions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionEntitiesV3, approvementsignatures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionEntitiesV3, signaturedenials_),
  };
  ResolutionEntitiesV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionEntitiesV3_descriptor_,
      ResolutionEntitiesV3::default_instance_,
      ResolutionEntitiesV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionEntitiesV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionEntitiesV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionEntitiesV3));
  ResolutionRequestV3_descriptor_ = file->message_type(2);
  static const int ResolutionRequestV3_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestV3, entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestV3, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestV3, authoruserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestV3, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestV3, resolvedwith_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestV3, actions_),
  };
  ResolutionRequestV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionRequestV3_descriptor_,
      ResolutionRequestV3::default_instance_,
      ResolutionRequestV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionRequestV3));
  ResolutionV3_descriptor_ = file->message_type(3);
  static const int ResolutionV3_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionV3, entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionV3, resolutionrequestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionV3, authoruserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionV3, resolutiontype_),
  };
  ResolutionV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionV3_descriptor_,
      ResolutionV3::default_instance_,
      ResolutionV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionV3));
  ApprovementSignatureV3_descriptor_ = file->message_type(4);
  static const int ApprovementSignatureV3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApprovementSignatureV3, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApprovementSignatureV3, resolutionrequestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApprovementSignatureV3, authoruserid_),
  };
  ApprovementSignatureV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApprovementSignatureV3_descriptor_,
      ApprovementSignatureV3::default_instance_,
      ApprovementSignatureV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApprovementSignatureV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApprovementSignatureV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApprovementSignatureV3));
  SignatureDenialV3_descriptor_ = file->message_type(5);
  static const int SignatureDenialV3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureDenialV3, entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureDenialV3, resolutionrequestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureDenialV3, authoruserid_),
  };
  SignatureDenialV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignatureDenialV3_descriptor_,
      SignatureDenialV3::default_instance_,
      SignatureDenialV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureDenialV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureDenialV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignatureDenialV3));
  ResolutionStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Docflow_2fResolutionDocflowV3_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionDocflowV3_descriptor_, &ResolutionDocflowV3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionEntitiesV3_descriptor_, &ResolutionEntitiesV3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionRequestV3_descriptor_, &ResolutionRequestV3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionV3_descriptor_, &ResolutionV3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApprovementSignatureV3_descriptor_, &ApprovementSignatureV3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignatureDenialV3_descriptor_, &SignatureDenialV3::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Docflow_2fResolutionDocflowV3_2eproto() {
  delete ResolutionDocflowV3::default_instance_;
  delete ResolutionDocflowV3_reflection_;
  delete ResolutionEntitiesV3::default_instance_;
  delete ResolutionEntitiesV3_reflection_;
  delete ResolutionRequestV3::default_instance_;
  delete ResolutionRequestV3_reflection_;
  delete ResolutionV3::default_instance_;
  delete ResolutionV3_reflection_;
  delete ApprovementSignatureV3::default_instance_;
  delete ApprovementSignatureV3_reflection_;
  delete SignatureDenialV3::default_instance_;
  delete SignatureDenialV3_reflection_;
}

void protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_ResolutionAction_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_ResolutionRequestType_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_ResolutionTarget_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_ResolutionType_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fAttachment_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fAttachmentV3_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!Docflow/ResolutionDocflowV3.proto\022\030Dia"
    "doc.Api.Proto.Docflow\032\017Timestamp.proto\032\026"
    "ResolutionAction.proto\032\033ResolutionReques"
    "tType.proto\032\026ResolutionTarget.proto\032\024Res"
    "olutionType.proto\032\030Docflow/Attachment.pr"
    "oto\032\032Docflow/AttachmentV3.proto\"\262\001\n\023Reso"
    "lutionDocflowV3\022\022\n\nIsFinished\030\001 \002(\010\022\026\n\016P"
    "arentEntityId\030\002 \002(\t\022S\n\020ResolutionStatus\030"
    "\003 \002(\0162*.Diadoc.Api.Proto.Docflow.Resolut"
    "ionStatus:\rUnknownStatus\022\032\n\022ResolutionEn"
    "tityId\030\004 \001(\t\"\254\002\n\024ResolutionEntitiesV3\022\?\n"
    "\010Requests\030\001 \003(\0132-.Diadoc.Api.Proto.Docfl"
    "ow.ResolutionRequestV3\022;\n\013Resolutions\030\002 "
    "\003(\0132&.Diadoc.Api.Proto.Docflow.Resolutio"
    "nV3\022O\n\025ApprovementSignatures\030\003 \003(\01320.Dia"
    "doc.Api.Proto.Docflow.ApprovementSignatu"
    "reV3\022E\n\020SignatureDenials\030\004 \003(\0132+.Diadoc."
    "Api.Proto.Docflow.SignatureDenialV3\"\270\002\n\023"
    "ResolutionRequestV3\0220\n\006Entity\030\001 \002(\0132 .Di"
    "adoc.Api.Proto.Docflow.Entity\0222\n\006Target\030"
    "\002 \002(\0132\".Diadoc.Api.Proto.ResolutionTarge"
    "t\022\024\n\014AuthorUserId\030\003 \001(\t\022Z\n\013RequestType\030\004"
    " \002(\0162\'.Diadoc.Api.Proto.ResolutionReques"
    "tType:\034UnknownResolutionRequestType\022\024\n\014R"
    "esolvedWith\030\005 \001(\t\0223\n\007Actions\030\006 \003(\0162\".Dia"
    "doc.Api.Proto.ResolutionAction\"\304\001\n\014Resol"
    "utionV3\0220\n\006Entity\030\001 \002(\0132 .Diadoc.Api.Pro"
    "to.Docflow.Entity\022\033\n\023ResolutionRequestId"
    "\030\002 \001(\t\022\024\n\014AuthorUserId\030\003 \001(\t\022O\n\016Resoluti"
    "onType\030\004 \002(\0162 .Diadoc.Api.Proto.Resoluti"
    "onType:\025UnknownResolutionType\"\205\001\n\026Approv"
    "ementSignatureV3\0228\n\tSignature\030\001 \002(\0132%.Di"
    "adoc.Api.Proto.Docflow.SignatureV3\022\033\n\023Re"
    "solutionRequestId\030\002 \001(\t\022\024\n\014AuthorUserId\030"
    "\003 \001(\t\"x\n\021SignatureDenialV3\0220\n\006Entity\030\001 \002"
    "(\0132 .Diadoc.Api.Proto.Docflow.Entity\022\033\n\023"
    "ResolutionRequestId\030\002 \002(\t\022\024\n\014AuthorUserI"
    "d\030\003 \001(\t*\276\002\n\020ResolutionStatus\022\021\n\rUnknownS"
    "tatus\020\000\022\010\n\004None\020\001\022\014\n\010Approved\020\002\022\017\n\013Disap"
    "proved\020\003\022\030\n\024ApprovementRequested\020\004\022!\n\035Ap"
    "provementSignatureRequested\020\005\022\035\n\031Primary"
    "SignatureRequested\020\006\022\034\n\030SignatureRequest"
    "Rejected\020\007\022 \n\034SignedWithApprovingSignatu"
    "re\020\010\022\036\n\032SignedWithPrimarySignature\020\t\022\034\n\030"
    "PrimarySignatureRejected\020\n\022\024\n\020ActionsReq"
    "uested\020\013", 1808);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Docflow/ResolutionDocflowV3.proto", &protobuf_RegisterTypes);
  ResolutionDocflowV3::default_instance_ = new ResolutionDocflowV3();
  ResolutionEntitiesV3::default_instance_ = new ResolutionEntitiesV3();
  ResolutionRequestV3::default_instance_ = new ResolutionRequestV3();
  ResolutionV3::default_instance_ = new ResolutionV3();
  ApprovementSignatureV3::default_instance_ = new ApprovementSignatureV3();
  SignatureDenialV3::default_instance_ = new SignatureDenialV3();
  ResolutionDocflowV3::default_instance_->InitAsDefaultInstance();
  ResolutionEntitiesV3::default_instance_->InitAsDefaultInstance();
  ResolutionRequestV3::default_instance_->InitAsDefaultInstance();
  ResolutionV3::default_instance_->InitAsDefaultInstance();
  ApprovementSignatureV3::default_instance_->InitAsDefaultInstance();
  SignatureDenialV3::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Docflow_2fResolutionDocflowV3_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Docflow_2fResolutionDocflowV3_2eproto {
  StaticDescriptorInitializer_Docflow_2fResolutionDocflowV3_2eproto() {
    protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
  }
} static_descriptor_initializer_Docflow_2fResolutionDocflowV3_2eproto_;
const ::google::protobuf::EnumDescriptor* ResolutionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionStatus_descriptor_;
}
bool ResolutionStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionDocflowV3::kIsFinishedFieldNumber;
const int ResolutionDocflowV3::kParentEntityIdFieldNumber;
const int ResolutionDocflowV3::kResolutionStatusFieldNumber;
const int ResolutionDocflowV3::kResolutionEntityIdFieldNumber;
#endif  // !_MSC_VER

ResolutionDocflowV3::ResolutionDocflowV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3)
}

void ResolutionDocflowV3::InitAsDefaultInstance() {
}

ResolutionDocflowV3::ResolutionDocflowV3(const ResolutionDocflowV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3)
}

void ResolutionDocflowV3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isfinished_ = false;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resolutionstatus_ = 0;
  resolutionentityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionDocflowV3::~ResolutionDocflowV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3)
  SharedDtor();
}

void ResolutionDocflowV3::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (resolutionentityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resolutionentityid_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionDocflowV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionDocflowV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionDocflowV3_descriptor_;
}

const ResolutionDocflowV3& ResolutionDocflowV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
  return *default_instance_;
}

ResolutionDocflowV3* ResolutionDocflowV3::default_instance_ = NULL;

ResolutionDocflowV3* ResolutionDocflowV3::New() const {
  return new ResolutionDocflowV3;
}

void ResolutionDocflowV3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResolutionDocflowV3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(isfinished_, resolutionstatus_);
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parententityid_->clear();
      }
    }
    if (has_resolutionentityid()) {
      if (resolutionentityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resolutionentityid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionDocflowV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ParentEntityId;
        break;
      }

      // required string ParentEntityId = 2;
      case 2: {
        if (tag == 18) {
         parse_ParentEntityId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parententityid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ResolutionStatus;
        break;
      }

      // required .Diadoc.Api.Proto.Docflow.ResolutionStatus ResolutionStatus = 3 [default = UnknownStatus];
      case 3: {
        if (tag == 24) {
         parse_ResolutionStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Docflow::ResolutionStatus_IsValid(value)) {
            set_resolutionstatus(static_cast< ::Diadoc::Api::Proto::Docflow::ResolutionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ResolutionEntityId;
        break;
      }

      // optional string ResolutionEntityId = 4;
      case 4: {
        if (tag == 34) {
         parse_ResolutionEntityId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resolutionentityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resolutionentityid().data(), this->resolutionentityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resolutionentityid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3)
  return false;
#undef DO_
}

void ResolutionDocflowV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3)
  // required bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // required string ParentEntityId = 2;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->parententityid(), output);
  }

  // required .Diadoc.Api.Proto.Docflow.ResolutionStatus ResolutionStatus = 3 [default = UnknownStatus];
  if (has_resolutionstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->resolutionstatus(), output);
  }

  // optional string ResolutionEntityId = 4;
  if (has_resolutionentityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resolutionentityid().data(), this->resolutionentityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resolutionentityid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->resolutionentityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3)
}

::google::protobuf::uint8* ResolutionDocflowV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3)
  // required bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // required string ParentEntityId = 2;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->parententityid(), target);
  }

  // required .Diadoc.Api.Proto.Docflow.ResolutionStatus ResolutionStatus = 3 [default = UnknownStatus];
  if (has_resolutionstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->resolutionstatus(), target);
  }

  // optional string ResolutionEntityId = 4;
  if (has_resolutionentityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resolutionentityid().data(), this->resolutionentityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resolutionentityid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->resolutionentityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.ResolutionDocflowV3)
  return target;
}

int ResolutionDocflowV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // required string ParentEntityId = 2;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // required .Diadoc.Api.Proto.Docflow.ResolutionStatus ResolutionStatus = 3 [default = UnknownStatus];
    if (has_resolutionstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->resolutionstatus());
    }

    // optional string ResolutionEntityId = 4;
    if (has_resolutionentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resolutionentityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionDocflowV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionDocflowV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionDocflowV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionDocflowV3::MergeFrom(const ResolutionDocflowV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_resolutionstatus()) {
      set_resolutionstatus(from.resolutionstatus());
    }
    if (from.has_resolutionentityid()) {
      set_resolutionentityid(from.resolutionentityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionDocflowV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionDocflowV3::CopyFrom(const ResolutionDocflowV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionDocflowV3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ResolutionDocflowV3::Swap(ResolutionDocflowV3* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(parententityid_, other->parententityid_);
    std::swap(resolutionstatus_, other->resolutionstatus_);
    std::swap(resolutionentityid_, other->resolutionentityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionDocflowV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionDocflowV3_descriptor_;
  metadata.reflection = ResolutionDocflowV3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionEntitiesV3::kRequestsFieldNumber;
const int ResolutionEntitiesV3::kResolutionsFieldNumber;
const int ResolutionEntitiesV3::kApprovementSignaturesFieldNumber;
const int ResolutionEntitiesV3::kSignatureDenialsFieldNumber;
#endif  // !_MSC_VER

ResolutionEntitiesV3::ResolutionEntitiesV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3)
}

void ResolutionEntitiesV3::InitAsDefaultInstance() {
}

ResolutionEntitiesV3::ResolutionEntitiesV3(const ResolutionEntitiesV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3)
}

void ResolutionEntitiesV3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionEntitiesV3::~ResolutionEntitiesV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3)
  SharedDtor();
}

void ResolutionEntitiesV3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResolutionEntitiesV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionEntitiesV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionEntitiesV3_descriptor_;
}

const ResolutionEntitiesV3& ResolutionEntitiesV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
  return *default_instance_;
}

ResolutionEntitiesV3* ResolutionEntitiesV3::default_instance_ = NULL;

ResolutionEntitiesV3* ResolutionEntitiesV3::New() const {
  return new ResolutionEntitiesV3;
}

void ResolutionEntitiesV3::Clear() {
  requests_.Clear();
  resolutions_.Clear();
  approvementsignatures_.Clear();
  signaturedenials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionEntitiesV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Docflow.ResolutionRequestV3 Requests = 1;
      case 1: {
        if (tag == 10) {
         parse_Requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Requests;
        if (input->ExpectTag(18)) goto parse_Resolutions;
        break;
      }

      // repeated .Diadoc.Api.Proto.Docflow.ResolutionV3 Resolutions = 2;
      case 2: {
        if (tag == 18) {
         parse_Resolutions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resolutions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Resolutions;
        if (input->ExpectTag(26)) goto parse_ApprovementSignatures;
        break;
      }

      // repeated .Diadoc.Api.Proto.Docflow.ApprovementSignatureV3 ApprovementSignatures = 3;
      case 3: {
        if (tag == 26) {
         parse_ApprovementSignatures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_approvementsignatures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ApprovementSignatures;
        if (input->ExpectTag(34)) goto parse_SignatureDenials;
        break;
      }

      // repeated .Diadoc.Api.Proto.Docflow.SignatureDenialV3 SignatureDenials = 4;
      case 4: {
        if (tag == 34) {
         parse_SignatureDenials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signaturedenials()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SignatureDenials;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3)
  return false;
#undef DO_
}

void ResolutionEntitiesV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3)
  // repeated .Diadoc.Api.Proto.Docflow.ResolutionRequestV3 Requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }

  // repeated .Diadoc.Api.Proto.Docflow.ResolutionV3 Resolutions = 2;
  for (int i = 0; i < this->resolutions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resolutions(i), output);
  }

  // repeated .Diadoc.Api.Proto.Docflow.ApprovementSignatureV3 ApprovementSignatures = 3;
  for (int i = 0; i < this->approvementsignatures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->approvementsignatures(i), output);
  }

  // repeated .Diadoc.Api.Proto.Docflow.SignatureDenialV3 SignatureDenials = 4;
  for (int i = 0; i < this->signaturedenials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->signaturedenials(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3)
}

::google::protobuf::uint8* ResolutionEntitiesV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3)
  // repeated .Diadoc.Api.Proto.Docflow.ResolutionRequestV3 Requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }

  // repeated .Diadoc.Api.Proto.Docflow.ResolutionV3 Resolutions = 2;
  for (int i = 0; i < this->resolutions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resolutions(i), target);
  }

  // repeated .Diadoc.Api.Proto.Docflow.ApprovementSignatureV3 ApprovementSignatures = 3;
  for (int i = 0; i < this->approvementsignatures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->approvementsignatures(i), target);
  }

  // repeated .Diadoc.Api.Proto.Docflow.SignatureDenialV3 SignatureDenials = 4;
  for (int i = 0; i < this->signaturedenials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->signaturedenials(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.ResolutionEntitiesV3)
  return target;
}

int ResolutionEntitiesV3::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.Docflow.ResolutionRequestV3 Requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }

  // repeated .Diadoc.Api.Proto.Docflow.ResolutionV3 Resolutions = 2;
  total_size += 1 * this->resolutions_size();
  for (int i = 0; i < this->resolutions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resolutions(i));
  }

  // repeated .Diadoc.Api.Proto.Docflow.ApprovementSignatureV3 ApprovementSignatures = 3;
  total_size += 1 * this->approvementsignatures_size();
  for (int i = 0; i < this->approvementsignatures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->approvementsignatures(i));
  }

  // repeated .Diadoc.Api.Proto.Docflow.SignatureDenialV3 SignatureDenials = 4;
  total_size += 1 * this->signaturedenials_size();
  for (int i = 0; i < this->signaturedenials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signaturedenials(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionEntitiesV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionEntitiesV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionEntitiesV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionEntitiesV3::MergeFrom(const ResolutionEntitiesV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  resolutions_.MergeFrom(from.resolutions_);
  approvementsignatures_.MergeFrom(from.approvementsignatures_);
  signaturedenials_.MergeFrom(from.signaturedenials_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionEntitiesV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionEntitiesV3::CopyFrom(const ResolutionEntitiesV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionEntitiesV3::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->requests())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->resolutions())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->approvementsignatures())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->signaturedenials())) return false;
  return true;
}

void ResolutionEntitiesV3::Swap(ResolutionEntitiesV3* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    resolutions_.Swap(&other->resolutions_);
    approvementsignatures_.Swap(&other->approvementsignatures_);
    signaturedenials_.Swap(&other->signaturedenials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionEntitiesV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionEntitiesV3_descriptor_;
  metadata.reflection = ResolutionEntitiesV3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionRequestV3::kEntityFieldNumber;
const int ResolutionRequestV3::kTargetFieldNumber;
const int ResolutionRequestV3::kAuthorUserIdFieldNumber;
const int ResolutionRequestV3::kRequestTypeFieldNumber;
const int ResolutionRequestV3::kResolvedWithFieldNumber;
const int ResolutionRequestV3::kActionsFieldNumber;
#endif  // !_MSC_VER

ResolutionRequestV3::ResolutionRequestV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.ResolutionRequestV3)
}

void ResolutionRequestV3::InitAsDefaultInstance() {
  entity_ = const_cast< ::Diadoc::Api::Proto::Docflow::Entity*>(&::Diadoc::Api::Proto::Docflow::Entity::default_instance());
  target_ = const_cast< ::Diadoc::Api::Proto::ResolutionTarget*>(&::Diadoc::Api::Proto::ResolutionTarget::default_instance());
}

ResolutionRequestV3::ResolutionRequestV3(const ResolutionRequestV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.ResolutionRequestV3)
}

void ResolutionRequestV3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entity_ = NULL;
  target_ = NULL;
  authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requesttype_ = -1;
  resolvedwith_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionRequestV3::~ResolutionRequestV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.ResolutionRequestV3)
  SharedDtor();
}

void ResolutionRequestV3::SharedDtor() {
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authoruserid_;
  }
  if (resolvedwith_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resolvedwith_;
  }
  if (this != default_instance_) {
    delete entity_;
    delete target_;
  }
}

void ResolutionRequestV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionRequestV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionRequestV3_descriptor_;
}

const ResolutionRequestV3& ResolutionRequestV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
  return *default_instance_;
}

ResolutionRequestV3* ResolutionRequestV3::default_instance_ = NULL;

ResolutionRequestV3* ResolutionRequestV3::New() const {
  return new ResolutionRequestV3;
}

void ResolutionRequestV3::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_entity()) {
      if (entity_ != NULL) entity_->::Diadoc::Api::Proto::Docflow::Entity::Clear();
    }
    if (has_target()) {
      if (target_ != NULL) target_->::Diadoc::Api::Proto::ResolutionTarget::Clear();
    }
    if (has_authoruserid()) {
      if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authoruserid_->clear();
      }
    }
    requesttype_ = -1;
    if (has_resolvedwith()) {
      if (resolvedwith_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resolvedwith_->clear();
      }
    }
  }
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionRequestV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.ResolutionRequestV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Target;
        break;
      }

      // required .Diadoc.Api.Proto.ResolutionTarget Target = 2;
      case 2: {
        if (tag == 18) {
         parse_Target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AuthorUserId;
        break;
      }

      // optional string AuthorUserId = 3;
      case 3: {
        if (tag == 26) {
         parse_AuthorUserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authoruserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authoruserid().data(), this->authoruserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authoruserid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RequestType;
        break;
      }

      // required .Diadoc.Api.Proto.ResolutionRequestType RequestType = 4 [default = UnknownResolutionRequestType];
      case 4: {
        if (tag == 32) {
         parse_RequestType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::ResolutionRequestType_IsValid(value)) {
            set_requesttype(static_cast< ::Diadoc::Api::Proto::ResolutionRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ResolvedWith;
        break;
      }

      // optional string ResolvedWith = 5;
      case 5: {
        if (tag == 42) {
         parse_ResolvedWith:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resolvedwith()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resolvedwith().data(), this->resolvedwith().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resolvedwith");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Actions;
        break;
      }

      // repeated .Diadoc.Api.Proto.ResolutionAction Actions = 6;
      case 6: {
        if (tag == 48) {
         parse_Actions:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::ResolutionAction_IsValid(value)) {
            add_actions(static_cast< ::Diadoc::Api::Proto::ResolutionAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Diadoc::Api::Proto::ResolutionAction_IsValid,
                 this->mutable_actions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Actions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.ResolutionRequestV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.ResolutionRequestV3)
  return false;
#undef DO_
}

void ResolutionRequestV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.ResolutionRequestV3)
  // required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
  if (has_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entity(), output);
  }

  // required .Diadoc.Api.Proto.ResolutionTarget Target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target(), output);
  }

  // optional string AuthorUserId = 3;
  if (has_authoruserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authoruserid().data(), this->authoruserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authoruserid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->authoruserid(), output);
  }

  // required .Diadoc.Api.Proto.ResolutionRequestType RequestType = 4 [default = UnknownResolutionRequestType];
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->requesttype(), output);
  }

  // optional string ResolvedWith = 5;
  if (has_resolvedwith()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resolvedwith().data(), this->resolvedwith().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resolvedwith");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->resolvedwith(), output);
  }

  // repeated .Diadoc.Api.Proto.ResolutionAction Actions = 6;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->actions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.ResolutionRequestV3)
}

::google::protobuf::uint8* ResolutionRequestV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.ResolutionRequestV3)
  // required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
  if (has_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entity(), target);
  }

  // required .Diadoc.Api.Proto.ResolutionTarget Target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target(), target);
  }

  // optional string AuthorUserId = 3;
  if (has_authoruserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authoruserid().data(), this->authoruserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authoruserid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->authoruserid(), target);
  }

  // required .Diadoc.Api.Proto.ResolutionRequestType RequestType = 4 [default = UnknownResolutionRequestType];
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->requesttype(), target);
  }

  // optional string ResolvedWith = 5;
  if (has_resolvedwith()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resolvedwith().data(), this->resolvedwith().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resolvedwith");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->resolvedwith(), target);
  }

  // repeated .Diadoc.Api.Proto.ResolutionAction Actions = 6;
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->actions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.ResolutionRequestV3)
  return target;
}

int ResolutionRequestV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity());
    }

    // required .Diadoc.Api.Proto.ResolutionTarget Target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

    // optional string AuthorUserId = 3;
    if (has_authoruserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authoruserid());
    }

    // required .Diadoc.Api.Proto.ResolutionRequestType RequestType = 4 [default = UnknownResolutionRequestType];
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->requesttype());
    }

    // optional string ResolvedWith = 5;
    if (has_resolvedwith()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resolvedwith());
    }

  }
  // repeated .Diadoc.Api.Proto.ResolutionAction Actions = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->actions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->actions(i));
    }
    total_size += 1 * this->actions_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionRequestV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionRequestV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionRequestV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionRequestV3::MergeFrom(const ResolutionRequestV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  actions_.MergeFrom(from.actions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity()) {
      mutable_entity()->::Diadoc::Api::Proto::Docflow::Entity::MergeFrom(from.entity());
    }
    if (from.has_target()) {
      mutable_target()->::Diadoc::Api::Proto::ResolutionTarget::MergeFrom(from.target());
    }
    if (from.has_authoruserid()) {
      set_authoruserid(from.authoruserid());
    }
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_resolvedwith()) {
      set_resolvedwith(from.resolvedwith());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionRequestV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionRequestV3::CopyFrom(const ResolutionRequestV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionRequestV3::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_entity()) {
    if (!this->entity().IsInitialized()) return false;
  }
  return true;
}

void ResolutionRequestV3::Swap(ResolutionRequestV3* other) {
  if (other != this) {
    std::swap(entity_, other->entity_);
    std::swap(target_, other->target_);
    std::swap(authoruserid_, other->authoruserid_);
    std::swap(requesttype_, other->requesttype_);
    std::swap(resolvedwith_, other->resolvedwith_);
    actions_.Swap(&other->actions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionRequestV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionRequestV3_descriptor_;
  metadata.reflection = ResolutionRequestV3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionV3::kEntityFieldNumber;
const int ResolutionV3::kResolutionRequestIdFieldNumber;
const int ResolutionV3::kAuthorUserIdFieldNumber;
const int ResolutionV3::kResolutionTypeFieldNumber;
#endif  // !_MSC_VER

ResolutionV3::ResolutionV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.ResolutionV3)
}

void ResolutionV3::InitAsDefaultInstance() {
  entity_ = const_cast< ::Diadoc::Api::Proto::Docflow::Entity*>(&::Diadoc::Api::Proto::Docflow::Entity::default_instance());
}

ResolutionV3::ResolutionV3(const ResolutionV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.ResolutionV3)
}

void ResolutionV3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entity_ = NULL;
  resolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resolutiontype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionV3::~ResolutionV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.ResolutionV3)
  SharedDtor();
}

void ResolutionV3::SharedDtor() {
  if (resolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resolutionrequestid_;
  }
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authoruserid_;
  }
  if (this != default_instance_) {
    delete entity_;
  }
}

void ResolutionV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionV3_descriptor_;
}

const ResolutionV3& ResolutionV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
  return *default_instance_;
}

ResolutionV3* ResolutionV3::default_instance_ = NULL;

ResolutionV3* ResolutionV3::New() const {
  return new ResolutionV3;
}

void ResolutionV3::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_entity()) {
      if (entity_ != NULL) entity_->::Diadoc::Api::Proto::Docflow::Entity::Clear();
    }
    if (has_resolutionrequestid()) {
      if (resolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resolutionrequestid_->clear();
      }
    }
    if (has_authoruserid()) {
      if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authoruserid_->clear();
      }
    }
    resolutiontype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.ResolutionV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ResolutionRequestId;
        break;
      }

      // optional string ResolutionRequestId = 2;
      case 2: {
        if (tag == 18) {
         parse_ResolutionRequestId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resolutionrequestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resolutionrequestid().data(), this->resolutionrequestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resolutionrequestid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AuthorUserId;
        break;
      }

      // optional string AuthorUserId = 3;
      case 3: {
        if (tag == 26) {
         parse_AuthorUserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authoruserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authoruserid().data(), this->authoruserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authoruserid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ResolutionType;
        break;
      }

      // required .Diadoc.Api.Proto.ResolutionType ResolutionType = 4 [default = UnknownResolutionType];
      case 4: {
        if (tag == 32) {
         parse_ResolutionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::ResolutionType_IsValid(value)) {
            set_resolutiontype(static_cast< ::Diadoc::Api::Proto::ResolutionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.ResolutionV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.ResolutionV3)
  return false;
#undef DO_
}

void ResolutionV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.ResolutionV3)
  // required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
  if (has_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entity(), output);
  }

  // optional string ResolutionRequestId = 2;
  if (has_resolutionrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resolutionrequestid().data(), this->resolutionrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resolutionrequestid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resolutionrequestid(), output);
  }

  // optional string AuthorUserId = 3;
  if (has_authoruserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authoruserid().data(), this->authoruserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authoruserid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->authoruserid(), output);
  }

  // required .Diadoc.Api.Proto.ResolutionType ResolutionType = 4 [default = UnknownResolutionType];
  if (has_resolutiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->resolutiontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.ResolutionV3)
}

::google::protobuf::uint8* ResolutionV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.ResolutionV3)
  // required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
  if (has_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entity(), target);
  }

  // optional string ResolutionRequestId = 2;
  if (has_resolutionrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resolutionrequestid().data(), this->resolutionrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resolutionrequestid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resolutionrequestid(), target);
  }

  // optional string AuthorUserId = 3;
  if (has_authoruserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authoruserid().data(), this->authoruserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authoruserid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->authoruserid(), target);
  }

  // required .Diadoc.Api.Proto.ResolutionType ResolutionType = 4 [default = UnknownResolutionType];
  if (has_resolutiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->resolutiontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.ResolutionV3)
  return target;
}

int ResolutionV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity());
    }

    // optional string ResolutionRequestId = 2;
    if (has_resolutionrequestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resolutionrequestid());
    }

    // optional string AuthorUserId = 3;
    if (has_authoruserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authoruserid());
    }

    // required .Diadoc.Api.Proto.ResolutionType ResolutionType = 4 [default = UnknownResolutionType];
    if (has_resolutiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->resolutiontype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionV3::MergeFrom(const ResolutionV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity()) {
      mutable_entity()->::Diadoc::Api::Proto::Docflow::Entity::MergeFrom(from.entity());
    }
    if (from.has_resolutionrequestid()) {
      set_resolutionrequestid(from.resolutionrequestid());
    }
    if (from.has_authoruserid()) {
      set_authoruserid(from.authoruserid());
    }
    if (from.has_resolutiontype()) {
      set_resolutiontype(from.resolutiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionV3::CopyFrom(const ResolutionV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionV3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_entity()) {
    if (!this->entity().IsInitialized()) return false;
  }
  return true;
}

void ResolutionV3::Swap(ResolutionV3* other) {
  if (other != this) {
    std::swap(entity_, other->entity_);
    std::swap(resolutionrequestid_, other->resolutionrequestid_);
    std::swap(authoruserid_, other->authoruserid_);
    std::swap(resolutiontype_, other->resolutiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionV3_descriptor_;
  metadata.reflection = ResolutionV3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApprovementSignatureV3::kSignatureFieldNumber;
const int ApprovementSignatureV3::kResolutionRequestIdFieldNumber;
const int ApprovementSignatureV3::kAuthorUserIdFieldNumber;
#endif  // !_MSC_VER

ApprovementSignatureV3::ApprovementSignatureV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3)
}

void ApprovementSignatureV3::InitAsDefaultInstance() {
  signature_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignatureV3*>(&::Diadoc::Api::Proto::Docflow::SignatureV3::default_instance());
}

ApprovementSignatureV3::ApprovementSignatureV3(const ApprovementSignatureV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3)
}

void ApprovementSignatureV3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signature_ = NULL;
  resolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApprovementSignatureV3::~ApprovementSignatureV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3)
  SharedDtor();
}

void ApprovementSignatureV3::SharedDtor() {
  if (resolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resolutionrequestid_;
  }
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authoruserid_;
  }
  if (this != default_instance_) {
    delete signature_;
  }
}

void ApprovementSignatureV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApprovementSignatureV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApprovementSignatureV3_descriptor_;
}

const ApprovementSignatureV3& ApprovementSignatureV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
  return *default_instance_;
}

ApprovementSignatureV3* ApprovementSignatureV3::default_instance_ = NULL;

ApprovementSignatureV3* ApprovementSignatureV3::New() const {
  return new ApprovementSignatureV3;
}

void ApprovementSignatureV3::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_signature()) {
      if (signature_ != NULL) signature_->::Diadoc::Api::Proto::Docflow::SignatureV3::Clear();
    }
    if (has_resolutionrequestid()) {
      if (resolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resolutionrequestid_->clear();
      }
    }
    if (has_authoruserid()) {
      if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authoruserid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApprovementSignatureV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ResolutionRequestId;
        break;
      }

      // optional string ResolutionRequestId = 2;
      case 2: {
        if (tag == 18) {
         parse_ResolutionRequestId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resolutionrequestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resolutionrequestid().data(), this->resolutionrequestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resolutionrequestid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AuthorUserId;
        break;
      }

      // optional string AuthorUserId = 3;
      case 3: {
        if (tag == 26) {
         parse_AuthorUserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authoruserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authoruserid().data(), this->authoruserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authoruserid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3)
  return false;
#undef DO_
}

void ApprovementSignatureV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3)
  // required .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signature(), output);
  }

  // optional string ResolutionRequestId = 2;
  if (has_resolutionrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resolutionrequestid().data(), this->resolutionrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resolutionrequestid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resolutionrequestid(), output);
  }

  // optional string AuthorUserId = 3;
  if (has_authoruserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authoruserid().data(), this->authoruserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authoruserid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->authoruserid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3)
}

::google::protobuf::uint8* ApprovementSignatureV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3)
  // required .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 1;
  if (has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signature(), target);
  }

  // optional string ResolutionRequestId = 2;
  if (has_resolutionrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resolutionrequestid().data(), this->resolutionrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resolutionrequestid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resolutionrequestid(), target);
  }

  // optional string AuthorUserId = 3;
  if (has_authoruserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authoruserid().data(), this->authoruserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authoruserid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->authoruserid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.ApprovementSignatureV3)
  return target;
}

int ApprovementSignatureV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signature());
    }

    // optional string ResolutionRequestId = 2;
    if (has_resolutionrequestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resolutionrequestid());
    }

    // optional string AuthorUserId = 3;
    if (has_authoruserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authoruserid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApprovementSignatureV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApprovementSignatureV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApprovementSignatureV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApprovementSignatureV3::MergeFrom(const ApprovementSignatureV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      mutable_signature()->::Diadoc::Api::Proto::Docflow::SignatureV3::MergeFrom(from.signature());
    }
    if (from.has_resolutionrequestid()) {
      set_resolutionrequestid(from.resolutionrequestid());
    }
    if (from.has_authoruserid()) {
      set_authoruserid(from.authoruserid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApprovementSignatureV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApprovementSignatureV3::CopyFrom(const ApprovementSignatureV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApprovementSignatureV3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_signature()) {
    if (!this->signature().IsInitialized()) return false;
  }
  return true;
}

void ApprovementSignatureV3::Swap(ApprovementSignatureV3* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(resolutionrequestid_, other->resolutionrequestid_);
    std::swap(authoruserid_, other->authoruserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApprovementSignatureV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApprovementSignatureV3_descriptor_;
  metadata.reflection = ApprovementSignatureV3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignatureDenialV3::kEntityFieldNumber;
const int SignatureDenialV3::kResolutionRequestIdFieldNumber;
const int SignatureDenialV3::kAuthorUserIdFieldNumber;
#endif  // !_MSC_VER

SignatureDenialV3::SignatureDenialV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.SignatureDenialV3)
}

void SignatureDenialV3::InitAsDefaultInstance() {
  entity_ = const_cast< ::Diadoc::Api::Proto::Docflow::Entity*>(&::Diadoc::Api::Proto::Docflow::Entity::default_instance());
}

SignatureDenialV3::SignatureDenialV3(const SignatureDenialV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.SignatureDenialV3)
}

void SignatureDenialV3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entity_ = NULL;
  resolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignatureDenialV3::~SignatureDenialV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.SignatureDenialV3)
  SharedDtor();
}

void SignatureDenialV3::SharedDtor() {
  if (resolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resolutionrequestid_;
  }
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authoruserid_;
  }
  if (this != default_instance_) {
    delete entity_;
  }
}

void SignatureDenialV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignatureDenialV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignatureDenialV3_descriptor_;
}

const SignatureDenialV3& SignatureDenialV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fResolutionDocflowV3_2eproto();
  return *default_instance_;
}

SignatureDenialV3* SignatureDenialV3::default_instance_ = NULL;

SignatureDenialV3* SignatureDenialV3::New() const {
  return new SignatureDenialV3;
}

void SignatureDenialV3::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_entity()) {
      if (entity_ != NULL) entity_->::Diadoc::Api::Proto::Docflow::Entity::Clear();
    }
    if (has_resolutionrequestid()) {
      if (resolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resolutionrequestid_->clear();
      }
    }
    if (has_authoruserid()) {
      if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authoruserid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignatureDenialV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.SignatureDenialV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ResolutionRequestId;
        break;
      }

      // required string ResolutionRequestId = 2;
      case 2: {
        if (tag == 18) {
         parse_ResolutionRequestId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resolutionrequestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resolutionrequestid().data(), this->resolutionrequestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resolutionrequestid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AuthorUserId;
        break;
      }

      // optional string AuthorUserId = 3;
      case 3: {
        if (tag == 26) {
         parse_AuthorUserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authoruserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authoruserid().data(), this->authoruserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authoruserid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.SignatureDenialV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.SignatureDenialV3)
  return false;
#undef DO_
}

void SignatureDenialV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.SignatureDenialV3)
  // required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
  if (has_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entity(), output);
  }

  // required string ResolutionRequestId = 2;
  if (has_resolutionrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resolutionrequestid().data(), this->resolutionrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resolutionrequestid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resolutionrequestid(), output);
  }

  // optional string AuthorUserId = 3;
  if (has_authoruserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authoruserid().data(), this->authoruserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authoruserid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->authoruserid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.SignatureDenialV3)
}

::google::protobuf::uint8* SignatureDenialV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.SignatureDenialV3)
  // required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
  if (has_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entity(), target);
  }

  // required string ResolutionRequestId = 2;
  if (has_resolutionrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resolutionrequestid().data(), this->resolutionrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resolutionrequestid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resolutionrequestid(), target);
  }

  // optional string AuthorUserId = 3;
  if (has_authoruserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authoruserid().data(), this->authoruserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authoruserid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->authoruserid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.SignatureDenialV3)
  return target;
}

int SignatureDenialV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity());
    }

    // required string ResolutionRequestId = 2;
    if (has_resolutionrequestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resolutionrequestid());
    }

    // optional string AuthorUserId = 3;
    if (has_authoruserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authoruserid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignatureDenialV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignatureDenialV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignatureDenialV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignatureDenialV3::MergeFrom(const SignatureDenialV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity()) {
      mutable_entity()->::Diadoc::Api::Proto::Docflow::Entity::MergeFrom(from.entity());
    }
    if (from.has_resolutionrequestid()) {
      set_resolutionrequestid(from.resolutionrequestid());
    }
    if (from.has_authoruserid()) {
      set_authoruserid(from.authoruserid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignatureDenialV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureDenialV3::CopyFrom(const SignatureDenialV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureDenialV3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_entity()) {
    if (!this->entity().IsInitialized()) return false;
  }
  return true;
}

void SignatureDenialV3::Swap(SignatureDenialV3* other) {
  if (other != this) {
    std::swap(entity_, other->entity_);
    std::swap(resolutionrequestid_, other->resolutionrequestid_);
    std::swap(authoruserid_, other->authoruserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignatureDenialV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignatureDenialV3_descriptor_;
  metadata.reflection = SignatureDenialV3_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
