// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/Attachment.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Docflow/Attachment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

namespace {

const ::google::protobuf::Descriptor* Entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Signature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Signature_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignedAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedAttachment_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Docflow_2fAttachment_2eproto() {
  protobuf_AddDesc_Docflow_2fAttachment_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Docflow/Attachment.proto");
  GOOGLE_CHECK(file != NULL);
  Entity_descriptor_ = file->message_type(0);
  static const int Entity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, creationtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, content_),
  };
  Entity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Entity_descriptor_,
      Entity::default_instance_,
      Entity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Entity));
  Attachment_descriptor_ = file->message_type(1);
  static const int Attachment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attachment, entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attachment, attachmentfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attachment, displayfilename_),
  };
  Attachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attachment_descriptor_,
      Attachment::default_instance_,
      Attachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attachment));
  Signature_descriptor_ = file->message_type(2);
  static const int Signature_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, signerboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, signerdepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, isvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, verificationresult_),
  };
  Signature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Signature_descriptor_,
      Signature::default_instance_,
      Signature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Signature));
  SignedAttachment_descriptor_ = file->message_type(3);
  static const int SignedAttachment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedAttachment, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedAttachment, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedAttachment, comment_),
  };
  SignedAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignedAttachment_descriptor_,
      SignedAttachment::default_instance_,
      SignedAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignedAttachment));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Docflow_2fAttachment_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Entity_descriptor_, &Entity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attachment_descriptor_, &Attachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Signature_descriptor_, &Signature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignedAttachment_descriptor_, &SignedAttachment::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Docflow_2fAttachment_2eproto() {
  delete Entity::default_instance_;
  delete Entity_reflection_;
  delete Attachment::default_instance_;
  delete Attachment_reflection_;
  delete Signature::default_instance_;
  delete Signature_reflection_;
  delete SignedAttachment::default_instance_;
  delete SignedAttachment_reflection_;
}

void protobuf_AddDesc_Docflow_2fAttachment_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Content_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_SignatureVerificationResult_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030Docflow/Attachment.proto\022\030Diadoc.Api.P"
    "roto.Docflow\032\rContent.proto\032\017Timestamp.p"
    "roto\032!SignatureVerificationResult.proto\""
    "~\n\006Entity\022\020\n\010EntityId\030\001 \001(\t\0226\n\021CreationT"
    "imestamp\030\002 \001(\0132\033.Diadoc.Api.Proto.Timest"
    "amp\022*\n\007Content\030\003 \001(\0132\031.Diadoc.Api.Proto."
    "Content\"s\n\nAttachment\0220\n\006Entity\030\001 \001(\0132 ."
    "Diadoc.Api.Proto.Docflow.Entity\022\032\n\022Attac"
    "hmentFilename\030\002 \001(\t\022\027\n\017DisplayFilename\030\003"
    " \001(\t\"\312\001\n\tSignature\0220\n\006Entity\030\001 \001(\0132 .Dia"
    "doc.Api.Proto.Docflow.Entity\022\023\n\013SignerBo"
    "xId\030\002 \001(\t\022\032\n\022SignerDepartmentId\030\003 \001(\t\022\017\n"
    "\007IsValid\030\004 \001(\010\022I\n\022VerificationResult\030\005 \001"
    "(\0132-.Diadoc.Api.Proto.SignatureVerificat"
    "ionResult\"\267\001\n\020SignedAttachment\0228\n\nAttach"
    "ment\030\001 \001(\0132$.Diadoc.Api.Proto.Docflow.At"
    "tachment\0226\n\tSignature\030\002 \001(\0132#.Diadoc.Api"
    ".Proto.Docflow.Signature\0221\n\007Comment\030\003 \001("
    "\0132 .Diadoc.Api.Proto.Docflow.Entity", 755);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Docflow/Attachment.proto", &protobuf_RegisterTypes);
  Entity::default_instance_ = new Entity();
  Attachment::default_instance_ = new Attachment();
  Signature::default_instance_ = new Signature();
  SignedAttachment::default_instance_ = new SignedAttachment();
  Entity::default_instance_->InitAsDefaultInstance();
  Attachment::default_instance_->InitAsDefaultInstance();
  Signature::default_instance_->InitAsDefaultInstance();
  SignedAttachment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Docflow_2fAttachment_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Docflow_2fAttachment_2eproto {
  StaticDescriptorInitializer_Docflow_2fAttachment_2eproto() {
    protobuf_AddDesc_Docflow_2fAttachment_2eproto();
  }
} static_descriptor_initializer_Docflow_2fAttachment_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Entity::kEntityIdFieldNumber;
const int Entity::kCreationTimestampFieldNumber;
const int Entity::kContentFieldNumber;
#endif  // !_MSC_VER

Entity::Entity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.Entity)
}

void Entity::InitAsDefaultInstance() {
  creationtimestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  content_ = const_cast< ::Diadoc::Api::Proto::Content*>(&::Diadoc::Api::Proto::Content::default_instance());
}

Entity::Entity(const Entity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.Entity)
}

void Entity::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creationtimestamp_ = NULL;
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.Entity)
  SharedDtor();
}

void Entity::SharedDtor() {
  if (entityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entityid_;
  }
  if (this != default_instance_) {
    delete creationtimestamp_;
    delete content_;
  }
}

void Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_descriptor_;
}

const Entity& Entity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fAttachment_2eproto();
  return *default_instance_;
}

Entity* Entity::default_instance_ = NULL;

Entity* Entity::New() const {
  return new Entity;
}

void Entity::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_entityid()) {
      if (entityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        entityid_->clear();
      }
    }
    if (has_creationtimestamp()) {
      if (creationtimestamp_ != NULL) creationtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_content()) {
      if (content_ != NULL) content_->::Diadoc::Api::Proto::Content::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.Entity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string EntityId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entityid().data(), this->entityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "entityid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CreationTimestamp;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp CreationTimestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_CreationTimestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creationtimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Content;
        break;
      }

      // optional .Diadoc.Api.Proto.Content Content = 3;
      case 3: {
        if (tag == 26) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.Entity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.Entity)
  return false;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.Entity)
  // optional string EntityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entityid().data(), this->entityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entityid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entityid(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp CreationTimestamp = 2;
  if (has_creationtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creationtimestamp(), output);
  }

  // optional .Diadoc.Api.Proto.Content Content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.Entity)
}

::google::protobuf::uint8* Entity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.Entity)
  // optional string EntityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entityid().data(), this->entityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entityid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->entityid(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp CreationTimestamp = 2;
  if (has_creationtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->creationtimestamp(), target);
  }

  // optional .Diadoc.Api.Proto.Content Content = 3;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.Entity)
  return target;
}

int Entity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string EntityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entityid());
    }

    // optional .Diadoc.Api.Proto.Timestamp CreationTimestamp = 2;
    if (has_creationtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creationtimestamp());
    }

    // optional .Diadoc.Api.Proto.Content Content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Entity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Entity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_creationtimestamp()) {
      mutable_creationtimestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.creationtimestamp());
    }
    if (from.has_content()) {
      mutable_content()->::Diadoc::Api::Proto::Content::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {

  if (has_creationtimestamp()) {
    if (!this->creationtimestamp().IsInitialized()) return false;
  }
  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void Entity::Swap(Entity* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(creationtimestamp_, other->creationtimestamp_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entity_descriptor_;
  metadata.reflection = Entity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attachment::kEntityFieldNumber;
const int Attachment::kAttachmentFilenameFieldNumber;
const int Attachment::kDisplayFilenameFieldNumber;
#endif  // !_MSC_VER

Attachment::Attachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.Attachment)
}

void Attachment::InitAsDefaultInstance() {
  entity_ = const_cast< ::Diadoc::Api::Proto::Docflow::Entity*>(&::Diadoc::Api::Proto::Docflow::Entity::default_instance());
}

Attachment::Attachment(const Attachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.Attachment)
}

void Attachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entity_ = NULL;
  attachmentfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displayfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attachment::~Attachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.Attachment)
  SharedDtor();
}

void Attachment::SharedDtor() {
  if (attachmentfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attachmentfilename_;
  }
  if (displayfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete displayfilename_;
  }
  if (this != default_instance_) {
    delete entity_;
  }
}

void Attachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attachment_descriptor_;
}

const Attachment& Attachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fAttachment_2eproto();
  return *default_instance_;
}

Attachment* Attachment::default_instance_ = NULL;

Attachment* Attachment::New() const {
  return new Attachment;
}

void Attachment::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_entity()) {
      if (entity_ != NULL) entity_->::Diadoc::Api::Proto::Docflow::Entity::Clear();
    }
    if (has_attachmentfilename()) {
      if (attachmentfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attachmentfilename_->clear();
      }
    }
    if (has_displayfilename()) {
      if (displayfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        displayfilename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.Attachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AttachmentFilename;
        break;
      }

      // optional string AttachmentFilename = 2;
      case 2: {
        if (tag == 18) {
         parse_AttachmentFilename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attachmentfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attachmentfilename().data(), this->attachmentfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "attachmentfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DisplayFilename;
        break;
      }

      // optional string DisplayFilename = 3;
      case 3: {
        if (tag == 26) {
         parse_DisplayFilename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->displayfilename().data(), this->displayfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "displayfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.Attachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.Attachment)
  return false;
#undef DO_
}

void Attachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.Attachment)
  // optional .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
  if (has_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entity(), output);
  }

  // optional string AttachmentFilename = 2;
  if (has_attachmentfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attachmentfilename().data(), this->attachmentfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attachmentfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->attachmentfilename(), output);
  }

  // optional string DisplayFilename = 3;
  if (has_displayfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displayfilename().data(), this->displayfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "displayfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->displayfilename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.Attachment)
}

::google::protobuf::uint8* Attachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.Attachment)
  // optional .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
  if (has_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entity(), target);
  }

  // optional string AttachmentFilename = 2;
  if (has_attachmentfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attachmentfilename().data(), this->attachmentfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attachmentfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->attachmentfilename(), target);
  }

  // optional string DisplayFilename = 3;
  if (has_displayfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displayfilename().data(), this->displayfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "displayfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->displayfilename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.Attachment)
  return target;
}

int Attachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity());
    }

    // optional string AttachmentFilename = 2;
    if (has_attachmentfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attachmentfilename());
    }

    // optional string DisplayFilename = 3;
    if (has_displayfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayfilename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attachment::MergeFrom(const Attachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity()) {
      mutable_entity()->::Diadoc::Api::Proto::Docflow::Entity::MergeFrom(from.entity());
    }
    if (from.has_attachmentfilename()) {
      set_attachmentfilename(from.attachmentfilename());
    }
    if (from.has_displayfilename()) {
      set_displayfilename(from.displayfilename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attachment::CopyFrom(const Attachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attachment::IsInitialized() const {

  if (has_entity()) {
    if (!this->entity().IsInitialized()) return false;
  }
  return true;
}

void Attachment::Swap(Attachment* other) {
  if (other != this) {
    std::swap(entity_, other->entity_);
    std::swap(attachmentfilename_, other->attachmentfilename_);
    std::swap(displayfilename_, other->displayfilename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attachment_descriptor_;
  metadata.reflection = Attachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Signature::kEntityFieldNumber;
const int Signature::kSignerBoxIdFieldNumber;
const int Signature::kSignerDepartmentIdFieldNumber;
const int Signature::kIsValidFieldNumber;
const int Signature::kVerificationResultFieldNumber;
#endif  // !_MSC_VER

Signature::Signature()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.Signature)
}

void Signature::InitAsDefaultInstance() {
  entity_ = const_cast< ::Diadoc::Api::Proto::Docflow::Entity*>(&::Diadoc::Api::Proto::Docflow::Entity::default_instance());
  verificationresult_ = const_cast< ::Diadoc::Api::Proto::SignatureVerificationResult*>(&::Diadoc::Api::Proto::SignatureVerificationResult::default_instance());
}

Signature::Signature(const Signature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.Signature)
}

void Signature::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entity_ = NULL;
  signerboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signerdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isvalid_ = false;
  verificationresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.Signature)
  SharedDtor();
}

void Signature::SharedDtor() {
  if (signerboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signerboxid_;
  }
  if (signerdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signerdepartmentid_;
  }
  if (this != default_instance_) {
    delete entity_;
    delete verificationresult_;
  }
}

void Signature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signature_descriptor_;
}

const Signature& Signature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fAttachment_2eproto();
  return *default_instance_;
}

Signature* Signature::default_instance_ = NULL;

Signature* Signature::New() const {
  return new Signature;
}

void Signature::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_entity()) {
      if (entity_ != NULL) entity_->::Diadoc::Api::Proto::Docflow::Entity::Clear();
    }
    if (has_signerboxid()) {
      if (signerboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signerboxid_->clear();
      }
    }
    if (has_signerdepartmentid()) {
      if (signerdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signerdepartmentid_->clear();
      }
    }
    isvalid_ = false;
    if (has_verificationresult()) {
      if (verificationresult_ != NULL) verificationresult_->::Diadoc::Api::Proto::SignatureVerificationResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Signature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.Signature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SignerBoxId;
        break;
      }

      // optional string SignerBoxId = 2;
      case 2: {
        if (tag == 18) {
         parse_SignerBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signerboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signerboxid().data(), this->signerboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signerboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SignerDepartmentId;
        break;
      }

      // optional string SignerDepartmentId = 3;
      case 3: {
        if (tag == 26) {
         parse_SignerDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signerdepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signerdepartmentid().data(), this->signerdepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signerdepartmentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_IsValid;
        break;
      }

      // optional bool IsValid = 4;
      case 4: {
        if (tag == 32) {
         parse_IsValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvalid_)));
          set_has_isvalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_VerificationResult;
        break;
      }

      // optional .Diadoc.Api.Proto.SignatureVerificationResult VerificationResult = 5;
      case 5: {
        if (tag == 42) {
         parse_VerificationResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verificationresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.Signature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.Signature)
  return false;
#undef DO_
}

void Signature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.Signature)
  // optional .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
  if (has_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entity(), output);
  }

  // optional string SignerBoxId = 2;
  if (has_signerboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerboxid().data(), this->signerboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signerboxid(), output);
  }

  // optional string SignerDepartmentId = 3;
  if (has_signerdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerdepartmentid().data(), this->signerdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerdepartmentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->signerdepartmentid(), output);
  }

  // optional bool IsValid = 4;
  if (has_isvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isvalid(), output);
  }

  // optional .Diadoc.Api.Proto.SignatureVerificationResult VerificationResult = 5;
  if (has_verificationresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->verificationresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.Signature)
}

::google::protobuf::uint8* Signature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.Signature)
  // optional .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
  if (has_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entity(), target);
  }

  // optional string SignerBoxId = 2;
  if (has_signerboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerboxid().data(), this->signerboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signerboxid(), target);
  }

  // optional string SignerDepartmentId = 3;
  if (has_signerdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerdepartmentid().data(), this->signerdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerdepartmentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->signerdepartmentid(), target);
  }

  // optional bool IsValid = 4;
  if (has_isvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isvalid(), target);
  }

  // optional .Diadoc.Api.Proto.SignatureVerificationResult VerificationResult = 5;
  if (has_verificationresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->verificationresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.Signature)
  return target;
}

int Signature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Docflow.Entity Entity = 1;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity());
    }

    // optional string SignerBoxId = 2;
    if (has_signerboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signerboxid());
    }

    // optional string SignerDepartmentId = 3;
    if (has_signerdepartmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signerdepartmentid());
    }

    // optional bool IsValid = 4;
    if (has_isvalid()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.SignatureVerificationResult VerificationResult = 5;
    if (has_verificationresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->verificationresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Signature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Signature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity()) {
      mutable_entity()->::Diadoc::Api::Proto::Docflow::Entity::MergeFrom(from.entity());
    }
    if (from.has_signerboxid()) {
      set_signerboxid(from.signerboxid());
    }
    if (from.has_signerdepartmentid()) {
      set_signerdepartmentid(from.signerdepartmentid());
    }
    if (from.has_isvalid()) {
      set_isvalid(from.isvalid());
    }
    if (from.has_verificationresult()) {
      mutable_verificationresult()->::Diadoc::Api::Proto::SignatureVerificationResult::MergeFrom(from.verificationresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Signature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {

  if (has_entity()) {
    if (!this->entity().IsInitialized()) return false;
  }
  if (has_verificationresult()) {
    if (!this->verificationresult().IsInitialized()) return false;
  }
  return true;
}

void Signature::Swap(Signature* other) {
  if (other != this) {
    std::swap(entity_, other->entity_);
    std::swap(signerboxid_, other->signerboxid_);
    std::swap(signerdepartmentid_, other->signerdepartmentid_);
    std::swap(isvalid_, other->isvalid_);
    std::swap(verificationresult_, other->verificationresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Signature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Signature_descriptor_;
  metadata.reflection = Signature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignedAttachment::kAttachmentFieldNumber;
const int SignedAttachment::kSignatureFieldNumber;
const int SignedAttachment::kCommentFieldNumber;
#endif  // !_MSC_VER

SignedAttachment::SignedAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.SignedAttachment)
}

void SignedAttachment::InitAsDefaultInstance() {
  attachment_ = const_cast< ::Diadoc::Api::Proto::Docflow::Attachment*>(&::Diadoc::Api::Proto::Docflow::Attachment::default_instance());
  signature_ = const_cast< ::Diadoc::Api::Proto::Docflow::Signature*>(&::Diadoc::Api::Proto::Docflow::Signature::default_instance());
  comment_ = const_cast< ::Diadoc::Api::Proto::Docflow::Entity*>(&::Diadoc::Api::Proto::Docflow::Entity::default_instance());
}

SignedAttachment::SignedAttachment(const SignedAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.SignedAttachment)
}

void SignedAttachment::SharedCtor() {
  _cached_size_ = 0;
  attachment_ = NULL;
  signature_ = NULL;
  comment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedAttachment::~SignedAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.SignedAttachment)
  SharedDtor();
}

void SignedAttachment::SharedDtor() {
  if (this != default_instance_) {
    delete attachment_;
    delete signature_;
    delete comment_;
  }
}

void SignedAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedAttachment_descriptor_;
}

const SignedAttachment& SignedAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fAttachment_2eproto();
  return *default_instance_;
}

SignedAttachment* SignedAttachment::default_instance_ = NULL;

SignedAttachment* SignedAttachment::New() const {
  return new SignedAttachment;
}

void SignedAttachment::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::Diadoc::Api::Proto::Docflow::Attachment::Clear();
    }
    if (has_signature()) {
      if (signature_ != NULL) signature_->::Diadoc::Api::Proto::Docflow::Signature::Clear();
    }
    if (has_comment()) {
      if (comment_ != NULL) comment_->::Diadoc::Api::Proto::Docflow::Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignedAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.SignedAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Docflow.Attachment Attachment = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Signature;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.Signature Signature = 2;
      case 2: {
        if (tag == 18) {
         parse_Signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.Entity Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.SignedAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.SignedAttachment)
  return false;
#undef DO_
}

void SignedAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.SignedAttachment)
  // optional .Diadoc.Api.Proto.Docflow.Attachment Attachment = 1;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attachment(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.Signature Signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signature(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.Entity Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.SignedAttachment)
}

::google::protobuf::uint8* SignedAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.SignedAttachment)
  // optional .Diadoc.Api.Proto.Docflow.Attachment Attachment = 1;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attachment(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.Signature Signature = 2;
  if (has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signature(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.Entity Comment = 3;
  if (has_comment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.SignedAttachment)
  return target;
}

int SignedAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Docflow.Attachment Attachment = 1;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

    // optional .Diadoc.Api.Proto.Docflow.Signature Signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signature());
    }

    // optional .Diadoc.Api.Proto.Docflow.Entity Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignedAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignedAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedAttachment::MergeFrom(const SignedAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attachment()) {
      mutable_attachment()->::Diadoc::Api::Proto::Docflow::Attachment::MergeFrom(from.attachment());
    }
    if (from.has_signature()) {
      mutable_signature()->::Diadoc::Api::Proto::Docflow::Signature::MergeFrom(from.signature());
    }
    if (from.has_comment()) {
      mutable_comment()->::Diadoc::Api::Proto::Docflow::Entity::MergeFrom(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignedAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedAttachment::CopyFrom(const SignedAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedAttachment::IsInitialized() const {

  if (has_attachment()) {
    if (!this->attachment().IsInitialized()) return false;
  }
  if (has_signature()) {
    if (!this->signature().IsInitialized()) return false;
  }
  if (has_comment()) {
    if (!this->comment().IsInitialized()) return false;
  }
  return true;
}

void SignedAttachment::Swap(SignedAttachment* other) {
  if (other != this) {
    std::swap(attachment_, other->attachment_);
    std::swap(signature_, other->signature_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignedAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignedAttachment_descriptor_;
  metadata.reflection = SignedAttachment_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
