// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/Docflow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Docflow/Docflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

namespace {

const ::google::protobuf::Descriptor* Docflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Docflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocflowStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocflowStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocflowStatusModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocflowStatusModel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DocflowStatusSeverity_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Docflow_2fDocflow_2eproto() {
  protobuf_AddDesc_Docflow_2fDocflow_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Docflow/Docflow.proto");
  GOOGLE_CHECK(file != NULL);
  Docflow_descriptor_ = file->message_type(0);
  static const int Docflow_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, documentattachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, departmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, documentisdeleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, docflowstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, sendtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, deliverytimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, inboundinvoicedocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, outboundinvoicedocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, xmlbilateraldocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, bilateraldocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, unilateraldocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, revocationdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, resolutiondocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, candocumentberevokedunilaterallybysender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, packetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, customdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, inbounduniversaltransferdocumentdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, outbounduniversaltransferdocumentdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, roamingnotification_),
  };
  Docflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Docflow_descriptor_,
      Docflow::default_instance_,
      Docflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Docflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Docflow));
  DocflowStatus_descriptor_ = file->message_type(1);
  static const int DocflowStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowStatus, primarystatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowStatus, secondarystatus_),
  };
  DocflowStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocflowStatus_descriptor_,
      DocflowStatus::default_instance_,
      DocflowStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocflowStatus));
  DocflowStatusModel_descriptor_ = file->message_type(2);
  static const int DocflowStatusModel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowStatusModel, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowStatusModel, statustext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowStatusModel, statushint_),
  };
  DocflowStatusModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocflowStatusModel_descriptor_,
      DocflowStatusModel::default_instance_,
      DocflowStatusModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowStatusModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowStatusModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocflowStatusModel));
  DocflowStatusSeverity_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Docflow_2fDocflow_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Docflow_descriptor_, &Docflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocflowStatus_descriptor_, &DocflowStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocflowStatusModel_descriptor_, &DocflowStatusModel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Docflow_2fDocflow_2eproto() {
  delete Docflow::default_instance_;
  delete Docflow_reflection_;
  delete DocflowStatus::default_instance_;
  delete DocflowStatus_reflection_;
  delete DocflowStatusModel::default_instance_;
  delete DocflowStatusModel_reflection_;
}

void protobuf_AddDesc_Docflow_2fDocflow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_CustomDataItem_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fAttachment_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fUnilateralDocflow_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fBilateralDocflow_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fXmlBilateralDocflow_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fRevocationDocflow_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fResolutionDocflow_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fUniversalTransferDocumentDocflow_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fRoamingNotification_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025Docflow/Docflow.proto\022\030Diadoc.Api.Prot"
    "o.Docflow\032\017Timestamp.proto\032\024CustomDataIt"
    "em.proto\032\030Docflow/Attachment.proto\032\034Docf"
    "low/InvoiceDocflow.proto\032\037Docflow/Unilat"
    "eralDocflow.proto\032\036Docflow/BilateralDocf"
    "low.proto\032!Docflow/XmlBilateralDocflow.p"
    "roto\032\037Docflow/RevocationDocflow.proto\032\037D"
    "ocflow/ResolutionDocflow.proto\032.Docflow/"
    "UniversalTransferDocumentDocflow.proto\032!"
    "Docflow/RoamingNotification.proto\"\376\t\n\007Do"
    "cflow\022\022\n\nIsFinished\030\001 \001(\010\022F\n\022DocumentAtt"
    "achment\030\002 \001(\0132*.Diadoc.Api.Proto.Docflow"
    ".SignedAttachment\022\024\n\014DepartmentId\030\003 \001(\t\022"
    "\031\n\021DocumentIsDeleted\030\004 \001(\010\022>\n\rDocflowSta"
    "tus\030\005 \001(\0132\'.Diadoc.Api.Proto.Docflow.Doc"
    "flowStatus\0222\n\rSendTimestamp\030\006 \001(\0132\033.Diad"
    "oc.Api.Proto.Timestamp\0226\n\021DeliveryTimest"
    "amp\030\007 \001(\0132\033.Diadoc.Api.Proto.Timestamp\022N"
    "\n\025InboundInvoiceDocflow\030\010 \001(\0132/.Diadoc.A"
    "pi.Proto.Docflow.InboundInvoiceDocflow\022P"
    "\n\026OutboundInvoiceDocflow\030\t \001(\01320.Diadoc."
    "Api.Proto.Docflow.OutboundInvoiceDocflow"
    "\022J\n\023XmlBilateralDocflow\030\n \001(\0132-.Diadoc.A"
    "pi.Proto.Docflow.XmlBilateralDocflow\022D\n\020"
    "BilateralDocflow\030\013 \001(\0132*.Diadoc.Api.Prot"
    "o.Docflow.BilateralDocflow\022F\n\021Unilateral"
    "Docflow\030\014 \001(\0132+.Diadoc.Api.Proto.Docflow"
    ".UnilateralDocflow\022F\n\021RevocationDocflow\030"
    "\r \001(\0132+.Diadoc.Api.Proto.Docflow.Revocat"
    "ionDocflow\022F\n\021ResolutionDocflow\030\016 \001(\0132+."
    "Diadoc.Api.Proto.Docflow.ResolutionDocfl"
    "ow\0220\n(CanDocumentBeRevokedUnilaterallyBy"
    "Sender\030\017 \001(\010\022\020\n\010PacketId\030\020 \001(\t\0224\n\nCustom"
    "Data\030\021 \003(\0132 .Diadoc.Api.Proto.CustomData"
    "Item\022r\n\'InboundUniversalTransferDocument"
    "Docflow\030\022 \001(\0132A.Diadoc.Api.Proto.Docflow"
    ".InboundUniversalTransferDocumentDocflow"
    "\022t\n(OutboundUniversalTransferDocumentDoc"
    "flow\030\023 \001(\0132B.Diadoc.Api.Proto.Docflow.Ou"
    "tboundUniversalTransferDocumentDocflow\022J"
    "\n\023RoamingNotification\030\024 \001(\0132-.Diadoc.Api"
    ".Proto.Docflow.RoamingNotification\"\233\001\n\rD"
    "ocflowStatus\022C\n\rPrimaryStatus\030\001 \001(\0132,.Di"
    "adoc.Api.Proto.Docflow.DocflowStatusMode"
    "l\022E\n\017SecondaryStatus\030\002 \001(\0132,.Diadoc.Api."
    "Proto.Docflow.DocflowStatusModel\"\235\001\n\022Doc"
    "flowStatusModel\022_\n\010Severity\030\001 \001(\0162/.Diad"
    "oc.Api.Proto.Docflow.DocflowStatusSeveri"
    "ty:\034UnknownDocflowStatusSeverity\022\022\n\nStat"
    "usText\030\002 \001(\t\022\022\n\nStatusHint\030\003 \001(\t*h\n\025Docf"
    "lowStatusSeverity\022 \n\034UnknownDocflowStatu"
    "sSeverity\020\000\022\010\n\004Info\020\001\022\013\n\007Success\020\002\022\013\n\007Wa"
    "rning\020\003\022\t\n\005Error\020\004", 2098);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Docflow/Docflow.proto", &protobuf_RegisterTypes);
  Docflow::default_instance_ = new Docflow();
  DocflowStatus::default_instance_ = new DocflowStatus();
  DocflowStatusModel::default_instance_ = new DocflowStatusModel();
  Docflow::default_instance_->InitAsDefaultInstance();
  DocflowStatus::default_instance_->InitAsDefaultInstance();
  DocflowStatusModel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Docflow_2fDocflow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Docflow_2fDocflow_2eproto {
  StaticDescriptorInitializer_Docflow_2fDocflow_2eproto() {
    protobuf_AddDesc_Docflow_2fDocflow_2eproto();
  }
} static_descriptor_initializer_Docflow_2fDocflow_2eproto_;
const ::google::protobuf::EnumDescriptor* DocflowStatusSeverity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocflowStatusSeverity_descriptor_;
}
bool DocflowStatusSeverity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Docflow::kIsFinishedFieldNumber;
const int Docflow::kDocumentAttachmentFieldNumber;
const int Docflow::kDepartmentIdFieldNumber;
const int Docflow::kDocumentIsDeletedFieldNumber;
const int Docflow::kDocflowStatusFieldNumber;
const int Docflow::kSendTimestampFieldNumber;
const int Docflow::kDeliveryTimestampFieldNumber;
const int Docflow::kInboundInvoiceDocflowFieldNumber;
const int Docflow::kOutboundInvoiceDocflowFieldNumber;
const int Docflow::kXmlBilateralDocflowFieldNumber;
const int Docflow::kBilateralDocflowFieldNumber;
const int Docflow::kUnilateralDocflowFieldNumber;
const int Docflow::kRevocationDocflowFieldNumber;
const int Docflow::kResolutionDocflowFieldNumber;
const int Docflow::kCanDocumentBeRevokedUnilaterallyBySenderFieldNumber;
const int Docflow::kPacketIdFieldNumber;
const int Docflow::kCustomDataFieldNumber;
const int Docflow::kInboundUniversalTransferDocumentDocflowFieldNumber;
const int Docflow::kOutboundUniversalTransferDocumentDocflowFieldNumber;
const int Docflow::kRoamingNotificationFieldNumber;
#endif  // !_MSC_VER

Docflow::Docflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.Docflow)
}

void Docflow::InitAsDefaultInstance() {
  documentattachment_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignedAttachment*>(&::Diadoc::Api::Proto::Docflow::SignedAttachment::default_instance());
  docflowstatus_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocflowStatus*>(&::Diadoc::Api::Proto::Docflow::DocflowStatus::default_instance());
  sendtimestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  deliverytimestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  inboundinvoicedocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow*>(&::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow::default_instance());
  outboundinvoicedocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow*>(&::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow::default_instance());
  xmlbilateraldocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow*>(&::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow::default_instance());
  bilateraldocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::BilateralDocflow*>(&::Diadoc::Api::Proto::Docflow::BilateralDocflow::default_instance());
  unilateraldocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::UnilateralDocflow*>(&::Diadoc::Api::Proto::Docflow::UnilateralDocflow::default_instance());
  revocationdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::RevocationDocflow*>(&::Diadoc::Api::Proto::Docflow::RevocationDocflow::default_instance());
  resolutiondocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::ResolutionDocflow*>(&::Diadoc::Api::Proto::Docflow::ResolutionDocflow::default_instance());
  inbounduniversaltransferdocumentdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow*>(&::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow::default_instance());
  outbounduniversaltransferdocumentdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow*>(&::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow::default_instance());
  roamingnotification_ = const_cast< ::Diadoc::Api::Proto::Docflow::RoamingNotification*>(&::Diadoc::Api::Proto::Docflow::RoamingNotification::default_instance());
}

Docflow::Docflow(const Docflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.Docflow)
}

void Docflow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isfinished_ = false;
  documentattachment_ = NULL;
  departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentisdeleted_ = false;
  docflowstatus_ = NULL;
  sendtimestamp_ = NULL;
  deliverytimestamp_ = NULL;
  inboundinvoicedocflow_ = NULL;
  outboundinvoicedocflow_ = NULL;
  xmlbilateraldocflow_ = NULL;
  bilateraldocflow_ = NULL;
  unilateraldocflow_ = NULL;
  revocationdocflow_ = NULL;
  resolutiondocflow_ = NULL;
  candocumentberevokedunilaterallybysender_ = false;
  packetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inbounduniversaltransferdocumentdocflow_ = NULL;
  outbounduniversaltransferdocumentdocflow_ = NULL;
  roamingnotification_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Docflow::~Docflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.Docflow)
  SharedDtor();
}

void Docflow::SharedDtor() {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete departmentid_;
  }
  if (packetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete packetid_;
  }
  if (this != default_instance_) {
    delete documentattachment_;
    delete docflowstatus_;
    delete sendtimestamp_;
    delete deliverytimestamp_;
    delete inboundinvoicedocflow_;
    delete outboundinvoicedocflow_;
    delete xmlbilateraldocflow_;
    delete bilateraldocflow_;
    delete unilateraldocflow_;
    delete revocationdocflow_;
    delete resolutiondocflow_;
    delete inbounduniversaltransferdocumentdocflow_;
    delete outbounduniversaltransferdocumentdocflow_;
    delete roamingnotification_;
  }
}

void Docflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Docflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Docflow_descriptor_;
}

const Docflow& Docflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflow_2eproto();
  return *default_instance_;
}

Docflow* Docflow::default_instance_ = NULL;

Docflow* Docflow::New() const {
  return new Docflow;
}

void Docflow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Docflow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(isfinished_, documentisdeleted_);
    if (has_documentattachment()) {
      if (documentattachment_ != NULL) documentattachment_->::Diadoc::Api::Proto::Docflow::SignedAttachment::Clear();
    }
    if (has_departmentid()) {
      if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        departmentid_->clear();
      }
    }
    if (has_docflowstatus()) {
      if (docflowstatus_ != NULL) docflowstatus_->::Diadoc::Api::Proto::Docflow::DocflowStatus::Clear();
    }
    if (has_sendtimestamp()) {
      if (sendtimestamp_ != NULL) sendtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_deliverytimestamp()) {
      if (deliverytimestamp_ != NULL) deliverytimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_inboundinvoicedocflow()) {
      if (inboundinvoicedocflow_ != NULL) inboundinvoicedocflow_->::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_outboundinvoicedocflow()) {
      if (outboundinvoicedocflow_ != NULL) outboundinvoicedocflow_->::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow::Clear();
    }
    if (has_xmlbilateraldocflow()) {
      if (xmlbilateraldocflow_ != NULL) xmlbilateraldocflow_->::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow::Clear();
    }
    if (has_bilateraldocflow()) {
      if (bilateraldocflow_ != NULL) bilateraldocflow_->::Diadoc::Api::Proto::Docflow::BilateralDocflow::Clear();
    }
    if (has_unilateraldocflow()) {
      if (unilateraldocflow_ != NULL) unilateraldocflow_->::Diadoc::Api::Proto::Docflow::UnilateralDocflow::Clear();
    }
    if (has_revocationdocflow()) {
      if (revocationdocflow_ != NULL) revocationdocflow_->::Diadoc::Api::Proto::Docflow::RevocationDocflow::Clear();
    }
    if (has_resolutiondocflow()) {
      if (resolutiondocflow_ != NULL) resolutiondocflow_->::Diadoc::Api::Proto::Docflow::ResolutionDocflow::Clear();
    }
    candocumentberevokedunilaterallybysender_ = false;
    if (has_packetid()) {
      if (packetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        packetid_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 917504) {
    if (has_inbounduniversaltransferdocumentdocflow()) {
      if (inbounduniversaltransferdocumentdocflow_ != NULL) inbounduniversaltransferdocumentdocflow_->::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow::Clear();
    }
    if (has_outbounduniversaltransferdocumentdocflow()) {
      if (outbounduniversaltransferdocumentdocflow_ != NULL) outbounduniversaltransferdocumentdocflow_->::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow::Clear();
    }
    if (has_roamingnotification()) {
      if (roamingnotification_ != NULL) roamingnotification_->::Diadoc::Api::Proto::Docflow::RoamingNotification::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  customdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Docflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.Docflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DocumentAttachment;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.SignedAttachment DocumentAttachment = 2;
      case 2: {
        if (tag == 18) {
         parse_DocumentAttachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentattachment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DepartmentId;
        break;
      }

      // optional string DepartmentId = 3;
      case 3: {
        if (tag == 26) {
         parse_DepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_departmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->departmentid().data(), this->departmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "departmentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DocumentIsDeleted;
        break;
      }

      // optional bool DocumentIsDeleted = 4;
      case 4: {
        if (tag == 32) {
         parse_DocumentIsDeleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &documentisdeleted_)));
          set_has_documentisdeleted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DocflowStatus;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocflowStatus DocflowStatus = 5;
      case 5: {
        if (tag == 42) {
         parse_DocflowStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_docflowstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SendTimestamp;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp SendTimestamp = 6;
      case 6: {
        if (tag == 50) {
         parse_SendTimestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendtimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_DeliveryTimestamp;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp DeliveryTimestamp = 7;
      case 7: {
        if (tag == 58) {
         parse_DeliveryTimestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deliverytimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_InboundInvoiceDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow InboundInvoiceDocflow = 8;
      case 8: {
        if (tag == 66) {
         parse_InboundInvoiceDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inboundinvoicedocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_OutboundInvoiceDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow OutboundInvoiceDocflow = 9;
      case 9: {
        if (tag == 74) {
         parse_OutboundInvoiceDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outboundinvoicedocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_XmlBilateralDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.XmlBilateralDocflow XmlBilateralDocflow = 10;
      case 10: {
        if (tag == 82) {
         parse_XmlBilateralDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xmlbilateraldocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_BilateralDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.BilateralDocflow BilateralDocflow = 11;
      case 11: {
        if (tag == 90) {
         parse_BilateralDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bilateraldocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_UnilateralDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.UnilateralDocflow UnilateralDocflow = 12;
      case 12: {
        if (tag == 98) {
         parse_UnilateralDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unilateraldocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_RevocationDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.RevocationDocflow RevocationDocflow = 13;
      case 13: {
        if (tag == 106) {
         parse_RevocationDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revocationdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_ResolutionDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ResolutionDocflow ResolutionDocflow = 14;
      case 14: {
        if (tag == 114) {
         parse_ResolutionDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolutiondocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_CanDocumentBeRevokedUnilaterallyBySender;
        break;
      }

      // optional bool CanDocumentBeRevokedUnilaterallyBySender = 15;
      case 15: {
        if (tag == 120) {
         parse_CanDocumentBeRevokedUnilaterallyBySender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &candocumentberevokedunilaterallybysender_)));
          set_has_candocumentberevokedunilaterallybysender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_PacketId;
        break;
      }

      // optional string PacketId = 16;
      case 16: {
        if (tag == 130) {
         parse_PacketId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packetid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packetid().data(), this->packetid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "packetid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_CustomData;
        break;
      }

      // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 17;
      case 17: {
        if (tag == 138) {
         parse_CustomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_CustomData;
        if (input->ExpectTag(146)) goto parse_InboundUniversalTransferDocumentDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow InboundUniversalTransferDocumentDocflow = 18;
      case 18: {
        if (tag == 146) {
         parse_InboundUniversalTransferDocumentDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inbounduniversaltransferdocumentdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_OutboundUniversalTransferDocumentDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow OutboundUniversalTransferDocumentDocflow = 19;
      case 19: {
        if (tag == 154) {
         parse_OutboundUniversalTransferDocumentDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outbounduniversaltransferdocumentdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_RoamingNotification;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 20;
      case 20: {
        if (tag == 162) {
         parse_RoamingNotification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roamingnotification()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.Docflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.Docflow)
  return false;
#undef DO_
}

void Docflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.Docflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachment DocumentAttachment = 2;
  if (has_documentattachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->documentattachment(), output);
  }

  // optional string DepartmentId = 3;
  if (has_departmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->departmentid().data(), this->departmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "departmentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->departmentid(), output);
  }

  // optional bool DocumentIsDeleted = 4;
  if (has_documentisdeleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->documentisdeleted(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocflowStatus DocflowStatus = 5;
  if (has_docflowstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->docflowstatus(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp SendTimestamp = 6;
  if (has_sendtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sendtimestamp(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveryTimestamp = 7;
  if (has_deliverytimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->deliverytimestamp(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow InboundInvoiceDocflow = 8;
  if (has_inboundinvoicedocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->inboundinvoicedocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow OutboundInvoiceDocflow = 9;
  if (has_outboundinvoicedocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->outboundinvoicedocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.XmlBilateralDocflow XmlBilateralDocflow = 10;
  if (has_xmlbilateraldocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->xmlbilateraldocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.BilateralDocflow BilateralDocflow = 11;
  if (has_bilateraldocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->bilateraldocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.UnilateralDocflow UnilateralDocflow = 12;
  if (has_unilateraldocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->unilateraldocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.RevocationDocflow RevocationDocflow = 13;
  if (has_revocationdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->revocationdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ResolutionDocflow ResolutionDocflow = 14;
  if (has_resolutiondocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->resolutiondocflow(), output);
  }

  // optional bool CanDocumentBeRevokedUnilaterallyBySender = 15;
  if (has_candocumentberevokedunilaterallybysender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->candocumentberevokedunilaterallybysender(), output);
  }

  // optional string PacketId = 16;
  if (has_packetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packetid().data(), this->packetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "packetid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->packetid(), output);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 17;
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->customdata(i), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow InboundUniversalTransferDocumentDocflow = 18;
  if (has_inbounduniversaltransferdocumentdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->inbounduniversaltransferdocumentdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow OutboundUniversalTransferDocumentDocflow = 19;
  if (has_outbounduniversaltransferdocumentdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->outbounduniversaltransferdocumentdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 20;
  if (has_roamingnotification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->roamingnotification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.Docflow)
}

::google::protobuf::uint8* Docflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.Docflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachment DocumentAttachment = 2;
  if (has_documentattachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->documentattachment(), target);
  }

  // optional string DepartmentId = 3;
  if (has_departmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->departmentid().data(), this->departmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "departmentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->departmentid(), target);
  }

  // optional bool DocumentIsDeleted = 4;
  if (has_documentisdeleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->documentisdeleted(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocflowStatus DocflowStatus = 5;
  if (has_docflowstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->docflowstatus(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp SendTimestamp = 6;
  if (has_sendtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sendtimestamp(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveryTimestamp = 7;
  if (has_deliverytimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->deliverytimestamp(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow InboundInvoiceDocflow = 8;
  if (has_inboundinvoicedocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->inboundinvoicedocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow OutboundInvoiceDocflow = 9;
  if (has_outboundinvoicedocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->outboundinvoicedocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.XmlBilateralDocflow XmlBilateralDocflow = 10;
  if (has_xmlbilateraldocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->xmlbilateraldocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.BilateralDocflow BilateralDocflow = 11;
  if (has_bilateraldocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->bilateraldocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.UnilateralDocflow UnilateralDocflow = 12;
  if (has_unilateraldocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->unilateraldocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.RevocationDocflow RevocationDocflow = 13;
  if (has_revocationdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->revocationdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ResolutionDocflow ResolutionDocflow = 14;
  if (has_resolutiondocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->resolutiondocflow(), target);
  }

  // optional bool CanDocumentBeRevokedUnilaterallyBySender = 15;
  if (has_candocumentberevokedunilaterallybysender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->candocumentberevokedunilaterallybysender(), target);
  }

  // optional string PacketId = 16;
  if (has_packetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packetid().data(), this->packetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "packetid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->packetid(), target);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 17;
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->customdata(i), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow InboundUniversalTransferDocumentDocflow = 18;
  if (has_inbounduniversaltransferdocumentdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->inbounduniversaltransferdocumentdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow OutboundUniversalTransferDocumentDocflow = 19;
  if (has_outbounduniversaltransferdocumentdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->outbounduniversaltransferdocumentdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 20;
  if (has_roamingnotification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->roamingnotification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.Docflow)
  return target;
}

int Docflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.SignedAttachment DocumentAttachment = 2;
    if (has_documentattachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentattachment());
    }

    // optional string DepartmentId = 3;
    if (has_departmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->departmentid());
    }

    // optional bool DocumentIsDeleted = 4;
    if (has_documentisdeleted()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.DocflowStatus DocflowStatus = 5;
    if (has_docflowstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docflowstatus());
    }

    // optional .Diadoc.Api.Proto.Timestamp SendTimestamp = 6;
    if (has_sendtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendtimestamp());
    }

    // optional .Diadoc.Api.Proto.Timestamp DeliveryTimestamp = 7;
    if (has_deliverytimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deliverytimestamp());
    }

    // optional .Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow InboundInvoiceDocflow = 8;
    if (has_inboundinvoicedocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inboundinvoicedocflow());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow OutboundInvoiceDocflow = 9;
    if (has_outboundinvoicedocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outboundinvoicedocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.XmlBilateralDocflow XmlBilateralDocflow = 10;
    if (has_xmlbilateraldocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xmlbilateraldocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.BilateralDocflow BilateralDocflow = 11;
    if (has_bilateraldocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bilateraldocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.UnilateralDocflow UnilateralDocflow = 12;
    if (has_unilateraldocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unilateraldocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.RevocationDocflow RevocationDocflow = 13;
    if (has_revocationdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revocationdocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.ResolutionDocflow ResolutionDocflow = 14;
    if (has_resolutiondocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resolutiondocflow());
    }

    // optional bool CanDocumentBeRevokedUnilaterallyBySender = 15;
    if (has_candocumentberevokedunilaterallybysender()) {
      total_size += 1 + 1;
    }

    // optional string PacketId = 16;
    if (has_packetid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packetid());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow InboundUniversalTransferDocumentDocflow = 18;
    if (has_inbounduniversaltransferdocumentdocflow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inbounduniversaltransferdocumentdocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow OutboundUniversalTransferDocumentDocflow = 19;
    if (has_outbounduniversaltransferdocumentdocflow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outbounduniversaltransferdocumentdocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.RoamingNotification RoamingNotification = 20;
    if (has_roamingnotification()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roamingnotification());
    }

  }
  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 17;
  total_size += 2 * this->customdata_size();
  for (int i = 0; i < this->customdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Docflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Docflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Docflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Docflow::MergeFrom(const Docflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  customdata_.MergeFrom(from.customdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_documentattachment()) {
      mutable_documentattachment()->::Diadoc::Api::Proto::Docflow::SignedAttachment::MergeFrom(from.documentattachment());
    }
    if (from.has_departmentid()) {
      set_departmentid(from.departmentid());
    }
    if (from.has_documentisdeleted()) {
      set_documentisdeleted(from.documentisdeleted());
    }
    if (from.has_docflowstatus()) {
      mutable_docflowstatus()->::Diadoc::Api::Proto::Docflow::DocflowStatus::MergeFrom(from.docflowstatus());
    }
    if (from.has_sendtimestamp()) {
      mutable_sendtimestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.sendtimestamp());
    }
    if (from.has_deliverytimestamp()) {
      mutable_deliverytimestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.deliverytimestamp());
    }
    if (from.has_inboundinvoicedocflow()) {
      mutable_inboundinvoicedocflow()->::Diadoc::Api::Proto::Docflow::InboundInvoiceDocflow::MergeFrom(from.inboundinvoicedocflow());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_outboundinvoicedocflow()) {
      mutable_outboundinvoicedocflow()->::Diadoc::Api::Proto::Docflow::OutboundInvoiceDocflow::MergeFrom(from.outboundinvoicedocflow());
    }
    if (from.has_xmlbilateraldocflow()) {
      mutable_xmlbilateraldocflow()->::Diadoc::Api::Proto::Docflow::XmlBilateralDocflow::MergeFrom(from.xmlbilateraldocflow());
    }
    if (from.has_bilateraldocflow()) {
      mutable_bilateraldocflow()->::Diadoc::Api::Proto::Docflow::BilateralDocflow::MergeFrom(from.bilateraldocflow());
    }
    if (from.has_unilateraldocflow()) {
      mutable_unilateraldocflow()->::Diadoc::Api::Proto::Docflow::UnilateralDocflow::MergeFrom(from.unilateraldocflow());
    }
    if (from.has_revocationdocflow()) {
      mutable_revocationdocflow()->::Diadoc::Api::Proto::Docflow::RevocationDocflow::MergeFrom(from.revocationdocflow());
    }
    if (from.has_resolutiondocflow()) {
      mutable_resolutiondocflow()->::Diadoc::Api::Proto::Docflow::ResolutionDocflow::MergeFrom(from.resolutiondocflow());
    }
    if (from.has_candocumentberevokedunilaterallybysender()) {
      set_candocumentberevokedunilaterallybysender(from.candocumentberevokedunilaterallybysender());
    }
    if (from.has_packetid()) {
      set_packetid(from.packetid());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_inbounduniversaltransferdocumentdocflow()) {
      mutable_inbounduniversaltransferdocumentdocflow()->::Diadoc::Api::Proto::Docflow::InboundUniversalTransferDocumentDocflow::MergeFrom(from.inbounduniversaltransferdocumentdocflow());
    }
    if (from.has_outbounduniversaltransferdocumentdocflow()) {
      mutable_outbounduniversaltransferdocumentdocflow()->::Diadoc::Api::Proto::Docflow::OutboundUniversalTransferDocumentDocflow::MergeFrom(from.outbounduniversaltransferdocumentdocflow());
    }
    if (from.has_roamingnotification()) {
      mutable_roamingnotification()->::Diadoc::Api::Proto::Docflow::RoamingNotification::MergeFrom(from.roamingnotification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Docflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Docflow::CopyFrom(const Docflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Docflow::IsInitialized() const {

  if (has_documentattachment()) {
    if (!this->documentattachment().IsInitialized()) return false;
  }
  if (has_sendtimestamp()) {
    if (!this->sendtimestamp().IsInitialized()) return false;
  }
  if (has_deliverytimestamp()) {
    if (!this->deliverytimestamp().IsInitialized()) return false;
  }
  if (has_inboundinvoicedocflow()) {
    if (!this->inboundinvoicedocflow().IsInitialized()) return false;
  }
  if (has_outboundinvoicedocflow()) {
    if (!this->outboundinvoicedocflow().IsInitialized()) return false;
  }
  if (has_xmlbilateraldocflow()) {
    if (!this->xmlbilateraldocflow().IsInitialized()) return false;
  }
  if (has_bilateraldocflow()) {
    if (!this->bilateraldocflow().IsInitialized()) return false;
  }
  if (has_unilateraldocflow()) {
    if (!this->unilateraldocflow().IsInitialized()) return false;
  }
  if (has_revocationdocflow()) {
    if (!this->revocationdocflow().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->customdata())) return false;
  if (has_inbounduniversaltransferdocumentdocflow()) {
    if (!this->inbounduniversaltransferdocumentdocflow().IsInitialized()) return false;
  }
  if (has_outbounduniversaltransferdocumentdocflow()) {
    if (!this->outbounduniversaltransferdocumentdocflow().IsInitialized()) return false;
  }
  if (has_roamingnotification()) {
    if (!this->roamingnotification().IsInitialized()) return false;
  }
  return true;
}

void Docflow::Swap(Docflow* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(documentattachment_, other->documentattachment_);
    std::swap(departmentid_, other->departmentid_);
    std::swap(documentisdeleted_, other->documentisdeleted_);
    std::swap(docflowstatus_, other->docflowstatus_);
    std::swap(sendtimestamp_, other->sendtimestamp_);
    std::swap(deliverytimestamp_, other->deliverytimestamp_);
    std::swap(inboundinvoicedocflow_, other->inboundinvoicedocflow_);
    std::swap(outboundinvoicedocflow_, other->outboundinvoicedocflow_);
    std::swap(xmlbilateraldocflow_, other->xmlbilateraldocflow_);
    std::swap(bilateraldocflow_, other->bilateraldocflow_);
    std::swap(unilateraldocflow_, other->unilateraldocflow_);
    std::swap(revocationdocflow_, other->revocationdocflow_);
    std::swap(resolutiondocflow_, other->resolutiondocflow_);
    std::swap(candocumentberevokedunilaterallybysender_, other->candocumentberevokedunilaterallybysender_);
    std::swap(packetid_, other->packetid_);
    customdata_.Swap(&other->customdata_);
    std::swap(inbounduniversaltransferdocumentdocflow_, other->inbounduniversaltransferdocumentdocflow_);
    std::swap(outbounduniversaltransferdocumentdocflow_, other->outbounduniversaltransferdocumentdocflow_);
    std::swap(roamingnotification_, other->roamingnotification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Docflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Docflow_descriptor_;
  metadata.reflection = Docflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocflowStatus::kPrimaryStatusFieldNumber;
const int DocflowStatus::kSecondaryStatusFieldNumber;
#endif  // !_MSC_VER

DocflowStatus::DocflowStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.DocflowStatus)
}

void DocflowStatus::InitAsDefaultInstance() {
  primarystatus_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocflowStatusModel*>(&::Diadoc::Api::Proto::Docflow::DocflowStatusModel::default_instance());
  secondarystatus_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocflowStatusModel*>(&::Diadoc::Api::Proto::Docflow::DocflowStatusModel::default_instance());
}

DocflowStatus::DocflowStatus(const DocflowStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.DocflowStatus)
}

void DocflowStatus::SharedCtor() {
  _cached_size_ = 0;
  primarystatus_ = NULL;
  secondarystatus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocflowStatus::~DocflowStatus() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.DocflowStatus)
  SharedDtor();
}

void DocflowStatus::SharedDtor() {
  if (this != default_instance_) {
    delete primarystatus_;
    delete secondarystatus_;
  }
}

void DocflowStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocflowStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocflowStatus_descriptor_;
}

const DocflowStatus& DocflowStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflow_2eproto();
  return *default_instance_;
}

DocflowStatus* DocflowStatus::default_instance_ = NULL;

DocflowStatus* DocflowStatus::New() const {
  return new DocflowStatus;
}

void DocflowStatus::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_primarystatus()) {
      if (primarystatus_ != NULL) primarystatus_->::Diadoc::Api::Proto::Docflow::DocflowStatusModel::Clear();
    }
    if (has_secondarystatus()) {
      if (secondarystatus_ != NULL) secondarystatus_->::Diadoc::Api::Proto::Docflow::DocflowStatusModel::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocflowStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.DocflowStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Docflow.DocflowStatusModel PrimaryStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_primarystatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SecondaryStatus;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocflowStatusModel SecondaryStatus = 2;
      case 2: {
        if (tag == 18) {
         parse_SecondaryStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_secondarystatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.DocflowStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.DocflowStatus)
  return false;
#undef DO_
}

void DocflowStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.DocflowStatus)
  // optional .Diadoc.Api.Proto.Docflow.DocflowStatusModel PrimaryStatus = 1;
  if (has_primarystatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->primarystatus(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocflowStatusModel SecondaryStatus = 2;
  if (has_secondarystatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->secondarystatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.DocflowStatus)
}

::google::protobuf::uint8* DocflowStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.DocflowStatus)
  // optional .Diadoc.Api.Proto.Docflow.DocflowStatusModel PrimaryStatus = 1;
  if (has_primarystatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->primarystatus(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocflowStatusModel SecondaryStatus = 2;
  if (has_secondarystatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->secondarystatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.DocflowStatus)
  return target;
}

int DocflowStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Docflow.DocflowStatusModel PrimaryStatus = 1;
    if (has_primarystatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->primarystatus());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocflowStatusModel SecondaryStatus = 2;
    if (has_secondarystatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->secondarystatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocflowStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocflowStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocflowStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocflowStatus::MergeFrom(const DocflowStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_primarystatus()) {
      mutable_primarystatus()->::Diadoc::Api::Proto::Docflow::DocflowStatusModel::MergeFrom(from.primarystatus());
    }
    if (from.has_secondarystatus()) {
      mutable_secondarystatus()->::Diadoc::Api::Proto::Docflow::DocflowStatusModel::MergeFrom(from.secondarystatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocflowStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocflowStatus::CopyFrom(const DocflowStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocflowStatus::IsInitialized() const {

  return true;
}

void DocflowStatus::Swap(DocflowStatus* other) {
  if (other != this) {
    std::swap(primarystatus_, other->primarystatus_);
    std::swap(secondarystatus_, other->secondarystatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocflowStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocflowStatus_descriptor_;
  metadata.reflection = DocflowStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocflowStatusModel::kSeverityFieldNumber;
const int DocflowStatusModel::kStatusTextFieldNumber;
const int DocflowStatusModel::kStatusHintFieldNumber;
#endif  // !_MSC_VER

DocflowStatusModel::DocflowStatusModel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.DocflowStatusModel)
}

void DocflowStatusModel::InitAsDefaultInstance() {
}

DocflowStatusModel::DocflowStatusModel(const DocflowStatusModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.DocflowStatusModel)
}

void DocflowStatusModel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  severity_ = 0;
  statustext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statushint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocflowStatusModel::~DocflowStatusModel() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.DocflowStatusModel)
  SharedDtor();
}

void DocflowStatusModel::SharedDtor() {
  if (statustext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statustext_;
  }
  if (statushint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statushint_;
  }
  if (this != default_instance_) {
  }
}

void DocflowStatusModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocflowStatusModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocflowStatusModel_descriptor_;
}

const DocflowStatusModel& DocflowStatusModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocflow_2eproto();
  return *default_instance_;
}

DocflowStatusModel* DocflowStatusModel::default_instance_ = NULL;

DocflowStatusModel* DocflowStatusModel::New() const {
  return new DocflowStatusModel;
}

void DocflowStatusModel::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    severity_ = 0;
    if (has_statustext()) {
      if (statustext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        statustext_->clear();
      }
    }
    if (has_statushint()) {
      if (statushint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        statushint_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocflowStatusModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.DocflowStatusModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Docflow.DocflowStatusSeverity Severity = 1 [default = UnknownDocflowStatusSeverity];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Docflow::DocflowStatusSeverity_IsValid(value)) {
            set_severity(static_cast< ::Diadoc::Api::Proto::Docflow::DocflowStatusSeverity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StatusText;
        break;
      }

      // optional string StatusText = 2;
      case 2: {
        if (tag == 18) {
         parse_StatusText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statustext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->statustext().data(), this->statustext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "statustext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_StatusHint;
        break;
      }

      // optional string StatusHint = 3;
      case 3: {
        if (tag == 26) {
         parse_StatusHint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statushint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->statushint().data(), this->statushint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "statushint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.DocflowStatusModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.DocflowStatusModel)
  return false;
#undef DO_
}

void DocflowStatusModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.DocflowStatusModel)
  // optional .Diadoc.Api.Proto.Docflow.DocflowStatusSeverity Severity = 1 [default = UnknownDocflowStatusSeverity];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->severity(), output);
  }

  // optional string StatusText = 2;
  if (has_statustext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statustext().data(), this->statustext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statustext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->statustext(), output);
  }

  // optional string StatusHint = 3;
  if (has_statushint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statushint().data(), this->statushint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statushint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->statushint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.DocflowStatusModel)
}

::google::protobuf::uint8* DocflowStatusModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.DocflowStatusModel)
  // optional .Diadoc.Api.Proto.Docflow.DocflowStatusSeverity Severity = 1 [default = UnknownDocflowStatusSeverity];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->severity(), target);
  }

  // optional string StatusText = 2;
  if (has_statustext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statustext().data(), this->statustext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statustext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->statustext(), target);
  }

  // optional string StatusHint = 3;
  if (has_statushint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statushint().data(), this->statushint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statushint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->statushint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.DocflowStatusModel)
  return target;
}

int DocflowStatusModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Docflow.DocflowStatusSeverity Severity = 1 [default = UnknownDocflowStatusSeverity];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
    }

    // optional string StatusText = 2;
    if (has_statustext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statustext());
    }

    // optional string StatusHint = 3;
    if (has_statushint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statushint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocflowStatusModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocflowStatusModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocflowStatusModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocflowStatusModel::MergeFrom(const DocflowStatusModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_statustext()) {
      set_statustext(from.statustext());
    }
    if (from.has_statushint()) {
      set_statushint(from.statushint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocflowStatusModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocflowStatusModel::CopyFrom(const DocflowStatusModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocflowStatusModel::IsInitialized() const {

  return true;
}

void DocflowStatusModel::Swap(DocflowStatusModel* other) {
  if (other != this) {
    std::swap(severity_, other->severity_);
    std::swap(statustext_, other->statustext_);
    std::swap(statushint_, other->statushint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocflowStatusModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocflowStatusModel_descriptor_;
  metadata.reflection = DocflowStatusModel_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
