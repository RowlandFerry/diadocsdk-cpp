// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/InvoiceDocflow.proto

#ifndef PROTOBUF_Docflow_2fInvoiceDocflow_2eproto__INCLUDED
#define PROTOBUF_Docflow_2fInvoiceDocflow_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Timestamp.pb.h"
#include "Docflow/Attachment.pb.h"
#include "Docflow/ReceiptDocflow.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto();
void protobuf_AssignDesc_Docflow_2fInvoiceDocflow_2eproto();
void protobuf_ShutdownFile_Docflow_2fInvoiceDocflow_2eproto();

class InboundInvoiceDocflow;
class OutboundInvoiceDocflow;
class InvoiceConfirmationDocflow;
class InboundInvoiceReceiptDocflow;
class InvoiceCorrectionRequestDocflow;

// ===================================================================

class InboundInvoiceDocflow : public ::google::protobuf::Message {
 public:
  InboundInvoiceDocflow();
  virtual ~InboundInvoiceDocflow();

  InboundInvoiceDocflow(const InboundInvoiceDocflow& from);

  inline InboundInvoiceDocflow& operator=(const InboundInvoiceDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InboundInvoiceDocflow& default_instance();

  void Swap(InboundInvoiceDocflow* other);

  // implements Message ----------------------------------------------

  InboundInvoiceDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InboundInvoiceDocflow& from);
  void MergeFrom(const InboundInvoiceDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // optional .Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow ReceiptDocflow = 2;
  inline bool has_receiptdocflow() const;
  inline void clear_receiptdocflow();
  static const int kReceiptDocflowFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow& receiptdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* mutable_receiptdocflow();
  inline ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* release_receiptdocflow();
  inline void set_allocated_receiptdocflow(::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* receiptdocflow);

  // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
  inline bool has_confirmationdocflow() const;
  inline void clear_confirmationdocflow();
  static const int kConfirmationDocflowFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow& confirmationdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* mutable_confirmationdocflow();
  inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* release_confirmationdocflow();
  inline void set_allocated_confirmationdocflow(::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* confirmationdocflow);

  // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
  inline bool has_correctionrequestdocflow() const;
  inline void clear_correctionrequestdocflow();
  static const int kCorrectionRequestDocflowFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow& correctionrequestdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* mutable_correctionrequestdocflow();
  inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* release_correctionrequestdocflow();
  inline void set_allocated_correctionrequestdocflow(::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* correctionrequestdocflow);

  // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
  inline bool has_confirmationtimestamp() const;
  inline void clear_confirmationtimestamp();
  static const int kConfirmationTimestampFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Timestamp& confirmationtimestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_confirmationtimestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_confirmationtimestamp();
  inline void set_allocated_confirmationtimestamp(::Diadoc::Api::Proto::Timestamp* confirmationtimestamp);

  // optional bool IsAmendmentRequested = 6;
  inline bool has_isamendmentrequested() const;
  inline void clear_isamendmentrequested();
  static const int kIsAmendmentRequestedFieldNumber = 6;
  inline bool isamendmentrequested() const;
  inline void set_isamendmentrequested(bool value);

  // optional bool IsRevised = 7;
  inline bool has_isrevised() const;
  inline void clear_isrevised();
  static const int kIsRevisedFieldNumber = 7;
  inline bool isrevised() const;
  inline void set_isrevised(bool value);

  // optional bool IsCorrected = 8;
  inline bool has_iscorrected() const;
  inline void clear_iscorrected();
  static const int kIsCorrectedFieldNumber = 8;
  inline bool iscorrected() const;
  inline void set_iscorrected(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_receiptdocflow();
  inline void clear_has_receiptdocflow();
  inline void set_has_confirmationdocflow();
  inline void clear_has_confirmationdocflow();
  inline void set_has_correctionrequestdocflow();
  inline void clear_has_correctionrequestdocflow();
  inline void set_has_confirmationtimestamp();
  inline void clear_has_confirmationtimestamp();
  inline void set_has_isamendmentrequested();
  inline void clear_has_isamendmentrequested();
  inline void set_has_isrevised();
  inline void clear_has_isrevised();
  inline void set_has_iscorrected();
  inline void clear_has_iscorrected();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* receiptdocflow_;
  ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* confirmationdocflow_;
  ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* correctionrequestdocflow_;
  ::Diadoc::Api::Proto::Timestamp* confirmationtimestamp_;
  bool isfinished_;
  bool isamendmentrequested_;
  bool isrevised_;
  bool iscorrected_;
  friend void  protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fInvoiceDocflow_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fInvoiceDocflow_2eproto();

  void InitAsDefaultInstance();
  static InboundInvoiceDocflow* default_instance_;
};
// -------------------------------------------------------------------

class OutboundInvoiceDocflow : public ::google::protobuf::Message {
 public:
  OutboundInvoiceDocflow();
  virtual ~OutboundInvoiceDocflow();

  OutboundInvoiceDocflow(const OutboundInvoiceDocflow& from);

  inline OutboundInvoiceDocflow& operator=(const OutboundInvoiceDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OutboundInvoiceDocflow& default_instance();

  void Swap(OutboundInvoiceDocflow* other);

  // implements Message ----------------------------------------------

  OutboundInvoiceDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OutboundInvoiceDocflow& from);
  void MergeFrom(const OutboundInvoiceDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
  inline bool has_receiptdocflow() const;
  inline void clear_receiptdocflow();
  static const int kReceiptDocflowFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflow& receiptdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* mutable_receiptdocflow();
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* release_receiptdocflow();
  inline void set_allocated_receiptdocflow(::Diadoc::Api::Proto::Docflow::ReceiptDocflow* receiptdocflow);

  // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
  inline bool has_confirmationdocflow() const;
  inline void clear_confirmationdocflow();
  static const int kConfirmationDocflowFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow& confirmationdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* mutable_confirmationdocflow();
  inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* release_confirmationdocflow();
  inline void set_allocated_confirmationdocflow(::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* confirmationdocflow);

  // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
  inline bool has_correctionrequestdocflow() const;
  inline void clear_correctionrequestdocflow();
  static const int kCorrectionRequestDocflowFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow& correctionrequestdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* mutable_correctionrequestdocflow();
  inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* release_correctionrequestdocflow();
  inline void set_allocated_correctionrequestdocflow(::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* correctionrequestdocflow);

  // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
  inline bool has_confirmationtimestamp() const;
  inline void clear_confirmationtimestamp();
  static const int kConfirmationTimestampFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Timestamp& confirmationtimestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_confirmationtimestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_confirmationtimestamp();
  inline void set_allocated_confirmationtimestamp(::Diadoc::Api::Proto::Timestamp* confirmationtimestamp);

  // optional bool IsAmendmentRequested = 6;
  inline bool has_isamendmentrequested() const;
  inline void clear_isamendmentrequested();
  static const int kIsAmendmentRequestedFieldNumber = 6;
  inline bool isamendmentrequested() const;
  inline void set_isamendmentrequested(bool value);

  // optional bool IsRevised = 7;
  inline bool has_isrevised() const;
  inline void clear_isrevised();
  static const int kIsRevisedFieldNumber = 7;
  inline bool isrevised() const;
  inline void set_isrevised(bool value);

  // optional bool IsCorrected = 8;
  inline bool has_iscorrected() const;
  inline void clear_iscorrected();
  static const int kIsCorrectedFieldNumber = 8;
  inline bool iscorrected() const;
  inline void set_iscorrected(bool value);

  // optional bool CanDocumentBeSignedBySender = 9;
  inline bool has_candocumentbesignedbysender() const;
  inline void clear_candocumentbesignedbysender();
  static const int kCanDocumentBeSignedBySenderFieldNumber = 9;
  inline bool candocumentbesignedbysender() const;
  inline void set_candocumentbesignedbysender(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_receiptdocflow();
  inline void clear_has_receiptdocflow();
  inline void set_has_confirmationdocflow();
  inline void clear_has_confirmationdocflow();
  inline void set_has_correctionrequestdocflow();
  inline void clear_has_correctionrequestdocflow();
  inline void set_has_confirmationtimestamp();
  inline void clear_has_confirmationtimestamp();
  inline void set_has_isamendmentrequested();
  inline void clear_has_isamendmentrequested();
  inline void set_has_isrevised();
  inline void clear_has_isrevised();
  inline void set_has_iscorrected();
  inline void clear_has_iscorrected();
  inline void set_has_candocumentbesignedbysender();
  inline void clear_has_candocumentbesignedbysender();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* receiptdocflow_;
  ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* confirmationdocflow_;
  ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* correctionrequestdocflow_;
  ::Diadoc::Api::Proto::Timestamp* confirmationtimestamp_;
  bool isfinished_;
  bool isamendmentrequested_;
  bool isrevised_;
  bool iscorrected_;
  bool candocumentbesignedbysender_;
  friend void  protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fInvoiceDocflow_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fInvoiceDocflow_2eproto();

  void InitAsDefaultInstance();
  static OutboundInvoiceDocflow* default_instance_;
};
// -------------------------------------------------------------------

class InvoiceConfirmationDocflow : public ::google::protobuf::Message {
 public:
  InvoiceConfirmationDocflow();
  virtual ~InvoiceConfirmationDocflow();

  InvoiceConfirmationDocflow(const InvoiceConfirmationDocflow& from);

  inline InvoiceConfirmationDocflow& operator=(const InvoiceConfirmationDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvoiceConfirmationDocflow& default_instance();

  void Swap(InvoiceConfirmationDocflow* other);

  // implements Message ----------------------------------------------

  InvoiceConfirmationDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvoiceConfirmationDocflow& from);
  void MergeFrom(const InvoiceConfirmationDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachment ConfirmationAttachment = 2;
  inline bool has_confirmationattachment() const;
  inline void clear_confirmationattachment();
  static const int kConfirmationAttachmentFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::SignedAttachment& confirmationattachment() const;
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* mutable_confirmationattachment();
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* release_confirmationattachment();
  inline void set_allocated_confirmationattachment(::Diadoc::Api::Proto::Docflow::SignedAttachment* confirmationattachment);

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 3;
  inline bool has_receiptdocflow() const;
  inline void clear_receiptdocflow();
  static const int kReceiptDocflowFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflow& receiptdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* mutable_receiptdocflow();
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* release_receiptdocflow();
  inline void set_allocated_receiptdocflow(::Diadoc::Api::Proto::Docflow::ReceiptDocflow* receiptdocflow);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_confirmationattachment();
  inline void clear_has_confirmationattachment();
  inline void set_has_receiptdocflow();
  inline void clear_has_receiptdocflow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SignedAttachment* confirmationattachment_;
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* receiptdocflow_;
  bool isfinished_;
  friend void  protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fInvoiceDocflow_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fInvoiceDocflow_2eproto();

  void InitAsDefaultInstance();
  static InvoiceConfirmationDocflow* default_instance_;
};
// -------------------------------------------------------------------

class InboundInvoiceReceiptDocflow : public ::google::protobuf::Message {
 public:
  InboundInvoiceReceiptDocflow();
  virtual ~InboundInvoiceReceiptDocflow();

  InboundInvoiceReceiptDocflow(const InboundInvoiceReceiptDocflow& from);

  inline InboundInvoiceReceiptDocflow& operator=(const InboundInvoiceReceiptDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InboundInvoiceReceiptDocflow& default_instance();

  void Swap(InboundInvoiceReceiptDocflow* other);

  // implements Message ----------------------------------------------

  InboundInvoiceReceiptDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InboundInvoiceReceiptDocflow& from);
  void MergeFrom(const InboundInvoiceReceiptDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachment ReceiptAttachment = 2;
  inline bool has_receiptattachment() const;
  inline void clear_receiptattachment();
  static const int kReceiptAttachmentFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::SignedAttachment& receiptattachment() const;
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* mutable_receiptattachment();
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* release_receiptattachment();
  inline void set_allocated_receiptattachment(::Diadoc::Api::Proto::Docflow::SignedAttachment* receiptattachment);

  // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
  inline bool has_confirmationdocflow() const;
  inline void clear_confirmationdocflow();
  static const int kConfirmationDocflowFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow& confirmationdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* mutable_confirmationdocflow();
  inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* release_confirmationdocflow();
  inline void set_allocated_confirmationdocflow(::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* confirmationdocflow);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_receiptattachment();
  inline void clear_has_receiptattachment();
  inline void set_has_confirmationdocflow();
  inline void clear_has_confirmationdocflow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SignedAttachment* receiptattachment_;
  ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* confirmationdocflow_;
  bool isfinished_;
  friend void  protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fInvoiceDocflow_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fInvoiceDocflow_2eproto();

  void InitAsDefaultInstance();
  static InboundInvoiceReceiptDocflow* default_instance_;
};
// -------------------------------------------------------------------

class InvoiceCorrectionRequestDocflow : public ::google::protobuf::Message {
 public:
  InvoiceCorrectionRequestDocflow();
  virtual ~InvoiceCorrectionRequestDocflow();

  InvoiceCorrectionRequestDocflow(const InvoiceCorrectionRequestDocflow& from);

  inline InvoiceCorrectionRequestDocflow& operator=(const InvoiceCorrectionRequestDocflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvoiceCorrectionRequestDocflow& default_instance();

  void Swap(InvoiceCorrectionRequestDocflow* other);

  // implements Message ----------------------------------------------

  InvoiceCorrectionRequestDocflow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvoiceCorrectionRequestDocflow& from);
  void MergeFrom(const InvoiceCorrectionRequestDocflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsFinished = 1;
  inline bool has_isfinished() const;
  inline void clear_isfinished();
  static const int kIsFinishedFieldNumber = 1;
  inline bool isfinished() const;
  inline void set_isfinished(bool value);

  // optional .Diadoc.Api.Proto.Docflow.SignedAttachment CorrectionRequestAttachment = 2;
  inline bool has_correctionrequestattachment() const;
  inline void clear_correctionrequestattachment();
  static const int kCorrectionRequestAttachmentFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::SignedAttachment& correctionrequestattachment() const;
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* mutable_correctionrequestattachment();
  inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* release_correctionrequestattachment();
  inline void set_allocated_correctionrequestattachment(::Diadoc::Api::Proto::Docflow::SignedAttachment* correctionrequestattachment);

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 3;
  inline bool has_receiptdocflow() const;
  inline void clear_receiptdocflow();
  static const int kReceiptDocflowFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflow& receiptdocflow() const;
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* mutable_receiptdocflow();
  inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* release_receiptdocflow();
  inline void set_allocated_receiptdocflow(::Diadoc::Api::Proto::Docflow::ReceiptDocflow* receiptdocflow);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow)
 private:
  inline void set_has_isfinished();
  inline void clear_has_isfinished();
  inline void set_has_correctionrequestattachment();
  inline void clear_has_correctionrequestattachment();
  inline void set_has_receiptdocflow();
  inline void clear_has_receiptdocflow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::SignedAttachment* correctionrequestattachment_;
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* receiptdocflow_;
  bool isfinished_;
  friend void  protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fInvoiceDocflow_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fInvoiceDocflow_2eproto();

  void InitAsDefaultInstance();
  static InvoiceCorrectionRequestDocflow* default_instance_;
};
// ===================================================================


// ===================================================================

// InboundInvoiceDocflow

// optional bool IsFinished = 1;
inline bool InboundInvoiceDocflow::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InboundInvoiceDocflow::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InboundInvoiceDocflow::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InboundInvoiceDocflow::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool InboundInvoiceDocflow::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.IsFinished)
  return isfinished_;
}
inline void InboundInvoiceDocflow::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.IsFinished)
}

// optional .Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow ReceiptDocflow = 2;
inline bool InboundInvoiceDocflow::has_receiptdocflow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InboundInvoiceDocflow::set_has_receiptdocflow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InboundInvoiceDocflow::clear_has_receiptdocflow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InboundInvoiceDocflow::clear_receiptdocflow() {
  if (receiptdocflow_ != NULL) receiptdocflow_->::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow::Clear();
  clear_has_receiptdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow& InboundInvoiceDocflow::receiptdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.ReceiptDocflow)
  return receiptdocflow_ != NULL ? *receiptdocflow_ : *default_instance_->receiptdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* InboundInvoiceDocflow::mutable_receiptdocflow() {
  set_has_receiptdocflow();
  if (receiptdocflow_ == NULL) receiptdocflow_ = new ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.ReceiptDocflow)
  return receiptdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* InboundInvoiceDocflow::release_receiptdocflow() {
  clear_has_receiptdocflow();
  ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* temp = receiptdocflow_;
  receiptdocflow_ = NULL;
  return temp;
}
inline void InboundInvoiceDocflow::set_allocated_receiptdocflow(::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow* receiptdocflow) {
  delete receiptdocflow_;
  receiptdocflow_ = receiptdocflow;
  if (receiptdocflow) {
    set_has_receiptdocflow();
  } else {
    clear_has_receiptdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.ReceiptDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
inline bool InboundInvoiceDocflow::has_confirmationdocflow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InboundInvoiceDocflow::set_has_confirmationdocflow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InboundInvoiceDocflow::clear_has_confirmationdocflow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InboundInvoiceDocflow::clear_confirmationdocflow() {
  if (confirmationdocflow_ != NULL) confirmationdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::Clear();
  clear_has_confirmationdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow& InboundInvoiceDocflow::confirmationdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.ConfirmationDocflow)
  return confirmationdocflow_ != NULL ? *confirmationdocflow_ : *default_instance_->confirmationdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* InboundInvoiceDocflow::mutable_confirmationdocflow() {
  set_has_confirmationdocflow();
  if (confirmationdocflow_ == NULL) confirmationdocflow_ = new ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.ConfirmationDocflow)
  return confirmationdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* InboundInvoiceDocflow::release_confirmationdocflow() {
  clear_has_confirmationdocflow();
  ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* temp = confirmationdocflow_;
  confirmationdocflow_ = NULL;
  return temp;
}
inline void InboundInvoiceDocflow::set_allocated_confirmationdocflow(::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* confirmationdocflow) {
  delete confirmationdocflow_;
  confirmationdocflow_ = confirmationdocflow;
  if (confirmationdocflow) {
    set_has_confirmationdocflow();
  } else {
    clear_has_confirmationdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.ConfirmationDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
inline bool InboundInvoiceDocflow::has_correctionrequestdocflow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InboundInvoiceDocflow::set_has_correctionrequestdocflow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InboundInvoiceDocflow::clear_has_correctionrequestdocflow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InboundInvoiceDocflow::clear_correctionrequestdocflow() {
  if (correctionrequestdocflow_ != NULL) correctionrequestdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::Clear();
  clear_has_correctionrequestdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow& InboundInvoiceDocflow::correctionrequestdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.CorrectionRequestDocflow)
  return correctionrequestdocflow_ != NULL ? *correctionrequestdocflow_ : *default_instance_->correctionrequestdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* InboundInvoiceDocflow::mutable_correctionrequestdocflow() {
  set_has_correctionrequestdocflow();
  if (correctionrequestdocflow_ == NULL) correctionrequestdocflow_ = new ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.CorrectionRequestDocflow)
  return correctionrequestdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* InboundInvoiceDocflow::release_correctionrequestdocflow() {
  clear_has_correctionrequestdocflow();
  ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* temp = correctionrequestdocflow_;
  correctionrequestdocflow_ = NULL;
  return temp;
}
inline void InboundInvoiceDocflow::set_allocated_correctionrequestdocflow(::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* correctionrequestdocflow) {
  delete correctionrequestdocflow_;
  correctionrequestdocflow_ = correctionrequestdocflow;
  if (correctionrequestdocflow) {
    set_has_correctionrequestdocflow();
  } else {
    clear_has_correctionrequestdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.CorrectionRequestDocflow)
}

// optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
inline bool InboundInvoiceDocflow::has_confirmationtimestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InboundInvoiceDocflow::set_has_confirmationtimestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InboundInvoiceDocflow::clear_has_confirmationtimestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InboundInvoiceDocflow::clear_confirmationtimestamp() {
  if (confirmationtimestamp_ != NULL) confirmationtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_confirmationtimestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& InboundInvoiceDocflow::confirmationtimestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.ConfirmationTimestamp)
  return confirmationtimestamp_ != NULL ? *confirmationtimestamp_ : *default_instance_->confirmationtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* InboundInvoiceDocflow::mutable_confirmationtimestamp() {
  set_has_confirmationtimestamp();
  if (confirmationtimestamp_ == NULL) confirmationtimestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.ConfirmationTimestamp)
  return confirmationtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* InboundInvoiceDocflow::release_confirmationtimestamp() {
  clear_has_confirmationtimestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = confirmationtimestamp_;
  confirmationtimestamp_ = NULL;
  return temp;
}
inline void InboundInvoiceDocflow::set_allocated_confirmationtimestamp(::Diadoc::Api::Proto::Timestamp* confirmationtimestamp) {
  delete confirmationtimestamp_;
  confirmationtimestamp_ = confirmationtimestamp;
  if (confirmationtimestamp) {
    set_has_confirmationtimestamp();
  } else {
    clear_has_confirmationtimestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.ConfirmationTimestamp)
}

// optional bool IsAmendmentRequested = 6;
inline bool InboundInvoiceDocflow::has_isamendmentrequested() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InboundInvoiceDocflow::set_has_isamendmentrequested() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InboundInvoiceDocflow::clear_has_isamendmentrequested() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InboundInvoiceDocflow::clear_isamendmentrequested() {
  isamendmentrequested_ = false;
  clear_has_isamendmentrequested();
}
inline bool InboundInvoiceDocflow::isamendmentrequested() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.IsAmendmentRequested)
  return isamendmentrequested_;
}
inline void InboundInvoiceDocflow::set_isamendmentrequested(bool value) {
  set_has_isamendmentrequested();
  isamendmentrequested_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.IsAmendmentRequested)
}

// optional bool IsRevised = 7;
inline bool InboundInvoiceDocflow::has_isrevised() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InboundInvoiceDocflow::set_has_isrevised() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InboundInvoiceDocflow::clear_has_isrevised() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InboundInvoiceDocflow::clear_isrevised() {
  isrevised_ = false;
  clear_has_isrevised();
}
inline bool InboundInvoiceDocflow::isrevised() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.IsRevised)
  return isrevised_;
}
inline void InboundInvoiceDocflow::set_isrevised(bool value) {
  set_has_isrevised();
  isrevised_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.IsRevised)
}

// optional bool IsCorrected = 8;
inline bool InboundInvoiceDocflow::has_iscorrected() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InboundInvoiceDocflow::set_has_iscorrected() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InboundInvoiceDocflow::clear_has_iscorrected() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InboundInvoiceDocflow::clear_iscorrected() {
  iscorrected_ = false;
  clear_has_iscorrected();
}
inline bool InboundInvoiceDocflow::iscorrected() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.IsCorrected)
  return iscorrected_;
}
inline void InboundInvoiceDocflow::set_iscorrected(bool value) {
  set_has_iscorrected();
  iscorrected_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InboundInvoiceDocflow.IsCorrected)
}

// -------------------------------------------------------------------

// OutboundInvoiceDocflow

// optional bool IsFinished = 1;
inline bool OutboundInvoiceDocflow::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutboundInvoiceDocflow::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OutboundInvoiceDocflow::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OutboundInvoiceDocflow::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool OutboundInvoiceDocflow::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.IsFinished)
  return isfinished_;
}
inline void OutboundInvoiceDocflow::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.IsFinished)
}

// optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
inline bool OutboundInvoiceDocflow::has_receiptdocflow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OutboundInvoiceDocflow::set_has_receiptdocflow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OutboundInvoiceDocflow::clear_has_receiptdocflow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OutboundInvoiceDocflow::clear_receiptdocflow() {
  if (receiptdocflow_ != NULL) receiptdocflow_->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::Clear();
  clear_has_receiptdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflow& OutboundInvoiceDocflow::receiptdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.ReceiptDocflow)
  return receiptdocflow_ != NULL ? *receiptdocflow_ : *default_instance_->receiptdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* OutboundInvoiceDocflow::mutable_receiptdocflow() {
  set_has_receiptdocflow();
  if (receiptdocflow_ == NULL) receiptdocflow_ = new ::Diadoc::Api::Proto::Docflow::ReceiptDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.ReceiptDocflow)
  return receiptdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* OutboundInvoiceDocflow::release_receiptdocflow() {
  clear_has_receiptdocflow();
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* temp = receiptdocflow_;
  receiptdocflow_ = NULL;
  return temp;
}
inline void OutboundInvoiceDocflow::set_allocated_receiptdocflow(::Diadoc::Api::Proto::Docflow::ReceiptDocflow* receiptdocflow) {
  delete receiptdocflow_;
  receiptdocflow_ = receiptdocflow;
  if (receiptdocflow) {
    set_has_receiptdocflow();
  } else {
    clear_has_receiptdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.ReceiptDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
inline bool OutboundInvoiceDocflow::has_confirmationdocflow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OutboundInvoiceDocflow::set_has_confirmationdocflow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OutboundInvoiceDocflow::clear_has_confirmationdocflow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OutboundInvoiceDocflow::clear_confirmationdocflow() {
  if (confirmationdocflow_ != NULL) confirmationdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::Clear();
  clear_has_confirmationdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow& OutboundInvoiceDocflow::confirmationdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.ConfirmationDocflow)
  return confirmationdocflow_ != NULL ? *confirmationdocflow_ : *default_instance_->confirmationdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* OutboundInvoiceDocflow::mutable_confirmationdocflow() {
  set_has_confirmationdocflow();
  if (confirmationdocflow_ == NULL) confirmationdocflow_ = new ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.ConfirmationDocflow)
  return confirmationdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* OutboundInvoiceDocflow::release_confirmationdocflow() {
  clear_has_confirmationdocflow();
  ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* temp = confirmationdocflow_;
  confirmationdocflow_ = NULL;
  return temp;
}
inline void OutboundInvoiceDocflow::set_allocated_confirmationdocflow(::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* confirmationdocflow) {
  delete confirmationdocflow_;
  confirmationdocflow_ = confirmationdocflow;
  if (confirmationdocflow) {
    set_has_confirmationdocflow();
  } else {
    clear_has_confirmationdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.ConfirmationDocflow)
}

// optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
inline bool OutboundInvoiceDocflow::has_correctionrequestdocflow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OutboundInvoiceDocflow::set_has_correctionrequestdocflow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OutboundInvoiceDocflow::clear_has_correctionrequestdocflow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OutboundInvoiceDocflow::clear_correctionrequestdocflow() {
  if (correctionrequestdocflow_ != NULL) correctionrequestdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::Clear();
  clear_has_correctionrequestdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow& OutboundInvoiceDocflow::correctionrequestdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.CorrectionRequestDocflow)
  return correctionrequestdocflow_ != NULL ? *correctionrequestdocflow_ : *default_instance_->correctionrequestdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* OutboundInvoiceDocflow::mutable_correctionrequestdocflow() {
  set_has_correctionrequestdocflow();
  if (correctionrequestdocflow_ == NULL) correctionrequestdocflow_ = new ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.CorrectionRequestDocflow)
  return correctionrequestdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* OutboundInvoiceDocflow::release_correctionrequestdocflow() {
  clear_has_correctionrequestdocflow();
  ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* temp = correctionrequestdocflow_;
  correctionrequestdocflow_ = NULL;
  return temp;
}
inline void OutboundInvoiceDocflow::set_allocated_correctionrequestdocflow(::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow* correctionrequestdocflow) {
  delete correctionrequestdocflow_;
  correctionrequestdocflow_ = correctionrequestdocflow;
  if (correctionrequestdocflow) {
    set_has_correctionrequestdocflow();
  } else {
    clear_has_correctionrequestdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.CorrectionRequestDocflow)
}

// optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
inline bool OutboundInvoiceDocflow::has_confirmationtimestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OutboundInvoiceDocflow::set_has_confirmationtimestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OutboundInvoiceDocflow::clear_has_confirmationtimestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OutboundInvoiceDocflow::clear_confirmationtimestamp() {
  if (confirmationtimestamp_ != NULL) confirmationtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_confirmationtimestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& OutboundInvoiceDocflow::confirmationtimestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.ConfirmationTimestamp)
  return confirmationtimestamp_ != NULL ? *confirmationtimestamp_ : *default_instance_->confirmationtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* OutboundInvoiceDocflow::mutable_confirmationtimestamp() {
  set_has_confirmationtimestamp();
  if (confirmationtimestamp_ == NULL) confirmationtimestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.ConfirmationTimestamp)
  return confirmationtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* OutboundInvoiceDocflow::release_confirmationtimestamp() {
  clear_has_confirmationtimestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = confirmationtimestamp_;
  confirmationtimestamp_ = NULL;
  return temp;
}
inline void OutboundInvoiceDocflow::set_allocated_confirmationtimestamp(::Diadoc::Api::Proto::Timestamp* confirmationtimestamp) {
  delete confirmationtimestamp_;
  confirmationtimestamp_ = confirmationtimestamp;
  if (confirmationtimestamp) {
    set_has_confirmationtimestamp();
  } else {
    clear_has_confirmationtimestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.ConfirmationTimestamp)
}

// optional bool IsAmendmentRequested = 6;
inline bool OutboundInvoiceDocflow::has_isamendmentrequested() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OutboundInvoiceDocflow::set_has_isamendmentrequested() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OutboundInvoiceDocflow::clear_has_isamendmentrequested() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OutboundInvoiceDocflow::clear_isamendmentrequested() {
  isamendmentrequested_ = false;
  clear_has_isamendmentrequested();
}
inline bool OutboundInvoiceDocflow::isamendmentrequested() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.IsAmendmentRequested)
  return isamendmentrequested_;
}
inline void OutboundInvoiceDocflow::set_isamendmentrequested(bool value) {
  set_has_isamendmentrequested();
  isamendmentrequested_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.IsAmendmentRequested)
}

// optional bool IsRevised = 7;
inline bool OutboundInvoiceDocflow::has_isrevised() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OutboundInvoiceDocflow::set_has_isrevised() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OutboundInvoiceDocflow::clear_has_isrevised() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OutboundInvoiceDocflow::clear_isrevised() {
  isrevised_ = false;
  clear_has_isrevised();
}
inline bool OutboundInvoiceDocflow::isrevised() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.IsRevised)
  return isrevised_;
}
inline void OutboundInvoiceDocflow::set_isrevised(bool value) {
  set_has_isrevised();
  isrevised_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.IsRevised)
}

// optional bool IsCorrected = 8;
inline bool OutboundInvoiceDocflow::has_iscorrected() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OutboundInvoiceDocflow::set_has_iscorrected() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OutboundInvoiceDocflow::clear_has_iscorrected() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OutboundInvoiceDocflow::clear_iscorrected() {
  iscorrected_ = false;
  clear_has_iscorrected();
}
inline bool OutboundInvoiceDocflow::iscorrected() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.IsCorrected)
  return iscorrected_;
}
inline void OutboundInvoiceDocflow::set_iscorrected(bool value) {
  set_has_iscorrected();
  iscorrected_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.IsCorrected)
}

// optional bool CanDocumentBeSignedBySender = 9;
inline bool OutboundInvoiceDocflow::has_candocumentbesignedbysender() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OutboundInvoiceDocflow::set_has_candocumentbesignedbysender() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OutboundInvoiceDocflow::clear_has_candocumentbesignedbysender() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OutboundInvoiceDocflow::clear_candocumentbesignedbysender() {
  candocumentbesignedbysender_ = false;
  clear_has_candocumentbesignedbysender();
}
inline bool OutboundInvoiceDocflow::candocumentbesignedbysender() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.CanDocumentBeSignedBySender)
  return candocumentbesignedbysender_;
}
inline void OutboundInvoiceDocflow::set_candocumentbesignedbysender(bool value) {
  set_has_candocumentbesignedbysender();
  candocumentbesignedbysender_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.OutboundInvoiceDocflow.CanDocumentBeSignedBySender)
}

// -------------------------------------------------------------------

// InvoiceConfirmationDocflow

// optional bool IsFinished = 1;
inline bool InvoiceConfirmationDocflow::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InvoiceConfirmationDocflow::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InvoiceConfirmationDocflow::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InvoiceConfirmationDocflow::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool InvoiceConfirmationDocflow::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow.IsFinished)
  return isfinished_;
}
inline void InvoiceConfirmationDocflow::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow.IsFinished)
}

// optional .Diadoc.Api.Proto.Docflow.SignedAttachment ConfirmationAttachment = 2;
inline bool InvoiceConfirmationDocflow::has_confirmationattachment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InvoiceConfirmationDocflow::set_has_confirmationattachment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InvoiceConfirmationDocflow::clear_has_confirmationattachment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InvoiceConfirmationDocflow::clear_confirmationattachment() {
  if (confirmationattachment_ != NULL) confirmationattachment_->::Diadoc::Api::Proto::Docflow::SignedAttachment::Clear();
  clear_has_confirmationattachment();
}
inline const ::Diadoc::Api::Proto::Docflow::SignedAttachment& InvoiceConfirmationDocflow::confirmationattachment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow.ConfirmationAttachment)
  return confirmationattachment_ != NULL ? *confirmationattachment_ : *default_instance_->confirmationattachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* InvoiceConfirmationDocflow::mutable_confirmationattachment() {
  set_has_confirmationattachment();
  if (confirmationattachment_ == NULL) confirmationattachment_ = new ::Diadoc::Api::Proto::Docflow::SignedAttachment;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow.ConfirmationAttachment)
  return confirmationattachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* InvoiceConfirmationDocflow::release_confirmationattachment() {
  clear_has_confirmationattachment();
  ::Diadoc::Api::Proto::Docflow::SignedAttachment* temp = confirmationattachment_;
  confirmationattachment_ = NULL;
  return temp;
}
inline void InvoiceConfirmationDocflow::set_allocated_confirmationattachment(::Diadoc::Api::Proto::Docflow::SignedAttachment* confirmationattachment) {
  delete confirmationattachment_;
  confirmationattachment_ = confirmationattachment;
  if (confirmationattachment) {
    set_has_confirmationattachment();
  } else {
    clear_has_confirmationattachment();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow.ConfirmationAttachment)
}

// optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 3;
inline bool InvoiceConfirmationDocflow::has_receiptdocflow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InvoiceConfirmationDocflow::set_has_receiptdocflow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InvoiceConfirmationDocflow::clear_has_receiptdocflow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InvoiceConfirmationDocflow::clear_receiptdocflow() {
  if (receiptdocflow_ != NULL) receiptdocflow_->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::Clear();
  clear_has_receiptdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflow& InvoiceConfirmationDocflow::receiptdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow.ReceiptDocflow)
  return receiptdocflow_ != NULL ? *receiptdocflow_ : *default_instance_->receiptdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* InvoiceConfirmationDocflow::mutable_receiptdocflow() {
  set_has_receiptdocflow();
  if (receiptdocflow_ == NULL) receiptdocflow_ = new ::Diadoc::Api::Proto::Docflow::ReceiptDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow.ReceiptDocflow)
  return receiptdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* InvoiceConfirmationDocflow::release_receiptdocflow() {
  clear_has_receiptdocflow();
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* temp = receiptdocflow_;
  receiptdocflow_ = NULL;
  return temp;
}
inline void InvoiceConfirmationDocflow::set_allocated_receiptdocflow(::Diadoc::Api::Proto::Docflow::ReceiptDocflow* receiptdocflow) {
  delete receiptdocflow_;
  receiptdocflow_ = receiptdocflow;
  if (receiptdocflow) {
    set_has_receiptdocflow();
  } else {
    clear_has_receiptdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow.ReceiptDocflow)
}

// -------------------------------------------------------------------

// InboundInvoiceReceiptDocflow

// optional bool IsFinished = 1;
inline bool InboundInvoiceReceiptDocflow::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InboundInvoiceReceiptDocflow::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InboundInvoiceReceiptDocflow::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InboundInvoiceReceiptDocflow::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool InboundInvoiceReceiptDocflow::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow.IsFinished)
  return isfinished_;
}
inline void InboundInvoiceReceiptDocflow::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow.IsFinished)
}

// optional .Diadoc.Api.Proto.Docflow.SignedAttachment ReceiptAttachment = 2;
inline bool InboundInvoiceReceiptDocflow::has_receiptattachment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InboundInvoiceReceiptDocflow::set_has_receiptattachment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InboundInvoiceReceiptDocflow::clear_has_receiptattachment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InboundInvoiceReceiptDocflow::clear_receiptattachment() {
  if (receiptattachment_ != NULL) receiptattachment_->::Diadoc::Api::Proto::Docflow::SignedAttachment::Clear();
  clear_has_receiptattachment();
}
inline const ::Diadoc::Api::Proto::Docflow::SignedAttachment& InboundInvoiceReceiptDocflow::receiptattachment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow.ReceiptAttachment)
  return receiptattachment_ != NULL ? *receiptattachment_ : *default_instance_->receiptattachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* InboundInvoiceReceiptDocflow::mutable_receiptattachment() {
  set_has_receiptattachment();
  if (receiptattachment_ == NULL) receiptattachment_ = new ::Diadoc::Api::Proto::Docflow::SignedAttachment;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow.ReceiptAttachment)
  return receiptattachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* InboundInvoiceReceiptDocflow::release_receiptattachment() {
  clear_has_receiptattachment();
  ::Diadoc::Api::Proto::Docflow::SignedAttachment* temp = receiptattachment_;
  receiptattachment_ = NULL;
  return temp;
}
inline void InboundInvoiceReceiptDocflow::set_allocated_receiptattachment(::Diadoc::Api::Proto::Docflow::SignedAttachment* receiptattachment) {
  delete receiptattachment_;
  receiptattachment_ = receiptattachment;
  if (receiptattachment) {
    set_has_receiptattachment();
  } else {
    clear_has_receiptattachment();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow.ReceiptAttachment)
}

// optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
inline bool InboundInvoiceReceiptDocflow::has_confirmationdocflow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InboundInvoiceReceiptDocflow::set_has_confirmationdocflow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InboundInvoiceReceiptDocflow::clear_has_confirmationdocflow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InboundInvoiceReceiptDocflow::clear_confirmationdocflow() {
  if (confirmationdocflow_ != NULL) confirmationdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::Clear();
  clear_has_confirmationdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow& InboundInvoiceReceiptDocflow::confirmationdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow.ConfirmationDocflow)
  return confirmationdocflow_ != NULL ? *confirmationdocflow_ : *default_instance_->confirmationdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* InboundInvoiceReceiptDocflow::mutable_confirmationdocflow() {
  set_has_confirmationdocflow();
  if (confirmationdocflow_ == NULL) confirmationdocflow_ = new ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow.ConfirmationDocflow)
  return confirmationdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* InboundInvoiceReceiptDocflow::release_confirmationdocflow() {
  clear_has_confirmationdocflow();
  ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* temp = confirmationdocflow_;
  confirmationdocflow_ = NULL;
  return temp;
}
inline void InboundInvoiceReceiptDocflow::set_allocated_confirmationdocflow(::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow* confirmationdocflow) {
  delete confirmationdocflow_;
  confirmationdocflow_ = confirmationdocflow;
  if (confirmationdocflow) {
    set_has_confirmationdocflow();
  } else {
    clear_has_confirmationdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow.ConfirmationDocflow)
}

// -------------------------------------------------------------------

// InvoiceCorrectionRequestDocflow

// optional bool IsFinished = 1;
inline bool InvoiceCorrectionRequestDocflow::has_isfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InvoiceCorrectionRequestDocflow::set_has_isfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InvoiceCorrectionRequestDocflow::clear_has_isfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InvoiceCorrectionRequestDocflow::clear_isfinished() {
  isfinished_ = false;
  clear_has_isfinished();
}
inline bool InvoiceCorrectionRequestDocflow::isfinished() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow.IsFinished)
  return isfinished_;
}
inline void InvoiceCorrectionRequestDocflow::set_isfinished(bool value) {
  set_has_isfinished();
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow.IsFinished)
}

// optional .Diadoc.Api.Proto.Docflow.SignedAttachment CorrectionRequestAttachment = 2;
inline bool InvoiceCorrectionRequestDocflow::has_correctionrequestattachment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InvoiceCorrectionRequestDocflow::set_has_correctionrequestattachment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InvoiceCorrectionRequestDocflow::clear_has_correctionrequestattachment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InvoiceCorrectionRequestDocflow::clear_correctionrequestattachment() {
  if (correctionrequestattachment_ != NULL) correctionrequestattachment_->::Diadoc::Api::Proto::Docflow::SignedAttachment::Clear();
  clear_has_correctionrequestattachment();
}
inline const ::Diadoc::Api::Proto::Docflow::SignedAttachment& InvoiceCorrectionRequestDocflow::correctionrequestattachment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow.CorrectionRequestAttachment)
  return correctionrequestattachment_ != NULL ? *correctionrequestattachment_ : *default_instance_->correctionrequestattachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* InvoiceCorrectionRequestDocflow::mutable_correctionrequestattachment() {
  set_has_correctionrequestattachment();
  if (correctionrequestattachment_ == NULL) correctionrequestattachment_ = new ::Diadoc::Api::Proto::Docflow::SignedAttachment;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow.CorrectionRequestAttachment)
  return correctionrequestattachment_;
}
inline ::Diadoc::Api::Proto::Docflow::SignedAttachment* InvoiceCorrectionRequestDocflow::release_correctionrequestattachment() {
  clear_has_correctionrequestattachment();
  ::Diadoc::Api::Proto::Docflow::SignedAttachment* temp = correctionrequestattachment_;
  correctionrequestattachment_ = NULL;
  return temp;
}
inline void InvoiceCorrectionRequestDocflow::set_allocated_correctionrequestattachment(::Diadoc::Api::Proto::Docflow::SignedAttachment* correctionrequestattachment) {
  delete correctionrequestattachment_;
  correctionrequestattachment_ = correctionrequestattachment;
  if (correctionrequestattachment) {
    set_has_correctionrequestattachment();
  } else {
    clear_has_correctionrequestattachment();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow.CorrectionRequestAttachment)
}

// optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 3;
inline bool InvoiceCorrectionRequestDocflow::has_receiptdocflow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InvoiceCorrectionRequestDocflow::set_has_receiptdocflow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InvoiceCorrectionRequestDocflow::clear_has_receiptdocflow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InvoiceCorrectionRequestDocflow::clear_receiptdocflow() {
  if (receiptdocflow_ != NULL) receiptdocflow_->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::Clear();
  clear_has_receiptdocflow();
}
inline const ::Diadoc::Api::Proto::Docflow::ReceiptDocflow& InvoiceCorrectionRequestDocflow::receiptdocflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow.ReceiptDocflow)
  return receiptdocflow_ != NULL ? *receiptdocflow_ : *default_instance_->receiptdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* InvoiceCorrectionRequestDocflow::mutable_receiptdocflow() {
  set_has_receiptdocflow();
  if (receiptdocflow_ == NULL) receiptdocflow_ = new ::Diadoc::Api::Proto::Docflow::ReceiptDocflow;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow.ReceiptDocflow)
  return receiptdocflow_;
}
inline ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* InvoiceCorrectionRequestDocflow::release_receiptdocflow() {
  clear_has_receiptdocflow();
  ::Diadoc::Api::Proto::Docflow::ReceiptDocflow* temp = receiptdocflow_;
  receiptdocflow_ = NULL;
  return temp;
}
inline void InvoiceCorrectionRequestDocflow::set_allocated_receiptdocflow(::Diadoc::Api::Proto::Docflow::ReceiptDocflow* receiptdocflow) {
  delete receiptdocflow_;
  receiptdocflow_ = receiptdocflow;
  if (receiptdocflow) {
    set_has_receiptdocflow();
  } else {
    clear_has_receiptdocflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow.ReceiptDocflow)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Docflow_2fInvoiceDocflow_2eproto__INCLUDED
