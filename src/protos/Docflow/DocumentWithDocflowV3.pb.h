// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/DocumentWithDocflowV3.proto

#ifndef PROTOBUF_Docflow_2fDocumentWithDocflowV3_2eproto__INCLUDED
#define PROTOBUF_Docflow_2fDocumentWithDocflowV3_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "DocumentId.pb.h"
#include "Timestamp.pb.h"
#include "Docflow/DocumentInfoV3.pb.h"
#include "Docflow/DocflowV3.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Docflow_2fDocumentWithDocflowV3_2eproto();
void protobuf_AssignDesc_Docflow_2fDocumentWithDocflowV3_2eproto();
void protobuf_ShutdownFile_Docflow_2fDocumentWithDocflowV3_2eproto();

class DocumentWithDocflowV3;
class LastEvent;

// ===================================================================

class DocumentWithDocflowV3 : public ::google::protobuf::Message {
 public:
  DocumentWithDocflowV3();
  virtual ~DocumentWithDocflowV3();

  DocumentWithDocflowV3(const DocumentWithDocflowV3& from);

  inline DocumentWithDocflowV3& operator=(const DocumentWithDocflowV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentWithDocflowV3& default_instance();

  void Swap(DocumentWithDocflowV3* other);

  // implements Message ----------------------------------------------

  DocumentWithDocflowV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentWithDocflowV3& from);
  void MergeFrom(const DocumentWithDocflowV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
  inline bool has_documentid() const;
  inline void clear_documentid();
  static const int kDocumentIdFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::DocumentId& documentid() const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_documentid();
  inline ::Diadoc::Api::Proto::DocumentId* release_documentid();
  inline void set_allocated_documentid(::Diadoc::Api::Proto::DocumentId* documentid);

  // required .Diadoc.Api.Proto.Docflow.LastEvent LastEvent = 2;
  inline bool has_lastevent() const;
  inline void clear_lastevent();
  static const int kLastEventFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::LastEvent& lastevent() const;
  inline ::Diadoc::Api::Proto::Docflow::LastEvent* mutable_lastevent();
  inline ::Diadoc::Api::Proto::Docflow::LastEvent* release_lastevent();
  inline void set_allocated_lastevent(::Diadoc::Api::Proto::Docflow::LastEvent* lastevent);

  // required .Diadoc.Api.Proto.Docflow.DocumentInfoV3 DocumentInfo = 3;
  inline bool has_documentinfo() const;
  inline void clear_documentinfo();
  static const int kDocumentInfoFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentInfoV3& documentinfo() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentInfoV3* mutable_documentinfo();
  inline ::Diadoc::Api::Proto::Docflow::DocumentInfoV3* release_documentinfo();
  inline void set_allocated_documentinfo(::Diadoc::Api::Proto::Docflow::DocumentInfoV3* documentinfo);

  // required .Diadoc.Api.Proto.Docflow.DocflowV3 Docflow = 4;
  inline bool has_docflow() const;
  inline void clear_docflow();
  static const int kDocflowFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Docflow::DocflowV3& docflow() const;
  inline ::Diadoc::Api::Proto::Docflow::DocflowV3* mutable_docflow();
  inline ::Diadoc::Api::Proto::Docflow::DocflowV3* release_docflow();
  inline void set_allocated_docflow(::Diadoc::Api::Proto::Docflow::DocflowV3* docflow);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3)
 private:
  inline void set_has_documentid();
  inline void clear_has_documentid();
  inline void set_has_lastevent();
  inline void clear_has_lastevent();
  inline void set_has_documentinfo();
  inline void clear_has_documentinfo();
  inline void set_has_docflow();
  inline void clear_has_docflow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::DocumentId* documentid_;
  ::Diadoc::Api::Proto::Docflow::LastEvent* lastevent_;
  ::Diadoc::Api::Proto::Docflow::DocumentInfoV3* documentinfo_;
  ::Diadoc::Api::Proto::Docflow::DocflowV3* docflow_;
  friend void  protobuf_AddDesc_Docflow_2fDocumentWithDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocumentWithDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocumentWithDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static DocumentWithDocflowV3* default_instance_;
};
// -------------------------------------------------------------------

class LastEvent : public ::google::protobuf::Message {
 public:
  LastEvent();
  virtual ~LastEvent();

  LastEvent(const LastEvent& from);

  inline LastEvent& operator=(const LastEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LastEvent& default_instance();

  void Swap(LastEvent* other);

  // implements Message ----------------------------------------------

  LastEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LastEvent& from);
  void MergeFrom(const LastEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string EventId = 1;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 1;
  inline const ::std::string& eventid() const;
  inline void set_eventid(const ::std::string& value);
  inline void set_eventid(const char* value);
  inline void set_eventid(const char* value, size_t size);
  inline ::std::string* mutable_eventid();
  inline ::std::string* release_eventid();
  inline void set_allocated_eventid(::std::string* eventid);

  // required .Diadoc.Api.Proto.Timestamp Timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Timestamp& timestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_timestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_timestamp();
  inline void set_allocated_timestamp(::Diadoc::Api::Proto::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.LastEvent)
 private:
  inline void set_has_eventid();
  inline void clear_has_eventid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* eventid_;
  ::Diadoc::Api::Proto::Timestamp* timestamp_;
  friend void  protobuf_AddDesc_Docflow_2fDocumentWithDocflowV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocumentWithDocflowV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocumentWithDocflowV3_2eproto();

  void InitAsDefaultInstance();
  static LastEvent* default_instance_;
};
// ===================================================================


// ===================================================================

// DocumentWithDocflowV3

// required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
inline bool DocumentWithDocflowV3::has_documentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentWithDocflowV3::set_has_documentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentWithDocflowV3::clear_has_documentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentWithDocflowV3::clear_documentid() {
  if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
  clear_has_documentid();
}
inline const ::Diadoc::Api::Proto::DocumentId& DocumentWithDocflowV3::documentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3.DocumentId)
  return documentid_ != NULL ? *documentid_ : *default_instance_->documentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentWithDocflowV3::mutable_documentid() {
  set_has_documentid();
  if (documentid_ == NULL) documentid_ = new ::Diadoc::Api::Proto::DocumentId;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3.DocumentId)
  return documentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentWithDocflowV3::release_documentid() {
  clear_has_documentid();
  ::Diadoc::Api::Proto::DocumentId* temp = documentid_;
  documentid_ = NULL;
  return temp;
}
inline void DocumentWithDocflowV3::set_allocated_documentid(::Diadoc::Api::Proto::DocumentId* documentid) {
  delete documentid_;
  documentid_ = documentid;
  if (documentid) {
    set_has_documentid();
  } else {
    clear_has_documentid();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3.DocumentId)
}

// required .Diadoc.Api.Proto.Docflow.LastEvent LastEvent = 2;
inline bool DocumentWithDocflowV3::has_lastevent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentWithDocflowV3::set_has_lastevent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentWithDocflowV3::clear_has_lastevent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentWithDocflowV3::clear_lastevent() {
  if (lastevent_ != NULL) lastevent_->::Diadoc::Api::Proto::Docflow::LastEvent::Clear();
  clear_has_lastevent();
}
inline const ::Diadoc::Api::Proto::Docflow::LastEvent& DocumentWithDocflowV3::lastevent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3.LastEvent)
  return lastevent_ != NULL ? *lastevent_ : *default_instance_->lastevent_;
}
inline ::Diadoc::Api::Proto::Docflow::LastEvent* DocumentWithDocflowV3::mutable_lastevent() {
  set_has_lastevent();
  if (lastevent_ == NULL) lastevent_ = new ::Diadoc::Api::Proto::Docflow::LastEvent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3.LastEvent)
  return lastevent_;
}
inline ::Diadoc::Api::Proto::Docflow::LastEvent* DocumentWithDocflowV3::release_lastevent() {
  clear_has_lastevent();
  ::Diadoc::Api::Proto::Docflow::LastEvent* temp = lastevent_;
  lastevent_ = NULL;
  return temp;
}
inline void DocumentWithDocflowV3::set_allocated_lastevent(::Diadoc::Api::Proto::Docflow::LastEvent* lastevent) {
  delete lastevent_;
  lastevent_ = lastevent;
  if (lastevent) {
    set_has_lastevent();
  } else {
    clear_has_lastevent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3.LastEvent)
}

// required .Diadoc.Api.Proto.Docflow.DocumentInfoV3 DocumentInfo = 3;
inline bool DocumentWithDocflowV3::has_documentinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentWithDocflowV3::set_has_documentinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentWithDocflowV3::clear_has_documentinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentWithDocflowV3::clear_documentinfo() {
  if (documentinfo_ != NULL) documentinfo_->::Diadoc::Api::Proto::Docflow::DocumentInfoV3::Clear();
  clear_has_documentinfo();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentInfoV3& DocumentWithDocflowV3::documentinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3.DocumentInfo)
  return documentinfo_ != NULL ? *documentinfo_ : *default_instance_->documentinfo_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentInfoV3* DocumentWithDocflowV3::mutable_documentinfo() {
  set_has_documentinfo();
  if (documentinfo_ == NULL) documentinfo_ = new ::Diadoc::Api::Proto::Docflow::DocumentInfoV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3.DocumentInfo)
  return documentinfo_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentInfoV3* DocumentWithDocflowV3::release_documentinfo() {
  clear_has_documentinfo();
  ::Diadoc::Api::Proto::Docflow::DocumentInfoV3* temp = documentinfo_;
  documentinfo_ = NULL;
  return temp;
}
inline void DocumentWithDocflowV3::set_allocated_documentinfo(::Diadoc::Api::Proto::Docflow::DocumentInfoV3* documentinfo) {
  delete documentinfo_;
  documentinfo_ = documentinfo;
  if (documentinfo) {
    set_has_documentinfo();
  } else {
    clear_has_documentinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3.DocumentInfo)
}

// required .Diadoc.Api.Proto.Docflow.DocflowV3 Docflow = 4;
inline bool DocumentWithDocflowV3::has_docflow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentWithDocflowV3::set_has_docflow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentWithDocflowV3::clear_has_docflow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentWithDocflowV3::clear_docflow() {
  if (docflow_ != NULL) docflow_->::Diadoc::Api::Proto::Docflow::DocflowV3::Clear();
  clear_has_docflow();
}
inline const ::Diadoc::Api::Proto::Docflow::DocflowV3& DocumentWithDocflowV3::docflow() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3.Docflow)
  return docflow_ != NULL ? *docflow_ : *default_instance_->docflow_;
}
inline ::Diadoc::Api::Proto::Docflow::DocflowV3* DocumentWithDocflowV3::mutable_docflow() {
  set_has_docflow();
  if (docflow_ == NULL) docflow_ = new ::Diadoc::Api::Proto::Docflow::DocflowV3;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3.Docflow)
  return docflow_;
}
inline ::Diadoc::Api::Proto::Docflow::DocflowV3* DocumentWithDocflowV3::release_docflow() {
  clear_has_docflow();
  ::Diadoc::Api::Proto::Docflow::DocflowV3* temp = docflow_;
  docflow_ = NULL;
  return temp;
}
inline void DocumentWithDocflowV3::set_allocated_docflow(::Diadoc::Api::Proto::Docflow::DocflowV3* docflow) {
  delete docflow_;
  docflow_ = docflow;
  if (docflow) {
    set_has_docflow();
  } else {
    clear_has_docflow();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentWithDocflowV3.Docflow)
}

// -------------------------------------------------------------------

// LastEvent

// required string EventId = 1;
inline bool LastEvent::has_eventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LastEvent::set_has_eventid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LastEvent::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LastEvent::clear_eventid() {
  if (eventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventid_->clear();
  }
  clear_has_eventid();
}
inline const ::std::string& LastEvent::eventid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.LastEvent.EventId)
  return *eventid_;
}
inline void LastEvent::set_eventid(const ::std::string& value) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.LastEvent.EventId)
}
inline void LastEvent::set_eventid(const char* value) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.LastEvent.EventId)
}
inline void LastEvent::set_eventid(const char* value, size_t size) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.LastEvent.EventId)
}
inline ::std::string* LastEvent::mutable_eventid() {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.LastEvent.EventId)
  return eventid_;
}
inline ::std::string* LastEvent::release_eventid() {
  clear_has_eventid();
  if (eventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = eventid_;
    eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LastEvent::set_allocated_eventid(::std::string* eventid) {
  if (eventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eventid_;
  }
  if (eventid) {
    set_has_eventid();
    eventid_ = eventid;
  } else {
    clear_has_eventid();
    eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.LastEvent.EventId)
}

// required .Diadoc.Api.Proto.Timestamp Timestamp = 2;
inline bool LastEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LastEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LastEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LastEvent::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& LastEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.LastEvent.Timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* LastEvent::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.LastEvent.Timestamp)
  return timestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* LastEvent::release_timestamp() {
  clear_has_timestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void LastEvent::set_allocated_timestamp(::Diadoc::Api::Proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.LastEvent.Timestamp)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Docflow_2fDocumentWithDocflowV3_2eproto__INCLUDED
