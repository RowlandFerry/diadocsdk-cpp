// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/DocumentInfoV3.proto

#ifndef PROTOBUF_Docflow_2fDocumentInfoV3_2eproto__INCLUDED
#define PROTOBUF_Docflow_2fDocumentInfoV3_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "FullVersion.pb.h"
#include "DocumentId.pb.h"
#include "Timestamp.pb.h"
#include "Documents/Document.pb.h"
#include "LockMode.pb.h"
#include "ForwardDocumentEvent.pb.h"
#include "DocumentDirection.pb.h"
#include "Events/DiadocMessage-PostApi.pb.h"
#include "CustomDataItem.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Docflow_2fDocumentInfoV3_2eproto();
void protobuf_AssignDesc_Docflow_2fDocumentInfoV3_2eproto();
void protobuf_ShutdownFile_Docflow_2fDocumentInfoV3_2eproto();

class DocumentInfoV3;
class DocumentParticipants;
class DocumentParticipant;
class DocumentLinks;
class PacketInfo;
class DocumentLetterInfo;
class DocumentDraftInfo;
class DocumentTemplateInfo;
class TemplateTransformationInfo;
class TemplateRefusalInfo;

// ===================================================================

class DocumentInfoV3 : public ::google::protobuf::Message {
 public:
  DocumentInfoV3();
  virtual ~DocumentInfoV3();

  DocumentInfoV3(const DocumentInfoV3& from);

  inline DocumentInfoV3& operator=(const DocumentInfoV3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentInfoV3& default_instance();

  void Swap(DocumentInfoV3* other);

  // implements Message ----------------------------------------------

  DocumentInfoV3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentInfoV3& from);
  void MergeFrom(const DocumentInfoV3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.FullVersion FullVersion = 1;
  inline bool has_fullversion() const;
  inline void clear_fullversion();
  static const int kFullVersionFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::FullVersion& fullversion() const;
  inline ::Diadoc::Api::Proto::FullVersion* mutable_fullversion();
  inline ::Diadoc::Api::Proto::FullVersion* release_fullversion();
  inline void set_allocated_fullversion(::Diadoc::Api::Proto::FullVersion* fullversion);

  // required .Diadoc.Api.Proto.Documents.MessageType MessageType = 2;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessageTypeFieldNumber = 2;
  inline ::Diadoc::Api::Proto::Documents::MessageType messagetype() const;
  inline void set_messagetype(::Diadoc::Api::Proto::Documents::MessageType value);

  // required int32 WorkflowId = 3;
  inline bool has_workflowid() const;
  inline void clear_workflowid();
  static const int kWorkflowIdFieldNumber = 3;
  inline ::google::protobuf::int32 workflowid() const;
  inline void set_workflowid(::google::protobuf::int32 value);

  // required .Diadoc.Api.Proto.Docflow.DocumentParticipants Participants = 4;
  inline bool has_participants() const;
  inline void clear_participants();
  static const int kParticipantsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentParticipants& participants() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentParticipants* mutable_participants();
  inline ::Diadoc::Api::Proto::Docflow::DocumentParticipants* release_participants();
  inline void set_allocated_participants(::Diadoc::Api::Proto::Docflow::DocumentParticipants* participants);

  // required .Diadoc.Api.Proto.DocumentDirection DocumentDirection = 5;
  inline bool has_documentdirection() const;
  inline void clear_documentdirection();
  static const int kDocumentDirectionFieldNumber = 5;
  inline ::Diadoc::Api::Proto::DocumentDirection documentdirection() const;
  inline void set_documentdirection(::Diadoc::Api::Proto::DocumentDirection value);

  // required string DepartmentId = 6;
  inline bool has_departmentid() const;
  inline void clear_departmentid();
  static const int kDepartmentIdFieldNumber = 6;
  inline const ::std::string& departmentid() const;
  inline void set_departmentid(const ::std::string& value);
  inline void set_departmentid(const char* value);
  inline void set_departmentid(const char* value, size_t size);
  inline ::std::string* mutable_departmentid();
  inline ::std::string* release_departmentid();
  inline void set_allocated_departmentid(::std::string* departmentid);

  // optional string CustomDocumentId = 7;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 7;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 8;
  inline int metadata_size() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 8;
  inline const ::Diadoc::Api::Proto::Events::MetadataItem& metadata(int index) const;
  inline ::Diadoc::Api::Proto::Events::MetadataItem* mutable_metadata(int index);
  inline ::Diadoc::Api::Proto::Events::MetadataItem* add_metadata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >&
      metadata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >*
      mutable_metadata();

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 9;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 9;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // required .Diadoc.Api.Proto.Docflow.DocumentLinks DocumentLinks = 10;
  inline bool has_documentlinks() const;
  inline void clear_documentlinks();
  static const int kDocumentLinksFieldNumber = 10;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentLinks& documentlinks() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentLinks* mutable_documentlinks();
  inline ::Diadoc::Api::Proto::Docflow::DocumentLinks* release_documentlinks();
  inline void set_allocated_documentlinks(::Diadoc::Api::Proto::Docflow::DocumentLinks* documentlinks);

  // required .Diadoc.Api.Proto.Docflow.PacketInfo PacketInfo = 11;
  inline bool has_packetinfo() const;
  inline void clear_packetinfo();
  static const int kPacketInfoFieldNumber = 11;
  inline const ::Diadoc::Api::Proto::Docflow::PacketInfo& packetinfo() const;
  inline ::Diadoc::Api::Proto::Docflow::PacketInfo* mutable_packetinfo();
  inline ::Diadoc::Api::Proto::Docflow::PacketInfo* release_packetinfo();
  inline void set_allocated_packetinfo(::Diadoc::Api::Proto::Docflow::PacketInfo* packetinfo);

  // required bool IsRead = 12;
  inline bool has_isread() const;
  inline void clear_isread();
  static const int kIsReadFieldNumber = 12;
  inline bool isread() const;
  inline void set_isread(bool value);

  // required bool IsDeleted = 13;
  inline bool has_isdeleted() const;
  inline void clear_isdeleted();
  static const int kIsDeletedFieldNumber = 13;
  inline bool isdeleted() const;
  inline void set_isdeleted(bool value);

  // required bool IsInvitation = 14;
  inline bool has_isinvitation() const;
  inline void clear_isinvitation();
  static const int kIsInvitationFieldNumber = 14;
  inline bool isinvitation() const;
  inline void set_isinvitation(bool value);

  // optional .Diadoc.Api.Proto.Docflow.DocumentLetterInfo LetterInfo = 15;
  inline bool has_letterinfo() const;
  inline void clear_letterinfo();
  static const int kLetterInfoFieldNumber = 15;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentLetterInfo& letterinfo() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentLetterInfo* mutable_letterinfo();
  inline ::Diadoc::Api::Proto::Docflow::DocumentLetterInfo* release_letterinfo();
  inline void set_allocated_letterinfo(::Diadoc::Api::Proto::Docflow::DocumentLetterInfo* letterinfo);

  // optional .Diadoc.Api.Proto.Docflow.DocumentDraftInfo DraftInfo = 16;
  inline bool has_draftinfo() const;
  inline void clear_draftinfo();
  static const int kDraftInfoFieldNumber = 16;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentDraftInfo& draftinfo() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentDraftInfo* mutable_draftinfo();
  inline ::Diadoc::Api::Proto::Docflow::DocumentDraftInfo* release_draftinfo();
  inline void set_allocated_draftinfo(::Diadoc::Api::Proto::Docflow::DocumentDraftInfo* draftinfo);

  // optional .Diadoc.Api.Proto.Docflow.DocumentTemplateInfo TemplateInfo = 17;
  inline bool has_templateinfo() const;
  inline void clear_templateinfo();
  static const int kTemplateInfoFieldNumber = 17;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentTemplateInfo& templateinfo() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentTemplateInfo* mutable_templateinfo();
  inline ::Diadoc::Api::Proto::Docflow::DocumentTemplateInfo* release_templateinfo();
  inline void set_allocated_templateinfo(::Diadoc::Api::Proto::Docflow::DocumentTemplateInfo* templateinfo);

  // optional .Diadoc.Api.Proto.Documents.Origin Origin = 18;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 18;
  inline const ::Diadoc::Api::Proto::Documents::Origin& origin() const;
  inline ::Diadoc::Api::Proto::Documents::Origin* mutable_origin();
  inline ::Diadoc::Api::Proto::Documents::Origin* release_origin();
  inline void set_allocated_origin(::Diadoc::Api::Proto::Documents::Origin* origin);

  // optional string EditingSettingId = 19 [default = ""];
  inline bool has_editingsettingid() const;
  inline void clear_editingsettingid();
  static const int kEditingSettingIdFieldNumber = 19;
  inline const ::std::string& editingsettingid() const;
  inline void set_editingsettingid(const ::std::string& value);
  inline void set_editingsettingid(const char* value);
  inline void set_editingsettingid(const char* value, size_t size);
  inline ::std::string* mutable_editingsettingid();
  inline ::std::string* release_editingsettingid();
  inline void set_allocated_editingsettingid(::std::string* editingsettingid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.DocumentInfoV3)
 private:
  inline void set_has_fullversion();
  inline void clear_has_fullversion();
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_workflowid();
  inline void clear_has_workflowid();
  inline void set_has_participants();
  inline void clear_has_participants();
  inline void set_has_documentdirection();
  inline void clear_has_documentdirection();
  inline void set_has_departmentid();
  inline void clear_has_departmentid();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_documentlinks();
  inline void clear_has_documentlinks();
  inline void set_has_packetinfo();
  inline void clear_has_packetinfo();
  inline void set_has_isread();
  inline void clear_has_isread();
  inline void set_has_isdeleted();
  inline void clear_has_isdeleted();
  inline void set_has_isinvitation();
  inline void clear_has_isinvitation();
  inline void set_has_letterinfo();
  inline void clear_has_letterinfo();
  inline void set_has_draftinfo();
  inline void clear_has_draftinfo();
  inline void set_has_templateinfo();
  inline void clear_has_templateinfo();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_editingsettingid();
  inline void clear_has_editingsettingid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::FullVersion* fullversion_;
  int messagetype_;
  ::google::protobuf::int32 workflowid_;
  ::Diadoc::Api::Proto::Docflow::DocumentParticipants* participants_;
  ::std::string* departmentid_;
  ::std::string* customdocumentid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem > metadata_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  ::Diadoc::Api::Proto::Docflow::DocumentLinks* documentlinks_;
  ::Diadoc::Api::Proto::Docflow::PacketInfo* packetinfo_;
  int documentdirection_;
  bool isread_;
  bool isdeleted_;
  bool isinvitation_;
  ::Diadoc::Api::Proto::Docflow::DocumentLetterInfo* letterinfo_;
  ::Diadoc::Api::Proto::Docflow::DocumentDraftInfo* draftinfo_;
  ::Diadoc::Api::Proto::Docflow::DocumentTemplateInfo* templateinfo_;
  ::Diadoc::Api::Proto::Documents::Origin* origin_;
  ::std::string* editingsettingid_;
  friend void  protobuf_AddDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocumentInfoV3_2eproto();

  void InitAsDefaultInstance();
  static DocumentInfoV3* default_instance_;
};
// -------------------------------------------------------------------

class DocumentParticipants : public ::google::protobuf::Message {
 public:
  DocumentParticipants();
  virtual ~DocumentParticipants();

  DocumentParticipants(const DocumentParticipants& from);

  inline DocumentParticipants& operator=(const DocumentParticipants& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentParticipants& default_instance();

  void Swap(DocumentParticipants* other);

  // implements Message ----------------------------------------------

  DocumentParticipants* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentParticipants& from);
  void MergeFrom(const DocumentParticipants& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Docflow.DocumentParticipant Sender = 1;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentParticipant& sender() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentParticipant* mutable_sender();
  inline ::Diadoc::Api::Proto::Docflow::DocumentParticipant* release_sender();
  inline void set_allocated_sender(::Diadoc::Api::Proto::Docflow::DocumentParticipant* sender);

  // optional .Diadoc.Api.Proto.Docflow.DocumentParticipant Proxy = 2;
  inline bool has_proxy() const;
  inline void clear_proxy();
  static const int kProxyFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentParticipant& proxy() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentParticipant* mutable_proxy();
  inline ::Diadoc::Api::Proto::Docflow::DocumentParticipant* release_proxy();
  inline void set_allocated_proxy(::Diadoc::Api::Proto::Docflow::DocumentParticipant* proxy);

  // optional .Diadoc.Api.Proto.Docflow.DocumentParticipant Recipient = 3;
  inline bool has_recipient() const;
  inline void clear_recipient();
  static const int kRecipientFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentParticipant& recipient() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentParticipant* mutable_recipient();
  inline ::Diadoc::Api::Proto::Docflow::DocumentParticipant* release_recipient();
  inline void set_allocated_recipient(::Diadoc::Api::Proto::Docflow::DocumentParticipant* recipient);

  // required bool IsInternal = 4;
  inline bool has_isinternal() const;
  inline void clear_isinternal();
  static const int kIsInternalFieldNumber = 4;
  inline bool isinternal() const;
  inline void set_isinternal(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.DocumentParticipants)
 private:
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_proxy();
  inline void clear_has_proxy();
  inline void set_has_recipient();
  inline void clear_has_recipient();
  inline void set_has_isinternal();
  inline void clear_has_isinternal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::DocumentParticipant* sender_;
  ::Diadoc::Api::Proto::Docflow::DocumentParticipant* proxy_;
  ::Diadoc::Api::Proto::Docflow::DocumentParticipant* recipient_;
  bool isinternal_;
  friend void  protobuf_AddDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocumentInfoV3_2eproto();

  void InitAsDefaultInstance();
  static DocumentParticipants* default_instance_;
};
// -------------------------------------------------------------------

class DocumentParticipant : public ::google::protobuf::Message {
 public:
  DocumentParticipant();
  virtual ~DocumentParticipant();

  DocumentParticipant(const DocumentParticipant& from);

  inline DocumentParticipant& operator=(const DocumentParticipant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentParticipant& default_instance();

  void Swap(DocumentParticipant* other);

  // implements Message ----------------------------------------------

  DocumentParticipant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentParticipant& from);
  void MergeFrom(const DocumentParticipant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BoxId = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 1;
  inline const ::std::string& boxid() const;
  inline void set_boxid(const ::std::string& value);
  inline void set_boxid(const char* value);
  inline void set_boxid(const char* value, size_t size);
  inline ::std::string* mutable_boxid();
  inline ::std::string* release_boxid();
  inline void set_allocated_boxid(::std::string* boxid);

  // optional string DepartmentId = 2;
  inline bool has_departmentid() const;
  inline void clear_departmentid();
  static const int kDepartmentIdFieldNumber = 2;
  inline const ::std::string& departmentid() const;
  inline void set_departmentid(const ::std::string& value);
  inline void set_departmentid(const char* value);
  inline void set_departmentid(const char* value, size_t size);
  inline ::std::string* mutable_departmentid();
  inline ::std::string* release_departmentid();
  inline void set_allocated_departmentid(::std::string* departmentid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.DocumentParticipant)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_departmentid();
  inline void clear_has_departmentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* boxid_;
  ::std::string* departmentid_;
  friend void  protobuf_AddDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocumentInfoV3_2eproto();

  void InitAsDefaultInstance();
  static DocumentParticipant* default_instance_;
};
// -------------------------------------------------------------------

class DocumentLinks : public ::google::protobuf::Message {
 public:
  DocumentLinks();
  virtual ~DocumentLinks();

  DocumentLinks(const DocumentLinks& from);

  inline DocumentLinks& operator=(const DocumentLinks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentLinks& default_instance();

  void Swap(DocumentLinks* other);

  // implements Message ----------------------------------------------

  DocumentLinks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentLinks& from);
  void MergeFrom(const DocumentLinks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.DocumentId InitialIds = 1;
  inline int initialids_size() const;
  inline void clear_initialids();
  static const int kInitialIdsFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::DocumentId& initialids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateIds = 2;
  inline int subordinateids_size() const;
  inline void clear_subordinateids();
  static const int kSubordinateIdsFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinateids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinateids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinateids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinateids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinateids();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.DocumentLinks)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinateids_;
  friend void  protobuf_AddDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocumentInfoV3_2eproto();

  void InitAsDefaultInstance();
  static DocumentLinks* default_instance_;
};
// -------------------------------------------------------------------

class PacketInfo : public ::google::protobuf::Message {
 public:
  PacketInfo();
  virtual ~PacketInfo();

  PacketInfo(const PacketInfo& from);

  inline PacketInfo& operator=(const PacketInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketInfo& default_instance();

  void Swap(PacketInfo* other);

  // implements Message ----------------------------------------------

  PacketInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PacketInfo& from);
  void MergeFrom(const PacketInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.LockMode LockMode = 1;
  inline bool has_lockmode() const;
  inline void clear_lockmode();
  static const int kLockModeFieldNumber = 1;
  inline ::Diadoc::Api::Proto::LockMode lockmode() const;
  inline void set_lockmode(::Diadoc::Api::Proto::LockMode value);

  // optional string PacketId = 2;
  inline bool has_packetid() const;
  inline void clear_packetid();
  static const int kPacketIdFieldNumber = 2;
  inline const ::std::string& packetid() const;
  inline void set_packetid(const ::std::string& value);
  inline void set_packetid(const char* value);
  inline void set_packetid(const char* value, size_t size);
  inline ::std::string* mutable_packetid();
  inline ::std::string* release_packetid();
  inline void set_allocated_packetid(::std::string* packetid);

  // optional .Diadoc.Api.Proto.Timestamp AddedAt = 3;
  inline bool has_addedat() const;
  inline void clear_addedat();
  static const int kAddedAtFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Timestamp& addedat() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_addedat();
  inline ::Diadoc::Api::Proto::Timestamp* release_addedat();
  inline void set_allocated_addedat(::Diadoc::Api::Proto::Timestamp* addedat);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.PacketInfo)
 private:
  inline void set_has_lockmode();
  inline void clear_has_lockmode();
  inline void set_has_packetid();
  inline void clear_has_packetid();
  inline void set_has_addedat();
  inline void clear_has_addedat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* packetid_;
  ::Diadoc::Api::Proto::Timestamp* addedat_;
  int lockmode_;
  friend void  protobuf_AddDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocumentInfoV3_2eproto();

  void InitAsDefaultInstance();
  static PacketInfo* default_instance_;
};
// -------------------------------------------------------------------

class DocumentLetterInfo : public ::google::protobuf::Message {
 public:
  DocumentLetterInfo();
  virtual ~DocumentLetterInfo();

  DocumentLetterInfo(const DocumentLetterInfo& from);

  inline DocumentLetterInfo& operator=(const DocumentLetterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentLetterInfo& default_instance();

  void Swap(DocumentLetterInfo* other);

  // implements Message ----------------------------------------------

  DocumentLetterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentLetterInfo& from);
  void MergeFrom(const DocumentLetterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool IsEncrypted = 1;
  inline bool has_isencrypted() const;
  inline void clear_isencrypted();
  static const int kIsEncryptedFieldNumber = 1;
  inline bool isencrypted() const;
  inline void set_isencrypted(bool value);

  // repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 2;
  inline int forwarddocumentevents_size() const;
  inline void clear_forwarddocumentevents();
  static const int kForwardDocumentEventsFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::ForwardDocumentEvent& forwarddocumentevents(int index) const;
  inline ::Diadoc::Api::Proto::ForwardDocumentEvent* mutable_forwarddocumentevents(int index);
  inline ::Diadoc::Api::Proto::ForwardDocumentEvent* add_forwarddocumentevents();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >&
      forwarddocumentevents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >*
      mutable_forwarddocumentevents();

  // required bool IsTest = 3;
  inline bool has_istest() const;
  inline void clear_istest();
  static const int kIsTestFieldNumber = 3;
  inline bool istest() const;
  inline void set_istest(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.DocumentLetterInfo)
 private:
  inline void set_has_isencrypted();
  inline void clear_has_isencrypted();
  inline void set_has_istest();
  inline void clear_has_istest();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent > forwarddocumentevents_;
  bool isencrypted_;
  bool istest_;
  friend void  protobuf_AddDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocumentInfoV3_2eproto();

  void InitAsDefaultInstance();
  static DocumentLetterInfo* default_instance_;
};
// -------------------------------------------------------------------

class DocumentDraftInfo : public ::google::protobuf::Message {
 public:
  DocumentDraftInfo();
  virtual ~DocumentDraftInfo();

  DocumentDraftInfo(const DocumentDraftInfo& from);

  inline DocumentDraftInfo& operator=(const DocumentDraftInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentDraftInfo& default_instance();

  void Swap(DocumentDraftInfo* other);

  // implements Message ----------------------------------------------

  DocumentDraftInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentDraftInfo& from);
  void MergeFrom(const DocumentDraftInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool IsRecycled = 1;
  inline bool has_isrecycled() const;
  inline void clear_isrecycled();
  static const int kIsRecycledFieldNumber = 1;
  inline bool isrecycled() const;
  inline void set_isrecycled(bool value);

  // required bool IsLocked = 2;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 2;
  inline bool islocked() const;
  inline void set_islocked(bool value);

  // repeated string TransformedToLetterIds = 3;
  inline int transformedtoletterids_size() const;
  inline void clear_transformedtoletterids();
  static const int kTransformedToLetterIdsFieldNumber = 3;
  inline const ::std::string& transformedtoletterids(int index) const;
  inline ::std::string* mutable_transformedtoletterids(int index);
  inline void set_transformedtoletterids(int index, const ::std::string& value);
  inline void set_transformedtoletterids(int index, const char* value);
  inline void set_transformedtoletterids(int index, const char* value, size_t size);
  inline ::std::string* add_transformedtoletterids();
  inline void add_transformedtoletterids(const ::std::string& value);
  inline void add_transformedtoletterids(const char* value);
  inline void add_transformedtoletterids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& transformedtoletterids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_transformedtoletterids();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.DocumentDraftInfo)
 private:
  inline void set_has_isrecycled();
  inline void clear_has_isrecycled();
  inline void set_has_islocked();
  inline void clear_has_islocked();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> transformedtoletterids_;
  bool isrecycled_;
  bool islocked_;
  friend void  protobuf_AddDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocumentInfoV3_2eproto();

  void InitAsDefaultInstance();
  static DocumentDraftInfo* default_instance_;
};
// -------------------------------------------------------------------

class DocumentTemplateInfo : public ::google::protobuf::Message {
 public:
  DocumentTemplateInfo();
  virtual ~DocumentTemplateInfo();

  DocumentTemplateInfo(const DocumentTemplateInfo& from);

  inline DocumentTemplateInfo& operator=(const DocumentTemplateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentTemplateInfo& default_instance();

  void Swap(DocumentTemplateInfo* other);

  // implements Message ----------------------------------------------

  DocumentTemplateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentTemplateInfo& from);
  void MergeFrom(const DocumentTemplateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Docflow.DocumentParticipants LetterParticipants = 1;
  inline bool has_letterparticipants() const;
  inline void clear_letterparticipants();
  static const int kLetterParticipantsFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentParticipants& letterparticipants() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentParticipants* mutable_letterparticipants();
  inline ::Diadoc::Api::Proto::Docflow::DocumentParticipants* release_letterparticipants();
  inline void set_allocated_letterparticipants(::Diadoc::Api::Proto::Docflow::DocumentParticipants* letterparticipants);

  // repeated string TransformedToLetterIds = 2;
  inline int transformedtoletterids_size() const;
  inline void clear_transformedtoletterids();
  static const int kTransformedToLetterIdsFieldNumber = 2;
  inline const ::std::string& transformedtoletterids(int index) const;
  inline ::std::string* mutable_transformedtoletterids(int index);
  inline void set_transformedtoletterids(int index, const ::std::string& value);
  inline void set_transformedtoletterids(int index, const char* value);
  inline void set_transformedtoletterids(int index, const char* value, size_t size);
  inline ::std::string* add_transformedtoletterids();
  inline void add_transformedtoletterids(const ::std::string& value);
  inline void add_transformedtoletterids(const char* value);
  inline void add_transformedtoletterids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& transformedtoletterids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_transformedtoletterids();

  // repeated .Diadoc.Api.Proto.Docflow.TemplateTransformationInfo TemplateTransformationInfos = 3;
  inline int templatetransformationinfos_size() const;
  inline void clear_templatetransformationinfos();
  static const int kTemplateTransformationInfosFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::TemplateTransformationInfo& templatetransformationinfos(int index) const;
  inline ::Diadoc::Api::Proto::Docflow::TemplateTransformationInfo* mutable_templatetransformationinfos(int index);
  inline ::Diadoc::Api::Proto::Docflow::TemplateTransformationInfo* add_templatetransformationinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::TemplateTransformationInfo >&
      templatetransformationinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::TemplateTransformationInfo >*
      mutable_templatetransformationinfos();

  // optional .Diadoc.Api.Proto.Docflow.TemplateRefusalInfo TemplateRefusalInfo = 4;
  inline bool has_templaterefusalinfo() const;
  inline void clear_templaterefusalinfo();
  static const int kTemplateRefusalInfoFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Docflow::TemplateRefusalInfo& templaterefusalinfo() const;
  inline ::Diadoc::Api::Proto::Docflow::TemplateRefusalInfo* mutable_templaterefusalinfo();
  inline ::Diadoc::Api::Proto::Docflow::TemplateRefusalInfo* release_templaterefusalinfo();
  inline void set_allocated_templaterefusalinfo(::Diadoc::Api::Proto::Docflow::TemplateRefusalInfo* templaterefusalinfo);

  // optional bool IsReusable = 5 [default = false];
  inline bool has_isreusable() const;
  inline void clear_isreusable();
  static const int kIsReusableFieldNumber = 5;
  inline bool isreusable() const;
  inline void set_isreusable(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo)
 private:
  inline void set_has_letterparticipants();
  inline void clear_has_letterparticipants();
  inline void set_has_templaterefusalinfo();
  inline void clear_has_templaterefusalinfo();
  inline void set_has_isreusable();
  inline void clear_has_isreusable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::DocumentParticipants* letterparticipants_;
  ::google::protobuf::RepeatedPtrField< ::std::string> transformedtoletterids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::TemplateTransformationInfo > templatetransformationinfos_;
  ::Diadoc::Api::Proto::Docflow::TemplateRefusalInfo* templaterefusalinfo_;
  bool isreusable_;
  friend void  protobuf_AddDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocumentInfoV3_2eproto();

  void InitAsDefaultInstance();
  static DocumentTemplateInfo* default_instance_;
};
// -------------------------------------------------------------------

class TemplateTransformationInfo : public ::google::protobuf::Message {
 public:
  TemplateTransformationInfo();
  virtual ~TemplateTransformationInfo();

  TemplateTransformationInfo(const TemplateTransformationInfo& from);

  inline TemplateTransformationInfo& operator=(const TemplateTransformationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TemplateTransformationInfo& default_instance();

  void Swap(TemplateTransformationInfo* other);

  // implements Message ----------------------------------------------

  TemplateTransformationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TemplateTransformationInfo& from);
  void MergeFrom(const TemplateTransformationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string TransformationId = 1;
  inline bool has_transformationid() const;
  inline void clear_transformationid();
  static const int kTransformationIdFieldNumber = 1;
  inline const ::std::string& transformationid() const;
  inline void set_transformationid(const ::std::string& value);
  inline void set_transformationid(const char* value);
  inline void set_transformationid(const char* value, size_t size);
  inline ::std::string* mutable_transformationid();
  inline ::std::string* release_transformationid();
  inline void set_allocated_transformationid(::std::string* transformationid);

  // optional .Diadoc.Api.Proto.DocumentId TransformedToDocumentId = 2;
  inline bool has_transformedtodocumentid() const;
  inline void clear_transformedtodocumentid();
  static const int kTransformedToDocumentIdFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::DocumentId& transformedtodocumentid() const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_transformedtodocumentid();
  inline ::Diadoc::Api::Proto::DocumentId* release_transformedtodocumentid();
  inline void set_allocated_transformedtodocumentid(::Diadoc::Api::Proto::DocumentId* transformedtodocumentid);

  // optional string AuthorUserId = 3;
  inline bool has_authoruserid() const;
  inline void clear_authoruserid();
  static const int kAuthorUserIdFieldNumber = 3;
  inline const ::std::string& authoruserid() const;
  inline void set_authoruserid(const ::std::string& value);
  inline void set_authoruserid(const char* value);
  inline void set_authoruserid(const char* value, size_t size);
  inline ::std::string* mutable_authoruserid();
  inline ::std::string* release_authoruserid();
  inline void set_allocated_authoruserid(::std::string* authoruserid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo)
 private:
  inline void set_has_transformationid();
  inline void clear_has_transformationid();
  inline void set_has_transformedtodocumentid();
  inline void clear_has_transformedtodocumentid();
  inline void set_has_authoruserid();
  inline void clear_has_authoruserid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* transformationid_;
  ::Diadoc::Api::Proto::DocumentId* transformedtodocumentid_;
  ::std::string* authoruserid_;
  friend void  protobuf_AddDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocumentInfoV3_2eproto();

  void InitAsDefaultInstance();
  static TemplateTransformationInfo* default_instance_;
};
// -------------------------------------------------------------------

class TemplateRefusalInfo : public ::google::protobuf::Message {
 public:
  TemplateRefusalInfo();
  virtual ~TemplateRefusalInfo();

  TemplateRefusalInfo(const TemplateRefusalInfo& from);

  inline TemplateRefusalInfo& operator=(const TemplateRefusalInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TemplateRefusalInfo& default_instance();

  void Swap(TemplateRefusalInfo* other);

  // implements Message ----------------------------------------------

  TemplateRefusalInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TemplateRefusalInfo& from);
  void MergeFrom(const TemplateRefusalInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BoxId = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 1;
  inline const ::std::string& boxid() const;
  inline void set_boxid(const ::std::string& value);
  inline void set_boxid(const char* value);
  inline void set_boxid(const char* value, size_t size);
  inline ::std::string* mutable_boxid();
  inline ::std::string* release_boxid();
  inline void set_allocated_boxid(::std::string* boxid);

  // optional string AuthorUserId = 2;
  inline bool has_authoruserid() const;
  inline void clear_authoruserid();
  static const int kAuthorUserIdFieldNumber = 2;
  inline const ::std::string& authoruserid() const;
  inline void set_authoruserid(const ::std::string& value);
  inline void set_authoruserid(const char* value);
  inline void set_authoruserid(const char* value, size_t size);
  inline ::std::string* mutable_authoruserid();
  inline ::std::string* release_authoruserid();
  inline void set_allocated_authoruserid(::std::string* authoruserid);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_authoruserid();
  inline void clear_has_authoruserid();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* boxid_;
  ::std::string* authoruserid_;
  ::std::string* comment_;
  friend void  protobuf_AddDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_AssignDesc_Docflow_2fDocumentInfoV3_2eproto();
  friend void protobuf_ShutdownFile_Docflow_2fDocumentInfoV3_2eproto();

  void InitAsDefaultInstance();
  static TemplateRefusalInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// DocumentInfoV3

// required .Diadoc.Api.Proto.FullVersion FullVersion = 1;
inline bool DocumentInfoV3::has_fullversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentInfoV3::set_has_fullversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentInfoV3::clear_has_fullversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentInfoV3::clear_fullversion() {
  if (fullversion_ != NULL) fullversion_->::Diadoc::Api::Proto::FullVersion::Clear();
  clear_has_fullversion();
}
inline const ::Diadoc::Api::Proto::FullVersion& DocumentInfoV3::fullversion() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.FullVersion)
  return fullversion_ != NULL ? *fullversion_ : *default_instance_->fullversion_;
}
inline ::Diadoc::Api::Proto::FullVersion* DocumentInfoV3::mutable_fullversion() {
  set_has_fullversion();
  if (fullversion_ == NULL) fullversion_ = new ::Diadoc::Api::Proto::FullVersion;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentInfoV3.FullVersion)
  return fullversion_;
}
inline ::Diadoc::Api::Proto::FullVersion* DocumentInfoV3::release_fullversion() {
  clear_has_fullversion();
  ::Diadoc::Api::Proto::FullVersion* temp = fullversion_;
  fullversion_ = NULL;
  return temp;
}
inline void DocumentInfoV3::set_allocated_fullversion(::Diadoc::Api::Proto::FullVersion* fullversion) {
  delete fullversion_;
  fullversion_ = fullversion;
  if (fullversion) {
    set_has_fullversion();
  } else {
    clear_has_fullversion();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentInfoV3.FullVersion)
}

// required .Diadoc.Api.Proto.Documents.MessageType MessageType = 2;
inline bool DocumentInfoV3::has_messagetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentInfoV3::set_has_messagetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentInfoV3::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentInfoV3::clear_messagetype() {
  messagetype_ = 0;
  clear_has_messagetype();
}
inline ::Diadoc::Api::Proto::Documents::MessageType DocumentInfoV3::messagetype() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.MessageType)
  return static_cast< ::Diadoc::Api::Proto::Documents::MessageType >(messagetype_);
}
inline void DocumentInfoV3::set_messagetype(::Diadoc::Api::Proto::Documents::MessageType value) {
  assert(::Diadoc::Api::Proto::Documents::MessageType_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentInfoV3.MessageType)
}

// required int32 WorkflowId = 3;
inline bool DocumentInfoV3::has_workflowid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentInfoV3::set_has_workflowid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentInfoV3::clear_has_workflowid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentInfoV3::clear_workflowid() {
  workflowid_ = 0;
  clear_has_workflowid();
}
inline ::google::protobuf::int32 DocumentInfoV3::workflowid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.WorkflowId)
  return workflowid_;
}
inline void DocumentInfoV3::set_workflowid(::google::protobuf::int32 value) {
  set_has_workflowid();
  workflowid_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentInfoV3.WorkflowId)
}

// required .Diadoc.Api.Proto.Docflow.DocumentParticipants Participants = 4;
inline bool DocumentInfoV3::has_participants() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentInfoV3::set_has_participants() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentInfoV3::clear_has_participants() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentInfoV3::clear_participants() {
  if (participants_ != NULL) participants_->::Diadoc::Api::Proto::Docflow::DocumentParticipants::Clear();
  clear_has_participants();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentParticipants& DocumentInfoV3::participants() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.Participants)
  return participants_ != NULL ? *participants_ : *default_instance_->participants_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentParticipants* DocumentInfoV3::mutable_participants() {
  set_has_participants();
  if (participants_ == NULL) participants_ = new ::Diadoc::Api::Proto::Docflow::DocumentParticipants;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentInfoV3.Participants)
  return participants_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentParticipants* DocumentInfoV3::release_participants() {
  clear_has_participants();
  ::Diadoc::Api::Proto::Docflow::DocumentParticipants* temp = participants_;
  participants_ = NULL;
  return temp;
}
inline void DocumentInfoV3::set_allocated_participants(::Diadoc::Api::Proto::Docflow::DocumentParticipants* participants) {
  delete participants_;
  participants_ = participants;
  if (participants) {
    set_has_participants();
  } else {
    clear_has_participants();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentInfoV3.Participants)
}

// required .Diadoc.Api.Proto.DocumentDirection DocumentDirection = 5;
inline bool DocumentInfoV3::has_documentdirection() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentInfoV3::set_has_documentdirection() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentInfoV3::clear_has_documentdirection() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentInfoV3::clear_documentdirection() {
  documentdirection_ = 0;
  clear_has_documentdirection();
}
inline ::Diadoc::Api::Proto::DocumentDirection DocumentInfoV3::documentdirection() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.DocumentDirection)
  return static_cast< ::Diadoc::Api::Proto::DocumentDirection >(documentdirection_);
}
inline void DocumentInfoV3::set_documentdirection(::Diadoc::Api::Proto::DocumentDirection value) {
  assert(::Diadoc::Api::Proto::DocumentDirection_IsValid(value));
  set_has_documentdirection();
  documentdirection_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentInfoV3.DocumentDirection)
}

// required string DepartmentId = 6;
inline bool DocumentInfoV3::has_departmentid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DocumentInfoV3::set_has_departmentid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DocumentInfoV3::clear_has_departmentid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DocumentInfoV3::clear_departmentid() {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_->clear();
  }
  clear_has_departmentid();
}
inline const ::std::string& DocumentInfoV3::departmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.DepartmentId)
  return *departmentid_;
}
inline void DocumentInfoV3::set_departmentid(const ::std::string& value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentInfoV3.DepartmentId)
}
inline void DocumentInfoV3::set_departmentid(const char* value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.DocumentInfoV3.DepartmentId)
}
inline void DocumentInfoV3::set_departmentid(const char* value, size_t size) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.DocumentInfoV3.DepartmentId)
}
inline ::std::string* DocumentInfoV3::mutable_departmentid() {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentInfoV3.DepartmentId)
  return departmentid_;
}
inline ::std::string* DocumentInfoV3::release_departmentid() {
  clear_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = departmentid_;
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentInfoV3::set_allocated_departmentid(::std::string* departmentid) {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete departmentid_;
  }
  if (departmentid) {
    set_has_departmentid();
    departmentid_ = departmentid;
  } else {
    clear_has_departmentid();
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentInfoV3.DepartmentId)
}

// optional string CustomDocumentId = 7;
inline bool DocumentInfoV3::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DocumentInfoV3::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DocumentInfoV3::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DocumentInfoV3::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& DocumentInfoV3::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.CustomDocumentId)
  return *customdocumentid_;
}
inline void DocumentInfoV3::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentInfoV3.CustomDocumentId)
}
inline void DocumentInfoV3::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.DocumentInfoV3.CustomDocumentId)
}
inline void DocumentInfoV3::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.DocumentInfoV3.CustomDocumentId)
}
inline ::std::string* DocumentInfoV3::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentInfoV3.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* DocumentInfoV3::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentInfoV3::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentInfoV3.CustomDocumentId)
}

// repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 8;
inline int DocumentInfoV3::metadata_size() const {
  return metadata_.size();
}
inline void DocumentInfoV3::clear_metadata() {
  metadata_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::MetadataItem& DocumentInfoV3::metadata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.Metadata)
  return metadata_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::MetadataItem* DocumentInfoV3::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentInfoV3.Metadata)
  return metadata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::MetadataItem* DocumentInfoV3::add_metadata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.DocumentInfoV3.Metadata)
  return metadata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >&
DocumentInfoV3::metadata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.DocumentInfoV3.Metadata)
  return metadata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >*
DocumentInfoV3::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.DocumentInfoV3.Metadata)
  return &metadata_;
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 9;
inline int DocumentInfoV3::customdata_size() const {
  return customdata_.size();
}
inline void DocumentInfoV3::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& DocumentInfoV3::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* DocumentInfoV3::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentInfoV3.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* DocumentInfoV3::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.DocumentInfoV3.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
DocumentInfoV3::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.DocumentInfoV3.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
DocumentInfoV3::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.DocumentInfoV3.CustomData)
  return &customdata_;
}

// required .Diadoc.Api.Proto.Docflow.DocumentLinks DocumentLinks = 10;
inline bool DocumentInfoV3::has_documentlinks() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DocumentInfoV3::set_has_documentlinks() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DocumentInfoV3::clear_has_documentlinks() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DocumentInfoV3::clear_documentlinks() {
  if (documentlinks_ != NULL) documentlinks_->::Diadoc::Api::Proto::Docflow::DocumentLinks::Clear();
  clear_has_documentlinks();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentLinks& DocumentInfoV3::documentlinks() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.DocumentLinks)
  return documentlinks_ != NULL ? *documentlinks_ : *default_instance_->documentlinks_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentLinks* DocumentInfoV3::mutable_documentlinks() {
  set_has_documentlinks();
  if (documentlinks_ == NULL) documentlinks_ = new ::Diadoc::Api::Proto::Docflow::DocumentLinks;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentInfoV3.DocumentLinks)
  return documentlinks_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentLinks* DocumentInfoV3::release_documentlinks() {
  clear_has_documentlinks();
  ::Diadoc::Api::Proto::Docflow::DocumentLinks* temp = documentlinks_;
  documentlinks_ = NULL;
  return temp;
}
inline void DocumentInfoV3::set_allocated_documentlinks(::Diadoc::Api::Proto::Docflow::DocumentLinks* documentlinks) {
  delete documentlinks_;
  documentlinks_ = documentlinks;
  if (documentlinks) {
    set_has_documentlinks();
  } else {
    clear_has_documentlinks();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentInfoV3.DocumentLinks)
}

// required .Diadoc.Api.Proto.Docflow.PacketInfo PacketInfo = 11;
inline bool DocumentInfoV3::has_packetinfo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DocumentInfoV3::set_has_packetinfo() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DocumentInfoV3::clear_has_packetinfo() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DocumentInfoV3::clear_packetinfo() {
  if (packetinfo_ != NULL) packetinfo_->::Diadoc::Api::Proto::Docflow::PacketInfo::Clear();
  clear_has_packetinfo();
}
inline const ::Diadoc::Api::Proto::Docflow::PacketInfo& DocumentInfoV3::packetinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.PacketInfo)
  return packetinfo_ != NULL ? *packetinfo_ : *default_instance_->packetinfo_;
}
inline ::Diadoc::Api::Proto::Docflow::PacketInfo* DocumentInfoV3::mutable_packetinfo() {
  set_has_packetinfo();
  if (packetinfo_ == NULL) packetinfo_ = new ::Diadoc::Api::Proto::Docflow::PacketInfo;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentInfoV3.PacketInfo)
  return packetinfo_;
}
inline ::Diadoc::Api::Proto::Docflow::PacketInfo* DocumentInfoV3::release_packetinfo() {
  clear_has_packetinfo();
  ::Diadoc::Api::Proto::Docflow::PacketInfo* temp = packetinfo_;
  packetinfo_ = NULL;
  return temp;
}
inline void DocumentInfoV3::set_allocated_packetinfo(::Diadoc::Api::Proto::Docflow::PacketInfo* packetinfo) {
  delete packetinfo_;
  packetinfo_ = packetinfo;
  if (packetinfo) {
    set_has_packetinfo();
  } else {
    clear_has_packetinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentInfoV3.PacketInfo)
}

// required bool IsRead = 12;
inline bool DocumentInfoV3::has_isread() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DocumentInfoV3::set_has_isread() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DocumentInfoV3::clear_has_isread() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DocumentInfoV3::clear_isread() {
  isread_ = false;
  clear_has_isread();
}
inline bool DocumentInfoV3::isread() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.IsRead)
  return isread_;
}
inline void DocumentInfoV3::set_isread(bool value) {
  set_has_isread();
  isread_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentInfoV3.IsRead)
}

// required bool IsDeleted = 13;
inline bool DocumentInfoV3::has_isdeleted() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DocumentInfoV3::set_has_isdeleted() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DocumentInfoV3::clear_has_isdeleted() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DocumentInfoV3::clear_isdeleted() {
  isdeleted_ = false;
  clear_has_isdeleted();
}
inline bool DocumentInfoV3::isdeleted() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.IsDeleted)
  return isdeleted_;
}
inline void DocumentInfoV3::set_isdeleted(bool value) {
  set_has_isdeleted();
  isdeleted_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentInfoV3.IsDeleted)
}

// required bool IsInvitation = 14;
inline bool DocumentInfoV3::has_isinvitation() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DocumentInfoV3::set_has_isinvitation() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DocumentInfoV3::clear_has_isinvitation() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DocumentInfoV3::clear_isinvitation() {
  isinvitation_ = false;
  clear_has_isinvitation();
}
inline bool DocumentInfoV3::isinvitation() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.IsInvitation)
  return isinvitation_;
}
inline void DocumentInfoV3::set_isinvitation(bool value) {
  set_has_isinvitation();
  isinvitation_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentInfoV3.IsInvitation)
}

// optional .Diadoc.Api.Proto.Docflow.DocumentLetterInfo LetterInfo = 15;
inline bool DocumentInfoV3::has_letterinfo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DocumentInfoV3::set_has_letterinfo() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DocumentInfoV3::clear_has_letterinfo() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DocumentInfoV3::clear_letterinfo() {
  if (letterinfo_ != NULL) letterinfo_->::Diadoc::Api::Proto::Docflow::DocumentLetterInfo::Clear();
  clear_has_letterinfo();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentLetterInfo& DocumentInfoV3::letterinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.LetterInfo)
  return letterinfo_ != NULL ? *letterinfo_ : *default_instance_->letterinfo_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentLetterInfo* DocumentInfoV3::mutable_letterinfo() {
  set_has_letterinfo();
  if (letterinfo_ == NULL) letterinfo_ = new ::Diadoc::Api::Proto::Docflow::DocumentLetterInfo;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentInfoV3.LetterInfo)
  return letterinfo_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentLetterInfo* DocumentInfoV3::release_letterinfo() {
  clear_has_letterinfo();
  ::Diadoc::Api::Proto::Docflow::DocumentLetterInfo* temp = letterinfo_;
  letterinfo_ = NULL;
  return temp;
}
inline void DocumentInfoV3::set_allocated_letterinfo(::Diadoc::Api::Proto::Docflow::DocumentLetterInfo* letterinfo) {
  delete letterinfo_;
  letterinfo_ = letterinfo;
  if (letterinfo) {
    set_has_letterinfo();
  } else {
    clear_has_letterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentInfoV3.LetterInfo)
}

// optional .Diadoc.Api.Proto.Docflow.DocumentDraftInfo DraftInfo = 16;
inline bool DocumentInfoV3::has_draftinfo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DocumentInfoV3::set_has_draftinfo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DocumentInfoV3::clear_has_draftinfo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DocumentInfoV3::clear_draftinfo() {
  if (draftinfo_ != NULL) draftinfo_->::Diadoc::Api::Proto::Docflow::DocumentDraftInfo::Clear();
  clear_has_draftinfo();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentDraftInfo& DocumentInfoV3::draftinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.DraftInfo)
  return draftinfo_ != NULL ? *draftinfo_ : *default_instance_->draftinfo_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentDraftInfo* DocumentInfoV3::mutable_draftinfo() {
  set_has_draftinfo();
  if (draftinfo_ == NULL) draftinfo_ = new ::Diadoc::Api::Proto::Docflow::DocumentDraftInfo;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentInfoV3.DraftInfo)
  return draftinfo_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentDraftInfo* DocumentInfoV3::release_draftinfo() {
  clear_has_draftinfo();
  ::Diadoc::Api::Proto::Docflow::DocumentDraftInfo* temp = draftinfo_;
  draftinfo_ = NULL;
  return temp;
}
inline void DocumentInfoV3::set_allocated_draftinfo(::Diadoc::Api::Proto::Docflow::DocumentDraftInfo* draftinfo) {
  delete draftinfo_;
  draftinfo_ = draftinfo;
  if (draftinfo) {
    set_has_draftinfo();
  } else {
    clear_has_draftinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentInfoV3.DraftInfo)
}

// optional .Diadoc.Api.Proto.Docflow.DocumentTemplateInfo TemplateInfo = 17;
inline bool DocumentInfoV3::has_templateinfo() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DocumentInfoV3::set_has_templateinfo() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DocumentInfoV3::clear_has_templateinfo() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DocumentInfoV3::clear_templateinfo() {
  if (templateinfo_ != NULL) templateinfo_->::Diadoc::Api::Proto::Docflow::DocumentTemplateInfo::Clear();
  clear_has_templateinfo();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentTemplateInfo& DocumentInfoV3::templateinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.TemplateInfo)
  return templateinfo_ != NULL ? *templateinfo_ : *default_instance_->templateinfo_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentTemplateInfo* DocumentInfoV3::mutable_templateinfo() {
  set_has_templateinfo();
  if (templateinfo_ == NULL) templateinfo_ = new ::Diadoc::Api::Proto::Docflow::DocumentTemplateInfo;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentInfoV3.TemplateInfo)
  return templateinfo_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentTemplateInfo* DocumentInfoV3::release_templateinfo() {
  clear_has_templateinfo();
  ::Diadoc::Api::Proto::Docflow::DocumentTemplateInfo* temp = templateinfo_;
  templateinfo_ = NULL;
  return temp;
}
inline void DocumentInfoV3::set_allocated_templateinfo(::Diadoc::Api::Proto::Docflow::DocumentTemplateInfo* templateinfo) {
  delete templateinfo_;
  templateinfo_ = templateinfo;
  if (templateinfo) {
    set_has_templateinfo();
  } else {
    clear_has_templateinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentInfoV3.TemplateInfo)
}

// optional .Diadoc.Api.Proto.Documents.Origin Origin = 18;
inline bool DocumentInfoV3::has_origin() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DocumentInfoV3::set_has_origin() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DocumentInfoV3::clear_has_origin() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DocumentInfoV3::clear_origin() {
  if (origin_ != NULL) origin_->::Diadoc::Api::Proto::Documents::Origin::Clear();
  clear_has_origin();
}
inline const ::Diadoc::Api::Proto::Documents::Origin& DocumentInfoV3::origin() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.Origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::Diadoc::Api::Proto::Documents::Origin* DocumentInfoV3::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) origin_ = new ::Diadoc::Api::Proto::Documents::Origin;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentInfoV3.Origin)
  return origin_;
}
inline ::Diadoc::Api::Proto::Documents::Origin* DocumentInfoV3::release_origin() {
  clear_has_origin();
  ::Diadoc::Api::Proto::Documents::Origin* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void DocumentInfoV3::set_allocated_origin(::Diadoc::Api::Proto::Documents::Origin* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentInfoV3.Origin)
}

// optional string EditingSettingId = 19 [default = ""];
inline bool DocumentInfoV3::has_editingsettingid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DocumentInfoV3::set_has_editingsettingid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DocumentInfoV3::clear_has_editingsettingid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DocumentInfoV3::clear_editingsettingid() {
  if (editingsettingid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    editingsettingid_->clear();
  }
  clear_has_editingsettingid();
}
inline const ::std::string& DocumentInfoV3::editingsettingid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentInfoV3.EditingSettingId)
  return *editingsettingid_;
}
inline void DocumentInfoV3::set_editingsettingid(const ::std::string& value) {
  set_has_editingsettingid();
  if (editingsettingid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    editingsettingid_ = new ::std::string;
  }
  editingsettingid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentInfoV3.EditingSettingId)
}
inline void DocumentInfoV3::set_editingsettingid(const char* value) {
  set_has_editingsettingid();
  if (editingsettingid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    editingsettingid_ = new ::std::string;
  }
  editingsettingid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.DocumentInfoV3.EditingSettingId)
}
inline void DocumentInfoV3::set_editingsettingid(const char* value, size_t size) {
  set_has_editingsettingid();
  if (editingsettingid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    editingsettingid_ = new ::std::string;
  }
  editingsettingid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.DocumentInfoV3.EditingSettingId)
}
inline ::std::string* DocumentInfoV3::mutable_editingsettingid() {
  set_has_editingsettingid();
  if (editingsettingid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    editingsettingid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentInfoV3.EditingSettingId)
  return editingsettingid_;
}
inline ::std::string* DocumentInfoV3::release_editingsettingid() {
  clear_has_editingsettingid();
  if (editingsettingid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = editingsettingid_;
    editingsettingid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentInfoV3::set_allocated_editingsettingid(::std::string* editingsettingid) {
  if (editingsettingid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete editingsettingid_;
  }
  if (editingsettingid) {
    set_has_editingsettingid();
    editingsettingid_ = editingsettingid;
  } else {
    clear_has_editingsettingid();
    editingsettingid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentInfoV3.EditingSettingId)
}

// -------------------------------------------------------------------

// DocumentParticipants

// required .Diadoc.Api.Proto.Docflow.DocumentParticipant Sender = 1;
inline bool DocumentParticipants::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentParticipants::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentParticipants::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentParticipants::clear_sender() {
  if (sender_ != NULL) sender_->::Diadoc::Api::Proto::Docflow::DocumentParticipant::Clear();
  clear_has_sender();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentParticipant& DocumentParticipants::sender() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentParticipants.Sender)
  return sender_ != NULL ? *sender_ : *default_instance_->sender_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentParticipant* DocumentParticipants::mutable_sender() {
  set_has_sender();
  if (sender_ == NULL) sender_ = new ::Diadoc::Api::Proto::Docflow::DocumentParticipant;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentParticipants.Sender)
  return sender_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentParticipant* DocumentParticipants::release_sender() {
  clear_has_sender();
  ::Diadoc::Api::Proto::Docflow::DocumentParticipant* temp = sender_;
  sender_ = NULL;
  return temp;
}
inline void DocumentParticipants::set_allocated_sender(::Diadoc::Api::Proto::Docflow::DocumentParticipant* sender) {
  delete sender_;
  sender_ = sender;
  if (sender) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentParticipants.Sender)
}

// optional .Diadoc.Api.Proto.Docflow.DocumentParticipant Proxy = 2;
inline bool DocumentParticipants::has_proxy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentParticipants::set_has_proxy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentParticipants::clear_has_proxy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentParticipants::clear_proxy() {
  if (proxy_ != NULL) proxy_->::Diadoc::Api::Proto::Docflow::DocumentParticipant::Clear();
  clear_has_proxy();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentParticipant& DocumentParticipants::proxy() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentParticipants.Proxy)
  return proxy_ != NULL ? *proxy_ : *default_instance_->proxy_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentParticipant* DocumentParticipants::mutable_proxy() {
  set_has_proxy();
  if (proxy_ == NULL) proxy_ = new ::Diadoc::Api::Proto::Docflow::DocumentParticipant;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentParticipants.Proxy)
  return proxy_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentParticipant* DocumentParticipants::release_proxy() {
  clear_has_proxy();
  ::Diadoc::Api::Proto::Docflow::DocumentParticipant* temp = proxy_;
  proxy_ = NULL;
  return temp;
}
inline void DocumentParticipants::set_allocated_proxy(::Diadoc::Api::Proto::Docflow::DocumentParticipant* proxy) {
  delete proxy_;
  proxy_ = proxy;
  if (proxy) {
    set_has_proxy();
  } else {
    clear_has_proxy();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentParticipants.Proxy)
}

// optional .Diadoc.Api.Proto.Docflow.DocumentParticipant Recipient = 3;
inline bool DocumentParticipants::has_recipient() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentParticipants::set_has_recipient() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentParticipants::clear_has_recipient() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentParticipants::clear_recipient() {
  if (recipient_ != NULL) recipient_->::Diadoc::Api::Proto::Docflow::DocumentParticipant::Clear();
  clear_has_recipient();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentParticipant& DocumentParticipants::recipient() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentParticipants.Recipient)
  return recipient_ != NULL ? *recipient_ : *default_instance_->recipient_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentParticipant* DocumentParticipants::mutable_recipient() {
  set_has_recipient();
  if (recipient_ == NULL) recipient_ = new ::Diadoc::Api::Proto::Docflow::DocumentParticipant;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentParticipants.Recipient)
  return recipient_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentParticipant* DocumentParticipants::release_recipient() {
  clear_has_recipient();
  ::Diadoc::Api::Proto::Docflow::DocumentParticipant* temp = recipient_;
  recipient_ = NULL;
  return temp;
}
inline void DocumentParticipants::set_allocated_recipient(::Diadoc::Api::Proto::Docflow::DocumentParticipant* recipient) {
  delete recipient_;
  recipient_ = recipient;
  if (recipient) {
    set_has_recipient();
  } else {
    clear_has_recipient();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentParticipants.Recipient)
}

// required bool IsInternal = 4;
inline bool DocumentParticipants::has_isinternal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentParticipants::set_has_isinternal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentParticipants::clear_has_isinternal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentParticipants::clear_isinternal() {
  isinternal_ = false;
  clear_has_isinternal();
}
inline bool DocumentParticipants::isinternal() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentParticipants.IsInternal)
  return isinternal_;
}
inline void DocumentParticipants::set_isinternal(bool value) {
  set_has_isinternal();
  isinternal_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentParticipants.IsInternal)
}

// -------------------------------------------------------------------

// DocumentParticipant

// required string BoxId = 1;
inline bool DocumentParticipant::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentParticipant::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentParticipant::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentParticipant::clear_boxid() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_->clear();
  }
  clear_has_boxid();
}
inline const ::std::string& DocumentParticipant::boxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentParticipant.BoxId)
  return *boxid_;
}
inline void DocumentParticipant::set_boxid(const ::std::string& value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentParticipant.BoxId)
}
inline void DocumentParticipant::set_boxid(const char* value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.DocumentParticipant.BoxId)
}
inline void DocumentParticipant::set_boxid(const char* value, size_t size) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.DocumentParticipant.BoxId)
}
inline ::std::string* DocumentParticipant::mutable_boxid() {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentParticipant.BoxId)
  return boxid_;
}
inline ::std::string* DocumentParticipant::release_boxid() {
  clear_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = boxid_;
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentParticipant::set_allocated_boxid(::std::string* boxid) {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (boxid) {
    set_has_boxid();
    boxid_ = boxid;
  } else {
    clear_has_boxid();
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentParticipant.BoxId)
}

// optional string DepartmentId = 2;
inline bool DocumentParticipant::has_departmentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentParticipant::set_has_departmentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentParticipant::clear_has_departmentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentParticipant::clear_departmentid() {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_->clear();
  }
  clear_has_departmentid();
}
inline const ::std::string& DocumentParticipant::departmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentParticipant.DepartmentId)
  return *departmentid_;
}
inline void DocumentParticipant::set_departmentid(const ::std::string& value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentParticipant.DepartmentId)
}
inline void DocumentParticipant::set_departmentid(const char* value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.DocumentParticipant.DepartmentId)
}
inline void DocumentParticipant::set_departmentid(const char* value, size_t size) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.DocumentParticipant.DepartmentId)
}
inline ::std::string* DocumentParticipant::mutable_departmentid() {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentParticipant.DepartmentId)
  return departmentid_;
}
inline ::std::string* DocumentParticipant::release_departmentid() {
  clear_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = departmentid_;
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentParticipant::set_allocated_departmentid(::std::string* departmentid) {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete departmentid_;
  }
  if (departmentid) {
    set_has_departmentid();
    departmentid_ = departmentid;
  } else {
    clear_has_departmentid();
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentParticipant.DepartmentId)
}

// -------------------------------------------------------------------

// DocumentLinks

// repeated .Diadoc.Api.Proto.DocumentId InitialIds = 1;
inline int DocumentLinks::initialids_size() const {
  return initialids_.size();
}
inline void DocumentLinks::clear_initialids() {
  initialids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& DocumentLinks::initialids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentLinks.InitialIds)
  return initialids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentLinks::mutable_initialids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentLinks.InitialIds)
  return initialids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentLinks::add_initialids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.DocumentLinks.InitialIds)
  return initialids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
DocumentLinks::initialids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.DocumentLinks.InitialIds)
  return initialids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
DocumentLinks::mutable_initialids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.DocumentLinks.InitialIds)
  return &initialids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateIds = 2;
inline int DocumentLinks::subordinateids_size() const {
  return subordinateids_.size();
}
inline void DocumentLinks::clear_subordinateids() {
  subordinateids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& DocumentLinks::subordinateids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentLinks.SubordinateIds)
  return subordinateids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentLinks::mutable_subordinateids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentLinks.SubordinateIds)
  return subordinateids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentLinks::add_subordinateids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.DocumentLinks.SubordinateIds)
  return subordinateids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
DocumentLinks::subordinateids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.DocumentLinks.SubordinateIds)
  return subordinateids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
DocumentLinks::mutable_subordinateids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.DocumentLinks.SubordinateIds)
  return &subordinateids_;
}

// -------------------------------------------------------------------

// PacketInfo

// required .Diadoc.Api.Proto.LockMode LockMode = 1;
inline bool PacketInfo::has_lockmode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketInfo::set_has_lockmode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketInfo::clear_has_lockmode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketInfo::clear_lockmode() {
  lockmode_ = 0;
  clear_has_lockmode();
}
inline ::Diadoc::Api::Proto::LockMode PacketInfo::lockmode() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.PacketInfo.LockMode)
  return static_cast< ::Diadoc::Api::Proto::LockMode >(lockmode_);
}
inline void PacketInfo::set_lockmode(::Diadoc::Api::Proto::LockMode value) {
  assert(::Diadoc::Api::Proto::LockMode_IsValid(value));
  set_has_lockmode();
  lockmode_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.PacketInfo.LockMode)
}

// optional string PacketId = 2;
inline bool PacketInfo::has_packetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketInfo::set_has_packetid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketInfo::clear_has_packetid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketInfo::clear_packetid() {
  if (packetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packetid_->clear();
  }
  clear_has_packetid();
}
inline const ::std::string& PacketInfo::packetid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.PacketInfo.PacketId)
  return *packetid_;
}
inline void PacketInfo::set_packetid(const ::std::string& value) {
  set_has_packetid();
  if (packetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packetid_ = new ::std::string;
  }
  packetid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.PacketInfo.PacketId)
}
inline void PacketInfo::set_packetid(const char* value) {
  set_has_packetid();
  if (packetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packetid_ = new ::std::string;
  }
  packetid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.PacketInfo.PacketId)
}
inline void PacketInfo::set_packetid(const char* value, size_t size) {
  set_has_packetid();
  if (packetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packetid_ = new ::std::string;
  }
  packetid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.PacketInfo.PacketId)
}
inline ::std::string* PacketInfo::mutable_packetid() {
  set_has_packetid();
  if (packetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packetid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.PacketInfo.PacketId)
  return packetid_;
}
inline ::std::string* PacketInfo::release_packetid() {
  clear_has_packetid();
  if (packetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = packetid_;
    packetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PacketInfo::set_allocated_packetid(::std::string* packetid) {
  if (packetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete packetid_;
  }
  if (packetid) {
    set_has_packetid();
    packetid_ = packetid;
  } else {
    clear_has_packetid();
    packetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.PacketInfo.PacketId)
}

// optional .Diadoc.Api.Proto.Timestamp AddedAt = 3;
inline bool PacketInfo::has_addedat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PacketInfo::set_has_addedat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PacketInfo::clear_has_addedat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PacketInfo::clear_addedat() {
  if (addedat_ != NULL) addedat_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_addedat();
}
inline const ::Diadoc::Api::Proto::Timestamp& PacketInfo::addedat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.PacketInfo.AddedAt)
  return addedat_ != NULL ? *addedat_ : *default_instance_->addedat_;
}
inline ::Diadoc::Api::Proto::Timestamp* PacketInfo::mutable_addedat() {
  set_has_addedat();
  if (addedat_ == NULL) addedat_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.PacketInfo.AddedAt)
  return addedat_;
}
inline ::Diadoc::Api::Proto::Timestamp* PacketInfo::release_addedat() {
  clear_has_addedat();
  ::Diadoc::Api::Proto::Timestamp* temp = addedat_;
  addedat_ = NULL;
  return temp;
}
inline void PacketInfo::set_allocated_addedat(::Diadoc::Api::Proto::Timestamp* addedat) {
  delete addedat_;
  addedat_ = addedat;
  if (addedat) {
    set_has_addedat();
  } else {
    clear_has_addedat();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.PacketInfo.AddedAt)
}

// -------------------------------------------------------------------

// DocumentLetterInfo

// required bool IsEncrypted = 1;
inline bool DocumentLetterInfo::has_isencrypted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentLetterInfo::set_has_isencrypted() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentLetterInfo::clear_has_isencrypted() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentLetterInfo::clear_isencrypted() {
  isencrypted_ = false;
  clear_has_isencrypted();
}
inline bool DocumentLetterInfo::isencrypted() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentLetterInfo.IsEncrypted)
  return isencrypted_;
}
inline void DocumentLetterInfo::set_isencrypted(bool value) {
  set_has_isencrypted();
  isencrypted_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentLetterInfo.IsEncrypted)
}

// repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 2;
inline int DocumentLetterInfo::forwarddocumentevents_size() const {
  return forwarddocumentevents_.size();
}
inline void DocumentLetterInfo::clear_forwarddocumentevents() {
  forwarddocumentevents_.Clear();
}
inline const ::Diadoc::Api::Proto::ForwardDocumentEvent& DocumentLetterInfo::forwarddocumentevents(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentLetterInfo.ForwardDocumentEvents)
  return forwarddocumentevents_.Get(index);
}
inline ::Diadoc::Api::Proto::ForwardDocumentEvent* DocumentLetterInfo::mutable_forwarddocumentevents(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentLetterInfo.ForwardDocumentEvents)
  return forwarddocumentevents_.Mutable(index);
}
inline ::Diadoc::Api::Proto::ForwardDocumentEvent* DocumentLetterInfo::add_forwarddocumentevents() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.DocumentLetterInfo.ForwardDocumentEvents)
  return forwarddocumentevents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >&
DocumentLetterInfo::forwarddocumentevents() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.DocumentLetterInfo.ForwardDocumentEvents)
  return forwarddocumentevents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >*
DocumentLetterInfo::mutable_forwarddocumentevents() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.DocumentLetterInfo.ForwardDocumentEvents)
  return &forwarddocumentevents_;
}

// required bool IsTest = 3;
inline bool DocumentLetterInfo::has_istest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentLetterInfo::set_has_istest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentLetterInfo::clear_has_istest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentLetterInfo::clear_istest() {
  istest_ = false;
  clear_has_istest();
}
inline bool DocumentLetterInfo::istest() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentLetterInfo.IsTest)
  return istest_;
}
inline void DocumentLetterInfo::set_istest(bool value) {
  set_has_istest();
  istest_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentLetterInfo.IsTest)
}

// -------------------------------------------------------------------

// DocumentDraftInfo

// required bool IsRecycled = 1;
inline bool DocumentDraftInfo::has_isrecycled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentDraftInfo::set_has_isrecycled() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentDraftInfo::clear_has_isrecycled() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentDraftInfo::clear_isrecycled() {
  isrecycled_ = false;
  clear_has_isrecycled();
}
inline bool DocumentDraftInfo::isrecycled() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentDraftInfo.IsRecycled)
  return isrecycled_;
}
inline void DocumentDraftInfo::set_isrecycled(bool value) {
  set_has_isrecycled();
  isrecycled_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentDraftInfo.IsRecycled)
}

// required bool IsLocked = 2;
inline bool DocumentDraftInfo::has_islocked() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentDraftInfo::set_has_islocked() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentDraftInfo::clear_has_islocked() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentDraftInfo::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool DocumentDraftInfo::islocked() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentDraftInfo.IsLocked)
  return islocked_;
}
inline void DocumentDraftInfo::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentDraftInfo.IsLocked)
}

// repeated string TransformedToLetterIds = 3;
inline int DocumentDraftInfo::transformedtoletterids_size() const {
  return transformedtoletterids_.size();
}
inline void DocumentDraftInfo::clear_transformedtoletterids() {
  transformedtoletterids_.Clear();
}
inline const ::std::string& DocumentDraftInfo::transformedtoletterids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentDraftInfo.TransformedToLetterIds)
  return transformedtoletterids_.Get(index);
}
inline ::std::string* DocumentDraftInfo::mutable_transformedtoletterids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentDraftInfo.TransformedToLetterIds)
  return transformedtoletterids_.Mutable(index);
}
inline void DocumentDraftInfo::set_transformedtoletterids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentDraftInfo.TransformedToLetterIds)
  transformedtoletterids_.Mutable(index)->assign(value);
}
inline void DocumentDraftInfo::set_transformedtoletterids(int index, const char* value) {
  transformedtoletterids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.DocumentDraftInfo.TransformedToLetterIds)
}
inline void DocumentDraftInfo::set_transformedtoletterids(int index, const char* value, size_t size) {
  transformedtoletterids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.DocumentDraftInfo.TransformedToLetterIds)
}
inline ::std::string* DocumentDraftInfo::add_transformedtoletterids() {
  return transformedtoletterids_.Add();
}
inline void DocumentDraftInfo::add_transformedtoletterids(const ::std::string& value) {
  transformedtoletterids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.DocumentDraftInfo.TransformedToLetterIds)
}
inline void DocumentDraftInfo::add_transformedtoletterids(const char* value) {
  transformedtoletterids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Docflow.DocumentDraftInfo.TransformedToLetterIds)
}
inline void DocumentDraftInfo::add_transformedtoletterids(const char* value, size_t size) {
  transformedtoletterids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Docflow.DocumentDraftInfo.TransformedToLetterIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DocumentDraftInfo::transformedtoletterids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.DocumentDraftInfo.TransformedToLetterIds)
  return transformedtoletterids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DocumentDraftInfo::mutable_transformedtoletterids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.DocumentDraftInfo.TransformedToLetterIds)
  return &transformedtoletterids_;
}

// -------------------------------------------------------------------

// DocumentTemplateInfo

// required .Diadoc.Api.Proto.Docflow.DocumentParticipants LetterParticipants = 1;
inline bool DocumentTemplateInfo::has_letterparticipants() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentTemplateInfo::set_has_letterparticipants() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentTemplateInfo::clear_has_letterparticipants() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentTemplateInfo::clear_letterparticipants() {
  if (letterparticipants_ != NULL) letterparticipants_->::Diadoc::Api::Proto::Docflow::DocumentParticipants::Clear();
  clear_has_letterparticipants();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentParticipants& DocumentTemplateInfo::letterparticipants() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.LetterParticipants)
  return letterparticipants_ != NULL ? *letterparticipants_ : *default_instance_->letterparticipants_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentParticipants* DocumentTemplateInfo::mutable_letterparticipants() {
  set_has_letterparticipants();
  if (letterparticipants_ == NULL) letterparticipants_ = new ::Diadoc::Api::Proto::Docflow::DocumentParticipants;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.LetterParticipants)
  return letterparticipants_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentParticipants* DocumentTemplateInfo::release_letterparticipants() {
  clear_has_letterparticipants();
  ::Diadoc::Api::Proto::Docflow::DocumentParticipants* temp = letterparticipants_;
  letterparticipants_ = NULL;
  return temp;
}
inline void DocumentTemplateInfo::set_allocated_letterparticipants(::Diadoc::Api::Proto::Docflow::DocumentParticipants* letterparticipants) {
  delete letterparticipants_;
  letterparticipants_ = letterparticipants;
  if (letterparticipants) {
    set_has_letterparticipants();
  } else {
    clear_has_letterparticipants();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.LetterParticipants)
}

// repeated string TransformedToLetterIds = 2;
inline int DocumentTemplateInfo::transformedtoletterids_size() const {
  return transformedtoletterids_.size();
}
inline void DocumentTemplateInfo::clear_transformedtoletterids() {
  transformedtoletterids_.Clear();
}
inline const ::std::string& DocumentTemplateInfo::transformedtoletterids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TransformedToLetterIds)
  return transformedtoletterids_.Get(index);
}
inline ::std::string* DocumentTemplateInfo::mutable_transformedtoletterids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TransformedToLetterIds)
  return transformedtoletterids_.Mutable(index);
}
inline void DocumentTemplateInfo::set_transformedtoletterids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TransformedToLetterIds)
  transformedtoletterids_.Mutable(index)->assign(value);
}
inline void DocumentTemplateInfo::set_transformedtoletterids(int index, const char* value) {
  transformedtoletterids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TransformedToLetterIds)
}
inline void DocumentTemplateInfo::set_transformedtoletterids(int index, const char* value, size_t size) {
  transformedtoletterids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TransformedToLetterIds)
}
inline ::std::string* DocumentTemplateInfo::add_transformedtoletterids() {
  return transformedtoletterids_.Add();
}
inline void DocumentTemplateInfo::add_transformedtoletterids(const ::std::string& value) {
  transformedtoletterids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TransformedToLetterIds)
}
inline void DocumentTemplateInfo::add_transformedtoletterids(const char* value) {
  transformedtoletterids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TransformedToLetterIds)
}
inline void DocumentTemplateInfo::add_transformedtoletterids(const char* value, size_t size) {
  transformedtoletterids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TransformedToLetterIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DocumentTemplateInfo::transformedtoletterids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TransformedToLetterIds)
  return transformedtoletterids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DocumentTemplateInfo::mutable_transformedtoletterids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TransformedToLetterIds)
  return &transformedtoletterids_;
}

// repeated .Diadoc.Api.Proto.Docflow.TemplateTransformationInfo TemplateTransformationInfos = 3;
inline int DocumentTemplateInfo::templatetransformationinfos_size() const {
  return templatetransformationinfos_.size();
}
inline void DocumentTemplateInfo::clear_templatetransformationinfos() {
  templatetransformationinfos_.Clear();
}
inline const ::Diadoc::Api::Proto::Docflow::TemplateTransformationInfo& DocumentTemplateInfo::templatetransformationinfos(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TemplateTransformationInfos)
  return templatetransformationinfos_.Get(index);
}
inline ::Diadoc::Api::Proto::Docflow::TemplateTransformationInfo* DocumentTemplateInfo::mutable_templatetransformationinfos(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TemplateTransformationInfos)
  return templatetransformationinfos_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Docflow::TemplateTransformationInfo* DocumentTemplateInfo::add_templatetransformationinfos() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TemplateTransformationInfos)
  return templatetransformationinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::TemplateTransformationInfo >&
DocumentTemplateInfo::templatetransformationinfos() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TemplateTransformationInfos)
  return templatetransformationinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Docflow::TemplateTransformationInfo >*
DocumentTemplateInfo::mutable_templatetransformationinfos() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TemplateTransformationInfos)
  return &templatetransformationinfos_;
}

// optional .Diadoc.Api.Proto.Docflow.TemplateRefusalInfo TemplateRefusalInfo = 4;
inline bool DocumentTemplateInfo::has_templaterefusalinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentTemplateInfo::set_has_templaterefusalinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentTemplateInfo::clear_has_templaterefusalinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentTemplateInfo::clear_templaterefusalinfo() {
  if (templaterefusalinfo_ != NULL) templaterefusalinfo_->::Diadoc::Api::Proto::Docflow::TemplateRefusalInfo::Clear();
  clear_has_templaterefusalinfo();
}
inline const ::Diadoc::Api::Proto::Docflow::TemplateRefusalInfo& DocumentTemplateInfo::templaterefusalinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TemplateRefusalInfo)
  return templaterefusalinfo_ != NULL ? *templaterefusalinfo_ : *default_instance_->templaterefusalinfo_;
}
inline ::Diadoc::Api::Proto::Docflow::TemplateRefusalInfo* DocumentTemplateInfo::mutable_templaterefusalinfo() {
  set_has_templaterefusalinfo();
  if (templaterefusalinfo_ == NULL) templaterefusalinfo_ = new ::Diadoc::Api::Proto::Docflow::TemplateRefusalInfo;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TemplateRefusalInfo)
  return templaterefusalinfo_;
}
inline ::Diadoc::Api::Proto::Docflow::TemplateRefusalInfo* DocumentTemplateInfo::release_templaterefusalinfo() {
  clear_has_templaterefusalinfo();
  ::Diadoc::Api::Proto::Docflow::TemplateRefusalInfo* temp = templaterefusalinfo_;
  templaterefusalinfo_ = NULL;
  return temp;
}
inline void DocumentTemplateInfo::set_allocated_templaterefusalinfo(::Diadoc::Api::Proto::Docflow::TemplateRefusalInfo* templaterefusalinfo) {
  delete templaterefusalinfo_;
  templaterefusalinfo_ = templaterefusalinfo;
  if (templaterefusalinfo) {
    set_has_templaterefusalinfo();
  } else {
    clear_has_templaterefusalinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.TemplateRefusalInfo)
}

// optional bool IsReusable = 5 [default = false];
inline bool DocumentTemplateInfo::has_isreusable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentTemplateInfo::set_has_isreusable() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentTemplateInfo::clear_has_isreusable() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentTemplateInfo::clear_isreusable() {
  isreusable_ = false;
  clear_has_isreusable();
}
inline bool DocumentTemplateInfo::isreusable() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.IsReusable)
  return isreusable_;
}
inline void DocumentTemplateInfo::set_isreusable(bool value) {
  set_has_isreusable();
  isreusable_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.DocumentTemplateInfo.IsReusable)
}

// -------------------------------------------------------------------

// TemplateTransformationInfo

// required string TransformationId = 1;
inline bool TemplateTransformationInfo::has_transformationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TemplateTransformationInfo::set_has_transformationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TemplateTransformationInfo::clear_has_transformationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TemplateTransformationInfo::clear_transformationid() {
  if (transformationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transformationid_->clear();
  }
  clear_has_transformationid();
}
inline const ::std::string& TemplateTransformationInfo::transformationid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo.TransformationId)
  return *transformationid_;
}
inline void TemplateTransformationInfo::set_transformationid(const ::std::string& value) {
  set_has_transformationid();
  if (transformationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transformationid_ = new ::std::string;
  }
  transformationid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo.TransformationId)
}
inline void TemplateTransformationInfo::set_transformationid(const char* value) {
  set_has_transformationid();
  if (transformationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transformationid_ = new ::std::string;
  }
  transformationid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo.TransformationId)
}
inline void TemplateTransformationInfo::set_transformationid(const char* value, size_t size) {
  set_has_transformationid();
  if (transformationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transformationid_ = new ::std::string;
  }
  transformationid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo.TransformationId)
}
inline ::std::string* TemplateTransformationInfo::mutable_transformationid() {
  set_has_transformationid();
  if (transformationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transformationid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo.TransformationId)
  return transformationid_;
}
inline ::std::string* TemplateTransformationInfo::release_transformationid() {
  clear_has_transformationid();
  if (transformationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = transformationid_;
    transformationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateTransformationInfo::set_allocated_transformationid(::std::string* transformationid) {
  if (transformationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transformationid_;
  }
  if (transformationid) {
    set_has_transformationid();
    transformationid_ = transformationid;
  } else {
    clear_has_transformationid();
    transformationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo.TransformationId)
}

// optional .Diadoc.Api.Proto.DocumentId TransformedToDocumentId = 2;
inline bool TemplateTransformationInfo::has_transformedtodocumentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TemplateTransformationInfo::set_has_transformedtodocumentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TemplateTransformationInfo::clear_has_transformedtodocumentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TemplateTransformationInfo::clear_transformedtodocumentid() {
  if (transformedtodocumentid_ != NULL) transformedtodocumentid_->::Diadoc::Api::Proto::DocumentId::Clear();
  clear_has_transformedtodocumentid();
}
inline const ::Diadoc::Api::Proto::DocumentId& TemplateTransformationInfo::transformedtodocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo.TransformedToDocumentId)
  return transformedtodocumentid_ != NULL ? *transformedtodocumentid_ : *default_instance_->transformedtodocumentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* TemplateTransformationInfo::mutable_transformedtodocumentid() {
  set_has_transformedtodocumentid();
  if (transformedtodocumentid_ == NULL) transformedtodocumentid_ = new ::Diadoc::Api::Proto::DocumentId;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo.TransformedToDocumentId)
  return transformedtodocumentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* TemplateTransformationInfo::release_transformedtodocumentid() {
  clear_has_transformedtodocumentid();
  ::Diadoc::Api::Proto::DocumentId* temp = transformedtodocumentid_;
  transformedtodocumentid_ = NULL;
  return temp;
}
inline void TemplateTransformationInfo::set_allocated_transformedtodocumentid(::Diadoc::Api::Proto::DocumentId* transformedtodocumentid) {
  delete transformedtodocumentid_;
  transformedtodocumentid_ = transformedtodocumentid;
  if (transformedtodocumentid) {
    set_has_transformedtodocumentid();
  } else {
    clear_has_transformedtodocumentid();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo.TransformedToDocumentId)
}

// optional string AuthorUserId = 3;
inline bool TemplateTransformationInfo::has_authoruserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TemplateTransformationInfo::set_has_authoruserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TemplateTransformationInfo::clear_has_authoruserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TemplateTransformationInfo::clear_authoruserid() {
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_->clear();
  }
  clear_has_authoruserid();
}
inline const ::std::string& TemplateTransformationInfo::authoruserid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo.AuthorUserId)
  return *authoruserid_;
}
inline void TemplateTransformationInfo::set_authoruserid(const ::std::string& value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo.AuthorUserId)
}
inline void TemplateTransformationInfo::set_authoruserid(const char* value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo.AuthorUserId)
}
inline void TemplateTransformationInfo::set_authoruserid(const char* value, size_t size) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo.AuthorUserId)
}
inline ::std::string* TemplateTransformationInfo::mutable_authoruserid() {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo.AuthorUserId)
  return authoruserid_;
}
inline ::std::string* TemplateTransformationInfo::release_authoruserid() {
  clear_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authoruserid_;
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateTransformationInfo::set_allocated_authoruserid(::std::string* authoruserid) {
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authoruserid_;
  }
  if (authoruserid) {
    set_has_authoruserid();
    authoruserid_ = authoruserid;
  } else {
    clear_has_authoruserid();
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.TemplateTransformationInfo.AuthorUserId)
}

// -------------------------------------------------------------------

// TemplateRefusalInfo

// required string BoxId = 1;
inline bool TemplateRefusalInfo::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TemplateRefusalInfo::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TemplateRefusalInfo::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TemplateRefusalInfo::clear_boxid() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_->clear();
  }
  clear_has_boxid();
}
inline const ::std::string& TemplateRefusalInfo::boxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.BoxId)
  return *boxid_;
}
inline void TemplateRefusalInfo::set_boxid(const ::std::string& value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.BoxId)
}
inline void TemplateRefusalInfo::set_boxid(const char* value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.BoxId)
}
inline void TemplateRefusalInfo::set_boxid(const char* value, size_t size) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.BoxId)
}
inline ::std::string* TemplateRefusalInfo::mutable_boxid() {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.BoxId)
  return boxid_;
}
inline ::std::string* TemplateRefusalInfo::release_boxid() {
  clear_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = boxid_;
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateRefusalInfo::set_allocated_boxid(::std::string* boxid) {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (boxid) {
    set_has_boxid();
    boxid_ = boxid;
  } else {
    clear_has_boxid();
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.BoxId)
}

// optional string AuthorUserId = 2;
inline bool TemplateRefusalInfo::has_authoruserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TemplateRefusalInfo::set_has_authoruserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TemplateRefusalInfo::clear_has_authoruserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TemplateRefusalInfo::clear_authoruserid() {
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_->clear();
  }
  clear_has_authoruserid();
}
inline const ::std::string& TemplateRefusalInfo::authoruserid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.AuthorUserId)
  return *authoruserid_;
}
inline void TemplateRefusalInfo::set_authoruserid(const ::std::string& value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.AuthorUserId)
}
inline void TemplateRefusalInfo::set_authoruserid(const char* value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.AuthorUserId)
}
inline void TemplateRefusalInfo::set_authoruserid(const char* value, size_t size) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.AuthorUserId)
}
inline ::std::string* TemplateRefusalInfo::mutable_authoruserid() {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.AuthorUserId)
  return authoruserid_;
}
inline ::std::string* TemplateRefusalInfo::release_authoruserid() {
  clear_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authoruserid_;
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateRefusalInfo::set_allocated_authoruserid(::std::string* authoruserid) {
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authoruserid_;
  }
  if (authoruserid) {
    set_has_authoruserid();
    authoruserid_ = authoruserid;
  } else {
    clear_has_authoruserid();
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.AuthorUserId)
}

// optional string Comment = 3;
inline bool TemplateRefusalInfo::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TemplateRefusalInfo::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TemplateRefusalInfo::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TemplateRefusalInfo::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& TemplateRefusalInfo::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.Comment)
  return *comment_;
}
inline void TemplateRefusalInfo::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.Comment)
}
inline void TemplateRefusalInfo::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.Comment)
}
inline void TemplateRefusalInfo::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.Comment)
}
inline ::std::string* TemplateRefusalInfo::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.Comment)
  return comment_;
}
inline ::std::string* TemplateRefusalInfo::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateRefusalInfo::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Docflow.TemplateRefusalInfo.Comment)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Docflow_2fDocumentInfoV3_2eproto__INCLUDED
