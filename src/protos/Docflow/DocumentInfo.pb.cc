// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/DocumentInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Docflow/DocumentInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

namespace {

const ::google::protobuf::Descriptor* DocumentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentDateAndNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentDateAndNumber_reflection_ = NULL;
const ::google::protobuf::Descriptor* BasicDocumentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasicDocumentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvoiceDocumentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvoiceDocumentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvoiceCorrectionDocumentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvoiceCorrectionDocumentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PriceListDocumentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PriceListDocumentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContractDocumentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContractDocumentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SupplementaryAgreementDocumentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SupplementaryAgreementDocumentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UniversalTransferDocumentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniversalTransferDocumentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UniversalCorrectionDocumentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniversalCorrectionDocumentInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Docflow_2fDocumentInfo_2eproto() {
  protobuf_AddDesc_Docflow_2fDocumentInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Docflow/DocumentInfo.proto");
  GOOGLE_CHECK(file != NULL);
  DocumentInfo_descriptor_ = file->message_type(0);
  static const int DocumentInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, documenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, documentdirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, istest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, fromdepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, todepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, counteragentboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, documentdateandnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, basicdocumentinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, invoiceinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, invoicecorrectioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, pricelistinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, contractinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, supplementaryagreementinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, universaltransferdocumentinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, universalcorrectiondocumentinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, attachmentversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, version_),
  };
  DocumentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentInfo_descriptor_,
      DocumentInfo::default_instance_,
      DocumentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentInfo));
  DocumentDateAndNumber_descriptor_ = file->message_type(1);
  static const int DocumentDateAndNumber_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentDateAndNumber, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentDateAndNumber, documentnumber_),
  };
  DocumentDateAndNumber_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentDateAndNumber_descriptor_,
      DocumentDateAndNumber::default_instance_,
      DocumentDateAndNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentDateAndNumber, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentDateAndNumber, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentDateAndNumber));
  BasicDocumentInfo_descriptor_ = file->message_type(2);
  static const int BasicDocumentInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentInfo, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentInfo, novat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentInfo, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentInfo, grounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentInfo, revisiondateandnumber_),
  };
  BasicDocumentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BasicDocumentInfo_descriptor_,
      BasicDocumentInfo::default_instance_,
      BasicDocumentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BasicDocumentInfo));
  InvoiceDocumentInfo_descriptor_ = file->message_type(3);
  static const int InvoiceDocumentInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceDocumentInfo, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceDocumentInfo, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceDocumentInfo, currencycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceDocumentInfo, originalinvoicedateandnumber_),
  };
  InvoiceDocumentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvoiceDocumentInfo_descriptor_,
      InvoiceDocumentInfo::default_instance_,
      InvoiceDocumentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceDocumentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceDocumentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvoiceDocumentInfo));
  InvoiceCorrectionDocumentInfo_descriptor_ = file->message_type(4);
  static const int InvoiceCorrectionDocumentInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionDocumentInfo, totalinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionDocumentInfo, totaldec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionDocumentInfo, vatinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionDocumentInfo, vatdec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionDocumentInfo, currencycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionDocumentInfo, originalinvoicedateandnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionDocumentInfo, originalinvoicerevisiondateandnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionDocumentInfo, originalinvoicecorrectiondateandnumber_),
  };
  InvoiceCorrectionDocumentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvoiceCorrectionDocumentInfo_descriptor_,
      InvoiceCorrectionDocumentInfo::default_instance_,
      InvoiceCorrectionDocumentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionDocumentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionDocumentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvoiceCorrectionDocumentInfo));
  PriceListDocumentInfo_descriptor_ = file->message_type(5);
  static const int PriceListDocumentInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListDocumentInfo, pricelisteffectivedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListDocumentInfo, contractdocumentdateandnumber_),
  };
  PriceListDocumentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PriceListDocumentInfo_descriptor_,
      PriceListDocumentInfo::default_instance_,
      PriceListDocumentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListDocumentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListDocumentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PriceListDocumentInfo));
  ContractDocumentInfo_descriptor_ = file->message_type(6);
  static const int ContractDocumentInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractDocumentInfo, contractprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractDocumentInfo, contracttype_),
  };
  ContractDocumentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContractDocumentInfo_descriptor_,
      ContractDocumentInfo::default_instance_,
      ContractDocumentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractDocumentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractDocumentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContractDocumentInfo));
  SupplementaryAgreementDocumentInfo_descriptor_ = file->message_type(7);
  static const int SupplementaryAgreementDocumentInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementDocumentInfo, contracttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementDocumentInfo, contractdocumentdateandnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementDocumentInfo, documentdateandnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementDocumentInfo, total_),
  };
  SupplementaryAgreementDocumentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SupplementaryAgreementDocumentInfo_descriptor_,
      SupplementaryAgreementDocumentInfo::default_instance_,
      SupplementaryAgreementDocumentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementDocumentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementDocumentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SupplementaryAgreementDocumentInfo));
  UniversalTransferDocumentInfo_descriptor_ = file->message_type(8);
  static const int UniversalTransferDocumentInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalTransferDocumentInfo, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalTransferDocumentInfo, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalTransferDocumentInfo, currencycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalTransferDocumentInfo, grounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalTransferDocumentInfo, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalTransferDocumentInfo, originaldocumentdateandnumber_),
  };
  UniversalTransferDocumentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UniversalTransferDocumentInfo_descriptor_,
      UniversalTransferDocumentInfo::default_instance_,
      UniversalTransferDocumentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalTransferDocumentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalTransferDocumentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UniversalTransferDocumentInfo));
  UniversalCorrectionDocumentInfo_descriptor_ = file->message_type(9);
  static const int UniversalCorrectionDocumentInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalCorrectionDocumentInfo, totalinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalCorrectionDocumentInfo, totaldec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalCorrectionDocumentInfo, vatinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalCorrectionDocumentInfo, vatdec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalCorrectionDocumentInfo, currencycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalCorrectionDocumentInfo, grounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalCorrectionDocumentInfo, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalCorrectionDocumentInfo, originaldocumentdateandnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalCorrectionDocumentInfo, originaldocumentrevisiondateandnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalCorrectionDocumentInfo, originaldocumentcorrectiondateandnumber_),
  };
  UniversalCorrectionDocumentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UniversalCorrectionDocumentInfo_descriptor_,
      UniversalCorrectionDocumentInfo::default_instance_,
      UniversalCorrectionDocumentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalCorrectionDocumentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniversalCorrectionDocumentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UniversalCorrectionDocumentInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Docflow_2fDocumentInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentInfo_descriptor_, &DocumentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentDateAndNumber_descriptor_, &DocumentDateAndNumber::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BasicDocumentInfo_descriptor_, &BasicDocumentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvoiceDocumentInfo_descriptor_, &InvoiceDocumentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvoiceCorrectionDocumentInfo_descriptor_, &InvoiceCorrectionDocumentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PriceListDocumentInfo_descriptor_, &PriceListDocumentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContractDocumentInfo_descriptor_, &ContractDocumentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SupplementaryAgreementDocumentInfo_descriptor_, &SupplementaryAgreementDocumentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UniversalTransferDocumentInfo_descriptor_, &UniversalTransferDocumentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UniversalCorrectionDocumentInfo_descriptor_, &UniversalCorrectionDocumentInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Docflow_2fDocumentInfo_2eproto() {
  delete DocumentInfo::default_instance_;
  delete DocumentInfo_reflection_;
  delete DocumentDateAndNumber::default_instance_;
  delete DocumentDateAndNumber_reflection_;
  delete BasicDocumentInfo::default_instance_;
  delete BasicDocumentInfo_reflection_;
  delete InvoiceDocumentInfo::default_instance_;
  delete InvoiceDocumentInfo_reflection_;
  delete InvoiceCorrectionDocumentInfo::default_instance_;
  delete InvoiceCorrectionDocumentInfo_reflection_;
  delete PriceListDocumentInfo::default_instance_;
  delete PriceListDocumentInfo_reflection_;
  delete ContractDocumentInfo::default_instance_;
  delete ContractDocumentInfo_reflection_;
  delete SupplementaryAgreementDocumentInfo::default_instance_;
  delete SupplementaryAgreementDocumentInfo_reflection_;
  delete UniversalTransferDocumentInfo::default_instance_;
  delete UniversalTransferDocumentInfo_reflection_;
  delete UniversalCorrectionDocumentInfo::default_instance_;
  delete UniversalCorrectionDocumentInfo_reflection_;
}

void protobuf_AddDesc_Docflow_2fDocumentInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_DocumentType_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_DocumentDirection_2eproto();
  ::Diadoc::Api::Proto::Invoicing::protobuf_AddDesc_Invoicing_2fUniversalTransferDocumentInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032Docflow/DocumentInfo.proto\022\030Diadoc.Api"
    ".Proto.Docflow\032\022DocumentType.proto\032\027Docu"
    "mentDirection.proto\032-Invoicing/Universal"
    "TransferDocumentInfo.proto\"\276\010\n\014DocumentI"
    "nfo\022I\n\014DocumentType\030\001 \001(\0162\036.Diadoc.Api.P"
    "roto.DocumentType:\023UnknownDocumentType\022X"
    "\n\021DocumentDirection\030\002 \001(\0162#.Diadoc.Api.P"
    "roto.DocumentDirection:\030UnknownDocumentD"
    "irection\022\016\n\006IsTest\030\003 \001(\010\022\030\n\020CustomDocume"
    "ntId\030\004 \001(\t\022\030\n\020FromDepartmentId\030\005 \001(\t\022\026\n\016"
    "ToDepartmentId\030\006 \001(\t\022\031\n\021CounteragentBoxI"
    "d\030\007 \001(\t\022N\n\025DocumentDateAndNumber\030\010 \001(\0132/"
    ".Diadoc.Api.Proto.Docflow.DocumentDateAn"
    "dNumber\022F\n\021BasicDocumentInfo\030\t \001(\0132+.Dia"
    "doc.Api.Proto.Docflow.BasicDocumentInfo\022"
    "B\n\013InvoiceInfo\030\n \001(\0132-.Diadoc.Api.Proto."
    "Docflow.InvoiceDocumentInfo\022V\n\025InvoiceCo"
    "rrectionInfo\030\013 \001(\01327.Diadoc.Api.Proto.Do"
    "cflow.InvoiceCorrectionDocumentInfo\022F\n\rP"
    "riceListInfo\030\014 \001(\0132/.Diadoc.Api.Proto.Do"
    "cflow.PriceListDocumentInfo\022D\n\014ContractI"
    "nfo\030\r \001(\0132..Diadoc.Api.Proto.Docflow.Con"
    "tractDocumentInfo\022`\n\032SupplementaryAgreem"
    "entInfo\030\016 \001(\0132<.Diadoc.Api.Proto.Docflow"
    ".SupplementaryAgreementDocumentInfo\022^\n\035U"
    "niversalTransferDocumentInfo\030\017 \001(\01327.Dia"
    "doc.Api.Proto.Docflow.UniversalTransferD"
    "ocumentInfo\022b\n\037UniversalCorrectionDocume"
    "ntInfo\030\020 \001(\01329.Diadoc.Api.Proto.Docflow."
    "UniversalCorrectionDocumentInfo\022\031\n\021Attac"
    "hmentVersion\030\021 \001(\t\022\017\n\007Version\030\022 \002(\t\"E\n\025D"
    "ocumentDateAndNumber\022\024\n\014DocumentDate\030\001 \001"
    "(\t\022\026\n\016DocumentNumber\030\002 \001(\t\"\237\001\n\021BasicDocu"
    "mentInfo\022\r\n\005Total\030\001 \001(\t\022\r\n\005NoVat\030\002 \001(\010\022\013"
    "\n\003Vat\030\003 \001(\t\022\017\n\007Grounds\030\004 \001(\t\022N\n\025Revision"
    "DateAndNumber\030\005 \001(\0132/.Diadoc.Api.Proto.D"
    "ocflow.DocumentDateAndNumber\"\236\001\n\023Invoice"
    "DocumentInfo\022\r\n\005Total\030\001 \001(\t\022\013\n\003Vat\030\002 \001(\t"
    "\022\024\n\014CurrencyCode\030\003 \001(\005\022U\n\034OriginalInvoic"
    "eDateAndNumber\030\004 \001(\0132/.Diadoc.Api.Proto."
    "Docflow.DocumentDateAndNumber\"\220\003\n\035Invoic"
    "eCorrectionDocumentInfo\022\020\n\010TotalInc\030\001 \001("
    "\t\022\020\n\010TotalDec\030\002 \001(\t\022\016\n\006VatInc\030\003 \001(\t\022\016\n\006V"
    "atDec\030\004 \001(\t\022\024\n\014CurrencyCode\030\005 \001(\005\022U\n\034Ori"
    "ginalInvoiceDateAndNumber\030\006 \001(\0132/.Diadoc"
    ".Api.Proto.Docflow.DocumentDateAndNumber"
    "\022]\n$OriginalInvoiceRevisionDateAndNumber"
    "\030\007 \001(\0132/.Diadoc.Api.Proto.Docflow.Docume"
    "ntDateAndNumber\022_\n&OriginalInvoiceCorrec"
    "tionDateAndNumber\030\010 \001(\0132/.Diadoc.Api.Pro"
    "to.Docflow.DocumentDateAndNumber\"\217\001\n\025Pri"
    "ceListDocumentInfo\022\036\n\026PriceListEffective"
    "Date\030\001 \001(\t\022V\n\035ContractDocumentDateAndNum"
    "ber\030\002 \001(\0132/.Diadoc.Api.Proto.Docflow.Doc"
    "umentDateAndNumber\"C\n\024ContractDocumentIn"
    "fo\022\025\n\rContractPrice\030\001 \001(\t\022\024\n\014ContractTyp"
    "e\030\002 \001(\t\"\361\001\n\"SupplementaryAgreementDocume"
    "ntInfo\022\024\n\014ContractType\030\001 \001(\t\022V\n\035Contract"
    "DocumentDateAndNumber\030\002 \002(\0132/.Diadoc.Api"
    ".Proto.Docflow.DocumentDateAndNumber\022N\n\025"
    "DocumentDateAndNumber\030\003 \002(\0132/.Diadoc.Api"
    ".Proto.Docflow.DocumentDateAndNumber\022\r\n\005"
    "Total\030\004 \001(\t\"\366\001\n\035UniversalTransferDocumen"
    "tInfo\022\r\n\005Total\030\001 \001(\t\022\013\n\003Vat\030\002 \001(\t\022\024\n\014Cur"
    "rencyCode\030\003 \001(\005\022\017\n\007Grounds\030\004 \001(\t\022:\n\010Func"
    "tion\030\005 \002(\0162(.Diadoc.Api.Proto.Invoicing."
    "FunctionType\022V\n\035OriginalDocumentDateAndN"
    "umber\030\006 \001(\0132/.Diadoc.Api.Proto.Docflow.D"
    "ocumentDateAndNumber\"\342\003\n\037UniversalCorrec"
    "tionDocumentInfo\022\020\n\010TotalInc\030\001 \001(\t\022\020\n\010To"
    "talDec\030\002 \001(\t\022\016\n\006VatInc\030\003 \001(\t\022\016\n\006VatDec\030\004"
    " \001(\t\022\024\n\014CurrencyCode\030\005 \001(\005\022\017\n\007Grounds\030\006 "
    "\001(\t\022:\n\010Function\030\007 \002(\0162(.Diadoc.Api.Proto"
    ".Invoicing.FunctionType\022V\n\035OriginalDocum"
    "entDateAndNumber\030\010 \001(\0132/.Diadoc.Api.Prot"
    "o.Docflow.DocumentDateAndNumber\022^\n%Origi"
    "nalDocumentRevisionDateAndNumber\030\t \001(\0132/"
    ".Diadoc.Api.Proto.Docflow.DocumentDateAn"
    "dNumber\022`\n\'OriginalDocumentCorrectionDat"
    "eAndNumber\030\n \001(\0132/.Diadoc.Api.Proto.Docf"
    "low.DocumentDateAndNumber", 3225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Docflow/DocumentInfo.proto", &protobuf_RegisterTypes);
  DocumentInfo::default_instance_ = new DocumentInfo();
  DocumentDateAndNumber::default_instance_ = new DocumentDateAndNumber();
  BasicDocumentInfo::default_instance_ = new BasicDocumentInfo();
  InvoiceDocumentInfo::default_instance_ = new InvoiceDocumentInfo();
  InvoiceCorrectionDocumentInfo::default_instance_ = new InvoiceCorrectionDocumentInfo();
  PriceListDocumentInfo::default_instance_ = new PriceListDocumentInfo();
  ContractDocumentInfo::default_instance_ = new ContractDocumentInfo();
  SupplementaryAgreementDocumentInfo::default_instance_ = new SupplementaryAgreementDocumentInfo();
  UniversalTransferDocumentInfo::default_instance_ = new UniversalTransferDocumentInfo();
  UniversalCorrectionDocumentInfo::default_instance_ = new UniversalCorrectionDocumentInfo();
  DocumentInfo::default_instance_->InitAsDefaultInstance();
  DocumentDateAndNumber::default_instance_->InitAsDefaultInstance();
  BasicDocumentInfo::default_instance_->InitAsDefaultInstance();
  InvoiceDocumentInfo::default_instance_->InitAsDefaultInstance();
  InvoiceCorrectionDocumentInfo::default_instance_->InitAsDefaultInstance();
  PriceListDocumentInfo::default_instance_->InitAsDefaultInstance();
  ContractDocumentInfo::default_instance_->InitAsDefaultInstance();
  SupplementaryAgreementDocumentInfo::default_instance_->InitAsDefaultInstance();
  UniversalTransferDocumentInfo::default_instance_->InitAsDefaultInstance();
  UniversalCorrectionDocumentInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Docflow_2fDocumentInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Docflow_2fDocumentInfo_2eproto {
  StaticDescriptorInitializer_Docflow_2fDocumentInfo_2eproto() {
    protobuf_AddDesc_Docflow_2fDocumentInfo_2eproto();
  }
} static_descriptor_initializer_Docflow_2fDocumentInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DocumentInfo::kDocumentTypeFieldNumber;
const int DocumentInfo::kDocumentDirectionFieldNumber;
const int DocumentInfo::kIsTestFieldNumber;
const int DocumentInfo::kCustomDocumentIdFieldNumber;
const int DocumentInfo::kFromDepartmentIdFieldNumber;
const int DocumentInfo::kToDepartmentIdFieldNumber;
const int DocumentInfo::kCounteragentBoxIdFieldNumber;
const int DocumentInfo::kDocumentDateAndNumberFieldNumber;
const int DocumentInfo::kBasicDocumentInfoFieldNumber;
const int DocumentInfo::kInvoiceInfoFieldNumber;
const int DocumentInfo::kInvoiceCorrectionInfoFieldNumber;
const int DocumentInfo::kPriceListInfoFieldNumber;
const int DocumentInfo::kContractInfoFieldNumber;
const int DocumentInfo::kSupplementaryAgreementInfoFieldNumber;
const int DocumentInfo::kUniversalTransferDocumentInfoFieldNumber;
const int DocumentInfo::kUniversalCorrectionDocumentInfoFieldNumber;
const int DocumentInfo::kAttachmentVersionFieldNumber;
const int DocumentInfo::kVersionFieldNumber;
#endif  // !_MSC_VER

DocumentInfo::DocumentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.DocumentInfo)
}

void DocumentInfo::InitAsDefaultInstance() {
  documentdateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
  basicdocumentinfo_ = const_cast< ::Diadoc::Api::Proto::Docflow::BasicDocumentInfo*>(&::Diadoc::Api::Proto::Docflow::BasicDocumentInfo::default_instance());
  invoiceinfo_ = const_cast< ::Diadoc::Api::Proto::Docflow::InvoiceDocumentInfo*>(&::Diadoc::Api::Proto::Docflow::InvoiceDocumentInfo::default_instance());
  invoicecorrectioninfo_ = const_cast< ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionDocumentInfo*>(&::Diadoc::Api::Proto::Docflow::InvoiceCorrectionDocumentInfo::default_instance());
  pricelistinfo_ = const_cast< ::Diadoc::Api::Proto::Docflow::PriceListDocumentInfo*>(&::Diadoc::Api::Proto::Docflow::PriceListDocumentInfo::default_instance());
  contractinfo_ = const_cast< ::Diadoc::Api::Proto::Docflow::ContractDocumentInfo*>(&::Diadoc::Api::Proto::Docflow::ContractDocumentInfo::default_instance());
  supplementaryagreementinfo_ = const_cast< ::Diadoc::Api::Proto::Docflow::SupplementaryAgreementDocumentInfo*>(&::Diadoc::Api::Proto::Docflow::SupplementaryAgreementDocumentInfo::default_instance());
  universaltransferdocumentinfo_ = const_cast< ::Diadoc::Api::Proto::Docflow::UniversalTransferDocumentInfo*>(&::Diadoc::Api::Proto::Docflow::UniversalTransferDocumentInfo::default_instance());
  universalcorrectiondocumentinfo_ = const_cast< ::Diadoc::Api::Proto::Docflow::UniversalCorrectionDocumentInfo*>(&::Diadoc::Api::Proto::Docflow::UniversalCorrectionDocumentInfo::default_instance());
}

DocumentInfo::DocumentInfo(const DocumentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.DocumentInfo)
}

void DocumentInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documenttype_ = -1;
  documentdirection_ = 0;
  istest_ = false;
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  todepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  counteragentboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentdateandnumber_ = NULL;
  basicdocumentinfo_ = NULL;
  invoiceinfo_ = NULL;
  invoicecorrectioninfo_ = NULL;
  pricelistinfo_ = NULL;
  contractinfo_ = NULL;
  supplementaryagreementinfo_ = NULL;
  universaltransferdocumentinfo_ = NULL;
  universalcorrectiondocumentinfo_ = NULL;
  attachmentversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentInfo::~DocumentInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.DocumentInfo)
  SharedDtor();
}

void DocumentInfo::SharedDtor() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (fromdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromdepartmentid_;
  }
  if (todepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete todepartmentid_;
  }
  if (counteragentboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete counteragentboxid_;
  }
  if (attachmentversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attachmentversion_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
    delete documentdateandnumber_;
    delete basicdocumentinfo_;
    delete invoiceinfo_;
    delete invoicecorrectioninfo_;
    delete pricelistinfo_;
    delete contractinfo_;
    delete supplementaryagreementinfo_;
    delete universaltransferdocumentinfo_;
    delete universalcorrectiondocumentinfo_;
  }
}

void DocumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentInfo_descriptor_;
}

const DocumentInfo& DocumentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocumentInfo_2eproto();
  return *default_instance_;
}

DocumentInfo* DocumentInfo::default_instance_ = NULL;

DocumentInfo* DocumentInfo::New() const {
  return new DocumentInfo;
}

void DocumentInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    documenttype_ = -1;
    documentdirection_ = 0;
    istest_ = false;
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
    if (has_fromdepartmentid()) {
      if (fromdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fromdepartmentid_->clear();
      }
    }
    if (has_todepartmentid()) {
      if (todepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        todepartmentid_->clear();
      }
    }
    if (has_counteragentboxid()) {
      if (counteragentboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        counteragentboxid_->clear();
      }
    }
    if (has_documentdateandnumber()) {
      if (documentdateandnumber_ != NULL) documentdateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_basicdocumentinfo()) {
      if (basicdocumentinfo_ != NULL) basicdocumentinfo_->::Diadoc::Api::Proto::Docflow::BasicDocumentInfo::Clear();
    }
    if (has_invoiceinfo()) {
      if (invoiceinfo_ != NULL) invoiceinfo_->::Diadoc::Api::Proto::Docflow::InvoiceDocumentInfo::Clear();
    }
    if (has_invoicecorrectioninfo()) {
      if (invoicecorrectioninfo_ != NULL) invoicecorrectioninfo_->::Diadoc::Api::Proto::Docflow::InvoiceCorrectionDocumentInfo::Clear();
    }
    if (has_pricelistinfo()) {
      if (pricelistinfo_ != NULL) pricelistinfo_->::Diadoc::Api::Proto::Docflow::PriceListDocumentInfo::Clear();
    }
    if (has_contractinfo()) {
      if (contractinfo_ != NULL) contractinfo_->::Diadoc::Api::Proto::Docflow::ContractDocumentInfo::Clear();
    }
    if (has_supplementaryagreementinfo()) {
      if (supplementaryagreementinfo_ != NULL) supplementaryagreementinfo_->::Diadoc::Api::Proto::Docflow::SupplementaryAgreementDocumentInfo::Clear();
    }
    if (has_universaltransferdocumentinfo()) {
      if (universaltransferdocumentinfo_ != NULL) universaltransferdocumentinfo_->::Diadoc::Api::Proto::Docflow::UniversalTransferDocumentInfo::Clear();
    }
    if (has_universalcorrectiondocumentinfo()) {
      if (universalcorrectiondocumentinfo_ != NULL) universalcorrectiondocumentinfo_->::Diadoc::Api::Proto::Docflow::UniversalCorrectionDocumentInfo::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_attachmentversion()) {
      if (attachmentversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attachmentversion_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.DocumentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.DocumentType DocumentType = 1 [default = UnknownDocumentType];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::DocumentType_IsValid(value)) {
            set_documenttype(static_cast< ::Diadoc::Api::Proto::DocumentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DocumentDirection;
        break;
      }

      // optional .Diadoc.Api.Proto.DocumentDirection DocumentDirection = 2 [default = UnknownDocumentDirection];
      case 2: {
        if (tag == 16) {
         parse_DocumentDirection:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::DocumentDirection_IsValid(value)) {
            set_documentdirection(static_cast< ::Diadoc::Api::Proto::DocumentDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsTest;
        break;
      }

      // optional bool IsTest = 3;
      case 3: {
        if (tag == 24) {
         parse_IsTest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istest_)));
          set_has_istest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 4;
      case 4: {
        if (tag == 34) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_FromDepartmentId;
        break;
      }

      // optional string FromDepartmentId = 5;
      case 5: {
        if (tag == 42) {
         parse_FromDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromdepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromdepartmentid().data(), this->fromdepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fromdepartmentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ToDepartmentId;
        break;
      }

      // optional string ToDepartmentId = 6;
      case 6: {
        if (tag == 50) {
         parse_ToDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->todepartmentid().data(), this->todepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "todepartmentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_CounteragentBoxId;
        break;
      }

      // optional string CounteragentBoxId = 7;
      case 7: {
        if (tag == 58) {
         parse_CounteragentBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_counteragentboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->counteragentboxid().data(), this->counteragentboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "counteragentboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DocumentDateAndNumber;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber DocumentDateAndNumber = 8;
      case 8: {
        if (tag == 66) {
         parse_DocumentDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentdateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_BasicDocumentInfo;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.BasicDocumentInfo BasicDocumentInfo = 9;
      case 9: {
        if (tag == 74) {
         parse_BasicDocumentInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basicdocumentinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_InvoiceInfo;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.InvoiceDocumentInfo InvoiceInfo = 10;
      case 10: {
        if (tag == 82) {
         parse_InvoiceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoiceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_InvoiceCorrectionInfo;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionDocumentInfo InvoiceCorrectionInfo = 11;
      case 11: {
        if (tag == 90) {
         parse_InvoiceCorrectionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoicecorrectioninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_PriceListInfo;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.PriceListDocumentInfo PriceListInfo = 12;
      case 12: {
        if (tag == 98) {
         parse_PriceListInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pricelistinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ContractInfo;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ContractDocumentInfo ContractInfo = 13;
      case 13: {
        if (tag == 106) {
         parse_ContractInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contractinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_SupplementaryAgreementInfo;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.SupplementaryAgreementDocumentInfo SupplementaryAgreementInfo = 14;
      case 14: {
        if (tag == 114) {
         parse_SupplementaryAgreementInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_supplementaryagreementinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_UniversalTransferDocumentInfo;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.UniversalTransferDocumentInfo UniversalTransferDocumentInfo = 15;
      case 15: {
        if (tag == 122) {
         parse_UniversalTransferDocumentInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_universaltransferdocumentinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_UniversalCorrectionDocumentInfo;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.UniversalCorrectionDocumentInfo UniversalCorrectionDocumentInfo = 16;
      case 16: {
        if (tag == 130) {
         parse_UniversalCorrectionDocumentInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_universalcorrectiondocumentinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_AttachmentVersion;
        break;
      }

      // optional string AttachmentVersion = 17;
      case 17: {
        if (tag == 138) {
         parse_AttachmentVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attachmentversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attachmentversion().data(), this->attachmentversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "attachmentversion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_Version;
        break;
      }

      // required string Version = 18;
      case 18: {
        if (tag == 146) {
         parse_Version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.DocumentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.DocumentInfo)
  return false;
#undef DO_
}

void DocumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.DocumentInfo)
  // optional .Diadoc.Api.Proto.DocumentType DocumentType = 1 [default = UnknownDocumentType];
  if (has_documenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->documenttype(), output);
  }

  // optional .Diadoc.Api.Proto.DocumentDirection DocumentDirection = 2 [default = UnknownDocumentDirection];
  if (has_documentdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->documentdirection(), output);
  }

  // optional bool IsTest = 3;
  if (has_istest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->istest(), output);
  }

  // optional string CustomDocumentId = 4;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->customdocumentid(), output);
  }

  // optional string FromDepartmentId = 5;
  if (has_fromdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromdepartmentid().data(), this->fromdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromdepartmentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fromdepartmentid(), output);
  }

  // optional string ToDepartmentId = 6;
  if (has_todepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->todepartmentid().data(), this->todepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "todepartmentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->todepartmentid(), output);
  }

  // optional string CounteragentBoxId = 7;
  if (has_counteragentboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->counteragentboxid().data(), this->counteragentboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "counteragentboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->counteragentboxid(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber DocumentDateAndNumber = 8;
  if (has_documentdateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->documentdateandnumber(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.BasicDocumentInfo BasicDocumentInfo = 9;
  if (has_basicdocumentinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->basicdocumentinfo(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceDocumentInfo InvoiceInfo = 10;
  if (has_invoiceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->invoiceinfo(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionDocumentInfo InvoiceCorrectionInfo = 11;
  if (has_invoicecorrectioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->invoicecorrectioninfo(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.PriceListDocumentInfo PriceListInfo = 12;
  if (has_pricelistinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->pricelistinfo(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ContractDocumentInfo ContractInfo = 13;
  if (has_contractinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->contractinfo(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.SupplementaryAgreementDocumentInfo SupplementaryAgreementInfo = 14;
  if (has_supplementaryagreementinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->supplementaryagreementinfo(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.UniversalTransferDocumentInfo UniversalTransferDocumentInfo = 15;
  if (has_universaltransferdocumentinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->universaltransferdocumentinfo(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.UniversalCorrectionDocumentInfo UniversalCorrectionDocumentInfo = 16;
  if (has_universalcorrectiondocumentinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->universalcorrectiondocumentinfo(), output);
  }

  // optional string AttachmentVersion = 17;
  if (has_attachmentversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attachmentversion().data(), this->attachmentversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attachmentversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->attachmentversion(), output);
  }

  // required string Version = 18;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.DocumentInfo)
}

::google::protobuf::uint8* DocumentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.DocumentInfo)
  // optional .Diadoc.Api.Proto.DocumentType DocumentType = 1 [default = UnknownDocumentType];
  if (has_documenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->documenttype(), target);
  }

  // optional .Diadoc.Api.Proto.DocumentDirection DocumentDirection = 2 [default = UnknownDocumentDirection];
  if (has_documentdirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->documentdirection(), target);
  }

  // optional bool IsTest = 3;
  if (has_istest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istest(), target);
  }

  // optional string CustomDocumentId = 4;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->customdocumentid(), target);
  }

  // optional string FromDepartmentId = 5;
  if (has_fromdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromdepartmentid().data(), this->fromdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromdepartmentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fromdepartmentid(), target);
  }

  // optional string ToDepartmentId = 6;
  if (has_todepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->todepartmentid().data(), this->todepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "todepartmentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->todepartmentid(), target);
  }

  // optional string CounteragentBoxId = 7;
  if (has_counteragentboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->counteragentboxid().data(), this->counteragentboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "counteragentboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->counteragentboxid(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber DocumentDateAndNumber = 8;
  if (has_documentdateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->documentdateandnumber(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.BasicDocumentInfo BasicDocumentInfo = 9;
  if (has_basicdocumentinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->basicdocumentinfo(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceDocumentInfo InvoiceInfo = 10;
  if (has_invoiceinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->invoiceinfo(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionDocumentInfo InvoiceCorrectionInfo = 11;
  if (has_invoicecorrectioninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->invoicecorrectioninfo(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.PriceListDocumentInfo PriceListInfo = 12;
  if (has_pricelistinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->pricelistinfo(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ContractDocumentInfo ContractInfo = 13;
  if (has_contractinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->contractinfo(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.SupplementaryAgreementDocumentInfo SupplementaryAgreementInfo = 14;
  if (has_supplementaryagreementinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->supplementaryagreementinfo(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.UniversalTransferDocumentInfo UniversalTransferDocumentInfo = 15;
  if (has_universaltransferdocumentinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->universaltransferdocumentinfo(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.UniversalCorrectionDocumentInfo UniversalCorrectionDocumentInfo = 16;
  if (has_universalcorrectiondocumentinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->universalcorrectiondocumentinfo(), target);
  }

  // optional string AttachmentVersion = 17;
  if (has_attachmentversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attachmentversion().data(), this->attachmentversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attachmentversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->attachmentversion(), target);
  }

  // required string Version = 18;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.DocumentInfo)
  return target;
}

int DocumentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.DocumentType DocumentType = 1 [default = UnknownDocumentType];
    if (has_documenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->documenttype());
    }

    // optional .Diadoc.Api.Proto.DocumentDirection DocumentDirection = 2 [default = UnknownDocumentDirection];
    if (has_documentdirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->documentdirection());
    }

    // optional bool IsTest = 3;
    if (has_istest()) {
      total_size += 1 + 1;
    }

    // optional string CustomDocumentId = 4;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // optional string FromDepartmentId = 5;
    if (has_fromdepartmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromdepartmentid());
    }

    // optional string ToDepartmentId = 6;
    if (has_todepartmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->todepartmentid());
    }

    // optional string CounteragentBoxId = 7;
    if (has_counteragentboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->counteragentboxid());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber DocumentDateAndNumber = 8;
    if (has_documentdateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentdateandnumber());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Diadoc.Api.Proto.Docflow.BasicDocumentInfo BasicDocumentInfo = 9;
    if (has_basicdocumentinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basicdocumentinfo());
    }

    // optional .Diadoc.Api.Proto.Docflow.InvoiceDocumentInfo InvoiceInfo = 10;
    if (has_invoiceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoiceinfo());
    }

    // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionDocumentInfo InvoiceCorrectionInfo = 11;
    if (has_invoicecorrectioninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoicecorrectioninfo());
    }

    // optional .Diadoc.Api.Proto.Docflow.PriceListDocumentInfo PriceListInfo = 12;
    if (has_pricelistinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pricelistinfo());
    }

    // optional .Diadoc.Api.Proto.Docflow.ContractDocumentInfo ContractInfo = 13;
    if (has_contractinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contractinfo());
    }

    // optional .Diadoc.Api.Proto.Docflow.SupplementaryAgreementDocumentInfo SupplementaryAgreementInfo = 14;
    if (has_supplementaryagreementinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->supplementaryagreementinfo());
    }

    // optional .Diadoc.Api.Proto.Docflow.UniversalTransferDocumentInfo UniversalTransferDocumentInfo = 15;
    if (has_universaltransferdocumentinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->universaltransferdocumentinfo());
    }

    // optional .Diadoc.Api.Proto.Docflow.UniversalCorrectionDocumentInfo UniversalCorrectionDocumentInfo = 16;
    if (has_universalcorrectiondocumentinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->universalcorrectiondocumentinfo());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string AttachmentVersion = 17;
    if (has_attachmentversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attachmentversion());
    }

    // required string Version = 18;
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentInfo::MergeFrom(const DocumentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documenttype()) {
      set_documenttype(from.documenttype());
    }
    if (from.has_documentdirection()) {
      set_documentdirection(from.documentdirection());
    }
    if (from.has_istest()) {
      set_istest(from.istest());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_fromdepartmentid()) {
      set_fromdepartmentid(from.fromdepartmentid());
    }
    if (from.has_todepartmentid()) {
      set_todepartmentid(from.todepartmentid());
    }
    if (from.has_counteragentboxid()) {
      set_counteragentboxid(from.counteragentboxid());
    }
    if (from.has_documentdateandnumber()) {
      mutable_documentdateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.documentdateandnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_basicdocumentinfo()) {
      mutable_basicdocumentinfo()->::Diadoc::Api::Proto::Docflow::BasicDocumentInfo::MergeFrom(from.basicdocumentinfo());
    }
    if (from.has_invoiceinfo()) {
      mutable_invoiceinfo()->::Diadoc::Api::Proto::Docflow::InvoiceDocumentInfo::MergeFrom(from.invoiceinfo());
    }
    if (from.has_invoicecorrectioninfo()) {
      mutable_invoicecorrectioninfo()->::Diadoc::Api::Proto::Docflow::InvoiceCorrectionDocumentInfo::MergeFrom(from.invoicecorrectioninfo());
    }
    if (from.has_pricelistinfo()) {
      mutable_pricelistinfo()->::Diadoc::Api::Proto::Docflow::PriceListDocumentInfo::MergeFrom(from.pricelistinfo());
    }
    if (from.has_contractinfo()) {
      mutable_contractinfo()->::Diadoc::Api::Proto::Docflow::ContractDocumentInfo::MergeFrom(from.contractinfo());
    }
    if (from.has_supplementaryagreementinfo()) {
      mutable_supplementaryagreementinfo()->::Diadoc::Api::Proto::Docflow::SupplementaryAgreementDocumentInfo::MergeFrom(from.supplementaryagreementinfo());
    }
    if (from.has_universaltransferdocumentinfo()) {
      mutable_universaltransferdocumentinfo()->::Diadoc::Api::Proto::Docflow::UniversalTransferDocumentInfo::MergeFrom(from.universaltransferdocumentinfo());
    }
    if (from.has_universalcorrectiondocumentinfo()) {
      mutable_universalcorrectiondocumentinfo()->::Diadoc::Api::Proto::Docflow::UniversalCorrectionDocumentInfo::MergeFrom(from.universalcorrectiondocumentinfo());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_attachmentversion()) {
      set_attachmentversion(from.attachmentversion());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentInfo::CopyFrom(const DocumentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00020000) != 0x00020000) return false;

  if (has_supplementaryagreementinfo()) {
    if (!this->supplementaryagreementinfo().IsInitialized()) return false;
  }
  if (has_universaltransferdocumentinfo()) {
    if (!this->universaltransferdocumentinfo().IsInitialized()) return false;
  }
  if (has_universalcorrectiondocumentinfo()) {
    if (!this->universalcorrectiondocumentinfo().IsInitialized()) return false;
  }
  return true;
}

void DocumentInfo::Swap(DocumentInfo* other) {
  if (other != this) {
    std::swap(documenttype_, other->documenttype_);
    std::swap(documentdirection_, other->documentdirection_);
    std::swap(istest_, other->istest_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(fromdepartmentid_, other->fromdepartmentid_);
    std::swap(todepartmentid_, other->todepartmentid_);
    std::swap(counteragentboxid_, other->counteragentboxid_);
    std::swap(documentdateandnumber_, other->documentdateandnumber_);
    std::swap(basicdocumentinfo_, other->basicdocumentinfo_);
    std::swap(invoiceinfo_, other->invoiceinfo_);
    std::swap(invoicecorrectioninfo_, other->invoicecorrectioninfo_);
    std::swap(pricelistinfo_, other->pricelistinfo_);
    std::swap(contractinfo_, other->contractinfo_);
    std::swap(supplementaryagreementinfo_, other->supplementaryagreementinfo_);
    std::swap(universaltransferdocumentinfo_, other->universaltransferdocumentinfo_);
    std::swap(universalcorrectiondocumentinfo_, other->universalcorrectiondocumentinfo_);
    std::swap(attachmentversion_, other->attachmentversion_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentInfo_descriptor_;
  metadata.reflection = DocumentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentDateAndNumber::kDocumentDateFieldNumber;
const int DocumentDateAndNumber::kDocumentNumberFieldNumber;
#endif  // !_MSC_VER

DocumentDateAndNumber::DocumentDateAndNumber()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.DocumentDateAndNumber)
}

void DocumentDateAndNumber::InitAsDefaultInstance() {
}

DocumentDateAndNumber::DocumentDateAndNumber(const DocumentDateAndNumber& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.DocumentDateAndNumber)
}

void DocumentDateAndNumber::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentDateAndNumber::~DocumentDateAndNumber() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.DocumentDateAndNumber)
  SharedDtor();
}

void DocumentDateAndNumber::SharedDtor() {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (this != default_instance_) {
  }
}

void DocumentDateAndNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentDateAndNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentDateAndNumber_descriptor_;
}

const DocumentDateAndNumber& DocumentDateAndNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocumentInfo_2eproto();
  return *default_instance_;
}

DocumentDateAndNumber* DocumentDateAndNumber::default_instance_ = NULL;

DocumentDateAndNumber* DocumentDateAndNumber::New() const {
  return new DocumentDateAndNumber;
}

void DocumentDateAndNumber::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentnumber_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentDateAndNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.DocumentDateAndNumber)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DocumentDate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DocumentNumber;
        break;
      }

      // optional string DocumentNumber = 2;
      case 2: {
        if (tag == 18) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.DocumentDateAndNumber)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.DocumentDateAndNumber)
  return false;
#undef DO_
}

void DocumentDateAndNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.DocumentDateAndNumber)
  // optional string DocumentDate = 1;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->documentdate(), output);
  }

  // optional string DocumentNumber = 2;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->documentnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.DocumentDateAndNumber)
}

::google::protobuf::uint8* DocumentDateAndNumber::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.DocumentDateAndNumber)
  // optional string DocumentDate = 1;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->documentdate(), target);
  }

  // optional string DocumentNumber = 2;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->documentnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.DocumentDateAndNumber)
  return target;
}

int DocumentDateAndNumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string DocumentDate = 1;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // optional string DocumentNumber = 2;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentDateAndNumber::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentDateAndNumber* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentDateAndNumber*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentDateAndNumber::MergeFrom(const DocumentDateAndNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentDateAndNumber::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentDateAndNumber::CopyFrom(const DocumentDateAndNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentDateAndNumber::IsInitialized() const {

  return true;
}

void DocumentDateAndNumber::Swap(DocumentDateAndNumber* other) {
  if (other != this) {
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentDateAndNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentDateAndNumber_descriptor_;
  metadata.reflection = DocumentDateAndNumber_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BasicDocumentInfo::kTotalFieldNumber;
const int BasicDocumentInfo::kNoVatFieldNumber;
const int BasicDocumentInfo::kVatFieldNumber;
const int BasicDocumentInfo::kGroundsFieldNumber;
const int BasicDocumentInfo::kRevisionDateAndNumberFieldNumber;
#endif  // !_MSC_VER

BasicDocumentInfo::BasicDocumentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.BasicDocumentInfo)
}

void BasicDocumentInfo::InitAsDefaultInstance() {
  revisiondateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
}

BasicDocumentInfo::BasicDocumentInfo(const BasicDocumentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.BasicDocumentInfo)
}

void BasicDocumentInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  novat_ = false;
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revisiondateandnumber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicDocumentInfo::~BasicDocumentInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.BasicDocumentInfo)
  SharedDtor();
}

void BasicDocumentInfo::SharedDtor() {
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grounds_;
  }
  if (this != default_instance_) {
    delete revisiondateandnumber_;
  }
}

void BasicDocumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicDocumentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicDocumentInfo_descriptor_;
}

const BasicDocumentInfo& BasicDocumentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocumentInfo_2eproto();
  return *default_instance_;
}

BasicDocumentInfo* BasicDocumentInfo::default_instance_ = NULL;

BasicDocumentInfo* BasicDocumentInfo::New() const {
  return new BasicDocumentInfo;
}

void BasicDocumentInfo::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        total_->clear();
      }
    }
    novat_ = false;
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vat_->clear();
      }
    }
    if (has_grounds()) {
      if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grounds_->clear();
      }
    }
    if (has_revisiondateandnumber()) {
      if (revisiondateandnumber_ != NULL) revisiondateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BasicDocumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.BasicDocumentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Total = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "total");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NoVat;
        break;
      }

      // optional bool NoVat = 2;
      case 2: {
        if (tag == 16) {
         parse_NoVat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &novat_)));
          set_has_novat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Vat;
        break;
      }

      // optional string Vat = 3;
      case 3: {
        if (tag == 26) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Grounds;
        break;
      }

      // optional string Grounds = 4;
      case 4: {
        if (tag == 34) {
         parse_Grounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grounds()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grounds().data(), this->grounds().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grounds");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RevisionDateAndNumber;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber RevisionDateAndNumber = 5;
      case 5: {
        if (tag == 42) {
         parse_RevisionDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revisiondateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.BasicDocumentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.BasicDocumentInfo)
  return false;
#undef DO_
}

void BasicDocumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.BasicDocumentInfo)
  // optional string Total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->total(), output);
  }

  // optional bool NoVat = 2;
  if (has_novat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->novat(), output);
  }

  // optional string Vat = 3;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vat(), output);
  }

  // optional string Grounds = 4;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grounds");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->grounds(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber RevisionDateAndNumber = 5;
  if (has_revisiondateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->revisiondateandnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.BasicDocumentInfo)
}

::google::protobuf::uint8* BasicDocumentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.BasicDocumentInfo)
  // optional string Total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->total(), target);
  }

  // optional bool NoVat = 2;
  if (has_novat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->novat(), target);
  }

  // optional string Vat = 3;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vat(), target);
  }

  // optional string Grounds = 4;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grounds");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->grounds(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber RevisionDateAndNumber = 5;
  if (has_revisiondateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->revisiondateandnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.BasicDocumentInfo)
  return target;
}

int BasicDocumentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

    // optional bool NoVat = 2;
    if (has_novat()) {
      total_size += 1 + 1;
    }

    // optional string Vat = 3;
    if (has_vat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

    // optional string Grounds = 4;
    if (has_grounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grounds());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber RevisionDateAndNumber = 5;
    if (has_revisiondateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revisiondateandnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicDocumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BasicDocumentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BasicDocumentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BasicDocumentInfo::MergeFrom(const BasicDocumentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_novat()) {
      set_novat(from.novat());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
    if (from.has_grounds()) {
      set_grounds(from.grounds());
    }
    if (from.has_revisiondateandnumber()) {
      mutable_revisiondateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.revisiondateandnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BasicDocumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicDocumentInfo::CopyFrom(const BasicDocumentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicDocumentInfo::IsInitialized() const {

  return true;
}

void BasicDocumentInfo::Swap(BasicDocumentInfo* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    std::swap(novat_, other->novat_);
    std::swap(vat_, other->vat_);
    std::swap(grounds_, other->grounds_);
    std::swap(revisiondateandnumber_, other->revisiondateandnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BasicDocumentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasicDocumentInfo_descriptor_;
  metadata.reflection = BasicDocumentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvoiceDocumentInfo::kTotalFieldNumber;
const int InvoiceDocumentInfo::kVatFieldNumber;
const int InvoiceDocumentInfo::kCurrencyCodeFieldNumber;
const int InvoiceDocumentInfo::kOriginalInvoiceDateAndNumberFieldNumber;
#endif  // !_MSC_VER

InvoiceDocumentInfo::InvoiceDocumentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.InvoiceDocumentInfo)
}

void InvoiceDocumentInfo::InitAsDefaultInstance() {
  originalinvoicedateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
}

InvoiceDocumentInfo::InvoiceDocumentInfo(const InvoiceDocumentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.InvoiceDocumentInfo)
}

void InvoiceDocumentInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencycode_ = 0;
  originalinvoicedateandnumber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvoiceDocumentInfo::~InvoiceDocumentInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.InvoiceDocumentInfo)
  SharedDtor();
}

void InvoiceDocumentInfo::SharedDtor() {
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (this != default_instance_) {
    delete originalinvoicedateandnumber_;
  }
}

void InvoiceDocumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvoiceDocumentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvoiceDocumentInfo_descriptor_;
}

const InvoiceDocumentInfo& InvoiceDocumentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocumentInfo_2eproto();
  return *default_instance_;
}

InvoiceDocumentInfo* InvoiceDocumentInfo::default_instance_ = NULL;

InvoiceDocumentInfo* InvoiceDocumentInfo::New() const {
  return new InvoiceDocumentInfo;
}

void InvoiceDocumentInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        total_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vat_->clear();
      }
    }
    currencycode_ = 0;
    if (has_originalinvoicedateandnumber()) {
      if (originalinvoicedateandnumber_ != NULL) originalinvoicedateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvoiceDocumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.InvoiceDocumentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Total = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "total");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Vat;
        break;
      }

      // optional string Vat = 2;
      case 2: {
        if (tag == 18) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurrencyCode;
        break;
      }

      // optional int32 CurrencyCode = 3;
      case 3: {
        if (tag == 24) {
         parse_CurrencyCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currencycode_)));
          set_has_currencycode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_OriginalInvoiceDateAndNumber;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceDateAndNumber = 4;
      case 4: {
        if (tag == 34) {
         parse_OriginalInvoiceDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originalinvoicedateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.InvoiceDocumentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.InvoiceDocumentInfo)
  return false;
#undef DO_
}

void InvoiceDocumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.InvoiceDocumentInfo)
  // optional string Total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->total(), output);
  }

  // optional string Vat = 2;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vat(), output);
  }

  // optional int32 CurrencyCode = 3;
  if (has_currencycode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currencycode(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceDateAndNumber = 4;
  if (has_originalinvoicedateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->originalinvoicedateandnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.InvoiceDocumentInfo)
}

::google::protobuf::uint8* InvoiceDocumentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.InvoiceDocumentInfo)
  // optional string Total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->total(), target);
  }

  // optional string Vat = 2;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vat(), target);
  }

  // optional int32 CurrencyCode = 3;
  if (has_currencycode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currencycode(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceDateAndNumber = 4;
  if (has_originalinvoicedateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->originalinvoicedateandnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.InvoiceDocumentInfo)
  return target;
}

int InvoiceDocumentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

    // optional string Vat = 2;
    if (has_vat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

    // optional int32 CurrencyCode = 3;
    if (has_currencycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currencycode());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceDateAndNumber = 4;
    if (has_originalinvoicedateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originalinvoicedateandnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvoiceDocumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvoiceDocumentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvoiceDocumentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvoiceDocumentInfo::MergeFrom(const InvoiceDocumentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
    if (from.has_currencycode()) {
      set_currencycode(from.currencycode());
    }
    if (from.has_originalinvoicedateandnumber()) {
      mutable_originalinvoicedateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.originalinvoicedateandnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvoiceDocumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvoiceDocumentInfo::CopyFrom(const InvoiceDocumentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceDocumentInfo::IsInitialized() const {

  return true;
}

void InvoiceDocumentInfo::Swap(InvoiceDocumentInfo* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    std::swap(vat_, other->vat_);
    std::swap(currencycode_, other->currencycode_);
    std::swap(originalinvoicedateandnumber_, other->originalinvoicedateandnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvoiceDocumentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvoiceDocumentInfo_descriptor_;
  metadata.reflection = InvoiceDocumentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvoiceCorrectionDocumentInfo::kTotalIncFieldNumber;
const int InvoiceCorrectionDocumentInfo::kTotalDecFieldNumber;
const int InvoiceCorrectionDocumentInfo::kVatIncFieldNumber;
const int InvoiceCorrectionDocumentInfo::kVatDecFieldNumber;
const int InvoiceCorrectionDocumentInfo::kCurrencyCodeFieldNumber;
const int InvoiceCorrectionDocumentInfo::kOriginalInvoiceDateAndNumberFieldNumber;
const int InvoiceCorrectionDocumentInfo::kOriginalInvoiceRevisionDateAndNumberFieldNumber;
const int InvoiceCorrectionDocumentInfo::kOriginalInvoiceCorrectionDateAndNumberFieldNumber;
#endif  // !_MSC_VER

InvoiceCorrectionDocumentInfo::InvoiceCorrectionDocumentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.InvoiceCorrectionDocumentInfo)
}

void InvoiceCorrectionDocumentInfo::InitAsDefaultInstance() {
  originalinvoicedateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
  originalinvoicerevisiondateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
  originalinvoicecorrectiondateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
}

InvoiceCorrectionDocumentInfo::InvoiceCorrectionDocumentInfo(const InvoiceCorrectionDocumentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.InvoiceCorrectionDocumentInfo)
}

void InvoiceCorrectionDocumentInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  totalinc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totaldec_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vatinc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vatdec_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencycode_ = 0;
  originalinvoicedateandnumber_ = NULL;
  originalinvoicerevisiondateandnumber_ = NULL;
  originalinvoicecorrectiondateandnumber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvoiceCorrectionDocumentInfo::~InvoiceCorrectionDocumentInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.InvoiceCorrectionDocumentInfo)
  SharedDtor();
}

void InvoiceCorrectionDocumentInfo::SharedDtor() {
  if (totalinc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete totalinc_;
  }
  if (totaldec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete totaldec_;
  }
  if (vatinc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vatinc_;
  }
  if (vatdec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vatdec_;
  }
  if (this != default_instance_) {
    delete originalinvoicedateandnumber_;
    delete originalinvoicerevisiondateandnumber_;
    delete originalinvoicecorrectiondateandnumber_;
  }
}

void InvoiceCorrectionDocumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvoiceCorrectionDocumentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvoiceCorrectionDocumentInfo_descriptor_;
}

const InvoiceCorrectionDocumentInfo& InvoiceCorrectionDocumentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocumentInfo_2eproto();
  return *default_instance_;
}

InvoiceCorrectionDocumentInfo* InvoiceCorrectionDocumentInfo::default_instance_ = NULL;

InvoiceCorrectionDocumentInfo* InvoiceCorrectionDocumentInfo::New() const {
  return new InvoiceCorrectionDocumentInfo;
}

void InvoiceCorrectionDocumentInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_totalinc()) {
      if (totalinc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        totalinc_->clear();
      }
    }
    if (has_totaldec()) {
      if (totaldec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        totaldec_->clear();
      }
    }
    if (has_vatinc()) {
      if (vatinc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vatinc_->clear();
      }
    }
    if (has_vatdec()) {
      if (vatdec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vatdec_->clear();
      }
    }
    currencycode_ = 0;
    if (has_originalinvoicedateandnumber()) {
      if (originalinvoicedateandnumber_ != NULL) originalinvoicedateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
    if (has_originalinvoicerevisiondateandnumber()) {
      if (originalinvoicerevisiondateandnumber_ != NULL) originalinvoicerevisiondateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
    if (has_originalinvoicecorrectiondateandnumber()) {
      if (originalinvoicecorrectiondateandnumber_ != NULL) originalinvoicecorrectiondateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvoiceCorrectionDocumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.InvoiceCorrectionDocumentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TotalInc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totalinc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->totalinc().data(), this->totalinc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "totalinc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TotalDec;
        break;
      }

      // optional string TotalDec = 2;
      case 2: {
        if (tag == 18) {
         parse_TotalDec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totaldec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->totaldec().data(), this->totaldec().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "totaldec");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_VatInc;
        break;
      }

      // optional string VatInc = 3;
      case 3: {
        if (tag == 26) {
         parse_VatInc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vatinc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vatinc().data(), this->vatinc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vatinc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_VatDec;
        break;
      }

      // optional string VatDec = 4;
      case 4: {
        if (tag == 34) {
         parse_VatDec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vatdec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vatdec().data(), this->vatdec().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vatdec");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CurrencyCode;
        break;
      }

      // optional int32 CurrencyCode = 5;
      case 5: {
        if (tag == 40) {
         parse_CurrencyCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currencycode_)));
          set_has_currencycode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_OriginalInvoiceDateAndNumber;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceDateAndNumber = 6;
      case 6: {
        if (tag == 50) {
         parse_OriginalInvoiceDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originalinvoicedateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_OriginalInvoiceRevisionDateAndNumber;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceRevisionDateAndNumber = 7;
      case 7: {
        if (tag == 58) {
         parse_OriginalInvoiceRevisionDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originalinvoicerevisiondateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_OriginalInvoiceCorrectionDateAndNumber;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceCorrectionDateAndNumber = 8;
      case 8: {
        if (tag == 66) {
         parse_OriginalInvoiceCorrectionDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originalinvoicecorrectiondateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.InvoiceCorrectionDocumentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.InvoiceCorrectionDocumentInfo)
  return false;
#undef DO_
}

void InvoiceCorrectionDocumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.InvoiceCorrectionDocumentInfo)
  // optional string TotalInc = 1;
  if (has_totalinc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totalinc().data(), this->totalinc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totalinc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->totalinc(), output);
  }

  // optional string TotalDec = 2;
  if (has_totaldec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totaldec().data(), this->totaldec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totaldec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->totaldec(), output);
  }

  // optional string VatInc = 3;
  if (has_vatinc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vatinc().data(), this->vatinc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vatinc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vatinc(), output);
  }

  // optional string VatDec = 4;
  if (has_vatdec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vatdec().data(), this->vatdec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vatdec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->vatdec(), output);
  }

  // optional int32 CurrencyCode = 5;
  if (has_currencycode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->currencycode(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceDateAndNumber = 6;
  if (has_originalinvoicedateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->originalinvoicedateandnumber(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceRevisionDateAndNumber = 7;
  if (has_originalinvoicerevisiondateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->originalinvoicerevisiondateandnumber(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceCorrectionDateAndNumber = 8;
  if (has_originalinvoicecorrectiondateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->originalinvoicecorrectiondateandnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.InvoiceCorrectionDocumentInfo)
}

::google::protobuf::uint8* InvoiceCorrectionDocumentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.InvoiceCorrectionDocumentInfo)
  // optional string TotalInc = 1;
  if (has_totalinc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totalinc().data(), this->totalinc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totalinc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->totalinc(), target);
  }

  // optional string TotalDec = 2;
  if (has_totaldec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totaldec().data(), this->totaldec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totaldec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->totaldec(), target);
  }

  // optional string VatInc = 3;
  if (has_vatinc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vatinc().data(), this->vatinc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vatinc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vatinc(), target);
  }

  // optional string VatDec = 4;
  if (has_vatdec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vatdec().data(), this->vatdec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vatdec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vatdec(), target);
  }

  // optional int32 CurrencyCode = 5;
  if (has_currencycode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->currencycode(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceDateAndNumber = 6;
  if (has_originalinvoicedateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->originalinvoicedateandnumber(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceRevisionDateAndNumber = 7;
  if (has_originalinvoicerevisiondateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->originalinvoicerevisiondateandnumber(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceCorrectionDateAndNumber = 8;
  if (has_originalinvoicecorrectiondateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->originalinvoicecorrectiondateandnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.InvoiceCorrectionDocumentInfo)
  return target;
}

int InvoiceCorrectionDocumentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string TotalInc = 1;
    if (has_totalinc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totalinc());
    }

    // optional string TotalDec = 2;
    if (has_totaldec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totaldec());
    }

    // optional string VatInc = 3;
    if (has_vatinc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vatinc());
    }

    // optional string VatDec = 4;
    if (has_vatdec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vatdec());
    }

    // optional int32 CurrencyCode = 5;
    if (has_currencycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currencycode());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceDateAndNumber = 6;
    if (has_originalinvoicedateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originalinvoicedateandnumber());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceRevisionDateAndNumber = 7;
    if (has_originalinvoicerevisiondateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originalinvoicerevisiondateandnumber());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceCorrectionDateAndNumber = 8;
    if (has_originalinvoicecorrectiondateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originalinvoicecorrectiondateandnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvoiceCorrectionDocumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvoiceCorrectionDocumentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvoiceCorrectionDocumentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvoiceCorrectionDocumentInfo::MergeFrom(const InvoiceCorrectionDocumentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalinc()) {
      set_totalinc(from.totalinc());
    }
    if (from.has_totaldec()) {
      set_totaldec(from.totaldec());
    }
    if (from.has_vatinc()) {
      set_vatinc(from.vatinc());
    }
    if (from.has_vatdec()) {
      set_vatdec(from.vatdec());
    }
    if (from.has_currencycode()) {
      set_currencycode(from.currencycode());
    }
    if (from.has_originalinvoicedateandnumber()) {
      mutable_originalinvoicedateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.originalinvoicedateandnumber());
    }
    if (from.has_originalinvoicerevisiondateandnumber()) {
      mutable_originalinvoicerevisiondateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.originalinvoicerevisiondateandnumber());
    }
    if (from.has_originalinvoicecorrectiondateandnumber()) {
      mutable_originalinvoicecorrectiondateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.originalinvoicecorrectiondateandnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvoiceCorrectionDocumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvoiceCorrectionDocumentInfo::CopyFrom(const InvoiceCorrectionDocumentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceCorrectionDocumentInfo::IsInitialized() const {

  return true;
}

void InvoiceCorrectionDocumentInfo::Swap(InvoiceCorrectionDocumentInfo* other) {
  if (other != this) {
    std::swap(totalinc_, other->totalinc_);
    std::swap(totaldec_, other->totaldec_);
    std::swap(vatinc_, other->vatinc_);
    std::swap(vatdec_, other->vatdec_);
    std::swap(currencycode_, other->currencycode_);
    std::swap(originalinvoicedateandnumber_, other->originalinvoicedateandnumber_);
    std::swap(originalinvoicerevisiondateandnumber_, other->originalinvoicerevisiondateandnumber_);
    std::swap(originalinvoicecorrectiondateandnumber_, other->originalinvoicecorrectiondateandnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvoiceCorrectionDocumentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvoiceCorrectionDocumentInfo_descriptor_;
  metadata.reflection = InvoiceCorrectionDocumentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PriceListDocumentInfo::kPriceListEffectiveDateFieldNumber;
const int PriceListDocumentInfo::kContractDocumentDateAndNumberFieldNumber;
#endif  // !_MSC_VER

PriceListDocumentInfo::PriceListDocumentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.PriceListDocumentInfo)
}

void PriceListDocumentInfo::InitAsDefaultInstance() {
  contractdocumentdateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
}

PriceListDocumentInfo::PriceListDocumentInfo(const PriceListDocumentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.PriceListDocumentInfo)
}

void PriceListDocumentInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pricelisteffectivedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractdocumentdateandnumber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriceListDocumentInfo::~PriceListDocumentInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.PriceListDocumentInfo)
  SharedDtor();
}

void PriceListDocumentInfo::SharedDtor() {
  if (pricelisteffectivedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pricelisteffectivedate_;
  }
  if (this != default_instance_) {
    delete contractdocumentdateandnumber_;
  }
}

void PriceListDocumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriceListDocumentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceListDocumentInfo_descriptor_;
}

const PriceListDocumentInfo& PriceListDocumentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocumentInfo_2eproto();
  return *default_instance_;
}

PriceListDocumentInfo* PriceListDocumentInfo::default_instance_ = NULL;

PriceListDocumentInfo* PriceListDocumentInfo::New() const {
  return new PriceListDocumentInfo;
}

void PriceListDocumentInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_pricelisteffectivedate()) {
      if (pricelisteffectivedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pricelisteffectivedate_->clear();
      }
    }
    if (has_contractdocumentdateandnumber()) {
      if (contractdocumentdateandnumber_ != NULL) contractdocumentdateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PriceListDocumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.PriceListDocumentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string PriceListEffectiveDate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricelisteffectivedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pricelisteffectivedate().data(), this->pricelisteffectivedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pricelisteffectivedate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ContractDocumentDateAndNumber;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber ContractDocumentDateAndNumber = 2;
      case 2: {
        if (tag == 18) {
         parse_ContractDocumentDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contractdocumentdateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.PriceListDocumentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.PriceListDocumentInfo)
  return false;
#undef DO_
}

void PriceListDocumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.PriceListDocumentInfo)
  // optional string PriceListEffectiveDate = 1;
  if (has_pricelisteffectivedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricelisteffectivedate().data(), this->pricelisteffectivedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pricelisteffectivedate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pricelisteffectivedate(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber ContractDocumentDateAndNumber = 2;
  if (has_contractdocumentdateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contractdocumentdateandnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.PriceListDocumentInfo)
}

::google::protobuf::uint8* PriceListDocumentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.PriceListDocumentInfo)
  // optional string PriceListEffectiveDate = 1;
  if (has_pricelisteffectivedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricelisteffectivedate().data(), this->pricelisteffectivedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pricelisteffectivedate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pricelisteffectivedate(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber ContractDocumentDateAndNumber = 2;
  if (has_contractdocumentdateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contractdocumentdateandnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.PriceListDocumentInfo)
  return target;
}

int PriceListDocumentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string PriceListEffectiveDate = 1;
    if (has_pricelisteffectivedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricelisteffectivedate());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber ContractDocumentDateAndNumber = 2;
    if (has_contractdocumentdateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contractdocumentdateandnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriceListDocumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PriceListDocumentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PriceListDocumentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PriceListDocumentInfo::MergeFrom(const PriceListDocumentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pricelisteffectivedate()) {
      set_pricelisteffectivedate(from.pricelisteffectivedate());
    }
    if (from.has_contractdocumentdateandnumber()) {
      mutable_contractdocumentdateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.contractdocumentdateandnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PriceListDocumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceListDocumentInfo::CopyFrom(const PriceListDocumentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceListDocumentInfo::IsInitialized() const {

  return true;
}

void PriceListDocumentInfo::Swap(PriceListDocumentInfo* other) {
  if (other != this) {
    std::swap(pricelisteffectivedate_, other->pricelisteffectivedate_);
    std::swap(contractdocumentdateandnumber_, other->contractdocumentdateandnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PriceListDocumentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PriceListDocumentInfo_descriptor_;
  metadata.reflection = PriceListDocumentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContractDocumentInfo::kContractPriceFieldNumber;
const int ContractDocumentInfo::kContractTypeFieldNumber;
#endif  // !_MSC_VER

ContractDocumentInfo::ContractDocumentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.ContractDocumentInfo)
}

void ContractDocumentInfo::InitAsDefaultInstance() {
}

ContractDocumentInfo::ContractDocumentInfo(const ContractDocumentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.ContractDocumentInfo)
}

void ContractDocumentInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  contractprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contracttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContractDocumentInfo::~ContractDocumentInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.ContractDocumentInfo)
  SharedDtor();
}

void ContractDocumentInfo::SharedDtor() {
  if (contractprice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractprice_;
  }
  if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contracttype_;
  }
  if (this != default_instance_) {
  }
}

void ContractDocumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContractDocumentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContractDocumentInfo_descriptor_;
}

const ContractDocumentInfo& ContractDocumentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocumentInfo_2eproto();
  return *default_instance_;
}

ContractDocumentInfo* ContractDocumentInfo::default_instance_ = NULL;

ContractDocumentInfo* ContractDocumentInfo::New() const {
  return new ContractDocumentInfo;
}

void ContractDocumentInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_contractprice()) {
      if (contractprice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractprice_->clear();
      }
    }
    if (has_contracttype()) {
      if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contracttype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContractDocumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.ContractDocumentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ContractPrice = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractprice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractprice().data(), this->contractprice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractprice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ContractType;
        break;
      }

      // optional string ContractType = 2;
      case 2: {
        if (tag == 18) {
         parse_ContractType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contracttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contracttype().data(), this->contracttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contracttype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.ContractDocumentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.ContractDocumentInfo)
  return false;
#undef DO_
}

void ContractDocumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.ContractDocumentInfo)
  // optional string ContractPrice = 1;
  if (has_contractprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractprice().data(), this->contractprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractprice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->contractprice(), output);
  }

  // optional string ContractType = 2;
  if (has_contracttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contracttype().data(), this->contracttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contracttype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->contracttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.ContractDocumentInfo)
}

::google::protobuf::uint8* ContractDocumentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.ContractDocumentInfo)
  // optional string ContractPrice = 1;
  if (has_contractprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractprice().data(), this->contractprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractprice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contractprice(), target);
  }

  // optional string ContractType = 2;
  if (has_contracttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contracttype().data(), this->contracttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contracttype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contracttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.ContractDocumentInfo)
  return target;
}

int ContractDocumentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ContractPrice = 1;
    if (has_contractprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractprice());
    }

    // optional string ContractType = 2;
    if (has_contracttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contracttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContractDocumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContractDocumentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContractDocumentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContractDocumentInfo::MergeFrom(const ContractDocumentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contractprice()) {
      set_contractprice(from.contractprice());
    }
    if (from.has_contracttype()) {
      set_contracttype(from.contracttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContractDocumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractDocumentInfo::CopyFrom(const ContractDocumentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractDocumentInfo::IsInitialized() const {

  return true;
}

void ContractDocumentInfo::Swap(ContractDocumentInfo* other) {
  if (other != this) {
    std::swap(contractprice_, other->contractprice_);
    std::swap(contracttype_, other->contracttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContractDocumentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContractDocumentInfo_descriptor_;
  metadata.reflection = ContractDocumentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SupplementaryAgreementDocumentInfo::kContractTypeFieldNumber;
const int SupplementaryAgreementDocumentInfo::kContractDocumentDateAndNumberFieldNumber;
const int SupplementaryAgreementDocumentInfo::kDocumentDateAndNumberFieldNumber;
const int SupplementaryAgreementDocumentInfo::kTotalFieldNumber;
#endif  // !_MSC_VER

SupplementaryAgreementDocumentInfo::SupplementaryAgreementDocumentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.SupplementaryAgreementDocumentInfo)
}

void SupplementaryAgreementDocumentInfo::InitAsDefaultInstance() {
  contractdocumentdateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
  documentdateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
}

SupplementaryAgreementDocumentInfo::SupplementaryAgreementDocumentInfo(const SupplementaryAgreementDocumentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.SupplementaryAgreementDocumentInfo)
}

void SupplementaryAgreementDocumentInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  contracttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractdocumentdateandnumber_ = NULL;
  documentdateandnumber_ = NULL;
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SupplementaryAgreementDocumentInfo::~SupplementaryAgreementDocumentInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.SupplementaryAgreementDocumentInfo)
  SharedDtor();
}

void SupplementaryAgreementDocumentInfo::SharedDtor() {
  if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contracttype_;
  }
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (this != default_instance_) {
    delete contractdocumentdateandnumber_;
    delete documentdateandnumber_;
  }
}

void SupplementaryAgreementDocumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SupplementaryAgreementDocumentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SupplementaryAgreementDocumentInfo_descriptor_;
}

const SupplementaryAgreementDocumentInfo& SupplementaryAgreementDocumentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocumentInfo_2eproto();
  return *default_instance_;
}

SupplementaryAgreementDocumentInfo* SupplementaryAgreementDocumentInfo::default_instance_ = NULL;

SupplementaryAgreementDocumentInfo* SupplementaryAgreementDocumentInfo::New() const {
  return new SupplementaryAgreementDocumentInfo;
}

void SupplementaryAgreementDocumentInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_contracttype()) {
      if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contracttype_->clear();
      }
    }
    if (has_contractdocumentdateandnumber()) {
      if (contractdocumentdateandnumber_ != NULL) contractdocumentdateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
    if (has_documentdateandnumber()) {
      if (documentdateandnumber_ != NULL) documentdateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        total_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SupplementaryAgreementDocumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.SupplementaryAgreementDocumentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ContractType = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contracttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contracttype().data(), this->contracttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contracttype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ContractDocumentDateAndNumber;
        break;
      }

      // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber ContractDocumentDateAndNumber = 2;
      case 2: {
        if (tag == 18) {
         parse_ContractDocumentDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contractdocumentdateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DocumentDateAndNumber;
        break;
      }

      // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber DocumentDateAndNumber = 3;
      case 3: {
        if (tag == 26) {
         parse_DocumentDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentdateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Total;
        break;
      }

      // optional string Total = 4;
      case 4: {
        if (tag == 34) {
         parse_Total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "total");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.SupplementaryAgreementDocumentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.SupplementaryAgreementDocumentInfo)
  return false;
#undef DO_
}

void SupplementaryAgreementDocumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.SupplementaryAgreementDocumentInfo)
  // optional string ContractType = 1;
  if (has_contracttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contracttype().data(), this->contracttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contracttype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->contracttype(), output);
  }

  // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber ContractDocumentDateAndNumber = 2;
  if (has_contractdocumentdateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contractdocumentdateandnumber(), output);
  }

  // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber DocumentDateAndNumber = 3;
  if (has_documentdateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->documentdateandnumber(), output);
  }

  // optional string Total = 4;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.SupplementaryAgreementDocumentInfo)
}

::google::protobuf::uint8* SupplementaryAgreementDocumentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.SupplementaryAgreementDocumentInfo)
  // optional string ContractType = 1;
  if (has_contracttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contracttype().data(), this->contracttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contracttype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contracttype(), target);
  }

  // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber ContractDocumentDateAndNumber = 2;
  if (has_contractdocumentdateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contractdocumentdateandnumber(), target);
  }

  // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber DocumentDateAndNumber = 3;
  if (has_documentdateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->documentdateandnumber(), target);
  }

  // optional string Total = 4;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.SupplementaryAgreementDocumentInfo)
  return target;
}

int SupplementaryAgreementDocumentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ContractType = 1;
    if (has_contracttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contracttype());
    }

    // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber ContractDocumentDateAndNumber = 2;
    if (has_contractdocumentdateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contractdocumentdateandnumber());
    }

    // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber DocumentDateAndNumber = 3;
    if (has_documentdateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentdateandnumber());
    }

    // optional string Total = 4;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SupplementaryAgreementDocumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SupplementaryAgreementDocumentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SupplementaryAgreementDocumentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SupplementaryAgreementDocumentInfo::MergeFrom(const SupplementaryAgreementDocumentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contracttype()) {
      set_contracttype(from.contracttype());
    }
    if (from.has_contractdocumentdateandnumber()) {
      mutable_contractdocumentdateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.contractdocumentdateandnumber());
    }
    if (from.has_documentdateandnumber()) {
      mutable_documentdateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.documentdateandnumber());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SupplementaryAgreementDocumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupplementaryAgreementDocumentInfo::CopyFrom(const SupplementaryAgreementDocumentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupplementaryAgreementDocumentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void SupplementaryAgreementDocumentInfo::Swap(SupplementaryAgreementDocumentInfo* other) {
  if (other != this) {
    std::swap(contracttype_, other->contracttype_);
    std::swap(contractdocumentdateandnumber_, other->contractdocumentdateandnumber_);
    std::swap(documentdateandnumber_, other->documentdateandnumber_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SupplementaryAgreementDocumentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SupplementaryAgreementDocumentInfo_descriptor_;
  metadata.reflection = SupplementaryAgreementDocumentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UniversalTransferDocumentInfo::kTotalFieldNumber;
const int UniversalTransferDocumentInfo::kVatFieldNumber;
const int UniversalTransferDocumentInfo::kCurrencyCodeFieldNumber;
const int UniversalTransferDocumentInfo::kGroundsFieldNumber;
const int UniversalTransferDocumentInfo::kFunctionFieldNumber;
const int UniversalTransferDocumentInfo::kOriginalDocumentDateAndNumberFieldNumber;
#endif  // !_MSC_VER

UniversalTransferDocumentInfo::UniversalTransferDocumentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.UniversalTransferDocumentInfo)
}

void UniversalTransferDocumentInfo::InitAsDefaultInstance() {
  originaldocumentdateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
}

UniversalTransferDocumentInfo::UniversalTransferDocumentInfo(const UniversalTransferDocumentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.UniversalTransferDocumentInfo)
}

void UniversalTransferDocumentInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencycode_ = 0;
  grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_ = 0;
  originaldocumentdateandnumber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniversalTransferDocumentInfo::~UniversalTransferDocumentInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.UniversalTransferDocumentInfo)
  SharedDtor();
}

void UniversalTransferDocumentInfo::SharedDtor() {
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grounds_;
  }
  if (this != default_instance_) {
    delete originaldocumentdateandnumber_;
  }
}

void UniversalTransferDocumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniversalTransferDocumentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniversalTransferDocumentInfo_descriptor_;
}

const UniversalTransferDocumentInfo& UniversalTransferDocumentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocumentInfo_2eproto();
  return *default_instance_;
}

UniversalTransferDocumentInfo* UniversalTransferDocumentInfo::default_instance_ = NULL;

UniversalTransferDocumentInfo* UniversalTransferDocumentInfo::New() const {
  return new UniversalTransferDocumentInfo;
}

void UniversalTransferDocumentInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UniversalTransferDocumentInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(currencycode_, function_);
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        total_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vat_->clear();
      }
    }
    if (has_grounds()) {
      if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grounds_->clear();
      }
    }
    if (has_originaldocumentdateandnumber()) {
      if (originaldocumentdateandnumber_ != NULL) originaldocumentdateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UniversalTransferDocumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.UniversalTransferDocumentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Total = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "total");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Vat;
        break;
      }

      // optional string Vat = 2;
      case 2: {
        if (tag == 18) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurrencyCode;
        break;
      }

      // optional int32 CurrencyCode = 3;
      case 3: {
        if (tag == 24) {
         parse_CurrencyCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currencycode_)));
          set_has_currencycode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Grounds;
        break;
      }

      // optional string Grounds = 4;
      case 4: {
        if (tag == 34) {
         parse_Grounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grounds()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grounds().data(), this->grounds().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grounds");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Function;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.FunctionType Function = 5;
      case 5: {
        if (tag == 40) {
         parse_Function:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Invoicing::FunctionType_IsValid(value)) {
            set_function(static_cast< ::Diadoc::Api::Proto::Invoicing::FunctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_OriginalDocumentDateAndNumber;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentDateAndNumber = 6;
      case 6: {
        if (tag == 50) {
         parse_OriginalDocumentDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originaldocumentdateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.UniversalTransferDocumentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.UniversalTransferDocumentInfo)
  return false;
#undef DO_
}

void UniversalTransferDocumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.UniversalTransferDocumentInfo)
  // optional string Total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->total(), output);
  }

  // optional string Vat = 2;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vat(), output);
  }

  // optional int32 CurrencyCode = 3;
  if (has_currencycode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currencycode(), output);
  }

  // optional string Grounds = 4;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grounds");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->grounds(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.FunctionType Function = 5;
  if (has_function()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->function(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentDateAndNumber = 6;
  if (has_originaldocumentdateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->originaldocumentdateandnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.UniversalTransferDocumentInfo)
}

::google::protobuf::uint8* UniversalTransferDocumentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.UniversalTransferDocumentInfo)
  // optional string Total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->total(), target);
  }

  // optional string Vat = 2;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vat(), target);
  }

  // optional int32 CurrencyCode = 3;
  if (has_currencycode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currencycode(), target);
  }

  // optional string Grounds = 4;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grounds");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->grounds(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.FunctionType Function = 5;
  if (has_function()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->function(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentDateAndNumber = 6;
  if (has_originaldocumentdateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->originaldocumentdateandnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.UniversalTransferDocumentInfo)
  return target;
}

int UniversalTransferDocumentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

    // optional string Vat = 2;
    if (has_vat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

    // optional int32 CurrencyCode = 3;
    if (has_currencycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currencycode());
    }

    // optional string Grounds = 4;
    if (has_grounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grounds());
    }

    // required .Diadoc.Api.Proto.Invoicing.FunctionType Function = 5;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->function());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentDateAndNumber = 6;
    if (has_originaldocumentdateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originaldocumentdateandnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniversalTransferDocumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UniversalTransferDocumentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UniversalTransferDocumentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniversalTransferDocumentInfo::MergeFrom(const UniversalTransferDocumentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
    if (from.has_currencycode()) {
      set_currencycode(from.currencycode());
    }
    if (from.has_grounds()) {
      set_grounds(from.grounds());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_originaldocumentdateandnumber()) {
      mutable_originaldocumentdateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.originaldocumentdateandnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UniversalTransferDocumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniversalTransferDocumentInfo::CopyFrom(const UniversalTransferDocumentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniversalTransferDocumentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  return true;
}

void UniversalTransferDocumentInfo::Swap(UniversalTransferDocumentInfo* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    std::swap(vat_, other->vat_);
    std::swap(currencycode_, other->currencycode_);
    std::swap(grounds_, other->grounds_);
    std::swap(function_, other->function_);
    std::swap(originaldocumentdateandnumber_, other->originaldocumentdateandnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UniversalTransferDocumentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniversalTransferDocumentInfo_descriptor_;
  metadata.reflection = UniversalTransferDocumentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UniversalCorrectionDocumentInfo::kTotalIncFieldNumber;
const int UniversalCorrectionDocumentInfo::kTotalDecFieldNumber;
const int UniversalCorrectionDocumentInfo::kVatIncFieldNumber;
const int UniversalCorrectionDocumentInfo::kVatDecFieldNumber;
const int UniversalCorrectionDocumentInfo::kCurrencyCodeFieldNumber;
const int UniversalCorrectionDocumentInfo::kGroundsFieldNumber;
const int UniversalCorrectionDocumentInfo::kFunctionFieldNumber;
const int UniversalCorrectionDocumentInfo::kOriginalDocumentDateAndNumberFieldNumber;
const int UniversalCorrectionDocumentInfo::kOriginalDocumentRevisionDateAndNumberFieldNumber;
const int UniversalCorrectionDocumentInfo::kOriginalDocumentCorrectionDateAndNumberFieldNumber;
#endif  // !_MSC_VER

UniversalCorrectionDocumentInfo::UniversalCorrectionDocumentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.UniversalCorrectionDocumentInfo)
}

void UniversalCorrectionDocumentInfo::InitAsDefaultInstance() {
  originaldocumentdateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
  originaldocumentrevisiondateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
  originaldocumentcorrectiondateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
}

UniversalCorrectionDocumentInfo::UniversalCorrectionDocumentInfo(const UniversalCorrectionDocumentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.UniversalCorrectionDocumentInfo)
}

void UniversalCorrectionDocumentInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  totalinc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totaldec_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vatinc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vatdec_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencycode_ = 0;
  grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_ = 0;
  originaldocumentdateandnumber_ = NULL;
  originaldocumentrevisiondateandnumber_ = NULL;
  originaldocumentcorrectiondateandnumber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniversalCorrectionDocumentInfo::~UniversalCorrectionDocumentInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.UniversalCorrectionDocumentInfo)
  SharedDtor();
}

void UniversalCorrectionDocumentInfo::SharedDtor() {
  if (totalinc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete totalinc_;
  }
  if (totaldec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete totaldec_;
  }
  if (vatinc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vatinc_;
  }
  if (vatdec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vatdec_;
  }
  if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grounds_;
  }
  if (this != default_instance_) {
    delete originaldocumentdateandnumber_;
    delete originaldocumentrevisiondateandnumber_;
    delete originaldocumentcorrectiondateandnumber_;
  }
}

void UniversalCorrectionDocumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniversalCorrectionDocumentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniversalCorrectionDocumentInfo_descriptor_;
}

const UniversalCorrectionDocumentInfo& UniversalCorrectionDocumentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fDocumentInfo_2eproto();
  return *default_instance_;
}

UniversalCorrectionDocumentInfo* UniversalCorrectionDocumentInfo::default_instance_ = NULL;

UniversalCorrectionDocumentInfo* UniversalCorrectionDocumentInfo::New() const {
  return new UniversalCorrectionDocumentInfo;
}

void UniversalCorrectionDocumentInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UniversalCorrectionDocumentInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(currencycode_, function_);
    if (has_totalinc()) {
      if (totalinc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        totalinc_->clear();
      }
    }
    if (has_totaldec()) {
      if (totaldec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        totaldec_->clear();
      }
    }
    if (has_vatinc()) {
      if (vatinc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vatinc_->clear();
      }
    }
    if (has_vatdec()) {
      if (vatdec_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vatdec_->clear();
      }
    }
    if (has_grounds()) {
      if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grounds_->clear();
      }
    }
    if (has_originaldocumentdateandnumber()) {
      if (originaldocumentdateandnumber_ != NULL) originaldocumentdateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_originaldocumentrevisiondateandnumber()) {
      if (originaldocumentrevisiondateandnumber_ != NULL) originaldocumentrevisiondateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
    if (has_originaldocumentcorrectiondateandnumber()) {
      if (originaldocumentcorrectiondateandnumber_ != NULL) originaldocumentcorrectiondateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UniversalCorrectionDocumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.UniversalCorrectionDocumentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TotalInc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totalinc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->totalinc().data(), this->totalinc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "totalinc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TotalDec;
        break;
      }

      // optional string TotalDec = 2;
      case 2: {
        if (tag == 18) {
         parse_TotalDec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totaldec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->totaldec().data(), this->totaldec().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "totaldec");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_VatInc;
        break;
      }

      // optional string VatInc = 3;
      case 3: {
        if (tag == 26) {
         parse_VatInc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vatinc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vatinc().data(), this->vatinc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vatinc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_VatDec;
        break;
      }

      // optional string VatDec = 4;
      case 4: {
        if (tag == 34) {
         parse_VatDec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vatdec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vatdec().data(), this->vatdec().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vatdec");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CurrencyCode;
        break;
      }

      // optional int32 CurrencyCode = 5;
      case 5: {
        if (tag == 40) {
         parse_CurrencyCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currencycode_)));
          set_has_currencycode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Grounds;
        break;
      }

      // optional string Grounds = 6;
      case 6: {
        if (tag == 50) {
         parse_Grounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grounds()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grounds().data(), this->grounds().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grounds");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Function;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.FunctionType Function = 7;
      case 7: {
        if (tag == 56) {
         parse_Function:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Invoicing::FunctionType_IsValid(value)) {
            set_function(static_cast< ::Diadoc::Api::Proto::Invoicing::FunctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_OriginalDocumentDateAndNumber;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentDateAndNumber = 8;
      case 8: {
        if (tag == 66) {
         parse_OriginalDocumentDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originaldocumentdateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_OriginalDocumentRevisionDateAndNumber;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentRevisionDateAndNumber = 9;
      case 9: {
        if (tag == 74) {
         parse_OriginalDocumentRevisionDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originaldocumentrevisiondateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_OriginalDocumentCorrectionDateAndNumber;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentCorrectionDateAndNumber = 10;
      case 10: {
        if (tag == 82) {
         parse_OriginalDocumentCorrectionDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originaldocumentcorrectiondateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.UniversalCorrectionDocumentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.UniversalCorrectionDocumentInfo)
  return false;
#undef DO_
}

void UniversalCorrectionDocumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.UniversalCorrectionDocumentInfo)
  // optional string TotalInc = 1;
  if (has_totalinc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totalinc().data(), this->totalinc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totalinc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->totalinc(), output);
  }

  // optional string TotalDec = 2;
  if (has_totaldec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totaldec().data(), this->totaldec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totaldec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->totaldec(), output);
  }

  // optional string VatInc = 3;
  if (has_vatinc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vatinc().data(), this->vatinc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vatinc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vatinc(), output);
  }

  // optional string VatDec = 4;
  if (has_vatdec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vatdec().data(), this->vatdec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vatdec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->vatdec(), output);
  }

  // optional int32 CurrencyCode = 5;
  if (has_currencycode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->currencycode(), output);
  }

  // optional string Grounds = 6;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grounds");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->grounds(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.FunctionType Function = 7;
  if (has_function()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->function(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentDateAndNumber = 8;
  if (has_originaldocumentdateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->originaldocumentdateandnumber(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentRevisionDateAndNumber = 9;
  if (has_originaldocumentrevisiondateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->originaldocumentrevisiondateandnumber(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentCorrectionDateAndNumber = 10;
  if (has_originaldocumentcorrectiondateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->originaldocumentcorrectiondateandnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.UniversalCorrectionDocumentInfo)
}

::google::protobuf::uint8* UniversalCorrectionDocumentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.UniversalCorrectionDocumentInfo)
  // optional string TotalInc = 1;
  if (has_totalinc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totalinc().data(), this->totalinc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totalinc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->totalinc(), target);
  }

  // optional string TotalDec = 2;
  if (has_totaldec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totaldec().data(), this->totaldec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totaldec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->totaldec(), target);
  }

  // optional string VatInc = 3;
  if (has_vatinc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vatinc().data(), this->vatinc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vatinc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vatinc(), target);
  }

  // optional string VatDec = 4;
  if (has_vatdec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vatdec().data(), this->vatdec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vatdec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vatdec(), target);
  }

  // optional int32 CurrencyCode = 5;
  if (has_currencycode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->currencycode(), target);
  }

  // optional string Grounds = 6;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grounds");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->grounds(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.FunctionType Function = 7;
  if (has_function()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->function(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentDateAndNumber = 8;
  if (has_originaldocumentdateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->originaldocumentdateandnumber(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentRevisionDateAndNumber = 9;
  if (has_originaldocumentrevisiondateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->originaldocumentrevisiondateandnumber(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentCorrectionDateAndNumber = 10;
  if (has_originaldocumentcorrectiondateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->originaldocumentcorrectiondateandnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.UniversalCorrectionDocumentInfo)
  return target;
}

int UniversalCorrectionDocumentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string TotalInc = 1;
    if (has_totalinc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totalinc());
    }

    // optional string TotalDec = 2;
    if (has_totaldec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totaldec());
    }

    // optional string VatInc = 3;
    if (has_vatinc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vatinc());
    }

    // optional string VatDec = 4;
    if (has_vatdec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vatdec());
    }

    // optional int32 CurrencyCode = 5;
    if (has_currencycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currencycode());
    }

    // optional string Grounds = 6;
    if (has_grounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grounds());
    }

    // required .Diadoc.Api.Proto.Invoicing.FunctionType Function = 7;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->function());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentDateAndNumber = 8;
    if (has_originaldocumentdateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originaldocumentdateandnumber());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentRevisionDateAndNumber = 9;
    if (has_originaldocumentrevisiondateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originaldocumentrevisiondateandnumber());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalDocumentCorrectionDateAndNumber = 10;
    if (has_originaldocumentcorrectiondateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originaldocumentcorrectiondateandnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniversalCorrectionDocumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UniversalCorrectionDocumentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UniversalCorrectionDocumentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniversalCorrectionDocumentInfo::MergeFrom(const UniversalCorrectionDocumentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalinc()) {
      set_totalinc(from.totalinc());
    }
    if (from.has_totaldec()) {
      set_totaldec(from.totaldec());
    }
    if (from.has_vatinc()) {
      set_vatinc(from.vatinc());
    }
    if (from.has_vatdec()) {
      set_vatdec(from.vatdec());
    }
    if (from.has_currencycode()) {
      set_currencycode(from.currencycode());
    }
    if (from.has_grounds()) {
      set_grounds(from.grounds());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_originaldocumentdateandnumber()) {
      mutable_originaldocumentdateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.originaldocumentdateandnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_originaldocumentrevisiondateandnumber()) {
      mutable_originaldocumentrevisiondateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.originaldocumentrevisiondateandnumber());
    }
    if (from.has_originaldocumentcorrectiondateandnumber()) {
      mutable_originaldocumentcorrectiondateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.originaldocumentcorrectiondateandnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UniversalCorrectionDocumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniversalCorrectionDocumentInfo::CopyFrom(const UniversalCorrectionDocumentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniversalCorrectionDocumentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;

  return true;
}

void UniversalCorrectionDocumentInfo::Swap(UniversalCorrectionDocumentInfo* other) {
  if (other != this) {
    std::swap(totalinc_, other->totalinc_);
    std::swap(totaldec_, other->totaldec_);
    std::swap(vatinc_, other->vatinc_);
    std::swap(vatdec_, other->vatdec_);
    std::swap(currencycode_, other->currencycode_);
    std::swap(grounds_, other->grounds_);
    std::swap(function_, other->function_);
    std::swap(originaldocumentdateandnumber_, other->originaldocumentdateandnumber_);
    std::swap(originaldocumentrevisiondateandnumber_, other->originaldocumentrevisiondateandnumber_);
    std::swap(originaldocumentcorrectiondateandnumber_, other->originaldocumentcorrectiondateandnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UniversalCorrectionDocumentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniversalCorrectionDocumentInfo_descriptor_;
  metadata.reflection = UniversalCorrectionDocumentInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
