// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/AttachmentV3.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Docflow/AttachmentV3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

namespace {

const ::google::protobuf::Descriptor* SignatureV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignatureV3_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignedAttachmentV3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedAttachmentV3_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Docflow_2fAttachmentV3_2eproto() {
  protobuf_AddDesc_Docflow_2fAttachmentV3_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Docflow/AttachmentV3.proto");
  GOOGLE_CHECK(file != NULL);
  SignatureV3_descriptor_ = file->message_type(0);
  static const int SignatureV3_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureV3, cms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureV3, cadest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureV3, signerboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureV3, signerdepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureV3, isvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureV3, verificationresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureV3, deliveredat_),
  };
  SignatureV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignatureV3_descriptor_,
      SignatureV3::default_instance_,
      SignatureV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignatureV3));
  SignedAttachmentV3_descriptor_ = file->message_type(1);
  static const int SignedAttachmentV3_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedAttachmentV3, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedAttachmentV3, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedAttachmentV3, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedAttachmentV3, contenttypeid_),
  };
  SignedAttachmentV3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignedAttachmentV3_descriptor_,
      SignedAttachmentV3::default_instance_,
      SignedAttachmentV3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedAttachmentV3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedAttachmentV3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignedAttachmentV3));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Docflow_2fAttachmentV3_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignatureV3_descriptor_, &SignatureV3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignedAttachmentV3_descriptor_, &SignedAttachmentV3::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Docflow_2fAttachmentV3_2eproto() {
  delete SignatureV3::default_instance_;
  delete SignatureV3_reflection_;
  delete SignedAttachmentV3::default_instance_;
  delete SignedAttachmentV3_reflection_;
}

void protobuf_AddDesc_Docflow_2fAttachmentV3_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fAttachment_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_Content_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_SignatureVerificationResult_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032Docflow/AttachmentV3.proto\022\030Diadoc.Api"
    ".Proto.Docflow\032\030Docflow/Attachment.proto"
    "\032\rContent.proto\032\017Timestamp.proto\032!Signat"
    "ureVerificationResult.proto\"\255\002\n\013Signatur"
    "eV3\022-\n\003Cms\030\001 \002(\0132 .Diadoc.Api.Proto.Docf"
    "low.Entity\0220\n\006CadesT\030\002 \001(\0132 .Diadoc.Api."
    "Proto.Docflow.Entity\022\023\n\013SignerBoxId\030\003 \002("
    "\t\022\032\n\022SignerDepartmentId\030\004 \002(\t\022\017\n\007IsValid"
    "\030\005 \002(\010\022I\n\022VerificationResult\030\006 \001(\0132-.Dia"
    "doc.Api.Proto.SignatureVerificationResul"
    "t\0220\n\013DeliveredAt\030\007 \001(\0132\033.Diadoc.Api.Prot"
    "o.Timestamp\"\322\001\n\022SignedAttachmentV3\0228\n\nAt"
    "tachment\030\001 \002(\0132$.Diadoc.Api.Proto.Docflo"
    "w.Attachment\0228\n\tSignature\030\002 \001(\0132%.Diadoc"
    ".Api.Proto.Docflow.SignatureV3\0221\n\007Commen"
    "t\030\003 \001(\0132 .Diadoc.Api.Proto.Docflow.Entit"
    "y\022\025\n\rContentTypeId\030\004 \002(\t", 664);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Docflow/AttachmentV3.proto", &protobuf_RegisterTypes);
  SignatureV3::default_instance_ = new SignatureV3();
  SignedAttachmentV3::default_instance_ = new SignedAttachmentV3();
  SignatureV3::default_instance_->InitAsDefaultInstance();
  SignedAttachmentV3::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Docflow_2fAttachmentV3_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Docflow_2fAttachmentV3_2eproto {
  StaticDescriptorInitializer_Docflow_2fAttachmentV3_2eproto() {
    protobuf_AddDesc_Docflow_2fAttachmentV3_2eproto();
  }
} static_descriptor_initializer_Docflow_2fAttachmentV3_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SignatureV3::kCmsFieldNumber;
const int SignatureV3::kCadesTFieldNumber;
const int SignatureV3::kSignerBoxIdFieldNumber;
const int SignatureV3::kSignerDepartmentIdFieldNumber;
const int SignatureV3::kIsValidFieldNumber;
const int SignatureV3::kVerificationResultFieldNumber;
const int SignatureV3::kDeliveredAtFieldNumber;
#endif  // !_MSC_VER

SignatureV3::SignatureV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.SignatureV3)
}

void SignatureV3::InitAsDefaultInstance() {
  cms_ = const_cast< ::Diadoc::Api::Proto::Docflow::Entity*>(&::Diadoc::Api::Proto::Docflow::Entity::default_instance());
  cadest_ = const_cast< ::Diadoc::Api::Proto::Docflow::Entity*>(&::Diadoc::Api::Proto::Docflow::Entity::default_instance());
  verificationresult_ = const_cast< ::Diadoc::Api::Proto::SignatureVerificationResult*>(&::Diadoc::Api::Proto::SignatureVerificationResult::default_instance());
  deliveredat_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
}

SignatureV3::SignatureV3(const SignatureV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.SignatureV3)
}

void SignatureV3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cms_ = NULL;
  cadest_ = NULL;
  signerboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signerdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isvalid_ = false;
  verificationresult_ = NULL;
  deliveredat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignatureV3::~SignatureV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.SignatureV3)
  SharedDtor();
}

void SignatureV3::SharedDtor() {
  if (signerboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signerboxid_;
  }
  if (signerdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signerdepartmentid_;
  }
  if (this != default_instance_) {
    delete cms_;
    delete cadest_;
    delete verificationresult_;
    delete deliveredat_;
  }
}

void SignatureV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignatureV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignatureV3_descriptor_;
}

const SignatureV3& SignatureV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fAttachmentV3_2eproto();
  return *default_instance_;
}

SignatureV3* SignatureV3::default_instance_ = NULL;

SignatureV3* SignatureV3::New() const {
  return new SignatureV3;
}

void SignatureV3::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_cms()) {
      if (cms_ != NULL) cms_->::Diadoc::Api::Proto::Docflow::Entity::Clear();
    }
    if (has_cadest()) {
      if (cadest_ != NULL) cadest_->::Diadoc::Api::Proto::Docflow::Entity::Clear();
    }
    if (has_signerboxid()) {
      if (signerboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signerboxid_->clear();
      }
    }
    if (has_signerdepartmentid()) {
      if (signerdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signerdepartmentid_->clear();
      }
    }
    isvalid_ = false;
    if (has_verificationresult()) {
      if (verificationresult_ != NULL) verificationresult_->::Diadoc::Api::Proto::SignatureVerificationResult::Clear();
    }
    if (has_deliveredat()) {
      if (deliveredat_ != NULL) deliveredat_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignatureV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.SignatureV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Docflow.Entity Cms = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CadesT;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.Entity CadesT = 2;
      case 2: {
        if (tag == 18) {
         parse_CadesT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cadest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SignerBoxId;
        break;
      }

      // required string SignerBoxId = 3;
      case 3: {
        if (tag == 26) {
         parse_SignerBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signerboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signerboxid().data(), this->signerboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signerboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SignerDepartmentId;
        break;
      }

      // required string SignerDepartmentId = 4;
      case 4: {
        if (tag == 34) {
         parse_SignerDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signerdepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signerdepartmentid().data(), this->signerdepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signerdepartmentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsValid;
        break;
      }

      // required bool IsValid = 5;
      case 5: {
        if (tag == 40) {
         parse_IsValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvalid_)));
          set_has_isvalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_VerificationResult;
        break;
      }

      // optional .Diadoc.Api.Proto.SignatureVerificationResult VerificationResult = 6;
      case 6: {
        if (tag == 50) {
         parse_VerificationResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verificationresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_DeliveredAt;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 7;
      case 7: {
        if (tag == 58) {
         parse_DeliveredAt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deliveredat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.SignatureV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.SignatureV3)
  return false;
#undef DO_
}

void SignatureV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.SignatureV3)
  // required .Diadoc.Api.Proto.Docflow.Entity Cms = 1;
  if (has_cms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cms(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.Entity CadesT = 2;
  if (has_cadest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cadest(), output);
  }

  // required string SignerBoxId = 3;
  if (has_signerboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerboxid().data(), this->signerboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->signerboxid(), output);
  }

  // required string SignerDepartmentId = 4;
  if (has_signerdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerdepartmentid().data(), this->signerdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerdepartmentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->signerdepartmentid(), output);
  }

  // required bool IsValid = 5;
  if (has_isvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isvalid(), output);
  }

  // optional .Diadoc.Api.Proto.SignatureVerificationResult VerificationResult = 6;
  if (has_verificationresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->verificationresult(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 7;
  if (has_deliveredat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->deliveredat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.SignatureV3)
}

::google::protobuf::uint8* SignatureV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.SignatureV3)
  // required .Diadoc.Api.Proto.Docflow.Entity Cms = 1;
  if (has_cms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cms(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.Entity CadesT = 2;
  if (has_cadest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cadest(), target);
  }

  // required string SignerBoxId = 3;
  if (has_signerboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerboxid().data(), this->signerboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->signerboxid(), target);
  }

  // required string SignerDepartmentId = 4;
  if (has_signerdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerdepartmentid().data(), this->signerdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerdepartmentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->signerdepartmentid(), target);
  }

  // required bool IsValid = 5;
  if (has_isvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isvalid(), target);
  }

  // optional .Diadoc.Api.Proto.SignatureVerificationResult VerificationResult = 6;
  if (has_verificationresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->verificationresult(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 7;
  if (has_deliveredat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->deliveredat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.SignatureV3)
  return target;
}

int SignatureV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Docflow.Entity Cms = 1;
    if (has_cms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cms());
    }

    // optional .Diadoc.Api.Proto.Docflow.Entity CadesT = 2;
    if (has_cadest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cadest());
    }

    // required string SignerBoxId = 3;
    if (has_signerboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signerboxid());
    }

    // required string SignerDepartmentId = 4;
    if (has_signerdepartmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signerdepartmentid());
    }

    // required bool IsValid = 5;
    if (has_isvalid()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.SignatureVerificationResult VerificationResult = 6;
    if (has_verificationresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->verificationresult());
    }

    // optional .Diadoc.Api.Proto.Timestamp DeliveredAt = 7;
    if (has_deliveredat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deliveredat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignatureV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignatureV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignatureV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignatureV3::MergeFrom(const SignatureV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cms()) {
      mutable_cms()->::Diadoc::Api::Proto::Docflow::Entity::MergeFrom(from.cms());
    }
    if (from.has_cadest()) {
      mutable_cadest()->::Diadoc::Api::Proto::Docflow::Entity::MergeFrom(from.cadest());
    }
    if (from.has_signerboxid()) {
      set_signerboxid(from.signerboxid());
    }
    if (from.has_signerdepartmentid()) {
      set_signerdepartmentid(from.signerdepartmentid());
    }
    if (from.has_isvalid()) {
      set_isvalid(from.isvalid());
    }
    if (from.has_verificationresult()) {
      mutable_verificationresult()->::Diadoc::Api::Proto::SignatureVerificationResult::MergeFrom(from.verificationresult());
    }
    if (from.has_deliveredat()) {
      mutable_deliveredat()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.deliveredat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignatureV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureV3::CopyFrom(const SignatureV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureV3::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has_cms()) {
    if (!this->cms().IsInitialized()) return false;
  }
  if (has_cadest()) {
    if (!this->cadest().IsInitialized()) return false;
  }
  if (has_verificationresult()) {
    if (!this->verificationresult().IsInitialized()) return false;
  }
  if (has_deliveredat()) {
    if (!this->deliveredat().IsInitialized()) return false;
  }
  return true;
}

void SignatureV3::Swap(SignatureV3* other) {
  if (other != this) {
    std::swap(cms_, other->cms_);
    std::swap(cadest_, other->cadest_);
    std::swap(signerboxid_, other->signerboxid_);
    std::swap(signerdepartmentid_, other->signerdepartmentid_);
    std::swap(isvalid_, other->isvalid_);
    std::swap(verificationresult_, other->verificationresult_);
    std::swap(deliveredat_, other->deliveredat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignatureV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignatureV3_descriptor_;
  metadata.reflection = SignatureV3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignedAttachmentV3::kAttachmentFieldNumber;
const int SignedAttachmentV3::kSignatureFieldNumber;
const int SignedAttachmentV3::kCommentFieldNumber;
const int SignedAttachmentV3::kContentTypeIdFieldNumber;
#endif  // !_MSC_VER

SignedAttachmentV3::SignedAttachmentV3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.SignedAttachmentV3)
}

void SignedAttachmentV3::InitAsDefaultInstance() {
  attachment_ = const_cast< ::Diadoc::Api::Proto::Docflow::Attachment*>(&::Diadoc::Api::Proto::Docflow::Attachment::default_instance());
  signature_ = const_cast< ::Diadoc::Api::Proto::Docflow::SignatureV3*>(&::Diadoc::Api::Proto::Docflow::SignatureV3::default_instance());
  comment_ = const_cast< ::Diadoc::Api::Proto::Docflow::Entity*>(&::Diadoc::Api::Proto::Docflow::Entity::default_instance());
}

SignedAttachmentV3::SignedAttachmentV3(const SignedAttachmentV3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.SignedAttachmentV3)
}

void SignedAttachmentV3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  attachment_ = NULL;
  signature_ = NULL;
  comment_ = NULL;
  contenttypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedAttachmentV3::~SignedAttachmentV3() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.SignedAttachmentV3)
  SharedDtor();
}

void SignedAttachmentV3::SharedDtor() {
  if (contenttypeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contenttypeid_;
  }
  if (this != default_instance_) {
    delete attachment_;
    delete signature_;
    delete comment_;
  }
}

void SignedAttachmentV3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedAttachmentV3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedAttachmentV3_descriptor_;
}

const SignedAttachmentV3& SignedAttachmentV3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fAttachmentV3_2eproto();
  return *default_instance_;
}

SignedAttachmentV3* SignedAttachmentV3::default_instance_ = NULL;

SignedAttachmentV3* SignedAttachmentV3::New() const {
  return new SignedAttachmentV3;
}

void SignedAttachmentV3::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::Diadoc::Api::Proto::Docflow::Attachment::Clear();
    }
    if (has_signature()) {
      if (signature_ != NULL) signature_->::Diadoc::Api::Proto::Docflow::SignatureV3::Clear();
    }
    if (has_comment()) {
      if (comment_ != NULL) comment_->::Diadoc::Api::Proto::Docflow::Entity::Clear();
    }
    if (has_contenttypeid()) {
      if (contenttypeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contenttypeid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignedAttachmentV3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.SignedAttachmentV3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Docflow.Attachment Attachment = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Signature;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 2;
      case 2: {
        if (tag == 18) {
         parse_Signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.Entity Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ContentTypeId;
        break;
      }

      // required string ContentTypeId = 4;
      case 4: {
        if (tag == 34) {
         parse_ContentTypeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contenttypeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contenttypeid().data(), this->contenttypeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contenttypeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.SignedAttachmentV3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.SignedAttachmentV3)
  return false;
#undef DO_
}

void SignedAttachmentV3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.SignedAttachmentV3)
  // required .Diadoc.Api.Proto.Docflow.Attachment Attachment = 1;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attachment(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signature(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.Entity Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->comment(), output);
  }

  // required string ContentTypeId = 4;
  if (has_contenttypeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contenttypeid().data(), this->contenttypeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contenttypeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->contenttypeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.SignedAttachmentV3)
}

::google::protobuf::uint8* SignedAttachmentV3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.SignedAttachmentV3)
  // required .Diadoc.Api.Proto.Docflow.Attachment Attachment = 1;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attachment(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 2;
  if (has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signature(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.Entity Comment = 3;
  if (has_comment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->comment(), target);
  }

  // required string ContentTypeId = 4;
  if (has_contenttypeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contenttypeid().data(), this->contenttypeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contenttypeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->contenttypeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.SignedAttachmentV3)
  return target;
}

int SignedAttachmentV3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Docflow.Attachment Attachment = 1;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

    // optional .Diadoc.Api.Proto.Docflow.SignatureV3 Signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signature());
    }

    // optional .Diadoc.Api.Proto.Docflow.Entity Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comment());
    }

    // required string ContentTypeId = 4;
    if (has_contenttypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contenttypeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedAttachmentV3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignedAttachmentV3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignedAttachmentV3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedAttachmentV3::MergeFrom(const SignedAttachmentV3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attachment()) {
      mutable_attachment()->::Diadoc::Api::Proto::Docflow::Attachment::MergeFrom(from.attachment());
    }
    if (from.has_signature()) {
      mutable_signature()->::Diadoc::Api::Proto::Docflow::SignatureV3::MergeFrom(from.signature());
    }
    if (from.has_comment()) {
      mutable_comment()->::Diadoc::Api::Proto::Docflow::Entity::MergeFrom(from.comment());
    }
    if (from.has_contenttypeid()) {
      set_contenttypeid(from.contenttypeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignedAttachmentV3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedAttachmentV3::CopyFrom(const SignedAttachmentV3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedAttachmentV3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_attachment()) {
    if (!this->attachment().IsInitialized()) return false;
  }
  if (has_signature()) {
    if (!this->signature().IsInitialized()) return false;
  }
  if (has_comment()) {
    if (!this->comment().IsInitialized()) return false;
  }
  return true;
}

void SignedAttachmentV3::Swap(SignedAttachmentV3* other) {
  if (other != this) {
    std::swap(attachment_, other->attachment_);
    std::swap(signature_, other->signature_);
    std::swap(comment_, other->comment_);
    std::swap(contenttypeid_, other->contenttypeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignedAttachmentV3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignedAttachmentV3_descriptor_;
  metadata.reflection = SignedAttachmentV3_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
