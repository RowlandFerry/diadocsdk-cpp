// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Docflow/UniversalTransferDocumentDocflow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Docflow/UniversalTransferDocumentDocflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

namespace {

const ::google::protobuf::Descriptor* InboundUniversalTransferDocumentDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InboundUniversalTransferDocumentDocflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutboundUniversalTransferDocumentDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutboundUniversalTransferDocumentDocflow_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Docflow_2fUniversalTransferDocumentDocflow_2eproto() {
  protobuf_AddDesc_Docflow_2fUniversalTransferDocumentDocflow_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Docflow/UniversalTransferDocumentDocflow.proto");
  GOOGLE_CHECK(file != NULL);
  InboundUniversalTransferDocumentDocflow_descriptor_ = file->message_type(0);
  static const int InboundUniversalTransferDocumentDocflow_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, receiptdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, confirmationdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, correctionrequestdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, confirmationtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, isamendmentrequested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, isrevised_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, iscorrected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, buyertitledocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, recipientsignaturerejectiondocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, isreceiptrequested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, isrecipientsignaturerequested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, isdocumentsignedbyrecipient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, isdocumentrejectedbyrecipient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, candocumentbereceipted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, candocumentbesignedorrejectedbyrecipient_),
  };
  InboundUniversalTransferDocumentDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InboundUniversalTransferDocumentDocflow_descriptor_,
      InboundUniversalTransferDocumentDocflow::default_instance_,
      InboundUniversalTransferDocumentDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboundUniversalTransferDocumentDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InboundUniversalTransferDocumentDocflow));
  OutboundUniversalTransferDocumentDocflow_descriptor_ = file->message_type(1);
  static const int OutboundUniversalTransferDocumentDocflow_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, receiptdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, confirmationdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, correctionrequestdocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, confirmationtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, isamendmentrequested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, isrevised_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, iscorrected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, candocumentbesignedbysender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, buyertitledocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, recipientsignaturerejectiondocflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, isreceiptrequested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, isrecipientsignaturerequested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, isdocumentsignedbyrecipient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, isdocumentrejectedbyrecipient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, candocumentbereceipted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, candocumentbesignedorrejectedbyrecipient_),
  };
  OutboundUniversalTransferDocumentDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutboundUniversalTransferDocumentDocflow_descriptor_,
      OutboundUniversalTransferDocumentDocflow::default_instance_,
      OutboundUniversalTransferDocumentDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutboundUniversalTransferDocumentDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutboundUniversalTransferDocumentDocflow));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Docflow_2fUniversalTransferDocumentDocflow_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InboundUniversalTransferDocumentDocflow_descriptor_, &InboundUniversalTransferDocumentDocflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutboundUniversalTransferDocumentDocflow_descriptor_, &OutboundUniversalTransferDocumentDocflow::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Docflow_2fUniversalTransferDocumentDocflow_2eproto() {
  delete InboundUniversalTransferDocumentDocflow::default_instance_;
  delete InboundUniversalTransferDocumentDocflow_reflection_;
  delete OutboundUniversalTransferDocumentDocflow::default_instance_;
  delete OutboundUniversalTransferDocumentDocflow_reflection_;
}

void protobuf_AddDesc_Docflow_2fUniversalTransferDocumentDocflow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fAttachment_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fReceiptDocflow_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fXmlBilateralDocflow_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fRecipientSignatureRejectionDocflow_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fInvoiceDocflow_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n.Docflow/UniversalTransferDocumentDocfl"
    "ow.proto\022\030Diadoc.Api.Proto.Docflow\032\017Time"
    "stamp.proto\032\030Docflow/Attachment.proto\032\034D"
    "ocflow/ReceiptDocflow.proto\032!Docflow/Xml"
    "BilateralDocflow.proto\0320Docflow/Recipien"
    "tSignatureRejectionDocflow.proto\032\034Docflo"
    "w/InvoiceDocflow.proto\"\322\006\n\'InboundUniver"
    "salTransferDocumentDocflow\022\022\n\nIsFinished"
    "\030\001 \001(\010\022N\n\016ReceiptDocflow\030\002 \001(\01326.Diadoc."
    "Api.Proto.Docflow.InboundInvoiceReceiptD"
    "ocflow\022Q\n\023ConfirmationDocflow\030\003 \001(\01324.Di"
    "adoc.Api.Proto.Docflow.InvoiceConfirmati"
    "onDocflow\022[\n\030CorrectionRequestDocflow\030\004 "
    "\001(\01329.Diadoc.Api.Proto.Docflow.InvoiceCo"
    "rrectionRequestDocflow\022:\n\025ConfirmationTi"
    "mestamp\030\005 \001(\0132\033.Diadoc.Api.Proto.Timesta"
    "mp\022\034\n\024IsAmendmentRequested\030\006 \001(\010\022\021\n\tIsRe"
    "vised\030\007 \001(\010\022\023\n\013IsCorrected\030\010 \001(\010\022F\n\021Buye"
    "rTitleDocflow\030\t \001(\0132+.Diadoc.Api.Proto.D"
    "ocflow.BuyerTitleDocflow\022h\n\"RecipientSig"
    "natureRejectionDocflow\030\n \001(\0132<.Diadoc.Ap"
    "i.Proto.Docflow.RecipientSignatureReject"
    "ionDocflow\022\032\n\022IsReceiptRequested\030\013 \001(\010\022%"
    "\n\035IsRecipientSignatureRequested\030\014 \001(\010\022#\n"
    "\033IsDocumentSignedByRecipient\030\r \001(\010\022%\n\035Is"
    "DocumentRejectedByRecipient\030\016 \001(\010\022\036\n\026Can"
    "DocumentBeReceipted\030\017 \001(\010\0220\n(CanDocument"
    "BeSignedOrRejectedByRecipient\030\020 \001(\010\"\352\006\n("
    "OutboundUniversalTransferDocumentDocflow"
    "\022\022\n\nIsFinished\030\001 \001(\010\022@\n\016ReceiptDocflow\030\002"
    " \001(\0132(.Diadoc.Api.Proto.Docflow.ReceiptD"
    "ocflow\022Q\n\023ConfirmationDocflow\030\003 \001(\01324.Di"
    "adoc.Api.Proto.Docflow.InvoiceConfirmati"
    "onDocflow\022[\n\030CorrectionRequestDocflow\030\004 "
    "\001(\01329.Diadoc.Api.Proto.Docflow.InvoiceCo"
    "rrectionRequestDocflow\022:\n\025ConfirmationTi"
    "mestamp\030\005 \001(\0132\033.Diadoc.Api.Proto.Timesta"
    "mp\022\034\n\024IsAmendmentRequested\030\006 \001(\010\022\021\n\tIsRe"
    "vised\030\007 \001(\010\022\023\n\013IsCorrected\030\010 \001(\010\022#\n\033CanD"
    "ocumentBeSignedBySender\030\t \001(\010\022F\n\021BuyerTi"
    "tleDocflow\030\n \001(\0132+.Diadoc.Api.Proto.Docf"
    "low.BuyerTitleDocflow\022h\n\"RecipientSignat"
    "ureRejectionDocflow\030\013 \001(\0132<.Diadoc.Api.P"
    "roto.Docflow.RecipientSignatureRejection"
    "Docflow\022\032\n\022IsReceiptRequested\030\014 \001(\010\022%\n\035I"
    "sRecipientSignatureRequested\030\r \001(\010\022#\n\033Is"
    "DocumentSignedByRecipient\030\016 \001(\010\022%\n\035IsDoc"
    "umentRejectedByRecipient\030\017 \001(\010\022\036\n\026CanDoc"
    "umentBeReceipted\030\020 \001(\010\0220\n(CanDocumentBeS"
    "ignedOrRejectedByRecipient\030\021 \001(\010", 1992);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Docflow/UniversalTransferDocumentDocflow.proto", &protobuf_RegisterTypes);
  InboundUniversalTransferDocumentDocflow::default_instance_ = new InboundUniversalTransferDocumentDocflow();
  OutboundUniversalTransferDocumentDocflow::default_instance_ = new OutboundUniversalTransferDocumentDocflow();
  InboundUniversalTransferDocumentDocflow::default_instance_->InitAsDefaultInstance();
  OutboundUniversalTransferDocumentDocflow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Docflow_2fUniversalTransferDocumentDocflow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Docflow_2fUniversalTransferDocumentDocflow_2eproto {
  StaticDescriptorInitializer_Docflow_2fUniversalTransferDocumentDocflow_2eproto() {
    protobuf_AddDesc_Docflow_2fUniversalTransferDocumentDocflow_2eproto();
  }
} static_descriptor_initializer_Docflow_2fUniversalTransferDocumentDocflow_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int InboundUniversalTransferDocumentDocflow::kIsFinishedFieldNumber;
const int InboundUniversalTransferDocumentDocflow::kReceiptDocflowFieldNumber;
const int InboundUniversalTransferDocumentDocflow::kConfirmationDocflowFieldNumber;
const int InboundUniversalTransferDocumentDocflow::kCorrectionRequestDocflowFieldNumber;
const int InboundUniversalTransferDocumentDocflow::kConfirmationTimestampFieldNumber;
const int InboundUniversalTransferDocumentDocflow::kIsAmendmentRequestedFieldNumber;
const int InboundUniversalTransferDocumentDocflow::kIsRevisedFieldNumber;
const int InboundUniversalTransferDocumentDocflow::kIsCorrectedFieldNumber;
const int InboundUniversalTransferDocumentDocflow::kBuyerTitleDocflowFieldNumber;
const int InboundUniversalTransferDocumentDocflow::kRecipientSignatureRejectionDocflowFieldNumber;
const int InboundUniversalTransferDocumentDocflow::kIsReceiptRequestedFieldNumber;
const int InboundUniversalTransferDocumentDocflow::kIsRecipientSignatureRequestedFieldNumber;
const int InboundUniversalTransferDocumentDocflow::kIsDocumentSignedByRecipientFieldNumber;
const int InboundUniversalTransferDocumentDocflow::kIsDocumentRejectedByRecipientFieldNumber;
const int InboundUniversalTransferDocumentDocflow::kCanDocumentBeReceiptedFieldNumber;
const int InboundUniversalTransferDocumentDocflow::kCanDocumentBeSignedOrRejectedByRecipientFieldNumber;
#endif  // !_MSC_VER

InboundUniversalTransferDocumentDocflow::InboundUniversalTransferDocumentDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow)
}

void InboundUniversalTransferDocumentDocflow::InitAsDefaultInstance() {
  receiptdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow*>(&::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow::default_instance());
  confirmationdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow*>(&::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::default_instance());
  correctionrequestdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow*>(&::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::default_instance());
  confirmationtimestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  buyertitledocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow*>(&::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow::default_instance());
  recipientsignaturerejectiondocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow*>(&::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow::default_instance());
}

InboundUniversalTransferDocumentDocflow::InboundUniversalTransferDocumentDocflow(const InboundUniversalTransferDocumentDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow)
}

void InboundUniversalTransferDocumentDocflow::SharedCtor() {
  _cached_size_ = 0;
  isfinished_ = false;
  receiptdocflow_ = NULL;
  confirmationdocflow_ = NULL;
  correctionrequestdocflow_ = NULL;
  confirmationtimestamp_ = NULL;
  isamendmentrequested_ = false;
  isrevised_ = false;
  iscorrected_ = false;
  buyertitledocflow_ = NULL;
  recipientsignaturerejectiondocflow_ = NULL;
  isreceiptrequested_ = false;
  isrecipientsignaturerequested_ = false;
  isdocumentsignedbyrecipient_ = false;
  isdocumentrejectedbyrecipient_ = false;
  candocumentbereceipted_ = false;
  candocumentbesignedorrejectedbyrecipient_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InboundUniversalTransferDocumentDocflow::~InboundUniversalTransferDocumentDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow)
  SharedDtor();
}

void InboundUniversalTransferDocumentDocflow::SharedDtor() {
  if (this != default_instance_) {
    delete receiptdocflow_;
    delete confirmationdocflow_;
    delete correctionrequestdocflow_;
    delete confirmationtimestamp_;
    delete buyertitledocflow_;
    delete recipientsignaturerejectiondocflow_;
  }
}

void InboundUniversalTransferDocumentDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InboundUniversalTransferDocumentDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InboundUniversalTransferDocumentDocflow_descriptor_;
}

const InboundUniversalTransferDocumentDocflow& InboundUniversalTransferDocumentDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fUniversalTransferDocumentDocflow_2eproto();
  return *default_instance_;
}

InboundUniversalTransferDocumentDocflow* InboundUniversalTransferDocumentDocflow::default_instance_ = NULL;

InboundUniversalTransferDocumentDocflow* InboundUniversalTransferDocumentDocflow::New() const {
  return new InboundUniversalTransferDocumentDocflow;
}

void InboundUniversalTransferDocumentDocflow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InboundUniversalTransferDocumentDocflow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(isfinished_, iscorrected_);
    if (has_receiptdocflow()) {
      if (receiptdocflow_ != NULL) receiptdocflow_->::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow::Clear();
    }
    if (has_confirmationdocflow()) {
      if (confirmationdocflow_ != NULL) confirmationdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::Clear();
    }
    if (has_correctionrequestdocflow()) {
      if (correctionrequestdocflow_ != NULL) correctionrequestdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::Clear();
    }
    if (has_confirmationtimestamp()) {
      if (confirmationtimestamp_ != NULL) confirmationtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(isreceiptrequested_, isdocumentrejectedbyrecipient_);
    ZR_(candocumentbereceipted_, candocumentbesignedorrejectedbyrecipient_);
    if (has_buyertitledocflow()) {
      if (buyertitledocflow_ != NULL) buyertitledocflow_->::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow::Clear();
    }
    if (has_recipientsignaturerejectiondocflow()) {
      if (recipientsignaturerejectiondocflow_ != NULL) recipientsignaturerejectiondocflow_->::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InboundUniversalTransferDocumentDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ReceiptDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow ReceiptDocflow = 2;
      case 2: {
        if (tag == 18) {
         parse_ReceiptDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiptdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ConfirmationDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
      case 3: {
        if (tag == 26) {
         parse_ConfirmationDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmationdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CorrectionRequestDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
      case 4: {
        if (tag == 34) {
         parse_CorrectionRequestDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_correctionrequestdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ConfirmationTimestamp;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
      case 5: {
        if (tag == 42) {
         parse_ConfirmationTimestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmationtimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsAmendmentRequested;
        break;
      }

      // optional bool IsAmendmentRequested = 6;
      case 6: {
        if (tag == 48) {
         parse_IsAmendmentRequested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isamendmentrequested_)));
          set_has_isamendmentrequested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_IsRevised;
        break;
      }

      // optional bool IsRevised = 7;
      case 7: {
        if (tag == 56) {
         parse_IsRevised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrevised_)));
          set_has_isrevised();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_IsCorrected;
        break;
      }

      // optional bool IsCorrected = 8;
      case 8: {
        if (tag == 64) {
         parse_IsCorrected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscorrected_)));
          set_has_iscorrected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_BuyerTitleDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.BuyerTitleDocflow BuyerTitleDocflow = 9;
      case 9: {
        if (tag == 74) {
         parse_BuyerTitleDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyertitledocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_RecipientSignatureRejectionDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 10;
      case 10: {
        if (tag == 82) {
         parse_RecipientSignatureRejectionDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recipientsignaturerejectiondocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_IsReceiptRequested;
        break;
      }

      // optional bool IsReceiptRequested = 11;
      case 11: {
        if (tag == 88) {
         parse_IsReceiptRequested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreceiptrequested_)));
          set_has_isreceiptrequested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_IsRecipientSignatureRequested;
        break;
      }

      // optional bool IsRecipientSignatureRequested = 12;
      case 12: {
        if (tag == 96) {
         parse_IsRecipientSignatureRequested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecipientsignaturerequested_)));
          set_has_isrecipientsignaturerequested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_IsDocumentSignedByRecipient;
        break;
      }

      // optional bool IsDocumentSignedByRecipient = 13;
      case 13: {
        if (tag == 104) {
         parse_IsDocumentSignedByRecipient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdocumentsignedbyrecipient_)));
          set_has_isdocumentsignedbyrecipient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_IsDocumentRejectedByRecipient;
        break;
      }

      // optional bool IsDocumentRejectedByRecipient = 14;
      case 14: {
        if (tag == 112) {
         parse_IsDocumentRejectedByRecipient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdocumentrejectedbyrecipient_)));
          set_has_isdocumentrejectedbyrecipient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_CanDocumentBeReceipted;
        break;
      }

      // optional bool CanDocumentBeReceipted = 15;
      case 15: {
        if (tag == 120) {
         parse_CanDocumentBeReceipted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &candocumentbereceipted_)));
          set_has_candocumentbereceipted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_CanDocumentBeSignedOrRejectedByRecipient;
        break;
      }

      // optional bool CanDocumentBeSignedOrRejectedByRecipient = 16;
      case 16: {
        if (tag == 128) {
         parse_CanDocumentBeSignedOrRejectedByRecipient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &candocumentbesignedorrejectedbyrecipient_)));
          set_has_candocumentbesignedorrejectedbyrecipient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow)
  return false;
#undef DO_
}

void InboundUniversalTransferDocumentDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow ReceiptDocflow = 2;
  if (has_receiptdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->receiptdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
  if (has_confirmationdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->confirmationdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
  if (has_correctionrequestdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->correctionrequestdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
  if (has_confirmationtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->confirmationtimestamp(), output);
  }

  // optional bool IsAmendmentRequested = 6;
  if (has_isamendmentrequested()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isamendmentrequested(), output);
  }

  // optional bool IsRevised = 7;
  if (has_isrevised()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isrevised(), output);
  }

  // optional bool IsCorrected = 8;
  if (has_iscorrected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->iscorrected(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.BuyerTitleDocflow BuyerTitleDocflow = 9;
  if (has_buyertitledocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->buyertitledocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 10;
  if (has_recipientsignaturerejectiondocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->recipientsignaturerejectiondocflow(), output);
  }

  // optional bool IsReceiptRequested = 11;
  if (has_isreceiptrequested()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isreceiptrequested(), output);
  }

  // optional bool IsRecipientSignatureRequested = 12;
  if (has_isrecipientsignaturerequested()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isrecipientsignaturerequested(), output);
  }

  // optional bool IsDocumentSignedByRecipient = 13;
  if (has_isdocumentsignedbyrecipient()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isdocumentsignedbyrecipient(), output);
  }

  // optional bool IsDocumentRejectedByRecipient = 14;
  if (has_isdocumentrejectedbyrecipient()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isdocumentrejectedbyrecipient(), output);
  }

  // optional bool CanDocumentBeReceipted = 15;
  if (has_candocumentbereceipted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->candocumentbereceipted(), output);
  }

  // optional bool CanDocumentBeSignedOrRejectedByRecipient = 16;
  if (has_candocumentbesignedorrejectedbyrecipient()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->candocumentbesignedorrejectedbyrecipient(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow)
}

::google::protobuf::uint8* InboundUniversalTransferDocumentDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow ReceiptDocflow = 2;
  if (has_receiptdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->receiptdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
  if (has_confirmationdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->confirmationdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
  if (has_correctionrequestdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->correctionrequestdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
  if (has_confirmationtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->confirmationtimestamp(), target);
  }

  // optional bool IsAmendmentRequested = 6;
  if (has_isamendmentrequested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isamendmentrequested(), target);
  }

  // optional bool IsRevised = 7;
  if (has_isrevised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isrevised(), target);
  }

  // optional bool IsCorrected = 8;
  if (has_iscorrected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->iscorrected(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.BuyerTitleDocflow BuyerTitleDocflow = 9;
  if (has_buyertitledocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->buyertitledocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 10;
  if (has_recipientsignaturerejectiondocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->recipientsignaturerejectiondocflow(), target);
  }

  // optional bool IsReceiptRequested = 11;
  if (has_isreceiptrequested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isreceiptrequested(), target);
  }

  // optional bool IsRecipientSignatureRequested = 12;
  if (has_isrecipientsignaturerequested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isrecipientsignaturerequested(), target);
  }

  // optional bool IsDocumentSignedByRecipient = 13;
  if (has_isdocumentsignedbyrecipient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isdocumentsignedbyrecipient(), target);
  }

  // optional bool IsDocumentRejectedByRecipient = 14;
  if (has_isdocumentrejectedbyrecipient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isdocumentrejectedbyrecipient(), target);
  }

  // optional bool CanDocumentBeReceipted = 15;
  if (has_candocumentbereceipted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->candocumentbereceipted(), target);
  }

  // optional bool CanDocumentBeSignedOrRejectedByRecipient = 16;
  if (has_candocumentbesignedorrejectedbyrecipient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->candocumentbesignedorrejectedbyrecipient(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.InboundUniversalTransferDocumentDocflow)
  return target;
}

int InboundUniversalTransferDocumentDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.InboundInvoiceReceiptDocflow ReceiptDocflow = 2;
    if (has_receiptdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiptdocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
    if (has_confirmationdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmationdocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
    if (has_correctionrequestdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->correctionrequestdocflow());
    }

    // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
    if (has_confirmationtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmationtimestamp());
    }

    // optional bool IsAmendmentRequested = 6;
    if (has_isamendmentrequested()) {
      total_size += 1 + 1;
    }

    // optional bool IsRevised = 7;
    if (has_isrevised()) {
      total_size += 1 + 1;
    }

    // optional bool IsCorrected = 8;
    if (has_iscorrected()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Diadoc.Api.Proto.Docflow.BuyerTitleDocflow BuyerTitleDocflow = 9;
    if (has_buyertitledocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyertitledocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 10;
    if (has_recipientsignaturerejectiondocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recipientsignaturerejectiondocflow());
    }

    // optional bool IsReceiptRequested = 11;
    if (has_isreceiptrequested()) {
      total_size += 1 + 1;
    }

    // optional bool IsRecipientSignatureRequested = 12;
    if (has_isrecipientsignaturerequested()) {
      total_size += 1 + 1;
    }

    // optional bool IsDocumentSignedByRecipient = 13;
    if (has_isdocumentsignedbyrecipient()) {
      total_size += 1 + 1;
    }

    // optional bool IsDocumentRejectedByRecipient = 14;
    if (has_isdocumentrejectedbyrecipient()) {
      total_size += 1 + 1;
    }

    // optional bool CanDocumentBeReceipted = 15;
    if (has_candocumentbereceipted()) {
      total_size += 1 + 1;
    }

    // optional bool CanDocumentBeSignedOrRejectedByRecipient = 16;
    if (has_candocumentbesignedorrejectedbyrecipient()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InboundUniversalTransferDocumentDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InboundUniversalTransferDocumentDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InboundUniversalTransferDocumentDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InboundUniversalTransferDocumentDocflow::MergeFrom(const InboundUniversalTransferDocumentDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_receiptdocflow()) {
      mutable_receiptdocflow()->::Diadoc::Api::Proto::Docflow::InboundInvoiceReceiptDocflow::MergeFrom(from.receiptdocflow());
    }
    if (from.has_confirmationdocflow()) {
      mutable_confirmationdocflow()->::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::MergeFrom(from.confirmationdocflow());
    }
    if (from.has_correctionrequestdocflow()) {
      mutable_correctionrequestdocflow()->::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::MergeFrom(from.correctionrequestdocflow());
    }
    if (from.has_confirmationtimestamp()) {
      mutable_confirmationtimestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.confirmationtimestamp());
    }
    if (from.has_isamendmentrequested()) {
      set_isamendmentrequested(from.isamendmentrequested());
    }
    if (from.has_isrevised()) {
      set_isrevised(from.isrevised());
    }
    if (from.has_iscorrected()) {
      set_iscorrected(from.iscorrected());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buyertitledocflow()) {
      mutable_buyertitledocflow()->::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow::MergeFrom(from.buyertitledocflow());
    }
    if (from.has_recipientsignaturerejectiondocflow()) {
      mutable_recipientsignaturerejectiondocflow()->::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow::MergeFrom(from.recipientsignaturerejectiondocflow());
    }
    if (from.has_isreceiptrequested()) {
      set_isreceiptrequested(from.isreceiptrequested());
    }
    if (from.has_isrecipientsignaturerequested()) {
      set_isrecipientsignaturerequested(from.isrecipientsignaturerequested());
    }
    if (from.has_isdocumentsignedbyrecipient()) {
      set_isdocumentsignedbyrecipient(from.isdocumentsignedbyrecipient());
    }
    if (from.has_isdocumentrejectedbyrecipient()) {
      set_isdocumentrejectedbyrecipient(from.isdocumentrejectedbyrecipient());
    }
    if (from.has_candocumentbereceipted()) {
      set_candocumentbereceipted(from.candocumentbereceipted());
    }
    if (from.has_candocumentbesignedorrejectedbyrecipient()) {
      set_candocumentbesignedorrejectedbyrecipient(from.candocumentbesignedorrejectedbyrecipient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InboundUniversalTransferDocumentDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InboundUniversalTransferDocumentDocflow::CopyFrom(const InboundUniversalTransferDocumentDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InboundUniversalTransferDocumentDocflow::IsInitialized() const {

  if (has_receiptdocflow()) {
    if (!this->receiptdocflow().IsInitialized()) return false;
  }
  if (has_confirmationdocflow()) {
    if (!this->confirmationdocflow().IsInitialized()) return false;
  }
  if (has_correctionrequestdocflow()) {
    if (!this->correctionrequestdocflow().IsInitialized()) return false;
  }
  if (has_confirmationtimestamp()) {
    if (!this->confirmationtimestamp().IsInitialized()) return false;
  }
  if (has_buyertitledocflow()) {
    if (!this->buyertitledocflow().IsInitialized()) return false;
  }
  if (has_recipientsignaturerejectiondocflow()) {
    if (!this->recipientsignaturerejectiondocflow().IsInitialized()) return false;
  }
  return true;
}

void InboundUniversalTransferDocumentDocflow::Swap(InboundUniversalTransferDocumentDocflow* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(receiptdocflow_, other->receiptdocflow_);
    std::swap(confirmationdocflow_, other->confirmationdocflow_);
    std::swap(correctionrequestdocflow_, other->correctionrequestdocflow_);
    std::swap(confirmationtimestamp_, other->confirmationtimestamp_);
    std::swap(isamendmentrequested_, other->isamendmentrequested_);
    std::swap(isrevised_, other->isrevised_);
    std::swap(iscorrected_, other->iscorrected_);
    std::swap(buyertitledocflow_, other->buyertitledocflow_);
    std::swap(recipientsignaturerejectiondocflow_, other->recipientsignaturerejectiondocflow_);
    std::swap(isreceiptrequested_, other->isreceiptrequested_);
    std::swap(isrecipientsignaturerequested_, other->isrecipientsignaturerequested_);
    std::swap(isdocumentsignedbyrecipient_, other->isdocumentsignedbyrecipient_);
    std::swap(isdocumentrejectedbyrecipient_, other->isdocumentrejectedbyrecipient_);
    std::swap(candocumentbereceipted_, other->candocumentbereceipted_);
    std::swap(candocumentbesignedorrejectedbyrecipient_, other->candocumentbesignedorrejectedbyrecipient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InboundUniversalTransferDocumentDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InboundUniversalTransferDocumentDocflow_descriptor_;
  metadata.reflection = InboundUniversalTransferDocumentDocflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OutboundUniversalTransferDocumentDocflow::kIsFinishedFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kReceiptDocflowFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kConfirmationDocflowFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kCorrectionRequestDocflowFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kConfirmationTimestampFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kIsAmendmentRequestedFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kIsRevisedFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kIsCorrectedFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kCanDocumentBeSignedBySenderFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kBuyerTitleDocflowFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kRecipientSignatureRejectionDocflowFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kIsReceiptRequestedFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kIsRecipientSignatureRequestedFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kIsDocumentSignedByRecipientFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kIsDocumentRejectedByRecipientFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kCanDocumentBeReceiptedFieldNumber;
const int OutboundUniversalTransferDocumentDocflow::kCanDocumentBeSignedOrRejectedByRecipientFieldNumber;
#endif  // !_MSC_VER

OutboundUniversalTransferDocumentDocflow::OutboundUniversalTransferDocumentDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow)
}

void OutboundUniversalTransferDocumentDocflow::InitAsDefaultInstance() {
  receiptdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::ReceiptDocflow*>(&::Diadoc::Api::Proto::Docflow::ReceiptDocflow::default_instance());
  confirmationdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow*>(&::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::default_instance());
  correctionrequestdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow*>(&::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::default_instance());
  confirmationtimestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  buyertitledocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow*>(&::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow::default_instance());
  recipientsignaturerejectiondocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow*>(&::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow::default_instance());
}

OutboundUniversalTransferDocumentDocflow::OutboundUniversalTransferDocumentDocflow(const OutboundUniversalTransferDocumentDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow)
}

void OutboundUniversalTransferDocumentDocflow::SharedCtor() {
  _cached_size_ = 0;
  isfinished_ = false;
  receiptdocflow_ = NULL;
  confirmationdocflow_ = NULL;
  correctionrequestdocflow_ = NULL;
  confirmationtimestamp_ = NULL;
  isamendmentrequested_ = false;
  isrevised_ = false;
  iscorrected_ = false;
  candocumentbesignedbysender_ = false;
  buyertitledocflow_ = NULL;
  recipientsignaturerejectiondocflow_ = NULL;
  isreceiptrequested_ = false;
  isrecipientsignaturerequested_ = false;
  isdocumentsignedbyrecipient_ = false;
  isdocumentrejectedbyrecipient_ = false;
  candocumentbereceipted_ = false;
  candocumentbesignedorrejectedbyrecipient_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutboundUniversalTransferDocumentDocflow::~OutboundUniversalTransferDocumentDocflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow)
  SharedDtor();
}

void OutboundUniversalTransferDocumentDocflow::SharedDtor() {
  if (this != default_instance_) {
    delete receiptdocflow_;
    delete confirmationdocflow_;
    delete correctionrequestdocflow_;
    delete confirmationtimestamp_;
    delete buyertitledocflow_;
    delete recipientsignaturerejectiondocflow_;
  }
}

void OutboundUniversalTransferDocumentDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutboundUniversalTransferDocumentDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutboundUniversalTransferDocumentDocflow_descriptor_;
}

const OutboundUniversalTransferDocumentDocflow& OutboundUniversalTransferDocumentDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fUniversalTransferDocumentDocflow_2eproto();
  return *default_instance_;
}

OutboundUniversalTransferDocumentDocflow* OutboundUniversalTransferDocumentDocflow::default_instance_ = NULL;

OutboundUniversalTransferDocumentDocflow* OutboundUniversalTransferDocumentDocflow::New() const {
  return new OutboundUniversalTransferDocumentDocflow;
}

void OutboundUniversalTransferDocumentDocflow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OutboundUniversalTransferDocumentDocflow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(isfinished_, iscorrected_);
    if (has_receiptdocflow()) {
      if (receiptdocflow_ != NULL) receiptdocflow_->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::Clear();
    }
    if (has_confirmationdocflow()) {
      if (confirmationdocflow_ != NULL) confirmationdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::Clear();
    }
    if (has_correctionrequestdocflow()) {
      if (correctionrequestdocflow_ != NULL) correctionrequestdocflow_->::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::Clear();
    }
    if (has_confirmationtimestamp()) {
      if (confirmationtimestamp_ != NULL) confirmationtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(candocumentbesignedbysender_, isdocumentsignedbyrecipient_);
    ZR_(isdocumentrejectedbyrecipient_, candocumentbereceipted_);
    if (has_buyertitledocflow()) {
      if (buyertitledocflow_ != NULL) buyertitledocflow_->::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow::Clear();
    }
    if (has_recipientsignaturerejectiondocflow()) {
      if (recipientsignaturerejectiondocflow_ != NULL) recipientsignaturerejectiondocflow_->::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow::Clear();
    }
  }
  candocumentbesignedorrejectedbyrecipient_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutboundUniversalTransferDocumentDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsFinished = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ReceiptDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
      case 2: {
        if (tag == 18) {
         parse_ReceiptDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiptdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ConfirmationDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
      case 3: {
        if (tag == 26) {
         parse_ConfirmationDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmationdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CorrectionRequestDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
      case 4: {
        if (tag == 34) {
         parse_CorrectionRequestDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_correctionrequestdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ConfirmationTimestamp;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
      case 5: {
        if (tag == 42) {
         parse_ConfirmationTimestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmationtimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsAmendmentRequested;
        break;
      }

      // optional bool IsAmendmentRequested = 6;
      case 6: {
        if (tag == 48) {
         parse_IsAmendmentRequested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isamendmentrequested_)));
          set_has_isamendmentrequested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_IsRevised;
        break;
      }

      // optional bool IsRevised = 7;
      case 7: {
        if (tag == 56) {
         parse_IsRevised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrevised_)));
          set_has_isrevised();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_IsCorrected;
        break;
      }

      // optional bool IsCorrected = 8;
      case 8: {
        if (tag == 64) {
         parse_IsCorrected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscorrected_)));
          set_has_iscorrected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_CanDocumentBeSignedBySender;
        break;
      }

      // optional bool CanDocumentBeSignedBySender = 9;
      case 9: {
        if (tag == 72) {
         parse_CanDocumentBeSignedBySender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &candocumentbesignedbysender_)));
          set_has_candocumentbesignedbysender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_BuyerTitleDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.BuyerTitleDocflow BuyerTitleDocflow = 10;
      case 10: {
        if (tag == 82) {
         parse_BuyerTitleDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyertitledocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_RecipientSignatureRejectionDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 11;
      case 11: {
        if (tag == 90) {
         parse_RecipientSignatureRejectionDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recipientsignaturerejectiondocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_IsReceiptRequested;
        break;
      }

      // optional bool IsReceiptRequested = 12;
      case 12: {
        if (tag == 96) {
         parse_IsReceiptRequested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreceiptrequested_)));
          set_has_isreceiptrequested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_IsRecipientSignatureRequested;
        break;
      }

      // optional bool IsRecipientSignatureRequested = 13;
      case 13: {
        if (tag == 104) {
         parse_IsRecipientSignatureRequested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecipientsignaturerequested_)));
          set_has_isrecipientsignaturerequested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_IsDocumentSignedByRecipient;
        break;
      }

      // optional bool IsDocumentSignedByRecipient = 14;
      case 14: {
        if (tag == 112) {
         parse_IsDocumentSignedByRecipient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdocumentsignedbyrecipient_)));
          set_has_isdocumentsignedbyrecipient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_IsDocumentRejectedByRecipient;
        break;
      }

      // optional bool IsDocumentRejectedByRecipient = 15;
      case 15: {
        if (tag == 120) {
         parse_IsDocumentRejectedByRecipient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdocumentrejectedbyrecipient_)));
          set_has_isdocumentrejectedbyrecipient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_CanDocumentBeReceipted;
        break;
      }

      // optional bool CanDocumentBeReceipted = 16;
      case 16: {
        if (tag == 128) {
         parse_CanDocumentBeReceipted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &candocumentbereceipted_)));
          set_has_candocumentbereceipted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_CanDocumentBeSignedOrRejectedByRecipient;
        break;
      }

      // optional bool CanDocumentBeSignedOrRejectedByRecipient = 17;
      case 17: {
        if (tag == 136) {
         parse_CanDocumentBeSignedOrRejectedByRecipient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &candocumentbesignedorrejectedbyrecipient_)));
          set_has_candocumentbesignedorrejectedbyrecipient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow)
  return false;
#undef DO_
}

void OutboundUniversalTransferDocumentDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
  if (has_receiptdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->receiptdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
  if (has_confirmationdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->confirmationdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
  if (has_correctionrequestdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->correctionrequestdocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
  if (has_confirmationtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->confirmationtimestamp(), output);
  }

  // optional bool IsAmendmentRequested = 6;
  if (has_isamendmentrequested()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isamendmentrequested(), output);
  }

  // optional bool IsRevised = 7;
  if (has_isrevised()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isrevised(), output);
  }

  // optional bool IsCorrected = 8;
  if (has_iscorrected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->iscorrected(), output);
  }

  // optional bool CanDocumentBeSignedBySender = 9;
  if (has_candocumentbesignedbysender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->candocumentbesignedbysender(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.BuyerTitleDocflow BuyerTitleDocflow = 10;
  if (has_buyertitledocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->buyertitledocflow(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 11;
  if (has_recipientsignaturerejectiondocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->recipientsignaturerejectiondocflow(), output);
  }

  // optional bool IsReceiptRequested = 12;
  if (has_isreceiptrequested()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isreceiptrequested(), output);
  }

  // optional bool IsRecipientSignatureRequested = 13;
  if (has_isrecipientsignaturerequested()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isrecipientsignaturerequested(), output);
  }

  // optional bool IsDocumentSignedByRecipient = 14;
  if (has_isdocumentsignedbyrecipient()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isdocumentsignedbyrecipient(), output);
  }

  // optional bool IsDocumentRejectedByRecipient = 15;
  if (has_isdocumentrejectedbyrecipient()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isdocumentrejectedbyrecipient(), output);
  }

  // optional bool CanDocumentBeReceipted = 16;
  if (has_candocumentbereceipted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->candocumentbereceipted(), output);
  }

  // optional bool CanDocumentBeSignedOrRejectedByRecipient = 17;
  if (has_candocumentbesignedorrejectedbyrecipient()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->candocumentbesignedorrejectedbyrecipient(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow)
}

::google::protobuf::uint8* OutboundUniversalTransferDocumentDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow)
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
  if (has_receiptdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->receiptdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
  if (has_confirmationdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->confirmationdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
  if (has_correctionrequestdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->correctionrequestdocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
  if (has_confirmationtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->confirmationtimestamp(), target);
  }

  // optional bool IsAmendmentRequested = 6;
  if (has_isamendmentrequested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isamendmentrequested(), target);
  }

  // optional bool IsRevised = 7;
  if (has_isrevised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isrevised(), target);
  }

  // optional bool IsCorrected = 8;
  if (has_iscorrected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->iscorrected(), target);
  }

  // optional bool CanDocumentBeSignedBySender = 9;
  if (has_candocumentbesignedbysender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->candocumentbesignedbysender(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.BuyerTitleDocflow BuyerTitleDocflow = 10;
  if (has_buyertitledocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->buyertitledocflow(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 11;
  if (has_recipientsignaturerejectiondocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->recipientsignaturerejectiondocflow(), target);
  }

  // optional bool IsReceiptRequested = 12;
  if (has_isreceiptrequested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isreceiptrequested(), target);
  }

  // optional bool IsRecipientSignatureRequested = 13;
  if (has_isrecipientsignaturerequested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isrecipientsignaturerequested(), target);
  }

  // optional bool IsDocumentSignedByRecipient = 14;
  if (has_isdocumentsignedbyrecipient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isdocumentsignedbyrecipient(), target);
  }

  // optional bool IsDocumentRejectedByRecipient = 15;
  if (has_isdocumentrejectedbyrecipient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isdocumentrejectedbyrecipient(), target);
  }

  // optional bool CanDocumentBeReceipted = 16;
  if (has_candocumentbereceipted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->candocumentbereceipted(), target);
  }

  // optional bool CanDocumentBeSignedOrRejectedByRecipient = 17;
  if (has_candocumentbesignedorrejectedbyrecipient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->candocumentbesignedorrejectedbyrecipient(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Docflow.OutboundUniversalTransferDocumentDocflow)
  return target;
}

int OutboundUniversalTransferDocumentDocflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.ReceiptDocflow ReceiptDocflow = 2;
    if (has_receiptdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiptdocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.InvoiceConfirmationDocflow ConfirmationDocflow = 3;
    if (has_confirmationdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmationdocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.InvoiceCorrectionRequestDocflow CorrectionRequestDocflow = 4;
    if (has_correctionrequestdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->correctionrequestdocflow());
    }

    // optional .Diadoc.Api.Proto.Timestamp ConfirmationTimestamp = 5;
    if (has_confirmationtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmationtimestamp());
    }

    // optional bool IsAmendmentRequested = 6;
    if (has_isamendmentrequested()) {
      total_size += 1 + 1;
    }

    // optional bool IsRevised = 7;
    if (has_isrevised()) {
      total_size += 1 + 1;
    }

    // optional bool IsCorrected = 8;
    if (has_iscorrected()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool CanDocumentBeSignedBySender = 9;
    if (has_candocumentbesignedbysender()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Docflow.BuyerTitleDocflow BuyerTitleDocflow = 10;
    if (has_buyertitledocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyertitledocflow());
    }

    // optional .Diadoc.Api.Proto.Docflow.RecipientSignatureRejectionDocflow RecipientSignatureRejectionDocflow = 11;
    if (has_recipientsignaturerejectiondocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recipientsignaturerejectiondocflow());
    }

    // optional bool IsReceiptRequested = 12;
    if (has_isreceiptrequested()) {
      total_size += 1 + 1;
    }

    // optional bool IsRecipientSignatureRequested = 13;
    if (has_isrecipientsignaturerequested()) {
      total_size += 1 + 1;
    }

    // optional bool IsDocumentSignedByRecipient = 14;
    if (has_isdocumentsignedbyrecipient()) {
      total_size += 1 + 1;
    }

    // optional bool IsDocumentRejectedByRecipient = 15;
    if (has_isdocumentrejectedbyrecipient()) {
      total_size += 1 + 1;
    }

    // optional bool CanDocumentBeReceipted = 16;
    if (has_candocumentbereceipted()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool CanDocumentBeSignedOrRejectedByRecipient = 17;
    if (has_candocumentbesignedorrejectedbyrecipient()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutboundUniversalTransferDocumentDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutboundUniversalTransferDocumentDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutboundUniversalTransferDocumentDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutboundUniversalTransferDocumentDocflow::MergeFrom(const OutboundUniversalTransferDocumentDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_receiptdocflow()) {
      mutable_receiptdocflow()->::Diadoc::Api::Proto::Docflow::ReceiptDocflow::MergeFrom(from.receiptdocflow());
    }
    if (from.has_confirmationdocflow()) {
      mutable_confirmationdocflow()->::Diadoc::Api::Proto::Docflow::InvoiceConfirmationDocflow::MergeFrom(from.confirmationdocflow());
    }
    if (from.has_correctionrequestdocflow()) {
      mutable_correctionrequestdocflow()->::Diadoc::Api::Proto::Docflow::InvoiceCorrectionRequestDocflow::MergeFrom(from.correctionrequestdocflow());
    }
    if (from.has_confirmationtimestamp()) {
      mutable_confirmationtimestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.confirmationtimestamp());
    }
    if (from.has_isamendmentrequested()) {
      set_isamendmentrequested(from.isamendmentrequested());
    }
    if (from.has_isrevised()) {
      set_isrevised(from.isrevised());
    }
    if (from.has_iscorrected()) {
      set_iscorrected(from.iscorrected());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_candocumentbesignedbysender()) {
      set_candocumentbesignedbysender(from.candocumentbesignedbysender());
    }
    if (from.has_buyertitledocflow()) {
      mutable_buyertitledocflow()->::Diadoc::Api::Proto::Docflow::BuyerTitleDocflow::MergeFrom(from.buyertitledocflow());
    }
    if (from.has_recipientsignaturerejectiondocflow()) {
      mutable_recipientsignaturerejectiondocflow()->::Diadoc::Api::Proto::Docflow::RecipientSignatureRejectionDocflow::MergeFrom(from.recipientsignaturerejectiondocflow());
    }
    if (from.has_isreceiptrequested()) {
      set_isreceiptrequested(from.isreceiptrequested());
    }
    if (from.has_isrecipientsignaturerequested()) {
      set_isrecipientsignaturerequested(from.isrecipientsignaturerequested());
    }
    if (from.has_isdocumentsignedbyrecipient()) {
      set_isdocumentsignedbyrecipient(from.isdocumentsignedbyrecipient());
    }
    if (from.has_isdocumentrejectedbyrecipient()) {
      set_isdocumentrejectedbyrecipient(from.isdocumentrejectedbyrecipient());
    }
    if (from.has_candocumentbereceipted()) {
      set_candocumentbereceipted(from.candocumentbereceipted());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_candocumentbesignedorrejectedbyrecipient()) {
      set_candocumentbesignedorrejectedbyrecipient(from.candocumentbesignedorrejectedbyrecipient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutboundUniversalTransferDocumentDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutboundUniversalTransferDocumentDocflow::CopyFrom(const OutboundUniversalTransferDocumentDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutboundUniversalTransferDocumentDocflow::IsInitialized() const {

  if (has_receiptdocflow()) {
    if (!this->receiptdocflow().IsInitialized()) return false;
  }
  if (has_confirmationdocflow()) {
    if (!this->confirmationdocflow().IsInitialized()) return false;
  }
  if (has_correctionrequestdocflow()) {
    if (!this->correctionrequestdocflow().IsInitialized()) return false;
  }
  if (has_confirmationtimestamp()) {
    if (!this->confirmationtimestamp().IsInitialized()) return false;
  }
  if (has_buyertitledocflow()) {
    if (!this->buyertitledocflow().IsInitialized()) return false;
  }
  if (has_recipientsignaturerejectiondocflow()) {
    if (!this->recipientsignaturerejectiondocflow().IsInitialized()) return false;
  }
  return true;
}

void OutboundUniversalTransferDocumentDocflow::Swap(OutboundUniversalTransferDocumentDocflow* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(receiptdocflow_, other->receiptdocflow_);
    std::swap(confirmationdocflow_, other->confirmationdocflow_);
    std::swap(correctionrequestdocflow_, other->correctionrequestdocflow_);
    std::swap(confirmationtimestamp_, other->confirmationtimestamp_);
    std::swap(isamendmentrequested_, other->isamendmentrequested_);
    std::swap(isrevised_, other->isrevised_);
    std::swap(iscorrected_, other->iscorrected_);
    std::swap(candocumentbesignedbysender_, other->candocumentbesignedbysender_);
    std::swap(buyertitledocflow_, other->buyertitledocflow_);
    std::swap(recipientsignaturerejectiondocflow_, other->recipientsignaturerejectiondocflow_);
    std::swap(isreceiptrequested_, other->isreceiptrequested_);
    std::swap(isrecipientsignaturerequested_, other->isrecipientsignaturerequested_);
    std::swap(isdocumentsignedbyrecipient_, other->isdocumentsignedbyrecipient_);
    std::swap(isdocumentrejectedbyrecipient_, other->isdocumentrejectedbyrecipient_);
    std::swap(candocumentbereceipted_, other->candocumentbereceipted_);
    std::swap(candocumentbesignedorrejectedbyrecipient_, other->candocumentbesignedorrejectedbyrecipient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OutboundUniversalTransferDocumentDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutboundUniversalTransferDocumentDocflow_descriptor_;
  metadata.reflection = OutboundUniversalTransferDocumentDocflow_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
