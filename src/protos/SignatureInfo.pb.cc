// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SignatureInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SignatureInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* SignatureInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignatureInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SignatureInfo_2eproto() {
  protobuf_AddDesc_SignatureInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SignatureInfo.proto");
  GOOGLE_CHECK(file != NULL);
  SignatureInfo_descriptor_ = file->message_type(0);
  static const int SignatureInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, signingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, signatureverificationtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, signatureverificationresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, thumbprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, serialnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, issuer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, startdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, enddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, orgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, orginn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, jobtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, surname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, snils_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, email_),
  };
  SignatureInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignatureInfo_descriptor_,
      SignatureInfo::default_instance_,
      SignatureInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignatureInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SignatureInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignatureInfo_descriptor_, &SignatureInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SignatureInfo_2eproto() {
  delete SignatureInfo::default_instance_;
  delete SignatureInfo_reflection_;
}

void protobuf_AddDesc_SignatureInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_SignatureVerificationResult_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023SignatureInfo.proto\022\020Diadoc.Api.Proto\032"
    "!SignatureVerificationResult.proto\032\017Time"
    "stamp.proto\"\250\003\n\rSignatureInfo\0220\n\013Signing"
    "Time\030\001 \002(\0132\033.Diadoc.Api.Proto.Timestamp\022"
    ">\n\031SignatureVerificationTime\030\002 \001(\0132\033.Dia"
    "doc.Api.Proto.Timestamp\022R\n\033SignatureVeri"
    "ficationResult\030\003 \001(\0132-.Diadoc.Api.Proto."
    "SignatureVerificationResult\022\022\n\nThumbprin"
    "t\030\004 \002(\t\022\024\n\014SerialNumber\030\005 \002(\t\022\016\n\006Issuer\030"
    "\006 \001(\t\022\021\n\tStartDate\030\007 \001(\t\022\017\n\007EndDate\030\010 \001("
    "\t\022\017\n\007OrgName\030\t \001(\t\022\016\n\006OrgInn\030\n \001(\t\022\020\n\010Jo"
    "bTitle\030\013 \001(\t\022\021\n\tFirstName\030\014 \001(\t\022\017\n\007Surna"
    "me\030\r \001(\t\022\r\n\005Snils\030\016 \001(\t\022\r\n\005Email\030\017 \001(\t", 518);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SignatureInfo.proto", &protobuf_RegisterTypes);
  SignatureInfo::default_instance_ = new SignatureInfo();
  SignatureInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SignatureInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SignatureInfo_2eproto {
  StaticDescriptorInitializer_SignatureInfo_2eproto() {
    protobuf_AddDesc_SignatureInfo_2eproto();
  }
} static_descriptor_initializer_SignatureInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SignatureInfo::kSigningTimeFieldNumber;
const int SignatureInfo::kSignatureVerificationTimeFieldNumber;
const int SignatureInfo::kSignatureVerificationResultFieldNumber;
const int SignatureInfo::kThumbprintFieldNumber;
const int SignatureInfo::kSerialNumberFieldNumber;
const int SignatureInfo::kIssuerFieldNumber;
const int SignatureInfo::kStartDateFieldNumber;
const int SignatureInfo::kEndDateFieldNumber;
const int SignatureInfo::kOrgNameFieldNumber;
const int SignatureInfo::kOrgInnFieldNumber;
const int SignatureInfo::kJobTitleFieldNumber;
const int SignatureInfo::kFirstNameFieldNumber;
const int SignatureInfo::kSurnameFieldNumber;
const int SignatureInfo::kSnilsFieldNumber;
const int SignatureInfo::kEmailFieldNumber;
#endif  // !_MSC_VER

SignatureInfo::SignatureInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.SignatureInfo)
}

void SignatureInfo::InitAsDefaultInstance() {
  signingtime_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  signatureverificationtime_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  signatureverificationresult_ = const_cast< ::Diadoc::Api::Proto::SignatureVerificationResult*>(&::Diadoc::Api::Proto::SignatureVerificationResult::default_instance());
}

SignatureInfo::SignatureInfo(const SignatureInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.SignatureInfo)
}

void SignatureInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signingtime_ = NULL;
  signatureverificationtime_ = NULL;
  signatureverificationresult_ = NULL;
  thumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orginn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jobtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  surname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snils_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignatureInfo::~SignatureInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.SignatureInfo)
  SharedDtor();
}

void SignatureInfo::SharedDtor() {
  if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumbprint_;
  }
  if (serialnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialnumber_;
  }
  if (issuer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete issuer_;
  }
  if (startdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete startdate_;
  }
  if (enddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enddate_;
  }
  if (orgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgname_;
  }
  if (orginn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orginn_;
  }
  if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobtitle_;
  }
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstname_;
  }
  if (surname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete surname_;
  }
  if (snils_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete snils_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (this != default_instance_) {
    delete signingtime_;
    delete signatureverificationtime_;
    delete signatureverificationresult_;
  }
}

void SignatureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignatureInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignatureInfo_descriptor_;
}

const SignatureInfo& SignatureInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SignatureInfo_2eproto();
  return *default_instance_;
}

SignatureInfo* SignatureInfo::default_instance_ = NULL;

SignatureInfo* SignatureInfo::New() const {
  return new SignatureInfo;
}

void SignatureInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_signingtime()) {
      if (signingtime_ != NULL) signingtime_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_signatureverificationtime()) {
      if (signatureverificationtime_ != NULL) signatureverificationtime_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_signatureverificationresult()) {
      if (signatureverificationresult_ != NULL) signatureverificationresult_->::Diadoc::Api::Proto::SignatureVerificationResult::Clear();
    }
    if (has_thumbprint()) {
      if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thumbprint_->clear();
      }
    }
    if (has_serialnumber()) {
      if (serialnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serialnumber_->clear();
      }
    }
    if (has_issuer()) {
      if (issuer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        issuer_->clear();
      }
    }
    if (has_startdate()) {
      if (startdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        startdate_->clear();
      }
    }
    if (has_enddate()) {
      if (enddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        enddate_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_orgname()) {
      if (orgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orgname_->clear();
      }
    }
    if (has_orginn()) {
      if (orginn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orginn_->clear();
      }
    }
    if (has_jobtitle()) {
      if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jobtitle_->clear();
      }
    }
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firstname_->clear();
      }
    }
    if (has_surname()) {
      if (surname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        surname_->clear();
      }
    }
    if (has_snils()) {
      if (snils_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        snils_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignatureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.SignatureInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Timestamp SigningTime = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signingtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SignatureVerificationTime;
        break;
      }

      // optional .Diadoc.Api.Proto.Timestamp SignatureVerificationTime = 2;
      case 2: {
        if (tag == 18) {
         parse_SignatureVerificationTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signatureverificationtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SignatureVerificationResult;
        break;
      }

      // optional .Diadoc.Api.Proto.SignatureVerificationResult SignatureVerificationResult = 3;
      case 3: {
        if (tag == 26) {
         parse_SignatureVerificationResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signatureverificationresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Thumbprint;
        break;
      }

      // required string Thumbprint = 4;
      case 4: {
        if (tag == 34) {
         parse_Thumbprint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbprint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbprint().data(), this->thumbprint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thumbprint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SerialNumber;
        break;
      }

      // required string SerialNumber = 5;
      case 5: {
        if (tag == 42) {
         parse_SerialNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serialnumber().data(), this->serialnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serialnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Issuer;
        break;
      }

      // optional string Issuer = 6;
      case 6: {
        if (tag == 50) {
         parse_Issuer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->issuer().data(), this->issuer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "issuer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_StartDate;
        break;
      }

      // optional string StartDate = 7;
      case 7: {
        if (tag == 58) {
         parse_StartDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->startdate().data(), this->startdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "startdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_EndDate;
        break;
      }

      // optional string EndDate = 8;
      case 8: {
        if (tag == 66) {
         parse_EndDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enddate().data(), this->enddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "enddate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_OrgName;
        break;
      }

      // optional string OrgName = 9;
      case 9: {
        if (tag == 74) {
         parse_OrgName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orgname().data(), this->orgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orgname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_OrgInn;
        break;
      }

      // optional string OrgInn = 10;
      case 10: {
        if (tag == 82) {
         parse_OrgInn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orginn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orginn().data(), this->orginn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orginn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_JobTitle;
        break;
      }

      // optional string JobTitle = 11;
      case 11: {
        if (tag == 90) {
         parse_JobTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jobtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jobtitle().data(), this->jobtitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jobtitle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_FirstName;
        break;
      }

      // optional string FirstName = 12;
      case 12: {
        if (tag == 98) {
         parse_FirstName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firstname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Surname;
        break;
      }

      // optional string Surname = 13;
      case 13: {
        if (tag == 106) {
         parse_Surname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_surname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->surname().data(), this->surname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "surname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_Snils;
        break;
      }

      // optional string Snils = 14;
      case 14: {
        if (tag == 114) {
         parse_Snils:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snils()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snils().data(), this->snils().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "snils");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_Email;
        break;
      }

      // optional string Email = 15;
      case 15: {
        if (tag == 122) {
         parse_Email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.SignatureInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.SignatureInfo)
  return false;
#undef DO_
}

void SignatureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.SignatureInfo)
  // required .Diadoc.Api.Proto.Timestamp SigningTime = 1;
  if (has_signingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signingtime(), output);
  }

  // optional .Diadoc.Api.Proto.Timestamp SignatureVerificationTime = 2;
  if (has_signatureverificationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signatureverificationtime(), output);
  }

  // optional .Diadoc.Api.Proto.SignatureVerificationResult SignatureVerificationResult = 3;
  if (has_signatureverificationresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signatureverificationresult(), output);
  }

  // required string Thumbprint = 4;
  if (has_thumbprint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbprint().data(), this->thumbprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumbprint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->thumbprint(), output);
  }

  // required string SerialNumber = 5;
  if (has_serialnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serialnumber().data(), this->serialnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serialnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serialnumber(), output);
  }

  // optional string Issuer = 6;
  if (has_issuer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issuer().data(), this->issuer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "issuer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->issuer(), output);
  }

  // optional string StartDate = 7;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "startdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->startdate(), output);
  }

  // optional string EndDate = 8;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enddate().data(), this->enddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enddate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->enddate(), output);
  }

  // optional string OrgName = 9;
  if (has_orgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orgname().data(), this->orgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orgname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->orgname(), output);
  }

  // optional string OrgInn = 10;
  if (has_orginn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orginn().data(), this->orginn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orginn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->orginn(), output);
  }

  // optional string JobTitle = 11;
  if (has_jobtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jobtitle().data(), this->jobtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jobtitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->jobtitle(), output);
  }

  // optional string FirstName = 12;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->firstname(), output);
  }

  // optional string Surname = 13;
  if (has_surname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->surname().data(), this->surname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "surname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->surname(), output);
  }

  // optional string Snils = 14;
  if (has_snils()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snils().data(), this->snils().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "snils");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->snils(), output);
  }

  // optional string Email = 15;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->email(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.SignatureInfo)
}

::google::protobuf::uint8* SignatureInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.SignatureInfo)
  // required .Diadoc.Api.Proto.Timestamp SigningTime = 1;
  if (has_signingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signingtime(), target);
  }

  // optional .Diadoc.Api.Proto.Timestamp SignatureVerificationTime = 2;
  if (has_signatureverificationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signatureverificationtime(), target);
  }

  // optional .Diadoc.Api.Proto.SignatureVerificationResult SignatureVerificationResult = 3;
  if (has_signatureverificationresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->signatureverificationresult(), target);
  }

  // required string Thumbprint = 4;
  if (has_thumbprint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbprint().data(), this->thumbprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumbprint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->thumbprint(), target);
  }

  // required string SerialNumber = 5;
  if (has_serialnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serialnumber().data(), this->serialnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serialnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serialnumber(), target);
  }

  // optional string Issuer = 6;
  if (has_issuer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issuer().data(), this->issuer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "issuer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->issuer(), target);
  }

  // optional string StartDate = 7;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startdate().data(), this->startdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "startdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->startdate(), target);
  }

  // optional string EndDate = 8;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enddate().data(), this->enddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enddate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->enddate(), target);
  }

  // optional string OrgName = 9;
  if (has_orgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orgname().data(), this->orgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orgname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->orgname(), target);
  }

  // optional string OrgInn = 10;
  if (has_orginn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orginn().data(), this->orginn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orginn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->orginn(), target);
  }

  // optional string JobTitle = 11;
  if (has_jobtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jobtitle().data(), this->jobtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jobtitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->jobtitle(), target);
  }

  // optional string FirstName = 12;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->firstname(), target);
  }

  // optional string Surname = 13;
  if (has_surname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->surname().data(), this->surname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "surname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->surname(), target);
  }

  // optional string Snils = 14;
  if (has_snils()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snils().data(), this->snils().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "snils");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->snils(), target);
  }

  // optional string Email = 15;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->email(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.SignatureInfo)
  return target;
}

int SignatureInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Timestamp SigningTime = 1;
    if (has_signingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signingtime());
    }

    // optional .Diadoc.Api.Proto.Timestamp SignatureVerificationTime = 2;
    if (has_signatureverificationtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signatureverificationtime());
    }

    // optional .Diadoc.Api.Proto.SignatureVerificationResult SignatureVerificationResult = 3;
    if (has_signatureverificationresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signatureverificationresult());
    }

    // required string Thumbprint = 4;
    if (has_thumbprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbprint());
    }

    // required string SerialNumber = 5;
    if (has_serialnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serialnumber());
    }

    // optional string Issuer = 6;
    if (has_issuer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuer());
    }

    // optional string StartDate = 7;
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startdate());
    }

    // optional string EndDate = 8;
    if (has_enddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enddate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string OrgName = 9;
    if (has_orgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgname());
    }

    // optional string OrgInn = 10;
    if (has_orginn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orginn());
    }

    // optional string JobTitle = 11;
    if (has_jobtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jobtitle());
    }

    // optional string FirstName = 12;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }

    // optional string Surname = 13;
    if (has_surname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->surname());
    }

    // optional string Snils = 14;
    if (has_snils()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snils());
    }

    // optional string Email = 15;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignatureInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignatureInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignatureInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignatureInfo::MergeFrom(const SignatureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signingtime()) {
      mutable_signingtime()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.signingtime());
    }
    if (from.has_signatureverificationtime()) {
      mutable_signatureverificationtime()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.signatureverificationtime());
    }
    if (from.has_signatureverificationresult()) {
      mutable_signatureverificationresult()->::Diadoc::Api::Proto::SignatureVerificationResult::MergeFrom(from.signatureverificationresult());
    }
    if (from.has_thumbprint()) {
      set_thumbprint(from.thumbprint());
    }
    if (from.has_serialnumber()) {
      set_serialnumber(from.serialnumber());
    }
    if (from.has_issuer()) {
      set_issuer(from.issuer());
    }
    if (from.has_startdate()) {
      set_startdate(from.startdate());
    }
    if (from.has_enddate()) {
      set_enddate(from.enddate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_orgname()) {
      set_orgname(from.orgname());
    }
    if (from.has_orginn()) {
      set_orginn(from.orginn());
    }
    if (from.has_jobtitle()) {
      set_jobtitle(from.jobtitle());
    }
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_surname()) {
      set_surname(from.surname());
    }
    if (from.has_snils()) {
      set_snils(from.snils());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignatureInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureInfo::CopyFrom(const SignatureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

  if (has_signingtime()) {
    if (!this->signingtime().IsInitialized()) return false;
  }
  if (has_signatureverificationtime()) {
    if (!this->signatureverificationtime().IsInitialized()) return false;
  }
  if (has_signatureverificationresult()) {
    if (!this->signatureverificationresult().IsInitialized()) return false;
  }
  return true;
}

void SignatureInfo::Swap(SignatureInfo* other) {
  if (other != this) {
    std::swap(signingtime_, other->signingtime_);
    std::swap(signatureverificationtime_, other->signatureverificationtime_);
    std::swap(signatureverificationresult_, other->signatureverificationresult_);
    std::swap(thumbprint_, other->thumbprint_);
    std::swap(serialnumber_, other->serialnumber_);
    std::swap(issuer_, other->issuer_);
    std::swap(startdate_, other->startdate_);
    std::swap(enddate_, other->enddate_);
    std::swap(orgname_, other->orgname_);
    std::swap(orginn_, other->orginn_);
    std::swap(jobtitle_, other->jobtitle_);
    std::swap(firstname_, other->firstname_);
    std::swap(surname_, other->surname_);
    std::swap(snils_, other->snils_);
    std::swap(email_, other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignatureInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignatureInfo_descriptor_;
  metadata.reflection = SignatureInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
