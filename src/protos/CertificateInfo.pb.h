// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CertificateInfo.proto

#ifndef PROTOBUF_CertificateInfo_2eproto__INCLUDED
#define PROTOBUF_CertificateInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CertificateInfo_2eproto();
void protobuf_AssignDesc_CertificateInfo_2eproto();
void protobuf_ShutdownFile_CertificateInfo_2eproto();

class CertificateInfo;

// ===================================================================

class CertificateInfo : public ::google::protobuf::Message {
 public:
  CertificateInfo();
  virtual ~CertificateInfo();

  CertificateInfo(const CertificateInfo& from);

  inline CertificateInfo& operator=(const CertificateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CertificateInfo& default_instance();

  void Swap(CertificateInfo* other);

  // implements Message ----------------------------------------------

  CertificateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CertificateInfo& from);
  void MergeFrom(const CertificateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Thumbprint = 1;
  inline bool has_thumbprint() const;
  inline void clear_thumbprint();
  static const int kThumbprintFieldNumber = 1;
  inline const ::std::string& thumbprint() const;
  inline void set_thumbprint(const ::std::string& value);
  inline void set_thumbprint(const char* value);
  inline void set_thumbprint(const char* value, size_t size);
  inline ::std::string* mutable_thumbprint();
  inline ::std::string* release_thumbprint();
  inline void set_allocated_thumbprint(::std::string* thumbprint);

  // optional sfixed64 ValidFrom = 2;
  inline bool has_validfrom() const;
  inline void clear_validfrom();
  static const int kValidFromFieldNumber = 2;
  inline ::google::protobuf::int64 validfrom() const;
  inline void set_validfrom(::google::protobuf::int64 value);

  // optional sfixed64 ValidTo = 3;
  inline bool has_validto() const;
  inline void clear_validto();
  static const int kValidToFieldNumber = 3;
  inline ::google::protobuf::int64 validto() const;
  inline void set_validto(::google::protobuf::int64 value);

  // optional string OrganizationName = 4;
  inline bool has_organizationname() const;
  inline void clear_organizationname();
  static const int kOrganizationNameFieldNumber = 4;
  inline const ::std::string& organizationname() const;
  inline void set_organizationname(const ::std::string& value);
  inline void set_organizationname(const char* value);
  inline void set_organizationname(const char* value, size_t size);
  inline ::std::string* mutable_organizationname();
  inline ::std::string* release_organizationname();
  inline void set_allocated_organizationname(::std::string* organizationname);

  // optional string Inn = 5;
  inline bool has_inn() const;
  inline void clear_inn();
  static const int kInnFieldNumber = 5;
  inline const ::std::string& inn() const;
  inline void set_inn(const ::std::string& value);
  inline void set_inn(const char* value);
  inline void set_inn(const char* value, size_t size);
  inline ::std::string* mutable_inn();
  inline ::std::string* release_inn();
  inline void set_allocated_inn(::std::string* inn);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.CertificateInfo)
 private:
  inline void set_has_thumbprint();
  inline void clear_has_thumbprint();
  inline void set_has_validfrom();
  inline void clear_has_validfrom();
  inline void set_has_validto();
  inline void clear_has_validto();
  inline void set_has_organizationname();
  inline void clear_has_organizationname();
  inline void set_has_inn();
  inline void clear_has_inn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* thumbprint_;
  ::google::protobuf::int64 validfrom_;
  ::google::protobuf::int64 validto_;
  ::std::string* organizationname_;
  ::std::string* inn_;
  friend void  protobuf_AddDesc_CertificateInfo_2eproto();
  friend void protobuf_AssignDesc_CertificateInfo_2eproto();
  friend void protobuf_ShutdownFile_CertificateInfo_2eproto();

  void InitAsDefaultInstance();
  static CertificateInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// CertificateInfo

// optional string Thumbprint = 1;
inline bool CertificateInfo::has_thumbprint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertificateInfo::set_has_thumbprint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CertificateInfo::clear_has_thumbprint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CertificateInfo::clear_thumbprint() {
  if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_->clear();
  }
  clear_has_thumbprint();
}
inline const ::std::string& CertificateInfo::thumbprint() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.CertificateInfo.Thumbprint)
  return *thumbprint_;
}
inline void CertificateInfo::set_thumbprint(const ::std::string& value) {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  thumbprint_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.CertificateInfo.Thumbprint)
}
inline void CertificateInfo::set_thumbprint(const char* value) {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  thumbprint_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.CertificateInfo.Thumbprint)
}
inline void CertificateInfo::set_thumbprint(const char* value, size_t size) {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  thumbprint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.CertificateInfo.Thumbprint)
}
inline ::std::string* CertificateInfo::mutable_thumbprint() {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.CertificateInfo.Thumbprint)
  return thumbprint_;
}
inline ::std::string* CertificateInfo::release_thumbprint() {
  clear_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = thumbprint_;
    thumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CertificateInfo::set_allocated_thumbprint(::std::string* thumbprint) {
  if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumbprint_;
  }
  if (thumbprint) {
    set_has_thumbprint();
    thumbprint_ = thumbprint;
  } else {
    clear_has_thumbprint();
    thumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.CertificateInfo.Thumbprint)
}

// optional sfixed64 ValidFrom = 2;
inline bool CertificateInfo::has_validfrom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertificateInfo::set_has_validfrom() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CertificateInfo::clear_has_validfrom() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CertificateInfo::clear_validfrom() {
  validfrom_ = GOOGLE_LONGLONG(0);
  clear_has_validfrom();
}
inline ::google::protobuf::int64 CertificateInfo::validfrom() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.CertificateInfo.ValidFrom)
  return validfrom_;
}
inline void CertificateInfo::set_validfrom(::google::protobuf::int64 value) {
  set_has_validfrom();
  validfrom_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.CertificateInfo.ValidFrom)
}

// optional sfixed64 ValidTo = 3;
inline bool CertificateInfo::has_validto() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CertificateInfo::set_has_validto() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CertificateInfo::clear_has_validto() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CertificateInfo::clear_validto() {
  validto_ = GOOGLE_LONGLONG(0);
  clear_has_validto();
}
inline ::google::protobuf::int64 CertificateInfo::validto() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.CertificateInfo.ValidTo)
  return validto_;
}
inline void CertificateInfo::set_validto(::google::protobuf::int64 value) {
  set_has_validto();
  validto_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.CertificateInfo.ValidTo)
}

// optional string OrganizationName = 4;
inline bool CertificateInfo::has_organizationname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CertificateInfo::set_has_organizationname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CertificateInfo::clear_has_organizationname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CertificateInfo::clear_organizationname() {
  if (organizationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationname_->clear();
  }
  clear_has_organizationname();
}
inline const ::std::string& CertificateInfo::organizationname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.CertificateInfo.OrganizationName)
  return *organizationname_;
}
inline void CertificateInfo::set_organizationname(const ::std::string& value) {
  set_has_organizationname();
  if (organizationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationname_ = new ::std::string;
  }
  organizationname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.CertificateInfo.OrganizationName)
}
inline void CertificateInfo::set_organizationname(const char* value) {
  set_has_organizationname();
  if (organizationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationname_ = new ::std::string;
  }
  organizationname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.CertificateInfo.OrganizationName)
}
inline void CertificateInfo::set_organizationname(const char* value, size_t size) {
  set_has_organizationname();
  if (organizationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationname_ = new ::std::string;
  }
  organizationname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.CertificateInfo.OrganizationName)
}
inline ::std::string* CertificateInfo::mutable_organizationname() {
  set_has_organizationname();
  if (organizationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.CertificateInfo.OrganizationName)
  return organizationname_;
}
inline ::std::string* CertificateInfo::release_organizationname() {
  clear_has_organizationname();
  if (organizationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = organizationname_;
    organizationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CertificateInfo::set_allocated_organizationname(::std::string* organizationname) {
  if (organizationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete organizationname_;
  }
  if (organizationname) {
    set_has_organizationname();
    organizationname_ = organizationname;
  } else {
    clear_has_organizationname();
    organizationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.CertificateInfo.OrganizationName)
}

// optional string Inn = 5;
inline bool CertificateInfo::has_inn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CertificateInfo::set_has_inn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CertificateInfo::clear_has_inn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CertificateInfo::clear_inn() {
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_->clear();
  }
  clear_has_inn();
}
inline const ::std::string& CertificateInfo::inn() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.CertificateInfo.Inn)
  return *inn_;
}
inline void CertificateInfo::set_inn(const ::std::string& value) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.CertificateInfo.Inn)
}
inline void CertificateInfo::set_inn(const char* value) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.CertificateInfo.Inn)
}
inline void CertificateInfo::set_inn(const char* value, size_t size) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.CertificateInfo.Inn)
}
inline ::std::string* CertificateInfo::mutable_inn() {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.CertificateInfo.Inn)
  return inn_;
}
inline ::std::string* CertificateInfo::release_inn() {
  clear_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inn_;
    inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CertificateInfo::set_allocated_inn(::std::string* inn) {
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inn_;
  }
  if (inn) {
    set_has_inn();
    inn_ = inn;
  } else {
    clear_has_inn();
    inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.CertificateInfo.Inn)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CertificateInfo_2eproto__INCLUDED
