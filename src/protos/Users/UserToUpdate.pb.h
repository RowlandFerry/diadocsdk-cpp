// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Users/UserToUpdate.proto

#ifndef PROTOBUF_Users_2fUserToUpdate_2eproto__INCLUDED
#define PROTOBUF_Users_2fUserToUpdate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "User.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Users {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Users_2fUserToUpdate_2eproto();
void protobuf_AssignDesc_Users_2fUserToUpdate_2eproto();
void protobuf_ShutdownFile_Users_2fUserToUpdate_2eproto();

class UserToUpdate;
class UserLoginPatch;
class UserFullNamePatch;

// ===================================================================

class UserToUpdate : public ::google::protobuf::Message {
 public:
  UserToUpdate();
  virtual ~UserToUpdate();

  UserToUpdate(const UserToUpdate& from);

  inline UserToUpdate& operator=(const UserToUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserToUpdate& default_instance();

  void Swap(UserToUpdate* other);

  // implements Message ----------------------------------------------

  UserToUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserToUpdate& from);
  void MergeFrom(const UserToUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Users.UserLoginPatch Login = 1;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Users::UserLoginPatch& login() const;
  inline ::Diadoc::Api::Proto::Users::UserLoginPatch* mutable_login();
  inline ::Diadoc::Api::Proto::Users::UserLoginPatch* release_login();
  inline void set_allocated_login(::Diadoc::Api::Proto::Users::UserLoginPatch* login);

  // optional .Diadoc.Api.Proto.Users.UserFullNamePatch FullName = 2;
  inline bool has_fullname() const;
  inline void clear_fullname();
  static const int kFullNameFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Users::UserFullNamePatch& fullname() const;
  inline ::Diadoc::Api::Proto::Users::UserFullNamePatch* mutable_fullname();
  inline ::Diadoc::Api::Proto::Users::UserFullNamePatch* release_fullname();
  inline void set_allocated_fullname(::Diadoc::Api::Proto::Users::UserFullNamePatch* fullname);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Users.UserToUpdate)
 private:
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_fullname();
  inline void clear_has_fullname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Users::UserLoginPatch* login_;
  ::Diadoc::Api::Proto::Users::UserFullNamePatch* fullname_;
  friend void  protobuf_AddDesc_Users_2fUserToUpdate_2eproto();
  friend void protobuf_AssignDesc_Users_2fUserToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Users_2fUserToUpdate_2eproto();

  void InitAsDefaultInstance();
  static UserToUpdate* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginPatch : public ::google::protobuf::Message {
 public:
  UserLoginPatch();
  virtual ~UserLoginPatch();

  UserLoginPatch(const UserLoginPatch& from);

  inline UserLoginPatch& operator=(const UserLoginPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginPatch& default_instance();

  void Swap(UserLoginPatch* other);

  // implements Message ----------------------------------------------

  UserLoginPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLoginPatch& from);
  void MergeFrom(const UserLoginPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Login = 1;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 1;
  inline const ::std::string& login() const;
  inline void set_login(const ::std::string& value);
  inline void set_login(const char* value);
  inline void set_login(const char* value, size_t size);
  inline ::std::string* mutable_login();
  inline ::std::string* release_login();
  inline void set_allocated_login(::std::string* login);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Users.UserLoginPatch)
 private:
  inline void set_has_login();
  inline void clear_has_login();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* login_;
  friend void  protobuf_AddDesc_Users_2fUserToUpdate_2eproto();
  friend void protobuf_AssignDesc_Users_2fUserToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Users_2fUserToUpdate_2eproto();

  void InitAsDefaultInstance();
  static UserLoginPatch* default_instance_;
};
// -------------------------------------------------------------------

class UserFullNamePatch : public ::google::protobuf::Message {
 public:
  UserFullNamePatch();
  virtual ~UserFullNamePatch();

  UserFullNamePatch(const UserFullNamePatch& from);

  inline UserFullNamePatch& operator=(const UserFullNamePatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserFullNamePatch& default_instance();

  void Swap(UserFullNamePatch* other);

  // implements Message ----------------------------------------------

  UserFullNamePatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserFullNamePatch& from);
  void MergeFrom(const UserFullNamePatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.FullName FullName = 1;
  inline bool has_fullname() const;
  inline void clear_fullname();
  static const int kFullNameFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::FullName& fullname() const;
  inline ::Diadoc::Api::Proto::FullName* mutable_fullname();
  inline ::Diadoc::Api::Proto::FullName* release_fullname();
  inline void set_allocated_fullname(::Diadoc::Api::Proto::FullName* fullname);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Users.UserFullNamePatch)
 private:
  inline void set_has_fullname();
  inline void clear_has_fullname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::FullName* fullname_;
  friend void  protobuf_AddDesc_Users_2fUserToUpdate_2eproto();
  friend void protobuf_AssignDesc_Users_2fUserToUpdate_2eproto();
  friend void protobuf_ShutdownFile_Users_2fUserToUpdate_2eproto();

  void InitAsDefaultInstance();
  static UserFullNamePatch* default_instance_;
};
// ===================================================================


// ===================================================================

// UserToUpdate

// optional .Diadoc.Api.Proto.Users.UserLoginPatch Login = 1;
inline bool UserToUpdate::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserToUpdate::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserToUpdate::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserToUpdate::clear_login() {
  if (login_ != NULL) login_->::Diadoc::Api::Proto::Users::UserLoginPatch::Clear();
  clear_has_login();
}
inline const ::Diadoc::Api::Proto::Users::UserLoginPatch& UserToUpdate::login() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Users.UserToUpdate.Login)
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::Diadoc::Api::Proto::Users::UserLoginPatch* UserToUpdate::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::Diadoc::Api::Proto::Users::UserLoginPatch;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Users.UserToUpdate.Login)
  return login_;
}
inline ::Diadoc::Api::Proto::Users::UserLoginPatch* UserToUpdate::release_login() {
  clear_has_login();
  ::Diadoc::Api::Proto::Users::UserLoginPatch* temp = login_;
  login_ = NULL;
  return temp;
}
inline void UserToUpdate::set_allocated_login(::Diadoc::Api::Proto::Users::UserLoginPatch* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Users.UserToUpdate.Login)
}

// optional .Diadoc.Api.Proto.Users.UserFullNamePatch FullName = 2;
inline bool UserToUpdate::has_fullname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserToUpdate::set_has_fullname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserToUpdate::clear_has_fullname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserToUpdate::clear_fullname() {
  if (fullname_ != NULL) fullname_->::Diadoc::Api::Proto::Users::UserFullNamePatch::Clear();
  clear_has_fullname();
}
inline const ::Diadoc::Api::Proto::Users::UserFullNamePatch& UserToUpdate::fullname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Users.UserToUpdate.FullName)
  return fullname_ != NULL ? *fullname_ : *default_instance_->fullname_;
}
inline ::Diadoc::Api::Proto::Users::UserFullNamePatch* UserToUpdate::mutable_fullname() {
  set_has_fullname();
  if (fullname_ == NULL) fullname_ = new ::Diadoc::Api::Proto::Users::UserFullNamePatch;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Users.UserToUpdate.FullName)
  return fullname_;
}
inline ::Diadoc::Api::Proto::Users::UserFullNamePatch* UserToUpdate::release_fullname() {
  clear_has_fullname();
  ::Diadoc::Api::Proto::Users::UserFullNamePatch* temp = fullname_;
  fullname_ = NULL;
  return temp;
}
inline void UserToUpdate::set_allocated_fullname(::Diadoc::Api::Proto::Users::UserFullNamePatch* fullname) {
  delete fullname_;
  fullname_ = fullname;
  if (fullname) {
    set_has_fullname();
  } else {
    clear_has_fullname();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Users.UserToUpdate.FullName)
}

// -------------------------------------------------------------------

// UserLoginPatch

// optional string Login = 1;
inline bool UserLoginPatch::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginPatch::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginPatch::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginPatch::clear_login() {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_->clear();
  }
  clear_has_login();
}
inline const ::std::string& UserLoginPatch::login() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Users.UserLoginPatch.Login)
  return *login_;
}
inline void UserLoginPatch::set_login(const ::std::string& value) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  login_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Users.UserLoginPatch.Login)
}
inline void UserLoginPatch::set_login(const char* value) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  login_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Users.UserLoginPatch.Login)
}
inline void UserLoginPatch::set_login(const char* value, size_t size) {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  login_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Users.UserLoginPatch.Login)
}
inline ::std::string* UserLoginPatch::mutable_login() {
  set_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Users.UserLoginPatch.Login)
  return login_;
}
inline ::std::string* UserLoginPatch::release_login() {
  clear_has_login();
  if (login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = login_;
    login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserLoginPatch::set_allocated_login(::std::string* login) {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_;
  }
  if (login) {
    set_has_login();
    login_ = login;
  } else {
    clear_has_login();
    login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Users.UserLoginPatch.Login)
}

// -------------------------------------------------------------------

// UserFullNamePatch

// optional .Diadoc.Api.Proto.FullName FullName = 1;
inline bool UserFullNamePatch::has_fullname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserFullNamePatch::set_has_fullname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserFullNamePatch::clear_has_fullname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserFullNamePatch::clear_fullname() {
  if (fullname_ != NULL) fullname_->::Diadoc::Api::Proto::FullName::Clear();
  clear_has_fullname();
}
inline const ::Diadoc::Api::Proto::FullName& UserFullNamePatch::fullname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Users.UserFullNamePatch.FullName)
  return fullname_ != NULL ? *fullname_ : *default_instance_->fullname_;
}
inline ::Diadoc::Api::Proto::FullName* UserFullNamePatch::mutable_fullname() {
  set_has_fullname();
  if (fullname_ == NULL) fullname_ = new ::Diadoc::Api::Proto::FullName;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Users.UserFullNamePatch.FullName)
  return fullname_;
}
inline ::Diadoc::Api::Proto::FullName* UserFullNamePatch::release_fullname() {
  clear_has_fullname();
  ::Diadoc::Api::Proto::FullName* temp = fullname_;
  fullname_ = NULL;
  return temp;
}
inline void UserFullNamePatch::set_allocated_fullname(::Diadoc::Api::Proto::FullName* fullname) {
  delete fullname_;
  fullname_ = fullname;
  if (fullname) {
    set_has_fullname();
  } else {
    clear_has_fullname();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Users.UserFullNamePatch.FullName)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Users
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Users_2fUserToUpdate_2eproto__INCLUDED
