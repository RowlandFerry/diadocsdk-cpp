// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Dss/DssSign.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Dss/DssSign.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Dss {

namespace {

const ::google::protobuf::Descriptor* DssSignRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DssSignRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DssSignFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DssSignFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* DssSignResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DssSignResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* DssFileSigningResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DssFileSigningResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DssConfirmType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DssOperator_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DssFileSigningStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DssOperationStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Dss_2fDssSign_2eproto() {
  protobuf_AddDesc_Dss_2fDssSign_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Dss/DssSign.proto");
  GOOGLE_CHECK(file != NULL);
  DssSignRequest_descriptor_ = file->message_type(0);
  static const int DssSignRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssSignRequest, files_),
  };
  DssSignRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DssSignRequest_descriptor_,
      DssSignRequest::default_instance_,
      DssSignRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssSignRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssSignRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DssSignRequest));
  DssSignFile_descriptor_ = file->message_type(1);
  static const int DssSignFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssSignFile, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssSignFile, filename_),
  };
  DssSignFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DssSignFile_descriptor_,
      DssSignFile::default_instance_,
      DssSignFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssSignFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssSignFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DssSignFile));
  DssSignResult_descriptor_ = file->message_type(2);
  static const int DssSignResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssSignResult, operationstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssSignResult, filesigningresults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssSignResult, confirmtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssSignResult, operator__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssSignResult, phonelastnumbers_),
  };
  DssSignResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DssSignResult_descriptor_,
      DssSignResult::default_instance_,
      DssSignResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssSignResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssSignResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DssSignResult));
  DssFileSigningResult_descriptor_ = file->message_type(3);
  static const int DssFileSigningResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssFileSigningResult, filesigningstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssFileSigningResult, signature_),
  };
  DssFileSigningResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DssFileSigningResult_descriptor_,
      DssFileSigningResult::default_instance_,
      DssFileSigningResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssFileSigningResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssFileSigningResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DssFileSigningResult));
  DssConfirmType_descriptor_ = file->enum_type(0);
  DssOperator_descriptor_ = file->enum_type(1);
  DssFileSigningStatus_descriptor_ = file->enum_type(2);
  DssOperationStatus_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Dss_2fDssSign_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DssSignRequest_descriptor_, &DssSignRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DssSignFile_descriptor_, &DssSignFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DssSignResult_descriptor_, &DssSignResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DssFileSigningResult_descriptor_, &DssFileSigningResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Dss_2fDssSign_2eproto() {
  delete DssSignRequest::default_instance_;
  delete DssSignRequest_reflection_;
  delete DssSignFile::default_instance_;
  delete DssSignFile_reflection_;
  delete DssSignResult::default_instance_;
  delete DssSignResult_reflection_;
  delete DssFileSigningResult::default_instance_;
  delete DssFileSigningResult_reflection_;
}

void protobuf_AddDesc_Dss_2fDssSign_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Content_5fv3_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021Dss/DssSign.proto\022\024Diadoc.Api.Proto.Ds"
    "s\032\020Content_v3.proto\"B\n\016DssSignRequest\0220\n"
    "\005Files\030\001 \003(\0132!.Diadoc.Api.Proto.Dss.DssS"
    "ignFile\"N\n\013DssSignFile\022-\n\007Content\030\001 \002(\0132"
    "\034.Diadoc.Api.Proto.Content_v3\022\020\n\010FileNam"
    "e\030\002 \001(\t\"\322\002\n\rDssSignResult\022J\n\017OperationSt"
    "atus\030\001 \001(\0162(.Diadoc.Api.Proto.Dss.DssOpe"
    "rationStatus:\007Unknown\022F\n\022FileSigningResu"
    "lts\030\002 \003(\0132*.Diadoc.Api.Proto.Dss.DssFile"
    "SigningResult\022M\n\013ConfirmType\030\003 \001(\0162$.Dia"
    "doc.Api.Proto.Dss.DssConfirmType:\022Confir"
    "mTypeUnknown\022D\n\010Operator\030\004 \001(\0162!.Diadoc."
    "Api.Proto.Dss.DssOperator:\017OperatorUnkno"
    "wn\022\030\n\020PhoneLastNumbers\030\005 \001(\t\"\206\001\n\024DssFile"
    "SigningResult\022[\n\021FileSigningStatus\030\001 \001(\016"
    "2*.Diadoc.Api.Proto.Dss.DssFileSigningSt"
    "atus:\024UnknownSigningStatus\022\021\n\tSignature\030"
    "\002 \001(\014*j\n\016DssConfirmType\022\037\n\022ConfirmTypeUn"
    "known\020\377\377\377\377\377\377\377\377\377\001\022\010\n\004None\020\000\022\007\n\003Sms\020\001\022\t\n\005M"
    "yDss\020\002\022\n\n\006Applet\020\003\022\r\n\tMobileSdk\020\004*;\n\013Dss"
    "Operator\022\023\n\017OperatorUnknown\020\000\022\013\n\007Megafon"
    "\020\001\022\n\n\006Kontur\020\002*X\n\024DssFileSigningStatus\022\030"
    "\n\024UnknownSigningStatus\020\000\022\024\n\020SigningCompl"
    "eted\020\001\022\020\n\014SigningError\020\002*\253\001\n\022DssOperatio"
    "nStatus\022\013\n\007Unknown\020\000\022\016\n\nInProgress\020\001\022\r\n\t"
    "Completed\020\002\022\022\n\016CanceledByUser\020\003\022\013\n\007Timeo"
    "ut\020\004\022\013\n\007Crashed\020\005\022\037\n\033UserHasUnconfirmedO"
    "peration\020\006\022\032\n\026OperationRetryRequired\020\007", 1118);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Dss/DssSign.proto", &protobuf_RegisterTypes);
  DssSignRequest::default_instance_ = new DssSignRequest();
  DssSignFile::default_instance_ = new DssSignFile();
  DssSignResult::default_instance_ = new DssSignResult();
  DssFileSigningResult::default_instance_ = new DssFileSigningResult();
  DssSignRequest::default_instance_->InitAsDefaultInstance();
  DssSignFile::default_instance_->InitAsDefaultInstance();
  DssSignResult::default_instance_->InitAsDefaultInstance();
  DssFileSigningResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Dss_2fDssSign_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Dss_2fDssSign_2eproto {
  StaticDescriptorInitializer_Dss_2fDssSign_2eproto() {
    protobuf_AddDesc_Dss_2fDssSign_2eproto();
  }
} static_descriptor_initializer_Dss_2fDssSign_2eproto_;
const ::google::protobuf::EnumDescriptor* DssConfirmType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DssConfirmType_descriptor_;
}
bool DssConfirmType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DssOperator_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DssOperator_descriptor_;
}
bool DssOperator_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DssFileSigningStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DssFileSigningStatus_descriptor_;
}
bool DssFileSigningStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DssOperationStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DssOperationStatus_descriptor_;
}
bool DssOperationStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DssSignRequest::kFilesFieldNumber;
#endif  // !_MSC_VER

DssSignRequest::DssSignRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Dss.DssSignRequest)
}

void DssSignRequest::InitAsDefaultInstance() {
}

DssSignRequest::DssSignRequest(const DssSignRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Dss.DssSignRequest)
}

void DssSignRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DssSignRequest::~DssSignRequest() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Dss.DssSignRequest)
  SharedDtor();
}

void DssSignRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DssSignRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DssSignRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DssSignRequest_descriptor_;
}

const DssSignRequest& DssSignRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dss_2fDssSign_2eproto();
  return *default_instance_;
}

DssSignRequest* DssSignRequest::default_instance_ = NULL;

DssSignRequest* DssSignRequest::New() const {
  return new DssSignRequest;
}

void DssSignRequest::Clear() {
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DssSignRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Dss.DssSignRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Dss.DssSignFile Files = 1;
      case 1: {
        if (tag == 10) {
         parse_Files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Files;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Dss.DssSignRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Dss.DssSignRequest)
  return false;
#undef DO_
}

void DssSignRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Dss.DssSignRequest)
  // repeated .Diadoc.Api.Proto.Dss.DssSignFile Files = 1;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->files(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Dss.DssSignRequest)
}

::google::protobuf::uint8* DssSignRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Dss.DssSignRequest)
  // repeated .Diadoc.Api.Proto.Dss.DssSignFile Files = 1;
  for (int i = 0; i < this->files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->files(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Dss.DssSignRequest)
  return target;
}

int DssSignRequest::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.Dss.DssSignFile Files = 1;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->files(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DssSignRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DssSignRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DssSignRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DssSignRequest::MergeFrom(const DssSignRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  files_.MergeFrom(from.files_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DssSignRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DssSignRequest::CopyFrom(const DssSignRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DssSignRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->files())) return false;
  return true;
}

void DssSignRequest::Swap(DssSignRequest* other) {
  if (other != this) {
    files_.Swap(&other->files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DssSignRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DssSignRequest_descriptor_;
  metadata.reflection = DssSignRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DssSignFile::kContentFieldNumber;
const int DssSignFile::kFileNameFieldNumber;
#endif  // !_MSC_VER

DssSignFile::DssSignFile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Dss.DssSignFile)
}

void DssSignFile::InitAsDefaultInstance() {
  content_ = const_cast< ::Diadoc::Api::Proto::Content_v3*>(&::Diadoc::Api::Proto::Content_v3::default_instance());
}

DssSignFile::DssSignFile(const DssSignFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Dss.DssSignFile)
}

void DssSignFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DssSignFile::~DssSignFile() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Dss.DssSignFile)
  SharedDtor();
}

void DssSignFile::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (this != default_instance_) {
    delete content_;
  }
}

void DssSignFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DssSignFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DssSignFile_descriptor_;
}

const DssSignFile& DssSignFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dss_2fDssSign_2eproto();
  return *default_instance_;
}

DssSignFile* DssSignFile::default_instance_ = NULL;

DssSignFile* DssSignFile::New() const {
  return new DssSignFile;
}

void DssSignFile::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_content()) {
      if (content_ != NULL) content_->::Diadoc::Api::Proto::Content_v3::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DssSignFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Dss.DssSignFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Content_v3 Content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // optional string FileName = 2;
      case 2: {
        if (tag == 18) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Dss.DssSignFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Dss.DssSignFile)
  return false;
#undef DO_
}

void DssSignFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Dss.DssSignFile)
  // required .Diadoc.Api.Proto.Content_v3 Content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(), output);
  }

  // optional string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Dss.DssSignFile)
}

::google::protobuf::uint8* DssSignFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Dss.DssSignFile)
  // required .Diadoc.Api.Proto.Content_v3 Content = 1;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(), target);
  }

  // optional string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Dss.DssSignFile)
  return target;
}

int DssSignFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Content_v3 Content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DssSignFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DssSignFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DssSignFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DssSignFile::MergeFrom(const DssSignFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      mutable_content()->::Diadoc::Api::Proto::Content_v3::MergeFrom(from.content());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DssSignFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DssSignFile::CopyFrom(const DssSignFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DssSignFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void DssSignFile::Swap(DssSignFile* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DssSignFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DssSignFile_descriptor_;
  metadata.reflection = DssSignFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DssSignResult::kOperationStatusFieldNumber;
const int DssSignResult::kFileSigningResultsFieldNumber;
const int DssSignResult::kConfirmTypeFieldNumber;
const int DssSignResult::kOperatorFieldNumber;
const int DssSignResult::kPhoneLastNumbersFieldNumber;
#endif  // !_MSC_VER

DssSignResult::DssSignResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Dss.DssSignResult)
}

void DssSignResult::InitAsDefaultInstance() {
}

DssSignResult::DssSignResult(const DssSignResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Dss.DssSignResult)
}

void DssSignResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operationstatus_ = 0;
  confirmtype_ = -1;
  operator__ = 0;
  phonelastnumbers_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DssSignResult::~DssSignResult() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Dss.DssSignResult)
  SharedDtor();
}

void DssSignResult::SharedDtor() {
  if (phonelastnumbers_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonelastnumbers_;
  }
  if (this != default_instance_) {
  }
}

void DssSignResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DssSignResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DssSignResult_descriptor_;
}

const DssSignResult& DssSignResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dss_2fDssSign_2eproto();
  return *default_instance_;
}

DssSignResult* DssSignResult::default_instance_ = NULL;

DssSignResult* DssSignResult::New() const {
  return new DssSignResult;
}

void DssSignResult::Clear() {
  if (_has_bits_[0 / 32] & 29) {
    operationstatus_ = 0;
    confirmtype_ = -1;
    operator__ = 0;
    if (has_phonelastnumbers()) {
      if (phonelastnumbers_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonelastnumbers_->clear();
      }
    }
  }
  filesigningresults_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DssSignResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Dss.DssSignResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Dss.DssOperationStatus OperationStatus = 1 [default = Unknown];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Dss::DssOperationStatus_IsValid(value)) {
            set_operationstatus(static_cast< ::Diadoc::Api::Proto::Dss::DssOperationStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileSigningResults;
        break;
      }

      // repeated .Diadoc.Api.Proto.Dss.DssFileSigningResult FileSigningResults = 2;
      case 2: {
        if (tag == 18) {
         parse_FileSigningResults:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filesigningresults()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileSigningResults;
        if (input->ExpectTag(24)) goto parse_ConfirmType;
        break;
      }

      // optional .Diadoc.Api.Proto.Dss.DssConfirmType ConfirmType = 3 [default = ConfirmTypeUnknown];
      case 3: {
        if (tag == 24) {
         parse_ConfirmType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Dss::DssConfirmType_IsValid(value)) {
            set_confirmtype(static_cast< ::Diadoc::Api::Proto::Dss::DssConfirmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Operator;
        break;
      }

      // optional .Diadoc.Api.Proto.Dss.DssOperator Operator = 4 [default = OperatorUnknown];
      case 4: {
        if (tag == 32) {
         parse_Operator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Dss::DssOperator_IsValid(value)) {
            set_operator_(static_cast< ::Diadoc::Api::Proto::Dss::DssOperator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_PhoneLastNumbers;
        break;
      }

      // optional string PhoneLastNumbers = 5;
      case 5: {
        if (tag == 42) {
         parse_PhoneLastNumbers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonelastnumbers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonelastnumbers().data(), this->phonelastnumbers().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phonelastnumbers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Dss.DssSignResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Dss.DssSignResult)
  return false;
#undef DO_
}

void DssSignResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Dss.DssSignResult)
  // optional .Diadoc.Api.Proto.Dss.DssOperationStatus OperationStatus = 1 [default = Unknown];
  if (has_operationstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operationstatus(), output);
  }

  // repeated .Diadoc.Api.Proto.Dss.DssFileSigningResult FileSigningResults = 2;
  for (int i = 0; i < this->filesigningresults_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filesigningresults(i), output);
  }

  // optional .Diadoc.Api.Proto.Dss.DssConfirmType ConfirmType = 3 [default = ConfirmTypeUnknown];
  if (has_confirmtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->confirmtype(), output);
  }

  // optional .Diadoc.Api.Proto.Dss.DssOperator Operator = 4 [default = OperatorUnknown];
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->operator_(), output);
  }

  // optional string PhoneLastNumbers = 5;
  if (has_phonelastnumbers()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonelastnumbers().data(), this->phonelastnumbers().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonelastnumbers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->phonelastnumbers(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Dss.DssSignResult)
}

::google::protobuf::uint8* DssSignResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Dss.DssSignResult)
  // optional .Diadoc.Api.Proto.Dss.DssOperationStatus OperationStatus = 1 [default = Unknown];
  if (has_operationstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operationstatus(), target);
  }

  // repeated .Diadoc.Api.Proto.Dss.DssFileSigningResult FileSigningResults = 2;
  for (int i = 0; i < this->filesigningresults_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filesigningresults(i), target);
  }

  // optional .Diadoc.Api.Proto.Dss.DssConfirmType ConfirmType = 3 [default = ConfirmTypeUnknown];
  if (has_confirmtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->confirmtype(), target);
  }

  // optional .Diadoc.Api.Proto.Dss.DssOperator Operator = 4 [default = OperatorUnknown];
  if (has_operator_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->operator_(), target);
  }

  // optional string PhoneLastNumbers = 5;
  if (has_phonelastnumbers()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonelastnumbers().data(), this->phonelastnumbers().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonelastnumbers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phonelastnumbers(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Dss.DssSignResult)
  return target;
}

int DssSignResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Dss.DssOperationStatus OperationStatus = 1 [default = Unknown];
    if (has_operationstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operationstatus());
    }

    // optional .Diadoc.Api.Proto.Dss.DssConfirmType ConfirmType = 3 [default = ConfirmTypeUnknown];
    if (has_confirmtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->confirmtype());
    }

    // optional .Diadoc.Api.Proto.Dss.DssOperator Operator = 4 [default = OperatorUnknown];
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operator_());
    }

    // optional string PhoneLastNumbers = 5;
    if (has_phonelastnumbers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonelastnumbers());
    }

  }
  // repeated .Diadoc.Api.Proto.Dss.DssFileSigningResult FileSigningResults = 2;
  total_size += 1 * this->filesigningresults_size();
  for (int i = 0; i < this->filesigningresults_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filesigningresults(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DssSignResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DssSignResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DssSignResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DssSignResult::MergeFrom(const DssSignResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  filesigningresults_.MergeFrom(from.filesigningresults_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operationstatus()) {
      set_operationstatus(from.operationstatus());
    }
    if (from.has_confirmtype()) {
      set_confirmtype(from.confirmtype());
    }
    if (from.has_operator_()) {
      set_operator_(from.operator_());
    }
    if (from.has_phonelastnumbers()) {
      set_phonelastnumbers(from.phonelastnumbers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DssSignResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DssSignResult::CopyFrom(const DssSignResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DssSignResult::IsInitialized() const {

  return true;
}

void DssSignResult::Swap(DssSignResult* other) {
  if (other != this) {
    std::swap(operationstatus_, other->operationstatus_);
    filesigningresults_.Swap(&other->filesigningresults_);
    std::swap(confirmtype_, other->confirmtype_);
    std::swap(operator__, other->operator__);
    std::swap(phonelastnumbers_, other->phonelastnumbers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DssSignResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DssSignResult_descriptor_;
  metadata.reflection = DssSignResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DssFileSigningResult::kFileSigningStatusFieldNumber;
const int DssFileSigningResult::kSignatureFieldNumber;
#endif  // !_MSC_VER

DssFileSigningResult::DssFileSigningResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Dss.DssFileSigningResult)
}

void DssFileSigningResult::InitAsDefaultInstance() {
}

DssFileSigningResult::DssFileSigningResult(const DssFileSigningResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Dss.DssFileSigningResult)
}

void DssFileSigningResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filesigningstatus_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DssFileSigningResult::~DssFileSigningResult() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Dss.DssFileSigningResult)
  SharedDtor();
}

void DssFileSigningResult::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void DssFileSigningResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DssFileSigningResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DssFileSigningResult_descriptor_;
}

const DssFileSigningResult& DssFileSigningResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dss_2fDssSign_2eproto();
  return *default_instance_;
}

DssFileSigningResult* DssFileSigningResult::default_instance_ = NULL;

DssFileSigningResult* DssFileSigningResult::New() const {
  return new DssFileSigningResult;
}

void DssFileSigningResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    filesigningstatus_ = 0;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DssFileSigningResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Dss.DssFileSigningResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Dss.DssFileSigningStatus FileSigningStatus = 1 [default = UnknownSigningStatus];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Dss::DssFileSigningStatus_IsValid(value)) {
            set_filesigningstatus(static_cast< ::Diadoc::Api::Proto::Dss::DssFileSigningStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Signature;
        break;
      }

      // optional bytes Signature = 2;
      case 2: {
        if (tag == 18) {
         parse_Signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Dss.DssFileSigningResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Dss.DssFileSigningResult)
  return false;
#undef DO_
}

void DssFileSigningResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Dss.DssFileSigningResult)
  // optional .Diadoc.Api.Proto.Dss.DssFileSigningStatus FileSigningStatus = 1 [default = UnknownSigningStatus];
  if (has_filesigningstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->filesigningstatus(), output);
  }

  // optional bytes Signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Dss.DssFileSigningResult)
}

::google::protobuf::uint8* DssFileSigningResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Dss.DssFileSigningResult)
  // optional .Diadoc.Api.Proto.Dss.DssFileSigningStatus FileSigningStatus = 1 [default = UnknownSigningStatus];
  if (has_filesigningstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->filesigningstatus(), target);
  }

  // optional bytes Signature = 2;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Dss.DssFileSigningResult)
  return target;
}

int DssFileSigningResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Dss.DssFileSigningStatus FileSigningStatus = 1 [default = UnknownSigningStatus];
    if (has_filesigningstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filesigningstatus());
    }

    // optional bytes Signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DssFileSigningResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DssFileSigningResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DssFileSigningResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DssFileSigningResult::MergeFrom(const DssFileSigningResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filesigningstatus()) {
      set_filesigningstatus(from.filesigningstatus());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DssFileSigningResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DssFileSigningResult::CopyFrom(const DssFileSigningResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DssFileSigningResult::IsInitialized() const {

  return true;
}

void DssFileSigningResult::Swap(DssFileSigningResult* other) {
  if (other != this) {
    std::swap(filesigningstatus_, other->filesigningstatus_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DssFileSigningResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DssFileSigningResult_descriptor_;
  metadata.reflection = DssFileSigningResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Dss
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
