// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Forwarding/ForwardingApi.proto

#ifndef PROTOBUF_Forwarding_2fForwardingApi_2eproto__INCLUDED
#define PROTOBUF_Forwarding_2fForwardingApi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Timestamp.pb.h"
#include "DocumentId.pb.h"
#include "TotalCountType.pb.h"
#include "TimeBasedFilter.pb.h"
#include "Forwarding/ForwardedDocument.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Forwarding {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
void protobuf_AssignDesc_Forwarding_2fForwardingApi_2eproto();
void protobuf_ShutdownFile_Forwarding_2fForwardingApi_2eproto();

class ForwardDocumentRequest;
class ForwardDocumentResponse;
class GetForwardedDocumentsRequest;
class GetForwardedDocumentsResponse;
class GetForwardedDocumentEventsRequest;
class GetForwardedDocumentEventsResponse;
class ForwardedDocumentEvent;

// ===================================================================

class ForwardDocumentRequest : public ::google::protobuf::Message {
 public:
  ForwardDocumentRequest();
  virtual ~ForwardDocumentRequest();

  ForwardDocumentRequest(const ForwardDocumentRequest& from);

  inline ForwardDocumentRequest& operator=(const ForwardDocumentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardDocumentRequest& default_instance();

  void Swap(ForwardDocumentRequest* other);

  // implements Message ----------------------------------------------

  ForwardDocumentRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardDocumentRequest& from);
  void MergeFrom(const ForwardDocumentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ToBoxId = 1;
  inline bool has_toboxid() const;
  inline void clear_toboxid();
  static const int kToBoxIdFieldNumber = 1;
  inline const ::std::string& toboxid() const;
  inline void set_toboxid(const ::std::string& value);
  inline void set_toboxid(const char* value);
  inline void set_toboxid(const char* value, size_t size);
  inline ::std::string* mutable_toboxid();
  inline ::std::string* release_toboxid();
  inline void set_allocated_toboxid(::std::string* toboxid);

  // required .Diadoc.Api.Proto.DocumentId DocumentId = 2;
  inline bool has_documentid() const;
  inline void clear_documentid();
  static const int kDocumentIdFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::DocumentId& documentid() const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_documentid();
  inline ::Diadoc::Api::Proto::DocumentId* release_documentid();
  inline void set_allocated_documentid(::Diadoc::Api::Proto::DocumentId* documentid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest)
 private:
  inline void set_has_toboxid();
  inline void clear_has_toboxid();
  inline void set_has_documentid();
  inline void clear_has_documentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* toboxid_;
  ::Diadoc::Api::Proto::DocumentId* documentid_;
  friend void  protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  friend void protobuf_AssignDesc_Forwarding_2fForwardingApi_2eproto();
  friend void protobuf_ShutdownFile_Forwarding_2fForwardingApi_2eproto();

  void InitAsDefaultInstance();
  static ForwardDocumentRequest* default_instance_;
};
// -------------------------------------------------------------------

class ForwardDocumentResponse : public ::google::protobuf::Message {
 public:
  ForwardDocumentResponse();
  virtual ~ForwardDocumentResponse();

  ForwardDocumentResponse(const ForwardDocumentResponse& from);

  inline ForwardDocumentResponse& operator=(const ForwardDocumentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardDocumentResponse& default_instance();

  void Swap(ForwardDocumentResponse* other);

  // implements Message ----------------------------------------------

  ForwardDocumentResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardDocumentResponse& from);
  void MergeFrom(const ForwardDocumentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Timestamp ForwardTimestamp = 1;
  inline bool has_forwardtimestamp() const;
  inline void clear_forwardtimestamp();
  static const int kForwardTimestampFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Timestamp& forwardtimestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_forwardtimestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_forwardtimestamp();
  inline void set_allocated_forwardtimestamp(::Diadoc::Api::Proto::Timestamp* forwardtimestamp);

  // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
  inline bool has_forwardeddocumentid() const;
  inline void clear_forwardeddocumentid();
  static const int kForwardedDocumentIdFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId& forwardeddocumentid() const;
  inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* mutable_forwardeddocumentid();
  inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* release_forwardeddocumentid();
  inline void set_allocated_forwardeddocumentid(::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* forwardeddocumentid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse)
 private:
  inline void set_has_forwardtimestamp();
  inline void clear_has_forwardtimestamp();
  inline void set_has_forwardeddocumentid();
  inline void clear_has_forwardeddocumentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Timestamp* forwardtimestamp_;
  ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* forwardeddocumentid_;
  friend void  protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  friend void protobuf_AssignDesc_Forwarding_2fForwardingApi_2eproto();
  friend void protobuf_ShutdownFile_Forwarding_2fForwardingApi_2eproto();

  void InitAsDefaultInstance();
  static ForwardDocumentResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetForwardedDocumentsRequest : public ::google::protobuf::Message {
 public:
  GetForwardedDocumentsRequest();
  virtual ~GetForwardedDocumentsRequest();

  GetForwardedDocumentsRequest(const GetForwardedDocumentsRequest& from);

  inline GetForwardedDocumentsRequest& operator=(const GetForwardedDocumentsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetForwardedDocumentsRequest& default_instance();

  void Swap(GetForwardedDocumentsRequest* other);

  // implements Message ----------------------------------------------

  GetForwardedDocumentsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetForwardedDocumentsRequest& from);
  void MergeFrom(const GetForwardedDocumentsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentIds = 1;
  inline int forwardeddocumentids_size() const;
  inline void clear_forwardeddocumentids();
  static const int kForwardedDocumentIdsFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId& forwardeddocumentids(int index) const;
  inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* mutable_forwardeddocumentids(int index);
  inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* add_forwardeddocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId >&
      forwardeddocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId >*
      mutable_forwardeddocumentids();

  // optional bool InjectEntityContent = 2 [default = false];
  inline bool has_injectentitycontent() const;
  inline void clear_injectentitycontent();
  static const int kInjectEntityContentFieldNumber = 2;
  inline bool injectentitycontent() const;
  inline void set_injectentitycontent(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest)
 private:
  inline void set_has_injectentitycontent();
  inline void clear_has_injectentitycontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId > forwardeddocumentids_;
  bool injectentitycontent_;
  friend void  protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  friend void protobuf_AssignDesc_Forwarding_2fForwardingApi_2eproto();
  friend void protobuf_ShutdownFile_Forwarding_2fForwardingApi_2eproto();

  void InitAsDefaultInstance();
  static GetForwardedDocumentsRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetForwardedDocumentsResponse : public ::google::protobuf::Message {
 public:
  GetForwardedDocumentsResponse();
  virtual ~GetForwardedDocumentsResponse();

  GetForwardedDocumentsResponse(const GetForwardedDocumentsResponse& from);

  inline GetForwardedDocumentsResponse& operator=(const GetForwardedDocumentsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetForwardedDocumentsResponse& default_instance();

  void Swap(GetForwardedDocumentsResponse* other);

  // implements Message ----------------------------------------------

  GetForwardedDocumentsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetForwardedDocumentsResponse& from);
  void MergeFrom(const GetForwardedDocumentsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocument ForwardedDocuments = 1;
  inline int forwardeddocuments_size() const;
  inline void clear_forwardeddocuments();
  static const int kForwardedDocumentsFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Forwarding::ForwardedDocument& forwardeddocuments(int index) const;
  inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocument* mutable_forwardeddocuments(int index);
  inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocument* add_forwardeddocuments();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Forwarding::ForwardedDocument >&
      forwardeddocuments() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Forwarding::ForwardedDocument >*
      mutable_forwardeddocuments();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Forwarding::ForwardedDocument > forwardeddocuments_;
  friend void  protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  friend void protobuf_AssignDesc_Forwarding_2fForwardingApi_2eproto();
  friend void protobuf_ShutdownFile_Forwarding_2fForwardingApi_2eproto();

  void InitAsDefaultInstance();
  static GetForwardedDocumentsResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetForwardedDocumentEventsRequest : public ::google::protobuf::Message {
 public:
  GetForwardedDocumentEventsRequest();
  virtual ~GetForwardedDocumentEventsRequest();

  GetForwardedDocumentEventsRequest(const GetForwardedDocumentEventsRequest& from);

  inline GetForwardedDocumentEventsRequest& operator=(const GetForwardedDocumentEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetForwardedDocumentEventsRequest& default_instance();

  void Swap(GetForwardedDocumentEventsRequest* other);

  // implements Message ----------------------------------------------

  GetForwardedDocumentEventsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetForwardedDocumentEventsRequest& from);
  void MergeFrom(const GetForwardedDocumentEventsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.TimeBasedFilter Filter = 1;
  inline bool has_filter() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::TimeBasedFilter& filter() const;
  inline ::Diadoc::Api::Proto::TimeBasedFilter* mutable_filter();
  inline ::Diadoc::Api::Proto::TimeBasedFilter* release_filter();
  inline void set_allocated_filter(::Diadoc::Api::Proto::TimeBasedFilter* filter);

  // optional bytes AfterIndexKey = 2;
  inline bool has_afterindexkey() const;
  inline void clear_afterindexkey();
  static const int kAfterIndexKeyFieldNumber = 2;
  inline const ::std::string& afterindexkey() const;
  inline void set_afterindexkey(const ::std::string& value);
  inline void set_afterindexkey(const char* value);
  inline void set_afterindexkey(const void* value, size_t size);
  inline ::std::string* mutable_afterindexkey();
  inline ::std::string* release_afterindexkey();
  inline void set_allocated_afterindexkey(::std::string* afterindexkey);

  // optional bool PopulateForwardedDocuments = 3 [default = false];
  inline bool has_populateforwardeddocuments() const;
  inline void clear_populateforwardeddocuments();
  static const int kPopulateForwardedDocumentsFieldNumber = 3;
  inline bool populateforwardeddocuments() const;
  inline void set_populateforwardeddocuments(bool value);

  // optional bool InjectEntityContent = 4 [default = false];
  inline bool has_injectentitycontent() const;
  inline void clear_injectentitycontent();
  static const int kInjectEntityContentFieldNumber = 4;
  inline bool injectentitycontent() const;
  inline void set_injectentitycontent(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest)
 private:
  inline void set_has_filter();
  inline void clear_has_filter();
  inline void set_has_afterindexkey();
  inline void clear_has_afterindexkey();
  inline void set_has_populateforwardeddocuments();
  inline void clear_has_populateforwardeddocuments();
  inline void set_has_injectentitycontent();
  inline void clear_has_injectentitycontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::TimeBasedFilter* filter_;
  ::std::string* afterindexkey_;
  bool populateforwardeddocuments_;
  bool injectentitycontent_;
  friend void  protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  friend void protobuf_AssignDesc_Forwarding_2fForwardingApi_2eproto();
  friend void protobuf_ShutdownFile_Forwarding_2fForwardingApi_2eproto();

  void InitAsDefaultInstance();
  static GetForwardedDocumentEventsRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetForwardedDocumentEventsResponse : public ::google::protobuf::Message {
 public:
  GetForwardedDocumentEventsResponse();
  virtual ~GetForwardedDocumentEventsResponse();

  GetForwardedDocumentEventsResponse(const GetForwardedDocumentEventsResponse& from);

  inline GetForwardedDocumentEventsResponse& operator=(const GetForwardedDocumentEventsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetForwardedDocumentEventsResponse& default_instance();

  void Swap(GetForwardedDocumentEventsResponse* other);

  // implements Message ----------------------------------------------

  GetForwardedDocumentEventsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetForwardedDocumentEventsResponse& from);
  void MergeFrom(const GetForwardedDocumentEventsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 TotalCount = 1;
  inline bool has_totalcount() const;
  inline void clear_totalcount();
  static const int kTotalCountFieldNumber = 1;
  inline ::google::protobuf::int32 totalcount() const;
  inline void set_totalcount(::google::protobuf::int32 value);

  // repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent Events = 2;
  inline int events_size() const;
  inline void clear_events();
  static const int kEventsFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentEvent& events(int index) const;
  inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentEvent* mutable_events(int index);
  inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentEvent* add_events();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentEvent >&
      events() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentEvent >*
      mutable_events();

  // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
  inline bool has_totalcounttype() const;
  inline void clear_totalcounttype();
  static const int kTotalCountTypeFieldNumber = 3;
  inline ::Diadoc::Api::Proto::TotalCountType totalcounttype() const;
  inline void set_totalcounttype(::Diadoc::Api::Proto::TotalCountType value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse)
 private:
  inline void set_has_totalcount();
  inline void clear_has_totalcount();
  inline void set_has_totalcounttype();
  inline void clear_has_totalcounttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentEvent > events_;
  ::google::protobuf::int32 totalcount_;
  int totalcounttype_;
  friend void  protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  friend void protobuf_AssignDesc_Forwarding_2fForwardingApi_2eproto();
  friend void protobuf_ShutdownFile_Forwarding_2fForwardingApi_2eproto();

  void InitAsDefaultInstance();
  static GetForwardedDocumentEventsResponse* default_instance_;
};
// -------------------------------------------------------------------

class ForwardedDocumentEvent : public ::google::protobuf::Message {
 public:
  ForwardedDocumentEvent();
  virtual ~ForwardedDocumentEvent();

  ForwardedDocumentEvent(const ForwardedDocumentEvent& from);

  inline ForwardedDocumentEvent& operator=(const ForwardedDocumentEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardedDocumentEvent& default_instance();

  void Swap(ForwardedDocumentEvent* other);

  // implements Message ----------------------------------------------

  ForwardedDocumentEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardedDocumentEvent& from);
  void MergeFrom(const ForwardedDocumentEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Timestamp Timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Timestamp& timestamp() const;
  inline ::Diadoc::Api::Proto::Timestamp* mutable_timestamp();
  inline ::Diadoc::Api::Proto::Timestamp* release_timestamp();
  inline void set_allocated_timestamp(::Diadoc::Api::Proto::Timestamp* timestamp);

  // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
  inline bool has_forwardeddocumentid() const;
  inline void clear_forwardeddocumentid();
  static const int kForwardedDocumentIdFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId& forwardeddocumentid() const;
  inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* mutable_forwardeddocumentid();
  inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* release_forwardeddocumentid();
  inline void set_allocated_forwardeddocumentid(::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* forwardeddocumentid);

  // optional bytes IndexKey = 3;
  inline bool has_indexkey() const;
  inline void clear_indexkey();
  static const int kIndexKeyFieldNumber = 3;
  inline const ::std::string& indexkey() const;
  inline void set_indexkey(const ::std::string& value);
  inline void set_indexkey(const char* value);
  inline void set_indexkey(const void* value, size_t size);
  inline ::std::string* mutable_indexkey();
  inline ::std::string* release_indexkey();
  inline void set_allocated_indexkey(::std::string* indexkey);

  // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocument ForwardedDocument = 4;
  inline bool has_forwardeddocument() const;
  inline void clear_forwardeddocument();
  static const int kForwardedDocumentFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Forwarding::ForwardedDocument& forwardeddocument() const;
  inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocument* mutable_forwardeddocument();
  inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocument* release_forwardeddocument();
  inline void set_allocated_forwardeddocument(::Diadoc::Api::Proto::Forwarding::ForwardedDocument* forwardeddocument);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_forwardeddocumentid();
  inline void clear_has_forwardeddocumentid();
  inline void set_has_indexkey();
  inline void clear_has_indexkey();
  inline void set_has_forwardeddocument();
  inline void clear_has_forwardeddocument();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Timestamp* timestamp_;
  ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* forwardeddocumentid_;
  ::std::string* indexkey_;
  ::Diadoc::Api::Proto::Forwarding::ForwardedDocument* forwardeddocument_;
  friend void  protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  friend void protobuf_AssignDesc_Forwarding_2fForwardingApi_2eproto();
  friend void protobuf_ShutdownFile_Forwarding_2fForwardingApi_2eproto();

  void InitAsDefaultInstance();
  static ForwardedDocumentEvent* default_instance_;
};
// ===================================================================


// ===================================================================

// ForwardDocumentRequest

// required string ToBoxId = 1;
inline bool ForwardDocumentRequest::has_toboxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardDocumentRequest::set_has_toboxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardDocumentRequest::clear_has_toboxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardDocumentRequest::clear_toboxid() {
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_->clear();
  }
  clear_has_toboxid();
}
inline const ::std::string& ForwardDocumentRequest::toboxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest.ToBoxId)
  return *toboxid_;
}
inline void ForwardDocumentRequest::set_toboxid(const ::std::string& value) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest.ToBoxId)
}
inline void ForwardDocumentRequest::set_toboxid(const char* value) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest.ToBoxId)
}
inline void ForwardDocumentRequest::set_toboxid(const char* value, size_t size) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest.ToBoxId)
}
inline ::std::string* ForwardDocumentRequest::mutable_toboxid() {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest.ToBoxId)
  return toboxid_;
}
inline ::std::string* ForwardDocumentRequest::release_toboxid() {
  clear_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = toboxid_;
    toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardDocumentRequest::set_allocated_toboxid(::std::string* toboxid) {
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete toboxid_;
  }
  if (toboxid) {
    set_has_toboxid();
    toboxid_ = toboxid;
  } else {
    clear_has_toboxid();
    toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest.ToBoxId)
}

// required .Diadoc.Api.Proto.DocumentId DocumentId = 2;
inline bool ForwardDocumentRequest::has_documentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForwardDocumentRequest::set_has_documentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForwardDocumentRequest::clear_has_documentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForwardDocumentRequest::clear_documentid() {
  if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
  clear_has_documentid();
}
inline const ::Diadoc::Api::Proto::DocumentId& ForwardDocumentRequest::documentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest.DocumentId)
  return documentid_ != NULL ? *documentid_ : *default_instance_->documentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* ForwardDocumentRequest::mutable_documentid() {
  set_has_documentid();
  if (documentid_ == NULL) documentid_ = new ::Diadoc::Api::Proto::DocumentId;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest.DocumentId)
  return documentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* ForwardDocumentRequest::release_documentid() {
  clear_has_documentid();
  ::Diadoc::Api::Proto::DocumentId* temp = documentid_;
  documentid_ = NULL;
  return temp;
}
inline void ForwardDocumentRequest::set_allocated_documentid(::Diadoc::Api::Proto::DocumentId* documentid) {
  delete documentid_;
  documentid_ = documentid;
  if (documentid) {
    set_has_documentid();
  } else {
    clear_has_documentid();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest.DocumentId)
}

// -------------------------------------------------------------------

// ForwardDocumentResponse

// optional .Diadoc.Api.Proto.Timestamp ForwardTimestamp = 1;
inline bool ForwardDocumentResponse::has_forwardtimestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardDocumentResponse::set_has_forwardtimestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardDocumentResponse::clear_has_forwardtimestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardDocumentResponse::clear_forwardtimestamp() {
  if (forwardtimestamp_ != NULL) forwardtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_forwardtimestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& ForwardDocumentResponse::forwardtimestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse.ForwardTimestamp)
  return forwardtimestamp_ != NULL ? *forwardtimestamp_ : *default_instance_->forwardtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* ForwardDocumentResponse::mutable_forwardtimestamp() {
  set_has_forwardtimestamp();
  if (forwardtimestamp_ == NULL) forwardtimestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse.ForwardTimestamp)
  return forwardtimestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* ForwardDocumentResponse::release_forwardtimestamp() {
  clear_has_forwardtimestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = forwardtimestamp_;
  forwardtimestamp_ = NULL;
  return temp;
}
inline void ForwardDocumentResponse::set_allocated_forwardtimestamp(::Diadoc::Api::Proto::Timestamp* forwardtimestamp) {
  delete forwardtimestamp_;
  forwardtimestamp_ = forwardtimestamp;
  if (forwardtimestamp) {
    set_has_forwardtimestamp();
  } else {
    clear_has_forwardtimestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse.ForwardTimestamp)
}

// optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
inline bool ForwardDocumentResponse::has_forwardeddocumentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForwardDocumentResponse::set_has_forwardeddocumentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForwardDocumentResponse::clear_has_forwardeddocumentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForwardDocumentResponse::clear_forwardeddocumentid() {
  if (forwardeddocumentid_ != NULL) forwardeddocumentid_->::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId::Clear();
  clear_has_forwardeddocumentid();
}
inline const ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId& ForwardDocumentResponse::forwardeddocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse.ForwardedDocumentId)
  return forwardeddocumentid_ != NULL ? *forwardeddocumentid_ : *default_instance_->forwardeddocumentid_;
}
inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* ForwardDocumentResponse::mutable_forwardeddocumentid() {
  set_has_forwardeddocumentid();
  if (forwardeddocumentid_ == NULL) forwardeddocumentid_ = new ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse.ForwardedDocumentId)
  return forwardeddocumentid_;
}
inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* ForwardDocumentResponse::release_forwardeddocumentid() {
  clear_has_forwardeddocumentid();
  ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* temp = forwardeddocumentid_;
  forwardeddocumentid_ = NULL;
  return temp;
}
inline void ForwardDocumentResponse::set_allocated_forwardeddocumentid(::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* forwardeddocumentid) {
  delete forwardeddocumentid_;
  forwardeddocumentid_ = forwardeddocumentid;
  if (forwardeddocumentid) {
    set_has_forwardeddocumentid();
  } else {
    clear_has_forwardeddocumentid();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse.ForwardedDocumentId)
}

// -------------------------------------------------------------------

// GetForwardedDocumentsRequest

// repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentIds = 1;
inline int GetForwardedDocumentsRequest::forwardeddocumentids_size() const {
  return forwardeddocumentids_.size();
}
inline void GetForwardedDocumentsRequest::clear_forwardeddocumentids() {
  forwardeddocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId& GetForwardedDocumentsRequest::forwardeddocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest.ForwardedDocumentIds)
  return forwardeddocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* GetForwardedDocumentsRequest::mutable_forwardeddocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest.ForwardedDocumentIds)
  return forwardeddocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* GetForwardedDocumentsRequest::add_forwardeddocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest.ForwardedDocumentIds)
  return forwardeddocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId >&
GetForwardedDocumentsRequest::forwardeddocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest.ForwardedDocumentIds)
  return forwardeddocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId >*
GetForwardedDocumentsRequest::mutable_forwardeddocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest.ForwardedDocumentIds)
  return &forwardeddocumentids_;
}

// optional bool InjectEntityContent = 2 [default = false];
inline bool GetForwardedDocumentsRequest::has_injectentitycontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetForwardedDocumentsRequest::set_has_injectentitycontent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetForwardedDocumentsRequest::clear_has_injectentitycontent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetForwardedDocumentsRequest::clear_injectentitycontent() {
  injectentitycontent_ = false;
  clear_has_injectentitycontent();
}
inline bool GetForwardedDocumentsRequest::injectentitycontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest.InjectEntityContent)
  return injectentitycontent_;
}
inline void GetForwardedDocumentsRequest::set_injectentitycontent(bool value) {
  set_has_injectentitycontent();
  injectentitycontent_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest.InjectEntityContent)
}

// -------------------------------------------------------------------

// GetForwardedDocumentsResponse

// repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocument ForwardedDocuments = 1;
inline int GetForwardedDocumentsResponse::forwardeddocuments_size() const {
  return forwardeddocuments_.size();
}
inline void GetForwardedDocumentsResponse::clear_forwardeddocuments() {
  forwardeddocuments_.Clear();
}
inline const ::Diadoc::Api::Proto::Forwarding::ForwardedDocument& GetForwardedDocumentsResponse::forwardeddocuments(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse.ForwardedDocuments)
  return forwardeddocuments_.Get(index);
}
inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocument* GetForwardedDocumentsResponse::mutable_forwardeddocuments(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse.ForwardedDocuments)
  return forwardeddocuments_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocument* GetForwardedDocumentsResponse::add_forwardeddocuments() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse.ForwardedDocuments)
  return forwardeddocuments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Forwarding::ForwardedDocument >&
GetForwardedDocumentsResponse::forwardeddocuments() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse.ForwardedDocuments)
  return forwardeddocuments_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Forwarding::ForwardedDocument >*
GetForwardedDocumentsResponse::mutable_forwardeddocuments() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse.ForwardedDocuments)
  return &forwardeddocuments_;
}

// -------------------------------------------------------------------

// GetForwardedDocumentEventsRequest

// required .Diadoc.Api.Proto.TimeBasedFilter Filter = 1;
inline bool GetForwardedDocumentEventsRequest::has_filter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetForwardedDocumentEventsRequest::set_has_filter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetForwardedDocumentEventsRequest::clear_has_filter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetForwardedDocumentEventsRequest::clear_filter() {
  if (filter_ != NULL) filter_->::Diadoc::Api::Proto::TimeBasedFilter::Clear();
  clear_has_filter();
}
inline const ::Diadoc::Api::Proto::TimeBasedFilter& GetForwardedDocumentEventsRequest::filter() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest.Filter)
  return filter_ != NULL ? *filter_ : *default_instance_->filter_;
}
inline ::Diadoc::Api::Proto::TimeBasedFilter* GetForwardedDocumentEventsRequest::mutable_filter() {
  set_has_filter();
  if (filter_ == NULL) filter_ = new ::Diadoc::Api::Proto::TimeBasedFilter;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest.Filter)
  return filter_;
}
inline ::Diadoc::Api::Proto::TimeBasedFilter* GetForwardedDocumentEventsRequest::release_filter() {
  clear_has_filter();
  ::Diadoc::Api::Proto::TimeBasedFilter* temp = filter_;
  filter_ = NULL;
  return temp;
}
inline void GetForwardedDocumentEventsRequest::set_allocated_filter(::Diadoc::Api::Proto::TimeBasedFilter* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest.Filter)
}

// optional bytes AfterIndexKey = 2;
inline bool GetForwardedDocumentEventsRequest::has_afterindexkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetForwardedDocumentEventsRequest::set_has_afterindexkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetForwardedDocumentEventsRequest::clear_has_afterindexkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetForwardedDocumentEventsRequest::clear_afterindexkey() {
  if (afterindexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    afterindexkey_->clear();
  }
  clear_has_afterindexkey();
}
inline const ::std::string& GetForwardedDocumentEventsRequest::afterindexkey() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest.AfterIndexKey)
  return *afterindexkey_;
}
inline void GetForwardedDocumentEventsRequest::set_afterindexkey(const ::std::string& value) {
  set_has_afterindexkey();
  if (afterindexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    afterindexkey_ = new ::std::string;
  }
  afterindexkey_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest.AfterIndexKey)
}
inline void GetForwardedDocumentEventsRequest::set_afterindexkey(const char* value) {
  set_has_afterindexkey();
  if (afterindexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    afterindexkey_ = new ::std::string;
  }
  afterindexkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest.AfterIndexKey)
}
inline void GetForwardedDocumentEventsRequest::set_afterindexkey(const void* value, size_t size) {
  set_has_afterindexkey();
  if (afterindexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    afterindexkey_ = new ::std::string;
  }
  afterindexkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest.AfterIndexKey)
}
inline ::std::string* GetForwardedDocumentEventsRequest::mutable_afterindexkey() {
  set_has_afterindexkey();
  if (afterindexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    afterindexkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest.AfterIndexKey)
  return afterindexkey_;
}
inline ::std::string* GetForwardedDocumentEventsRequest::release_afterindexkey() {
  clear_has_afterindexkey();
  if (afterindexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = afterindexkey_;
    afterindexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetForwardedDocumentEventsRequest::set_allocated_afterindexkey(::std::string* afterindexkey) {
  if (afterindexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete afterindexkey_;
  }
  if (afterindexkey) {
    set_has_afterindexkey();
    afterindexkey_ = afterindexkey;
  } else {
    clear_has_afterindexkey();
    afterindexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest.AfterIndexKey)
}

// optional bool PopulateForwardedDocuments = 3 [default = false];
inline bool GetForwardedDocumentEventsRequest::has_populateforwardeddocuments() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetForwardedDocumentEventsRequest::set_has_populateforwardeddocuments() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetForwardedDocumentEventsRequest::clear_has_populateforwardeddocuments() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetForwardedDocumentEventsRequest::clear_populateforwardeddocuments() {
  populateforwardeddocuments_ = false;
  clear_has_populateforwardeddocuments();
}
inline bool GetForwardedDocumentEventsRequest::populateforwardeddocuments() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest.PopulateForwardedDocuments)
  return populateforwardeddocuments_;
}
inline void GetForwardedDocumentEventsRequest::set_populateforwardeddocuments(bool value) {
  set_has_populateforwardeddocuments();
  populateforwardeddocuments_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest.PopulateForwardedDocuments)
}

// optional bool InjectEntityContent = 4 [default = false];
inline bool GetForwardedDocumentEventsRequest::has_injectentitycontent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetForwardedDocumentEventsRequest::set_has_injectentitycontent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetForwardedDocumentEventsRequest::clear_has_injectentitycontent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetForwardedDocumentEventsRequest::clear_injectentitycontent() {
  injectentitycontent_ = false;
  clear_has_injectentitycontent();
}
inline bool GetForwardedDocumentEventsRequest::injectentitycontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest.InjectEntityContent)
  return injectentitycontent_;
}
inline void GetForwardedDocumentEventsRequest::set_injectentitycontent(bool value) {
  set_has_injectentitycontent();
  injectentitycontent_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest.InjectEntityContent)
}

// -------------------------------------------------------------------

// GetForwardedDocumentEventsResponse

// optional int32 TotalCount = 1;
inline bool GetForwardedDocumentEventsResponse::has_totalcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetForwardedDocumentEventsResponse::set_has_totalcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetForwardedDocumentEventsResponse::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetForwardedDocumentEventsResponse::clear_totalcount() {
  totalcount_ = 0;
  clear_has_totalcount();
}
inline ::google::protobuf::int32 GetForwardedDocumentEventsResponse::totalcount() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse.TotalCount)
  return totalcount_;
}
inline void GetForwardedDocumentEventsResponse::set_totalcount(::google::protobuf::int32 value) {
  set_has_totalcount();
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse.TotalCount)
}

// repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent Events = 2;
inline int GetForwardedDocumentEventsResponse::events_size() const {
  return events_.size();
}
inline void GetForwardedDocumentEventsResponse::clear_events() {
  events_.Clear();
}
inline const ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentEvent& GetForwardedDocumentEventsResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse.Events)
  return events_.Get(index);
}
inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentEvent* GetForwardedDocumentEventsResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse.Events)
  return events_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentEvent* GetForwardedDocumentEventsResponse::add_events() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse.Events)
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentEvent >&
GetForwardedDocumentEventsResponse::events() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse.Events)
  return events_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentEvent >*
GetForwardedDocumentEventsResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse.Events)
  return &events_;
}

// required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
inline bool GetForwardedDocumentEventsResponse::has_totalcounttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetForwardedDocumentEventsResponse::set_has_totalcounttype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetForwardedDocumentEventsResponse::clear_has_totalcounttype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetForwardedDocumentEventsResponse::clear_totalcounttype() {
  totalcounttype_ = 0;
  clear_has_totalcounttype();
}
inline ::Diadoc::Api::Proto::TotalCountType GetForwardedDocumentEventsResponse::totalcounttype() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse.TotalCountType)
  return static_cast< ::Diadoc::Api::Proto::TotalCountType >(totalcounttype_);
}
inline void GetForwardedDocumentEventsResponse::set_totalcounttype(::Diadoc::Api::Proto::TotalCountType value) {
  assert(::Diadoc::Api::Proto::TotalCountType_IsValid(value));
  set_has_totalcounttype();
  totalcounttype_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse.TotalCountType)
}

// -------------------------------------------------------------------

// ForwardedDocumentEvent

// optional .Diadoc.Api.Proto.Timestamp Timestamp = 1;
inline bool ForwardedDocumentEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardedDocumentEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardedDocumentEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardedDocumentEvent::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::Diadoc::Api::Proto::Timestamp& ForwardedDocumentEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent.Timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* ForwardedDocumentEvent::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::Diadoc::Api::Proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent.Timestamp)
  return timestamp_;
}
inline ::Diadoc::Api::Proto::Timestamp* ForwardedDocumentEvent::release_timestamp() {
  clear_has_timestamp();
  ::Diadoc::Api::Proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void ForwardedDocumentEvent::set_allocated_timestamp(::Diadoc::Api::Proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent.Timestamp)
}

// optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
inline bool ForwardedDocumentEvent::has_forwardeddocumentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForwardedDocumentEvent::set_has_forwardeddocumentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForwardedDocumentEvent::clear_has_forwardeddocumentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForwardedDocumentEvent::clear_forwardeddocumentid() {
  if (forwardeddocumentid_ != NULL) forwardeddocumentid_->::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId::Clear();
  clear_has_forwardeddocumentid();
}
inline const ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId& ForwardedDocumentEvent::forwardeddocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent.ForwardedDocumentId)
  return forwardeddocumentid_ != NULL ? *forwardeddocumentid_ : *default_instance_->forwardeddocumentid_;
}
inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* ForwardedDocumentEvent::mutable_forwardeddocumentid() {
  set_has_forwardeddocumentid();
  if (forwardeddocumentid_ == NULL) forwardeddocumentid_ = new ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent.ForwardedDocumentId)
  return forwardeddocumentid_;
}
inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* ForwardedDocumentEvent::release_forwardeddocumentid() {
  clear_has_forwardeddocumentid();
  ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* temp = forwardeddocumentid_;
  forwardeddocumentid_ = NULL;
  return temp;
}
inline void ForwardedDocumentEvent::set_allocated_forwardeddocumentid(::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId* forwardeddocumentid) {
  delete forwardeddocumentid_;
  forwardeddocumentid_ = forwardeddocumentid;
  if (forwardeddocumentid) {
    set_has_forwardeddocumentid();
  } else {
    clear_has_forwardeddocumentid();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent.ForwardedDocumentId)
}

// optional bytes IndexKey = 3;
inline bool ForwardedDocumentEvent::has_indexkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ForwardedDocumentEvent::set_has_indexkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ForwardedDocumentEvent::clear_has_indexkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ForwardedDocumentEvent::clear_indexkey() {
  if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_->clear();
  }
  clear_has_indexkey();
}
inline const ::std::string& ForwardedDocumentEvent::indexkey() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent.IndexKey)
  return *indexkey_;
}
inline void ForwardedDocumentEvent::set_indexkey(const ::std::string& value) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent.IndexKey)
}
inline void ForwardedDocumentEvent::set_indexkey(const char* value) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent.IndexKey)
}
inline void ForwardedDocumentEvent::set_indexkey(const void* value, size_t size) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent.IndexKey)
}
inline ::std::string* ForwardedDocumentEvent::mutable_indexkey() {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent.IndexKey)
  return indexkey_;
}
inline ::std::string* ForwardedDocumentEvent::release_indexkey() {
  clear_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = indexkey_;
    indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardedDocumentEvent::set_allocated_indexkey(::std::string* indexkey) {
  if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete indexkey_;
  }
  if (indexkey) {
    set_has_indexkey();
    indexkey_ = indexkey;
  } else {
    clear_has_indexkey();
    indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent.IndexKey)
}

// optional .Diadoc.Api.Proto.Forwarding.ForwardedDocument ForwardedDocument = 4;
inline bool ForwardedDocumentEvent::has_forwardeddocument() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ForwardedDocumentEvent::set_has_forwardeddocument() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ForwardedDocumentEvent::clear_has_forwardeddocument() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ForwardedDocumentEvent::clear_forwardeddocument() {
  if (forwardeddocument_ != NULL) forwardeddocument_->::Diadoc::Api::Proto::Forwarding::ForwardedDocument::Clear();
  clear_has_forwardeddocument();
}
inline const ::Diadoc::Api::Proto::Forwarding::ForwardedDocument& ForwardedDocumentEvent::forwardeddocument() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent.ForwardedDocument)
  return forwardeddocument_ != NULL ? *forwardeddocument_ : *default_instance_->forwardeddocument_;
}
inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocument* ForwardedDocumentEvent::mutable_forwardeddocument() {
  set_has_forwardeddocument();
  if (forwardeddocument_ == NULL) forwardeddocument_ = new ::Diadoc::Api::Proto::Forwarding::ForwardedDocument;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent.ForwardedDocument)
  return forwardeddocument_;
}
inline ::Diadoc::Api::Proto::Forwarding::ForwardedDocument* ForwardedDocumentEvent::release_forwardeddocument() {
  clear_has_forwardeddocument();
  ::Diadoc::Api::Proto::Forwarding::ForwardedDocument* temp = forwardeddocument_;
  forwardeddocument_ = NULL;
  return temp;
}
inline void ForwardedDocumentEvent::set_allocated_forwardeddocument(::Diadoc::Api::Proto::Forwarding::ForwardedDocument* forwardeddocument) {
  delete forwardeddocument_;
  forwardeddocument_ = forwardeddocument;
  if (forwardeddocument) {
    set_has_forwardeddocument();
  } else {
    clear_has_forwardeddocument();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent.ForwardedDocument)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Forwarding
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Forwarding_2fForwardingApi_2eproto__INCLUDED
