// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Forwarding/ForwardedDocument.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Forwarding/ForwardedDocument.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Forwarding {

namespace {

const ::google::protobuf::Descriptor* ForwardedDocumentId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardedDocumentId_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardedDocument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardedDocument_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Forwarding_2fForwardedDocument_2eproto() {
  protobuf_AddDesc_Forwarding_2fForwardedDocument_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Forwarding/ForwardedDocument.proto");
  GOOGLE_CHECK(file != NULL);
  ForwardedDocumentId_descriptor_ = file->message_type(0);
  static const int ForwardedDocumentId_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocumentId, fromboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocumentId, documentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocumentId, forwardeventid_),
  };
  ForwardedDocumentId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardedDocumentId_descriptor_,
      ForwardedDocumentId::default_instance_,
      ForwardedDocumentId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocumentId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocumentId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardedDocumentId));
  ForwardedDocument_descriptor_ = file->message_type(1);
  static const int ForwardedDocument_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocument, forwardtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocument, forwardeddocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocument, documentwithdocflow_),
  };
  ForwardedDocument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardedDocument_descriptor_,
      ForwardedDocument::default_instance_,
      ForwardedDocument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardedDocument));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Forwarding_2fForwardedDocument_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardedDocumentId_descriptor_, &ForwardedDocumentId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardedDocument_descriptor_, &ForwardedDocument::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Forwarding_2fForwardedDocument_2eproto() {
  delete ForwardedDocumentId::default_instance_;
  delete ForwardedDocumentId_reflection_;
  delete ForwardedDocument::default_instance_;
  delete ForwardedDocument_reflection_;
}

void protobuf_AddDesc_Forwarding_2fForwardedDocument_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_DocumentId_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fDocumentWithDocflow_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"Forwarding/ForwardedDocument.proto\022\033Di"
    "adoc.Api.Proto.Forwarding\032\017Timestamp.pro"
    "to\032\020DocumentId.proto\032!Docflow/DocumentWi"
    "thDocflow.proto\"r\n\023ForwardedDocumentId\022\021"
    "\n\tFromBoxId\030\001 \001(\t\0220\n\nDocumentId\030\002 \001(\0132\034."
    "Diadoc.Api.Proto.DocumentId\022\026\n\016ForwardEv"
    "entId\030\003 \001(\t\"\345\001\n\021ForwardedDocument\0225\n\020For"
    "wardTimestamp\030\001 \001(\0132\033.Diadoc.Api.Proto.T"
    "imestamp\022M\n\023ForwardedDocumentId\030\002 \001(\01320."
    "Diadoc.Api.Proto.Forwarding.ForwardedDoc"
    "umentId\022J\n\023DocumentWithDocflow\030\003 \001(\0132-.D"
    "iadoc.Api.Proto.Docflow.DocumentWithDocf"
    "low", 483);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Forwarding/ForwardedDocument.proto", &protobuf_RegisterTypes);
  ForwardedDocumentId::default_instance_ = new ForwardedDocumentId();
  ForwardedDocument::default_instance_ = new ForwardedDocument();
  ForwardedDocumentId::default_instance_->InitAsDefaultInstance();
  ForwardedDocument::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Forwarding_2fForwardedDocument_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Forwarding_2fForwardedDocument_2eproto {
  StaticDescriptorInitializer_Forwarding_2fForwardedDocument_2eproto() {
    protobuf_AddDesc_Forwarding_2fForwardedDocument_2eproto();
  }
} static_descriptor_initializer_Forwarding_2fForwardedDocument_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ForwardedDocumentId::kFromBoxIdFieldNumber;
const int ForwardedDocumentId::kDocumentIdFieldNumber;
const int ForwardedDocumentId::kForwardEventIdFieldNumber;
#endif  // !_MSC_VER

ForwardedDocumentId::ForwardedDocumentId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Forwarding.ForwardedDocumentId)
}

void ForwardedDocumentId::InitAsDefaultInstance() {
  documentid_ = const_cast< ::Diadoc::Api::Proto::DocumentId*>(&::Diadoc::Api::Proto::DocumentId::default_instance());
}

ForwardedDocumentId::ForwardedDocumentId(const ForwardedDocumentId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Forwarding.ForwardedDocumentId)
}

void ForwardedDocumentId::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fromboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentid_ = NULL;
  forwardeventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardedDocumentId::~ForwardedDocumentId() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Forwarding.ForwardedDocumentId)
  SharedDtor();
}

void ForwardedDocumentId::SharedDtor() {
  if (fromboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromboxid_;
  }
  if (forwardeventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete forwardeventid_;
  }
  if (this != default_instance_) {
    delete documentid_;
  }
}

void ForwardedDocumentId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardedDocumentId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardedDocumentId_descriptor_;
}

const ForwardedDocumentId& ForwardedDocumentId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Forwarding_2fForwardedDocument_2eproto();
  return *default_instance_;
}

ForwardedDocumentId* ForwardedDocumentId::default_instance_ = NULL;

ForwardedDocumentId* ForwardedDocumentId::New() const {
  return new ForwardedDocumentId;
}

void ForwardedDocumentId::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_fromboxid()) {
      if (fromboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fromboxid_->clear();
      }
    }
    if (has_documentid()) {
      if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
    }
    if (has_forwardeventid()) {
      if (forwardeventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        forwardeventid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardedDocumentId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Forwarding.ForwardedDocumentId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FromBoxId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromboxid().data(), this->fromboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fromboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DocumentId;
        break;
      }

      // optional .Diadoc.Api.Proto.DocumentId DocumentId = 2;
      case 2: {
        if (tag == 18) {
         parse_DocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ForwardEventId;
        break;
      }

      // optional string ForwardEventId = 3;
      case 3: {
        if (tag == 26) {
         parse_ForwardEventId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forwardeventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->forwardeventid().data(), this->forwardeventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "forwardeventid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Forwarding.ForwardedDocumentId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Forwarding.ForwardedDocumentId)
  return false;
#undef DO_
}

void ForwardedDocumentId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Forwarding.ForwardedDocumentId)
  // optional string FromBoxId = 1;
  if (has_fromboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromboxid().data(), this->fromboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fromboxid(), output);
  }

  // optional .Diadoc.Api.Proto.DocumentId DocumentId = 2;
  if (has_documentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->documentid(), output);
  }

  // optional string ForwardEventId = 3;
  if (has_forwardeventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forwardeventid().data(), this->forwardeventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "forwardeventid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->forwardeventid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Forwarding.ForwardedDocumentId)
}

::google::protobuf::uint8* ForwardedDocumentId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Forwarding.ForwardedDocumentId)
  // optional string FromBoxId = 1;
  if (has_fromboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromboxid().data(), this->fromboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromboxid(), target);
  }

  // optional .Diadoc.Api.Proto.DocumentId DocumentId = 2;
  if (has_documentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->documentid(), target);
  }

  // optional string ForwardEventId = 3;
  if (has_forwardeventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forwardeventid().data(), this->forwardeventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "forwardeventid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->forwardeventid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Forwarding.ForwardedDocumentId)
  return target;
}

int ForwardedDocumentId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string FromBoxId = 1;
    if (has_fromboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromboxid());
    }

    // optional .Diadoc.Api.Proto.DocumentId DocumentId = 2;
    if (has_documentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentid());
    }

    // optional string ForwardEventId = 3;
    if (has_forwardeventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->forwardeventid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardedDocumentId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardedDocumentId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardedDocumentId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardedDocumentId::MergeFrom(const ForwardedDocumentId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromboxid()) {
      set_fromboxid(from.fromboxid());
    }
    if (from.has_documentid()) {
      mutable_documentid()->::Diadoc::Api::Proto::DocumentId::MergeFrom(from.documentid());
    }
    if (from.has_forwardeventid()) {
      set_forwardeventid(from.forwardeventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardedDocumentId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardedDocumentId::CopyFrom(const ForwardedDocumentId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardedDocumentId::IsInitialized() const {

  if (has_documentid()) {
    if (!this->documentid().IsInitialized()) return false;
  }
  return true;
}

void ForwardedDocumentId::Swap(ForwardedDocumentId* other) {
  if (other != this) {
    std::swap(fromboxid_, other->fromboxid_);
    std::swap(documentid_, other->documentid_);
    std::swap(forwardeventid_, other->forwardeventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardedDocumentId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardedDocumentId_descriptor_;
  metadata.reflection = ForwardedDocumentId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardedDocument::kForwardTimestampFieldNumber;
const int ForwardedDocument::kForwardedDocumentIdFieldNumber;
const int ForwardedDocument::kDocumentWithDocflowFieldNumber;
#endif  // !_MSC_VER

ForwardedDocument::ForwardedDocument()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Forwarding.ForwardedDocument)
}

void ForwardedDocument::InitAsDefaultInstance() {
  forwardtimestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  forwardeddocumentid_ = const_cast< ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId*>(&::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId::default_instance());
  documentwithdocflow_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentWithDocflow*>(&::Diadoc::Api::Proto::Docflow::DocumentWithDocflow::default_instance());
}

ForwardedDocument::ForwardedDocument(const ForwardedDocument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Forwarding.ForwardedDocument)
}

void ForwardedDocument::SharedCtor() {
  _cached_size_ = 0;
  forwardtimestamp_ = NULL;
  forwardeddocumentid_ = NULL;
  documentwithdocflow_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardedDocument::~ForwardedDocument() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Forwarding.ForwardedDocument)
  SharedDtor();
}

void ForwardedDocument::SharedDtor() {
  if (this != default_instance_) {
    delete forwardtimestamp_;
    delete forwardeddocumentid_;
    delete documentwithdocflow_;
  }
}

void ForwardedDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardedDocument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardedDocument_descriptor_;
}

const ForwardedDocument& ForwardedDocument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Forwarding_2fForwardedDocument_2eproto();
  return *default_instance_;
}

ForwardedDocument* ForwardedDocument::default_instance_ = NULL;

ForwardedDocument* ForwardedDocument::New() const {
  return new ForwardedDocument;
}

void ForwardedDocument::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_forwardtimestamp()) {
      if (forwardtimestamp_ != NULL) forwardtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_forwardeddocumentid()) {
      if (forwardeddocumentid_ != NULL) forwardeddocumentid_->::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId::Clear();
    }
    if (has_documentwithdocflow()) {
      if (documentwithdocflow_ != NULL) documentwithdocflow_->::Diadoc::Api::Proto::Docflow::DocumentWithDocflow::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardedDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Forwarding.ForwardedDocument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Timestamp ForwardTimestamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forwardtimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ForwardedDocumentId;
        break;
      }

      // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
      case 2: {
        if (tag == 18) {
         parse_ForwardedDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forwardeddocumentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DocumentWithDocflow;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflow DocumentWithDocflow = 3;
      case 3: {
        if (tag == 26) {
         parse_DocumentWithDocflow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentwithdocflow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Forwarding.ForwardedDocument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Forwarding.ForwardedDocument)
  return false;
#undef DO_
}

void ForwardedDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Forwarding.ForwardedDocument)
  // optional .Diadoc.Api.Proto.Timestamp ForwardTimestamp = 1;
  if (has_forwardtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->forwardtimestamp(), output);
  }

  // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
  if (has_forwardeddocumentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->forwardeddocumentid(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflow DocumentWithDocflow = 3;
  if (has_documentwithdocflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->documentwithdocflow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Forwarding.ForwardedDocument)
}

::google::protobuf::uint8* ForwardedDocument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Forwarding.ForwardedDocument)
  // optional .Diadoc.Api.Proto.Timestamp ForwardTimestamp = 1;
  if (has_forwardtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->forwardtimestamp(), target);
  }

  // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
  if (has_forwardeddocumentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->forwardeddocumentid(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflow DocumentWithDocflow = 3;
  if (has_documentwithdocflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->documentwithdocflow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Forwarding.ForwardedDocument)
  return target;
}

int ForwardedDocument::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Timestamp ForwardTimestamp = 1;
    if (has_forwardtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forwardtimestamp());
    }

    // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
    if (has_forwardeddocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forwardeddocumentid());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentWithDocflow DocumentWithDocflow = 3;
    if (has_documentwithdocflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentwithdocflow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardedDocument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardedDocument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardedDocument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardedDocument::MergeFrom(const ForwardedDocument& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_forwardtimestamp()) {
      mutable_forwardtimestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.forwardtimestamp());
    }
    if (from.has_forwardeddocumentid()) {
      mutable_forwardeddocumentid()->::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId::MergeFrom(from.forwardeddocumentid());
    }
    if (from.has_documentwithdocflow()) {
      mutable_documentwithdocflow()->::Diadoc::Api::Proto::Docflow::DocumentWithDocflow::MergeFrom(from.documentwithdocflow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardedDocument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardedDocument::CopyFrom(const ForwardedDocument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardedDocument::IsInitialized() const {

  if (has_forwardtimestamp()) {
    if (!this->forwardtimestamp().IsInitialized()) return false;
  }
  if (has_forwardeddocumentid()) {
    if (!this->forwardeddocumentid().IsInitialized()) return false;
  }
  if (has_documentwithdocflow()) {
    if (!this->documentwithdocflow().IsInitialized()) return false;
  }
  return true;
}

void ForwardedDocument::Swap(ForwardedDocument* other) {
  if (other != this) {
    std::swap(forwardtimestamp_, other->forwardtimestamp_);
    std::swap(forwardeddocumentid_, other->forwardeddocumentid_);
    std::swap(documentwithdocflow_, other->documentwithdocflow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardedDocument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardedDocument_descriptor_;
  metadata.reflection = ForwardedDocument_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Forwarding
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
