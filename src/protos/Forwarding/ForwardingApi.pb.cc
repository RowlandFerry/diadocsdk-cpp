// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Forwarding/ForwardingApi.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Forwarding/ForwardingApi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Forwarding {

namespace {

const ::google::protobuf::Descriptor* ForwardDocumentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardDocumentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardDocumentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardDocumentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetForwardedDocumentsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetForwardedDocumentsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetForwardedDocumentsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetForwardedDocumentsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetForwardedDocumentEventsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetForwardedDocumentEventsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetForwardedDocumentEventsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetForwardedDocumentEventsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardedDocumentEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardedDocumentEvent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Forwarding_2fForwardingApi_2eproto() {
  protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Forwarding/ForwardingApi.proto");
  GOOGLE_CHECK(file != NULL);
  ForwardDocumentRequest_descriptor_ = file->message_type(0);
  static const int ForwardDocumentRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardDocumentRequest, toboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardDocumentRequest, documentid_),
  };
  ForwardDocumentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardDocumentRequest_descriptor_,
      ForwardDocumentRequest::default_instance_,
      ForwardDocumentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardDocumentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardDocumentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardDocumentRequest));
  ForwardDocumentResponse_descriptor_ = file->message_type(1);
  static const int ForwardDocumentResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardDocumentResponse, forwardtimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardDocumentResponse, forwardeddocumentid_),
  };
  ForwardDocumentResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardDocumentResponse_descriptor_,
      ForwardDocumentResponse::default_instance_,
      ForwardDocumentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardDocumentResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardDocumentResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardDocumentResponse));
  GetForwardedDocumentsRequest_descriptor_ = file->message_type(2);
  static const int GetForwardedDocumentsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentsRequest, forwardeddocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentsRequest, injectentitycontent_),
  };
  GetForwardedDocumentsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetForwardedDocumentsRequest_descriptor_,
      GetForwardedDocumentsRequest::default_instance_,
      GetForwardedDocumentsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetForwardedDocumentsRequest));
  GetForwardedDocumentsResponse_descriptor_ = file->message_type(3);
  static const int GetForwardedDocumentsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentsResponse, forwardeddocuments_),
  };
  GetForwardedDocumentsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetForwardedDocumentsResponse_descriptor_,
      GetForwardedDocumentsResponse::default_instance_,
      GetForwardedDocumentsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetForwardedDocumentsResponse));
  GetForwardedDocumentEventsRequest_descriptor_ = file->message_type(4);
  static const int GetForwardedDocumentEventsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentEventsRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentEventsRequest, afterindexkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentEventsRequest, populateforwardeddocuments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentEventsRequest, injectentitycontent_),
  };
  GetForwardedDocumentEventsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetForwardedDocumentEventsRequest_descriptor_,
      GetForwardedDocumentEventsRequest::default_instance_,
      GetForwardedDocumentEventsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentEventsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentEventsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetForwardedDocumentEventsRequest));
  GetForwardedDocumentEventsResponse_descriptor_ = file->message_type(5);
  static const int GetForwardedDocumentEventsResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentEventsResponse, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentEventsResponse, events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentEventsResponse, totalcounttype_),
  };
  GetForwardedDocumentEventsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetForwardedDocumentEventsResponse_descriptor_,
      GetForwardedDocumentEventsResponse::default_instance_,
      GetForwardedDocumentEventsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentEventsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardedDocumentEventsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetForwardedDocumentEventsResponse));
  ForwardedDocumentEvent_descriptor_ = file->message_type(6);
  static const int ForwardedDocumentEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocumentEvent, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocumentEvent, forwardeddocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocumentEvent, indexkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocumentEvent, forwardeddocument_),
  };
  ForwardedDocumentEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardedDocumentEvent_descriptor_,
      ForwardedDocumentEvent::default_instance_,
      ForwardedDocumentEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocumentEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardedDocumentEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardedDocumentEvent));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Forwarding_2fForwardingApi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardDocumentRequest_descriptor_, &ForwardDocumentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardDocumentResponse_descriptor_, &ForwardDocumentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetForwardedDocumentsRequest_descriptor_, &GetForwardedDocumentsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetForwardedDocumentsResponse_descriptor_, &GetForwardedDocumentsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetForwardedDocumentEventsRequest_descriptor_, &GetForwardedDocumentEventsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetForwardedDocumentEventsResponse_descriptor_, &GetForwardedDocumentEventsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardedDocumentEvent_descriptor_, &ForwardedDocumentEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Forwarding_2fForwardingApi_2eproto() {
  delete ForwardDocumentRequest::default_instance_;
  delete ForwardDocumentRequest_reflection_;
  delete ForwardDocumentResponse::default_instance_;
  delete ForwardDocumentResponse_reflection_;
  delete GetForwardedDocumentsRequest::default_instance_;
  delete GetForwardedDocumentsRequest_reflection_;
  delete GetForwardedDocumentsResponse::default_instance_;
  delete GetForwardedDocumentsResponse_reflection_;
  delete GetForwardedDocumentEventsRequest::default_instance_;
  delete GetForwardedDocumentEventsRequest_reflection_;
  delete GetForwardedDocumentEventsResponse::default_instance_;
  delete GetForwardedDocumentEventsResponse_reflection_;
  delete ForwardedDocumentEvent::default_instance_;
  delete ForwardedDocumentEvent_reflection_;
}

void protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_DocumentId_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_TotalCountType_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_TimeBasedFilter_2eproto();
  ::Diadoc::Api::Proto::Forwarding::protobuf_AddDesc_Forwarding_2fForwardedDocument_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036Forwarding/ForwardingApi.proto\022\033Diadoc"
    ".Api.Proto.Forwarding\032\017Timestamp.proto\032\020"
    "DocumentId.proto\032\024TotalCountType.proto\032\025"
    "TimeBasedFilter.proto\032\"Forwarding/Forwar"
    "dedDocument.proto\"[\n\026ForwardDocumentRequ"
    "est\022\017\n\007ToBoxId\030\001 \002(\t\0220\n\nDocumentId\030\002 \002(\013"
    "2\034.Diadoc.Api.Proto.DocumentId\"\237\001\n\027Forwa"
    "rdDocumentResponse\0225\n\020ForwardTimestamp\030\001"
    " \001(\0132\033.Diadoc.Api.Proto.Timestamp\022M\n\023For"
    "wardedDocumentId\030\002 \001(\01320.Diadoc.Api.Prot"
    "o.Forwarding.ForwardedDocumentId\"\222\001\n\034Get"
    "ForwardedDocumentsRequest\022N\n\024ForwardedDo"
    "cumentIds\030\001 \003(\01320.Diadoc.Api.Proto.Forwa"
    "rding.ForwardedDocumentId\022\"\n\023InjectEntit"
    "yContent\030\002 \001(\010:\005false\"k\n\035GetForwardedDoc"
    "umentsResponse\022J\n\022ForwardedDocuments\030\001 \003"
    "(\0132..Diadoc.Api.Proto.Forwarding.Forward"
    "edDocument\"\274\001\n!GetForwardedDocumentEvent"
    "sRequest\0221\n\006Filter\030\001 \002(\0132!.Diadoc.Api.Pr"
    "oto.TimeBasedFilter\022\025\n\rAfterIndexKey\030\002 \001"
    "(\014\022)\n\032PopulateForwardedDocuments\030\003 \001(\010:\005"
    "false\022\"\n\023InjectEntityContent\030\004 \001(\010:\005fals"
    "e\"\267\001\n\"GetForwardedDocumentEventsResponse"
    "\022\022\n\nTotalCount\030\001 \001(\005\022C\n\006Events\030\002 \003(\01323.D"
    "iadoc.Api.Proto.Forwarding.ForwardedDocu"
    "mentEvent\0228\n\016TotalCountType\030\003 \002(\0162 .Diad"
    "oc.Api.Proto.TotalCountType\"\364\001\n\026Forwarde"
    "dDocumentEvent\022.\n\tTimestamp\030\001 \001(\0132\033.Diad"
    "oc.Api.Proto.Timestamp\022M\n\023ForwardedDocum"
    "entId\030\002 \001(\01320.Diadoc.Api.Proto.Forwardin"
    "g.ForwardedDocumentId\022\020\n\010IndexKey\030\003 \001(\014\022"
    "I\n\021ForwardedDocument\030\004 \001(\0132..Diadoc.Api."
    "Proto.Forwarding.ForwardedDocument", 1314);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Forwarding/ForwardingApi.proto", &protobuf_RegisterTypes);
  ForwardDocumentRequest::default_instance_ = new ForwardDocumentRequest();
  ForwardDocumentResponse::default_instance_ = new ForwardDocumentResponse();
  GetForwardedDocumentsRequest::default_instance_ = new GetForwardedDocumentsRequest();
  GetForwardedDocumentsResponse::default_instance_ = new GetForwardedDocumentsResponse();
  GetForwardedDocumentEventsRequest::default_instance_ = new GetForwardedDocumentEventsRequest();
  GetForwardedDocumentEventsResponse::default_instance_ = new GetForwardedDocumentEventsResponse();
  ForwardedDocumentEvent::default_instance_ = new ForwardedDocumentEvent();
  ForwardDocumentRequest::default_instance_->InitAsDefaultInstance();
  ForwardDocumentResponse::default_instance_->InitAsDefaultInstance();
  GetForwardedDocumentsRequest::default_instance_->InitAsDefaultInstance();
  GetForwardedDocumentsResponse::default_instance_->InitAsDefaultInstance();
  GetForwardedDocumentEventsRequest::default_instance_->InitAsDefaultInstance();
  GetForwardedDocumentEventsResponse::default_instance_->InitAsDefaultInstance();
  ForwardedDocumentEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Forwarding_2fForwardingApi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Forwarding_2fForwardingApi_2eproto {
  StaticDescriptorInitializer_Forwarding_2fForwardingApi_2eproto() {
    protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  }
} static_descriptor_initializer_Forwarding_2fForwardingApi_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ForwardDocumentRequest::kToBoxIdFieldNumber;
const int ForwardDocumentRequest::kDocumentIdFieldNumber;
#endif  // !_MSC_VER

ForwardDocumentRequest::ForwardDocumentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest)
}

void ForwardDocumentRequest::InitAsDefaultInstance() {
  documentid_ = const_cast< ::Diadoc::Api::Proto::DocumentId*>(&::Diadoc::Api::Proto::DocumentId::default_instance());
}

ForwardDocumentRequest::ForwardDocumentRequest(const ForwardDocumentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest)
}

void ForwardDocumentRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardDocumentRequest::~ForwardDocumentRequest() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest)
  SharedDtor();
}

void ForwardDocumentRequest::SharedDtor() {
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete toboxid_;
  }
  if (this != default_instance_) {
    delete documentid_;
  }
}

void ForwardDocumentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardDocumentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardDocumentRequest_descriptor_;
}

const ForwardDocumentRequest& ForwardDocumentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  return *default_instance_;
}

ForwardDocumentRequest* ForwardDocumentRequest::default_instance_ = NULL;

ForwardDocumentRequest* ForwardDocumentRequest::New() const {
  return new ForwardDocumentRequest;
}

void ForwardDocumentRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_toboxid()) {
      if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        toboxid_->clear();
      }
    }
    if (has_documentid()) {
      if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardDocumentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ToBoxId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->toboxid().data(), this->toboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "toboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DocumentId;
        break;
      }

      // required .Diadoc.Api.Proto.DocumentId DocumentId = 2;
      case 2: {
        if (tag == 18) {
         parse_DocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest)
  return false;
#undef DO_
}

void ForwardDocumentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest)
  // required string ToBoxId = 1;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->toboxid(), output);
  }

  // required .Diadoc.Api.Proto.DocumentId DocumentId = 2;
  if (has_documentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->documentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest)
}

::google::protobuf::uint8* ForwardDocumentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest)
  // required string ToBoxId = 1;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->toboxid(), target);
  }

  // required .Diadoc.Api.Proto.DocumentId DocumentId = 2;
  if (has_documentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->documentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Forwarding.ForwardDocumentRequest)
  return target;
}

int ForwardDocumentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ToBoxId = 1;
    if (has_toboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toboxid());
    }

    // required .Diadoc.Api.Proto.DocumentId DocumentId = 2;
    if (has_documentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardDocumentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardDocumentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardDocumentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardDocumentRequest::MergeFrom(const ForwardDocumentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toboxid()) {
      set_toboxid(from.toboxid());
    }
    if (from.has_documentid()) {
      mutable_documentid()->::Diadoc::Api::Proto::DocumentId::MergeFrom(from.documentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardDocumentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardDocumentRequest::CopyFrom(const ForwardDocumentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardDocumentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_documentid()) {
    if (!this->documentid().IsInitialized()) return false;
  }
  return true;
}

void ForwardDocumentRequest::Swap(ForwardDocumentRequest* other) {
  if (other != this) {
    std::swap(toboxid_, other->toboxid_);
    std::swap(documentid_, other->documentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardDocumentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardDocumentRequest_descriptor_;
  metadata.reflection = ForwardDocumentRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardDocumentResponse::kForwardTimestampFieldNumber;
const int ForwardDocumentResponse::kForwardedDocumentIdFieldNumber;
#endif  // !_MSC_VER

ForwardDocumentResponse::ForwardDocumentResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse)
}

void ForwardDocumentResponse::InitAsDefaultInstance() {
  forwardtimestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  forwardeddocumentid_ = const_cast< ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId*>(&::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId::default_instance());
}

ForwardDocumentResponse::ForwardDocumentResponse(const ForwardDocumentResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse)
}

void ForwardDocumentResponse::SharedCtor() {
  _cached_size_ = 0;
  forwardtimestamp_ = NULL;
  forwardeddocumentid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardDocumentResponse::~ForwardDocumentResponse() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse)
  SharedDtor();
}

void ForwardDocumentResponse::SharedDtor() {
  if (this != default_instance_) {
    delete forwardtimestamp_;
    delete forwardeddocumentid_;
  }
}

void ForwardDocumentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardDocumentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardDocumentResponse_descriptor_;
}

const ForwardDocumentResponse& ForwardDocumentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  return *default_instance_;
}

ForwardDocumentResponse* ForwardDocumentResponse::default_instance_ = NULL;

ForwardDocumentResponse* ForwardDocumentResponse::New() const {
  return new ForwardDocumentResponse;
}

void ForwardDocumentResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_forwardtimestamp()) {
      if (forwardtimestamp_ != NULL) forwardtimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_forwardeddocumentid()) {
      if (forwardeddocumentid_ != NULL) forwardeddocumentid_->::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardDocumentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Timestamp ForwardTimestamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forwardtimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ForwardedDocumentId;
        break;
      }

      // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
      case 2: {
        if (tag == 18) {
         parse_ForwardedDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forwardeddocumentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse)
  return false;
#undef DO_
}

void ForwardDocumentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse)
  // optional .Diadoc.Api.Proto.Timestamp ForwardTimestamp = 1;
  if (has_forwardtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->forwardtimestamp(), output);
  }

  // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
  if (has_forwardeddocumentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->forwardeddocumentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse)
}

::google::protobuf::uint8* ForwardDocumentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse)
  // optional .Diadoc.Api.Proto.Timestamp ForwardTimestamp = 1;
  if (has_forwardtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->forwardtimestamp(), target);
  }

  // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
  if (has_forwardeddocumentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->forwardeddocumentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Forwarding.ForwardDocumentResponse)
  return target;
}

int ForwardDocumentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Timestamp ForwardTimestamp = 1;
    if (has_forwardtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forwardtimestamp());
    }

    // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
    if (has_forwardeddocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forwardeddocumentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardDocumentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardDocumentResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardDocumentResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardDocumentResponse::MergeFrom(const ForwardDocumentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_forwardtimestamp()) {
      mutable_forwardtimestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.forwardtimestamp());
    }
    if (from.has_forwardeddocumentid()) {
      mutable_forwardeddocumentid()->::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId::MergeFrom(from.forwardeddocumentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardDocumentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardDocumentResponse::CopyFrom(const ForwardDocumentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardDocumentResponse::IsInitialized() const {

  if (has_forwardtimestamp()) {
    if (!this->forwardtimestamp().IsInitialized()) return false;
  }
  if (has_forwardeddocumentid()) {
    if (!this->forwardeddocumentid().IsInitialized()) return false;
  }
  return true;
}

void ForwardDocumentResponse::Swap(ForwardDocumentResponse* other) {
  if (other != this) {
    std::swap(forwardtimestamp_, other->forwardtimestamp_);
    std::swap(forwardeddocumentid_, other->forwardeddocumentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardDocumentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardDocumentResponse_descriptor_;
  metadata.reflection = ForwardDocumentResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetForwardedDocumentsRequest::kForwardedDocumentIdsFieldNumber;
const int GetForwardedDocumentsRequest::kInjectEntityContentFieldNumber;
#endif  // !_MSC_VER

GetForwardedDocumentsRequest::GetForwardedDocumentsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest)
}

void GetForwardedDocumentsRequest::InitAsDefaultInstance() {
}

GetForwardedDocumentsRequest::GetForwardedDocumentsRequest(const GetForwardedDocumentsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest)
}

void GetForwardedDocumentsRequest::SharedCtor() {
  _cached_size_ = 0;
  injectentitycontent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetForwardedDocumentsRequest::~GetForwardedDocumentsRequest() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest)
  SharedDtor();
}

void GetForwardedDocumentsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetForwardedDocumentsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetForwardedDocumentsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetForwardedDocumentsRequest_descriptor_;
}

const GetForwardedDocumentsRequest& GetForwardedDocumentsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  return *default_instance_;
}

GetForwardedDocumentsRequest* GetForwardedDocumentsRequest::default_instance_ = NULL;

GetForwardedDocumentsRequest* GetForwardedDocumentsRequest::New() const {
  return new GetForwardedDocumentsRequest;
}

void GetForwardedDocumentsRequest::Clear() {
  injectentitycontent_ = false;
  forwardeddocumentids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetForwardedDocumentsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentIds = 1;
      case 1: {
        if (tag == 10) {
         parse_ForwardedDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_forwardeddocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ForwardedDocumentIds;
        if (input->ExpectTag(16)) goto parse_InjectEntityContent;
        break;
      }

      // optional bool InjectEntityContent = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_InjectEntityContent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &injectentitycontent_)));
          set_has_injectentitycontent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest)
  return false;
#undef DO_
}

void GetForwardedDocumentsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest)
  // repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentIds = 1;
  for (int i = 0; i < this->forwardeddocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->forwardeddocumentids(i), output);
  }

  // optional bool InjectEntityContent = 2 [default = false];
  if (has_injectentitycontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->injectentitycontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest)
}

::google::protobuf::uint8* GetForwardedDocumentsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest)
  // repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentIds = 1;
  for (int i = 0; i < this->forwardeddocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->forwardeddocumentids(i), target);
  }

  // optional bool InjectEntityContent = 2 [default = false];
  if (has_injectentitycontent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->injectentitycontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsRequest)
  return target;
}

int GetForwardedDocumentsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool InjectEntityContent = 2 [default = false];
    if (has_injectentitycontent()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentIds = 1;
  total_size += 1 * this->forwardeddocumentids_size();
  for (int i = 0; i < this->forwardeddocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forwardeddocumentids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetForwardedDocumentsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetForwardedDocumentsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetForwardedDocumentsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetForwardedDocumentsRequest::MergeFrom(const GetForwardedDocumentsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  forwardeddocumentids_.MergeFrom(from.forwardeddocumentids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_injectentitycontent()) {
      set_injectentitycontent(from.injectentitycontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetForwardedDocumentsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetForwardedDocumentsRequest::CopyFrom(const GetForwardedDocumentsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetForwardedDocumentsRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->forwardeddocumentids())) return false;
  return true;
}

void GetForwardedDocumentsRequest::Swap(GetForwardedDocumentsRequest* other) {
  if (other != this) {
    forwardeddocumentids_.Swap(&other->forwardeddocumentids_);
    std::swap(injectentitycontent_, other->injectentitycontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetForwardedDocumentsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetForwardedDocumentsRequest_descriptor_;
  metadata.reflection = GetForwardedDocumentsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetForwardedDocumentsResponse::kForwardedDocumentsFieldNumber;
#endif  // !_MSC_VER

GetForwardedDocumentsResponse::GetForwardedDocumentsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse)
}

void GetForwardedDocumentsResponse::InitAsDefaultInstance() {
}

GetForwardedDocumentsResponse::GetForwardedDocumentsResponse(const GetForwardedDocumentsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse)
}

void GetForwardedDocumentsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetForwardedDocumentsResponse::~GetForwardedDocumentsResponse() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse)
  SharedDtor();
}

void GetForwardedDocumentsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetForwardedDocumentsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetForwardedDocumentsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetForwardedDocumentsResponse_descriptor_;
}

const GetForwardedDocumentsResponse& GetForwardedDocumentsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  return *default_instance_;
}

GetForwardedDocumentsResponse* GetForwardedDocumentsResponse::default_instance_ = NULL;

GetForwardedDocumentsResponse* GetForwardedDocumentsResponse::New() const {
  return new GetForwardedDocumentsResponse;
}

void GetForwardedDocumentsResponse::Clear() {
  forwardeddocuments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetForwardedDocumentsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocument ForwardedDocuments = 1;
      case 1: {
        if (tag == 10) {
         parse_ForwardedDocuments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_forwardeddocuments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ForwardedDocuments;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse)
  return false;
#undef DO_
}

void GetForwardedDocumentsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse)
  // repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocument ForwardedDocuments = 1;
  for (int i = 0; i < this->forwardeddocuments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->forwardeddocuments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse)
}

::google::protobuf::uint8* GetForwardedDocumentsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse)
  // repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocument ForwardedDocuments = 1;
  for (int i = 0; i < this->forwardeddocuments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->forwardeddocuments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentsResponse)
  return target;
}

int GetForwardedDocumentsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocument ForwardedDocuments = 1;
  total_size += 1 * this->forwardeddocuments_size();
  for (int i = 0; i < this->forwardeddocuments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forwardeddocuments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetForwardedDocumentsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetForwardedDocumentsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetForwardedDocumentsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetForwardedDocumentsResponse::MergeFrom(const GetForwardedDocumentsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  forwardeddocuments_.MergeFrom(from.forwardeddocuments_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetForwardedDocumentsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetForwardedDocumentsResponse::CopyFrom(const GetForwardedDocumentsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetForwardedDocumentsResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->forwardeddocuments())) return false;
  return true;
}

void GetForwardedDocumentsResponse::Swap(GetForwardedDocumentsResponse* other) {
  if (other != this) {
    forwardeddocuments_.Swap(&other->forwardeddocuments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetForwardedDocumentsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetForwardedDocumentsResponse_descriptor_;
  metadata.reflection = GetForwardedDocumentsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetForwardedDocumentEventsRequest::kFilterFieldNumber;
const int GetForwardedDocumentEventsRequest::kAfterIndexKeyFieldNumber;
const int GetForwardedDocumentEventsRequest::kPopulateForwardedDocumentsFieldNumber;
const int GetForwardedDocumentEventsRequest::kInjectEntityContentFieldNumber;
#endif  // !_MSC_VER

GetForwardedDocumentEventsRequest::GetForwardedDocumentEventsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest)
}

void GetForwardedDocumentEventsRequest::InitAsDefaultInstance() {
  filter_ = const_cast< ::Diadoc::Api::Proto::TimeBasedFilter*>(&::Diadoc::Api::Proto::TimeBasedFilter::default_instance());
}

GetForwardedDocumentEventsRequest::GetForwardedDocumentEventsRequest(const GetForwardedDocumentEventsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest)
}

void GetForwardedDocumentEventsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filter_ = NULL;
  afterindexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  populateforwardeddocuments_ = false;
  injectentitycontent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetForwardedDocumentEventsRequest::~GetForwardedDocumentEventsRequest() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest)
  SharedDtor();
}

void GetForwardedDocumentEventsRequest::SharedDtor() {
  if (afterindexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete afterindexkey_;
  }
  if (this != default_instance_) {
    delete filter_;
  }
}

void GetForwardedDocumentEventsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetForwardedDocumentEventsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetForwardedDocumentEventsRequest_descriptor_;
}

const GetForwardedDocumentEventsRequest& GetForwardedDocumentEventsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  return *default_instance_;
}

GetForwardedDocumentEventsRequest* GetForwardedDocumentEventsRequest::default_instance_ = NULL;

GetForwardedDocumentEventsRequest* GetForwardedDocumentEventsRequest::New() const {
  return new GetForwardedDocumentEventsRequest;
}

void GetForwardedDocumentEventsRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetForwardedDocumentEventsRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(populateforwardeddocuments_, injectentitycontent_);
    if (has_filter()) {
      if (filter_ != NULL) filter_->::Diadoc::Api::Proto::TimeBasedFilter::Clear();
    }
    if (has_afterindexkey()) {
      if (afterindexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        afterindexkey_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetForwardedDocumentEventsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.TimeBasedFilter Filter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AfterIndexKey;
        break;
      }

      // optional bytes AfterIndexKey = 2;
      case 2: {
        if (tag == 18) {
         parse_AfterIndexKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_afterindexkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PopulateForwardedDocuments;
        break;
      }

      // optional bool PopulateForwardedDocuments = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_PopulateForwardedDocuments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &populateforwardeddocuments_)));
          set_has_populateforwardeddocuments();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_InjectEntityContent;
        break;
      }

      // optional bool InjectEntityContent = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_InjectEntityContent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &injectentitycontent_)));
          set_has_injectentitycontent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest)
  return false;
#undef DO_
}

void GetForwardedDocumentEventsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest)
  // required .Diadoc.Api.Proto.TimeBasedFilter Filter = 1;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filter(), output);
  }

  // optional bytes AfterIndexKey = 2;
  if (has_afterindexkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->afterindexkey(), output);
  }

  // optional bool PopulateForwardedDocuments = 3 [default = false];
  if (has_populateforwardeddocuments()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->populateforwardeddocuments(), output);
  }

  // optional bool InjectEntityContent = 4 [default = false];
  if (has_injectentitycontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->injectentitycontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest)
}

::google::protobuf::uint8* GetForwardedDocumentEventsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest)
  // required .Diadoc.Api.Proto.TimeBasedFilter Filter = 1;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->filter(), target);
  }

  // optional bytes AfterIndexKey = 2;
  if (has_afterindexkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->afterindexkey(), target);
  }

  // optional bool PopulateForwardedDocuments = 3 [default = false];
  if (has_populateforwardeddocuments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->populateforwardeddocuments(), target);
  }

  // optional bool InjectEntityContent = 4 [default = false];
  if (has_injectentitycontent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->injectentitycontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsRequest)
  return target;
}

int GetForwardedDocumentEventsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.TimeBasedFilter Filter = 1;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }

    // optional bytes AfterIndexKey = 2;
    if (has_afterindexkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->afterindexkey());
    }

    // optional bool PopulateForwardedDocuments = 3 [default = false];
    if (has_populateforwardeddocuments()) {
      total_size += 1 + 1;
    }

    // optional bool InjectEntityContent = 4 [default = false];
    if (has_injectentitycontent()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetForwardedDocumentEventsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetForwardedDocumentEventsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetForwardedDocumentEventsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetForwardedDocumentEventsRequest::MergeFrom(const GetForwardedDocumentEventsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter()) {
      mutable_filter()->::Diadoc::Api::Proto::TimeBasedFilter::MergeFrom(from.filter());
    }
    if (from.has_afterindexkey()) {
      set_afterindexkey(from.afterindexkey());
    }
    if (from.has_populateforwardeddocuments()) {
      set_populateforwardeddocuments(from.populateforwardeddocuments());
    }
    if (from.has_injectentitycontent()) {
      set_injectentitycontent(from.injectentitycontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetForwardedDocumentEventsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetForwardedDocumentEventsRequest::CopyFrom(const GetForwardedDocumentEventsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetForwardedDocumentEventsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  return true;
}

void GetForwardedDocumentEventsRequest::Swap(GetForwardedDocumentEventsRequest* other) {
  if (other != this) {
    std::swap(filter_, other->filter_);
    std::swap(afterindexkey_, other->afterindexkey_);
    std::swap(populateforwardeddocuments_, other->populateforwardeddocuments_);
    std::swap(injectentitycontent_, other->injectentitycontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetForwardedDocumentEventsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetForwardedDocumentEventsRequest_descriptor_;
  metadata.reflection = GetForwardedDocumentEventsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetForwardedDocumentEventsResponse::kTotalCountFieldNumber;
const int GetForwardedDocumentEventsResponse::kEventsFieldNumber;
const int GetForwardedDocumentEventsResponse::kTotalCountTypeFieldNumber;
#endif  // !_MSC_VER

GetForwardedDocumentEventsResponse::GetForwardedDocumentEventsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse)
}

void GetForwardedDocumentEventsResponse::InitAsDefaultInstance() {
}

GetForwardedDocumentEventsResponse::GetForwardedDocumentEventsResponse(const GetForwardedDocumentEventsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse)
}

void GetForwardedDocumentEventsResponse::SharedCtor() {
  _cached_size_ = 0;
  totalcount_ = 0;
  totalcounttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetForwardedDocumentEventsResponse::~GetForwardedDocumentEventsResponse() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse)
  SharedDtor();
}

void GetForwardedDocumentEventsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetForwardedDocumentEventsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetForwardedDocumentEventsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetForwardedDocumentEventsResponse_descriptor_;
}

const GetForwardedDocumentEventsResponse& GetForwardedDocumentEventsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  return *default_instance_;
}

GetForwardedDocumentEventsResponse* GetForwardedDocumentEventsResponse::default_instance_ = NULL;

GetForwardedDocumentEventsResponse* GetForwardedDocumentEventsResponse::New() const {
  return new GetForwardedDocumentEventsResponse;
}

void GetForwardedDocumentEventsResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetForwardedDocumentEventsResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(totalcount_, totalcounttype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetForwardedDocumentEventsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TotalCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Events;
        break;
      }

      // repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent Events = 2;
      case 2: {
        if (tag == 18) {
         parse_Events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Events;
        if (input->ExpectTag(24)) goto parse_TotalCountType;
        break;
      }

      // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
      case 3: {
        if (tag == 24) {
         parse_TotalCountType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::TotalCountType_IsValid(value)) {
            set_totalcounttype(static_cast< ::Diadoc::Api::Proto::TotalCountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse)
  return false;
#undef DO_
}

void GetForwardedDocumentEventsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse)
  // optional int32 TotalCount = 1;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalcount(), output);
  }

  // repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent Events = 2;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->events(i), output);
  }

  // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
  if (has_totalcounttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->totalcounttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse)
}

::google::protobuf::uint8* GetForwardedDocumentEventsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse)
  // optional int32 TotalCount = 1;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalcount(), target);
  }

  // repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent Events = 2;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->events(i), target);
  }

  // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
  if (has_totalcounttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->totalcounttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Forwarding.GetForwardedDocumentEventsResponse)
  return target;
}

int GetForwardedDocumentEventsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TotalCount = 1;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

    // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
    if (has_totalcounttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->totalcounttype());
    }

  }
  // repeated .Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent Events = 2;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetForwardedDocumentEventsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetForwardedDocumentEventsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetForwardedDocumentEventsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetForwardedDocumentEventsResponse::MergeFrom(const GetForwardedDocumentEventsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
    if (from.has_totalcounttype()) {
      set_totalcounttype(from.totalcounttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetForwardedDocumentEventsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetForwardedDocumentEventsResponse::CopyFrom(const GetForwardedDocumentEventsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetForwardedDocumentEventsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->events())) return false;
  return true;
}

void GetForwardedDocumentEventsResponse::Swap(GetForwardedDocumentEventsResponse* other) {
  if (other != this) {
    std::swap(totalcount_, other->totalcount_);
    events_.Swap(&other->events_);
    std::swap(totalcounttype_, other->totalcounttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetForwardedDocumentEventsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetForwardedDocumentEventsResponse_descriptor_;
  metadata.reflection = GetForwardedDocumentEventsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardedDocumentEvent::kTimestampFieldNumber;
const int ForwardedDocumentEvent::kForwardedDocumentIdFieldNumber;
const int ForwardedDocumentEvent::kIndexKeyFieldNumber;
const int ForwardedDocumentEvent::kForwardedDocumentFieldNumber;
#endif  // !_MSC_VER

ForwardedDocumentEvent::ForwardedDocumentEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent)
}

void ForwardedDocumentEvent::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
  forwardeddocumentid_ = const_cast< ::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId*>(&::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId::default_instance());
  forwardeddocument_ = const_cast< ::Diadoc::Api::Proto::Forwarding::ForwardedDocument*>(&::Diadoc::Api::Proto::Forwarding::ForwardedDocument::default_instance());
}

ForwardedDocumentEvent::ForwardedDocumentEvent(const ForwardedDocumentEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent)
}

void ForwardedDocumentEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = NULL;
  forwardeddocumentid_ = NULL;
  indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forwardeddocument_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardedDocumentEvent::~ForwardedDocumentEvent() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent)
  SharedDtor();
}

void ForwardedDocumentEvent::SharedDtor() {
  if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete indexkey_;
  }
  if (this != default_instance_) {
    delete timestamp_;
    delete forwardeddocumentid_;
    delete forwardeddocument_;
  }
}

void ForwardedDocumentEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardedDocumentEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardedDocumentEvent_descriptor_;
}

const ForwardedDocumentEvent& ForwardedDocumentEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Forwarding_2fForwardingApi_2eproto();
  return *default_instance_;
}

ForwardedDocumentEvent* ForwardedDocumentEvent::default_instance_ = NULL;

ForwardedDocumentEvent* ForwardedDocumentEvent::New() const {
  return new ForwardedDocumentEvent;
}

void ForwardedDocumentEvent::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
    if (has_forwardeddocumentid()) {
      if (forwardeddocumentid_ != NULL) forwardeddocumentid_->::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId::Clear();
    }
    if (has_indexkey()) {
      if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        indexkey_->clear();
      }
    }
    if (has_forwardeddocument()) {
      if (forwardeddocument_ != NULL) forwardeddocument_->::Diadoc::Api::Proto::Forwarding::ForwardedDocument::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardedDocumentEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Timestamp Timestamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ForwardedDocumentId;
        break;
      }

      // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
      case 2: {
        if (tag == 18) {
         parse_ForwardedDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forwardeddocumentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_IndexKey;
        break;
      }

      // optional bytes IndexKey = 3;
      case 3: {
        if (tag == 26) {
         parse_IndexKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_indexkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ForwardedDocument;
        break;
      }

      // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocument ForwardedDocument = 4;
      case 4: {
        if (tag == 34) {
         parse_ForwardedDocument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forwardeddocument()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent)
  return false;
#undef DO_
}

void ForwardedDocumentEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent)
  // optional .Diadoc.Api.Proto.Timestamp Timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timestamp(), output);
  }

  // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
  if (has_forwardeddocumentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->forwardeddocumentid(), output);
  }

  // optional bytes IndexKey = 3;
  if (has_indexkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->indexkey(), output);
  }

  // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocument ForwardedDocument = 4;
  if (has_forwardeddocument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->forwardeddocument(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent)
}

::google::protobuf::uint8* ForwardedDocumentEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent)
  // optional .Diadoc.Api.Proto.Timestamp Timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->timestamp(), target);
  }

  // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
  if (has_forwardeddocumentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->forwardeddocumentid(), target);
  }

  // optional bytes IndexKey = 3;
  if (has_indexkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->indexkey(), target);
  }

  // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocument ForwardedDocument = 4;
  if (has_forwardeddocument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->forwardeddocument(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Forwarding.ForwardedDocumentEvent)
  return target;
}

int ForwardedDocumentEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Timestamp Timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocumentId ForwardedDocumentId = 2;
    if (has_forwardeddocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forwardeddocumentid());
    }

    // optional bytes IndexKey = 3;
    if (has_indexkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->indexkey());
    }

    // optional .Diadoc.Api.Proto.Forwarding.ForwardedDocument ForwardedDocument = 4;
    if (has_forwardeddocument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forwardeddocument());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardedDocumentEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardedDocumentEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardedDocumentEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardedDocumentEvent::MergeFrom(const ForwardedDocumentEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      mutable_timestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_forwardeddocumentid()) {
      mutable_forwardeddocumentid()->::Diadoc::Api::Proto::Forwarding::ForwardedDocumentId::MergeFrom(from.forwardeddocumentid());
    }
    if (from.has_indexkey()) {
      set_indexkey(from.indexkey());
    }
    if (from.has_forwardeddocument()) {
      mutable_forwardeddocument()->::Diadoc::Api::Proto::Forwarding::ForwardedDocument::MergeFrom(from.forwardeddocument());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardedDocumentEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardedDocumentEvent::CopyFrom(const ForwardedDocumentEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardedDocumentEvent::IsInitialized() const {

  if (has_timestamp()) {
    if (!this->timestamp().IsInitialized()) return false;
  }
  if (has_forwardeddocumentid()) {
    if (!this->forwardeddocumentid().IsInitialized()) return false;
  }
  if (has_forwardeddocument()) {
    if (!this->forwardeddocument().IsInitialized()) return false;
  }
  return true;
}

void ForwardedDocumentEvent::Swap(ForwardedDocumentEvent* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(forwardeddocumentid_, other->forwardeddocumentid_);
    std::swap(indexkey_, other->indexkey_);
    std::swap(forwardeddocument_, other->forwardeddocument_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardedDocumentEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardedDocumentEvent_descriptor_;
  metadata.reflection = ForwardedDocumentEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Forwarding
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
