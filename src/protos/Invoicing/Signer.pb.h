// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invoicing/Signer.proto

#ifndef PROTOBUF_Invoicing_2fSigner_2eproto__INCLUDED
#define PROTOBUF_Invoicing_2fSigner_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Invoicing {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Invoicing_2fSigner_2eproto();
void protobuf_AssignDesc_Invoicing_2fSigner_2eproto();
void protobuf_ShutdownFile_Invoicing_2fSigner_2eproto();

class Signer;
class SignerDetails;

// ===================================================================

class Signer : public ::google::protobuf::Message {
 public:
  Signer();
  virtual ~Signer();

  Signer(const Signer& from);

  inline Signer& operator=(const Signer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Signer& default_instance();

  void Swap(Signer* other);

  // implements Message ----------------------------------------------

  Signer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Signer& from);
  void MergeFrom(const Signer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes SignerCertificate = 1;
  inline bool has_signercertificate() const;
  inline void clear_signercertificate();
  static const int kSignerCertificateFieldNumber = 1;
  inline const ::std::string& signercertificate() const;
  inline void set_signercertificate(const ::std::string& value);
  inline void set_signercertificate(const char* value);
  inline void set_signercertificate(const void* value, size_t size);
  inline ::std::string* mutable_signercertificate();
  inline ::std::string* release_signercertificate();
  inline void set_allocated_signercertificate(::std::string* signercertificate);

  // optional .Diadoc.Api.Proto.Invoicing.SignerDetails SignerDetails = 2;
  inline bool has_signerdetails() const;
  inline void clear_signerdetails();
  static const int kSignerDetailsFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Invoicing::SignerDetails& signerdetails() const;
  inline ::Diadoc::Api::Proto::Invoicing::SignerDetails* mutable_signerdetails();
  inline ::Diadoc::Api::Proto::Invoicing::SignerDetails* release_signerdetails();
  inline void set_allocated_signerdetails(::Diadoc::Api::Proto::Invoicing::SignerDetails* signerdetails);

  // optional string SignerCertificateThumbprint = 3;
  inline bool has_signercertificatethumbprint() const;
  inline void clear_signercertificatethumbprint();
  static const int kSignerCertificateThumbprintFieldNumber = 3;
  inline const ::std::string& signercertificatethumbprint() const;
  inline void set_signercertificatethumbprint(const ::std::string& value);
  inline void set_signercertificatethumbprint(const char* value);
  inline void set_signercertificatethumbprint(const char* value, size_t size);
  inline ::std::string* mutable_signercertificatethumbprint();
  inline ::std::string* release_signercertificatethumbprint();
  inline void set_allocated_signercertificatethumbprint(::std::string* signercertificatethumbprint);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Invoicing.Signer)
 private:
  inline void set_has_signercertificate();
  inline void clear_has_signercertificate();
  inline void set_has_signerdetails();
  inline void clear_has_signerdetails();
  inline void set_has_signercertificatethumbprint();
  inline void clear_has_signercertificatethumbprint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* signercertificate_;
  ::Diadoc::Api::Proto::Invoicing::SignerDetails* signerdetails_;
  ::std::string* signercertificatethumbprint_;
  friend void  protobuf_AddDesc_Invoicing_2fSigner_2eproto();
  friend void protobuf_AssignDesc_Invoicing_2fSigner_2eproto();
  friend void protobuf_ShutdownFile_Invoicing_2fSigner_2eproto();

  void InitAsDefaultInstance();
  static Signer* default_instance_;
};
// -------------------------------------------------------------------

class SignerDetails : public ::google::protobuf::Message {
 public:
  SignerDetails();
  virtual ~SignerDetails();

  SignerDetails(const SignerDetails& from);

  inline SignerDetails& operator=(const SignerDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignerDetails& default_instance();

  void Swap(SignerDetails* other);

  // implements Message ----------------------------------------------

  SignerDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignerDetails& from);
  void MergeFrom(const SignerDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Surname = 1;
  inline bool has_surname() const;
  inline void clear_surname();
  static const int kSurnameFieldNumber = 1;
  inline const ::std::string& surname() const;
  inline void set_surname(const ::std::string& value);
  inline void set_surname(const char* value);
  inline void set_surname(const char* value, size_t size);
  inline ::std::string* mutable_surname();
  inline ::std::string* release_surname();
  inline void set_allocated_surname(::std::string* surname);

  // required string FirstName = 2;
  inline bool has_firstname() const;
  inline void clear_firstname();
  static const int kFirstNameFieldNumber = 2;
  inline const ::std::string& firstname() const;
  inline void set_firstname(const ::std::string& value);
  inline void set_firstname(const char* value);
  inline void set_firstname(const char* value, size_t size);
  inline ::std::string* mutable_firstname();
  inline ::std::string* release_firstname();
  inline void set_allocated_firstname(::std::string* firstname);

  // optional string Patronymic = 3;
  inline bool has_patronymic() const;
  inline void clear_patronymic();
  static const int kPatronymicFieldNumber = 3;
  inline const ::std::string& patronymic() const;
  inline void set_patronymic(const ::std::string& value);
  inline void set_patronymic(const char* value);
  inline void set_patronymic(const char* value, size_t size);
  inline ::std::string* mutable_patronymic();
  inline ::std::string* release_patronymic();
  inline void set_allocated_patronymic(::std::string* patronymic);

  // optional string JobTitle = 4;
  inline bool has_jobtitle() const;
  inline void clear_jobtitle();
  static const int kJobTitleFieldNumber = 4;
  inline const ::std::string& jobtitle() const;
  inline void set_jobtitle(const ::std::string& value);
  inline void set_jobtitle(const char* value);
  inline void set_jobtitle(const char* value, size_t size);
  inline ::std::string* mutable_jobtitle();
  inline ::std::string* release_jobtitle();
  inline void set_allocated_jobtitle(::std::string* jobtitle);

  // optional string Inn = 5;
  inline bool has_inn() const;
  inline void clear_inn();
  static const int kInnFieldNumber = 5;
  inline const ::std::string& inn() const;
  inline void set_inn(const ::std::string& value);
  inline void set_inn(const char* value);
  inline void set_inn(const char* value, size_t size);
  inline ::std::string* mutable_inn();
  inline ::std::string* release_inn();
  inline void set_allocated_inn(::std::string* inn);

  // optional string SoleProprietorRegistrationCertificate = 6;
  inline bool has_soleproprietorregistrationcertificate() const;
  inline void clear_soleproprietorregistrationcertificate();
  static const int kSoleProprietorRegistrationCertificateFieldNumber = 6;
  inline const ::std::string& soleproprietorregistrationcertificate() const;
  inline void set_soleproprietorregistrationcertificate(const ::std::string& value);
  inline void set_soleproprietorregistrationcertificate(const char* value);
  inline void set_soleproprietorregistrationcertificate(const char* value, size_t size);
  inline ::std::string* mutable_soleproprietorregistrationcertificate();
  inline ::std::string* release_soleproprietorregistrationcertificate();
  inline void set_allocated_soleproprietorregistrationcertificate(::std::string* soleproprietorregistrationcertificate);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Invoicing.SignerDetails)
 private:
  inline void set_has_surname();
  inline void clear_has_surname();
  inline void set_has_firstname();
  inline void clear_has_firstname();
  inline void set_has_patronymic();
  inline void clear_has_patronymic();
  inline void set_has_jobtitle();
  inline void clear_has_jobtitle();
  inline void set_has_inn();
  inline void clear_has_inn();
  inline void set_has_soleproprietorregistrationcertificate();
  inline void clear_has_soleproprietorregistrationcertificate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* surname_;
  ::std::string* firstname_;
  ::std::string* patronymic_;
  ::std::string* jobtitle_;
  ::std::string* inn_;
  ::std::string* soleproprietorregistrationcertificate_;
  friend void  protobuf_AddDesc_Invoicing_2fSigner_2eproto();
  friend void protobuf_AssignDesc_Invoicing_2fSigner_2eproto();
  friend void protobuf_ShutdownFile_Invoicing_2fSigner_2eproto();

  void InitAsDefaultInstance();
  static SignerDetails* default_instance_;
};
// ===================================================================


// ===================================================================

// Signer

// optional bytes SignerCertificate = 1;
inline bool Signer::has_signercertificate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Signer::set_has_signercertificate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Signer::clear_has_signercertificate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Signer::clear_signercertificate() {
  if (signercertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signercertificate_->clear();
  }
  clear_has_signercertificate();
}
inline const ::std::string& Signer::signercertificate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Signer.SignerCertificate)
  return *signercertificate_;
}
inline void Signer::set_signercertificate(const ::std::string& value) {
  set_has_signercertificate();
  if (signercertificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signercertificate_ = new ::std::string;
  }
  signercertificate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Signer.SignerCertificate)
}
inline void Signer::set_signercertificate(const char* value) {
  set_has_signercertificate();
  if (signercertificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signercertificate_ = new ::std::string;
  }
  signercertificate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Signer.SignerCertificate)
}
inline void Signer::set_signercertificate(const void* value, size_t size) {
  set_has_signercertificate();
  if (signercertificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signercertificate_ = new ::std::string;
  }
  signercertificate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Signer.SignerCertificate)
}
inline ::std::string* Signer::mutable_signercertificate() {
  set_has_signercertificate();
  if (signercertificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signercertificate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Signer.SignerCertificate)
  return signercertificate_;
}
inline ::std::string* Signer::release_signercertificate() {
  clear_has_signercertificate();
  if (signercertificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signercertificate_;
    signercertificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Signer::set_allocated_signercertificate(::std::string* signercertificate) {
  if (signercertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signercertificate_;
  }
  if (signercertificate) {
    set_has_signercertificate();
    signercertificate_ = signercertificate;
  } else {
    clear_has_signercertificate();
    signercertificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Signer.SignerCertificate)
}

// optional .Diadoc.Api.Proto.Invoicing.SignerDetails SignerDetails = 2;
inline bool Signer::has_signerdetails() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Signer::set_has_signerdetails() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Signer::clear_has_signerdetails() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Signer::clear_signerdetails() {
  if (signerdetails_ != NULL) signerdetails_->::Diadoc::Api::Proto::Invoicing::SignerDetails::Clear();
  clear_has_signerdetails();
}
inline const ::Diadoc::Api::Proto::Invoicing::SignerDetails& Signer::signerdetails() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Signer.SignerDetails)
  return signerdetails_ != NULL ? *signerdetails_ : *default_instance_->signerdetails_;
}
inline ::Diadoc::Api::Proto::Invoicing::SignerDetails* Signer::mutable_signerdetails() {
  set_has_signerdetails();
  if (signerdetails_ == NULL) signerdetails_ = new ::Diadoc::Api::Proto::Invoicing::SignerDetails;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Signer.SignerDetails)
  return signerdetails_;
}
inline ::Diadoc::Api::Proto::Invoicing::SignerDetails* Signer::release_signerdetails() {
  clear_has_signerdetails();
  ::Diadoc::Api::Proto::Invoicing::SignerDetails* temp = signerdetails_;
  signerdetails_ = NULL;
  return temp;
}
inline void Signer::set_allocated_signerdetails(::Diadoc::Api::Proto::Invoicing::SignerDetails* signerdetails) {
  delete signerdetails_;
  signerdetails_ = signerdetails;
  if (signerdetails) {
    set_has_signerdetails();
  } else {
    clear_has_signerdetails();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Signer.SignerDetails)
}

// optional string SignerCertificateThumbprint = 3;
inline bool Signer::has_signercertificatethumbprint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Signer::set_has_signercertificatethumbprint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Signer::clear_has_signercertificatethumbprint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Signer::clear_signercertificatethumbprint() {
  if (signercertificatethumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signercertificatethumbprint_->clear();
  }
  clear_has_signercertificatethumbprint();
}
inline const ::std::string& Signer::signercertificatethumbprint() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Signer.SignerCertificateThumbprint)
  return *signercertificatethumbprint_;
}
inline void Signer::set_signercertificatethumbprint(const ::std::string& value) {
  set_has_signercertificatethumbprint();
  if (signercertificatethumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signercertificatethumbprint_ = new ::std::string;
  }
  signercertificatethumbprint_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Signer.SignerCertificateThumbprint)
}
inline void Signer::set_signercertificatethumbprint(const char* value) {
  set_has_signercertificatethumbprint();
  if (signercertificatethumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signercertificatethumbprint_ = new ::std::string;
  }
  signercertificatethumbprint_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Signer.SignerCertificateThumbprint)
}
inline void Signer::set_signercertificatethumbprint(const char* value, size_t size) {
  set_has_signercertificatethumbprint();
  if (signercertificatethumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signercertificatethumbprint_ = new ::std::string;
  }
  signercertificatethumbprint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Signer.SignerCertificateThumbprint)
}
inline ::std::string* Signer::mutable_signercertificatethumbprint() {
  set_has_signercertificatethumbprint();
  if (signercertificatethumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signercertificatethumbprint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Signer.SignerCertificateThumbprint)
  return signercertificatethumbprint_;
}
inline ::std::string* Signer::release_signercertificatethumbprint() {
  clear_has_signercertificatethumbprint();
  if (signercertificatethumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signercertificatethumbprint_;
    signercertificatethumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Signer::set_allocated_signercertificatethumbprint(::std::string* signercertificatethumbprint) {
  if (signercertificatethumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signercertificatethumbprint_;
  }
  if (signercertificatethumbprint) {
    set_has_signercertificatethumbprint();
    signercertificatethumbprint_ = signercertificatethumbprint;
  } else {
    clear_has_signercertificatethumbprint();
    signercertificatethumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Signer.SignerCertificateThumbprint)
}

// -------------------------------------------------------------------

// SignerDetails

// required string Surname = 1;
inline bool SignerDetails::has_surname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignerDetails::set_has_surname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignerDetails::clear_has_surname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignerDetails::clear_surname() {
  if (surname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    surname_->clear();
  }
  clear_has_surname();
}
inline const ::std::string& SignerDetails::surname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.SignerDetails.Surname)
  return *surname_;
}
inline void SignerDetails::set_surname(const ::std::string& value) {
  set_has_surname();
  if (surname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    surname_ = new ::std::string;
  }
  surname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.SignerDetails.Surname)
}
inline void SignerDetails::set_surname(const char* value) {
  set_has_surname();
  if (surname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    surname_ = new ::std::string;
  }
  surname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.SignerDetails.Surname)
}
inline void SignerDetails::set_surname(const char* value, size_t size) {
  set_has_surname();
  if (surname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    surname_ = new ::std::string;
  }
  surname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.SignerDetails.Surname)
}
inline ::std::string* SignerDetails::mutable_surname() {
  set_has_surname();
  if (surname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    surname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.SignerDetails.Surname)
  return surname_;
}
inline ::std::string* SignerDetails::release_surname() {
  clear_has_surname();
  if (surname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = surname_;
    surname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignerDetails::set_allocated_surname(::std::string* surname) {
  if (surname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete surname_;
  }
  if (surname) {
    set_has_surname();
    surname_ = surname;
  } else {
    clear_has_surname();
    surname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.SignerDetails.Surname)
}

// required string FirstName = 2;
inline bool SignerDetails::has_firstname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignerDetails::set_has_firstname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignerDetails::clear_has_firstname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignerDetails::clear_firstname() {
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstname_->clear();
  }
  clear_has_firstname();
}
inline const ::std::string& SignerDetails::firstname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.SignerDetails.FirstName)
  return *firstname_;
}
inline void SignerDetails::set_firstname(const ::std::string& value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.SignerDetails.FirstName)
}
inline void SignerDetails::set_firstname(const char* value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.SignerDetails.FirstName)
}
inline void SignerDetails::set_firstname(const char* value, size_t size) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.SignerDetails.FirstName)
}
inline ::std::string* SignerDetails::mutable_firstname() {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.SignerDetails.FirstName)
  return firstname_;
}
inline ::std::string* SignerDetails::release_firstname() {
  clear_has_firstname();
  if (firstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = firstname_;
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignerDetails::set_allocated_firstname(::std::string* firstname) {
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstname_;
  }
  if (firstname) {
    set_has_firstname();
    firstname_ = firstname;
  } else {
    clear_has_firstname();
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.SignerDetails.FirstName)
}

// optional string Patronymic = 3;
inline bool SignerDetails::has_patronymic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignerDetails::set_has_patronymic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignerDetails::clear_has_patronymic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignerDetails::clear_patronymic() {
  if (patronymic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patronymic_->clear();
  }
  clear_has_patronymic();
}
inline const ::std::string& SignerDetails::patronymic() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.SignerDetails.Patronymic)
  return *patronymic_;
}
inline void SignerDetails::set_patronymic(const ::std::string& value) {
  set_has_patronymic();
  if (patronymic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patronymic_ = new ::std::string;
  }
  patronymic_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.SignerDetails.Patronymic)
}
inline void SignerDetails::set_patronymic(const char* value) {
  set_has_patronymic();
  if (patronymic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patronymic_ = new ::std::string;
  }
  patronymic_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.SignerDetails.Patronymic)
}
inline void SignerDetails::set_patronymic(const char* value, size_t size) {
  set_has_patronymic();
  if (patronymic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patronymic_ = new ::std::string;
  }
  patronymic_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.SignerDetails.Patronymic)
}
inline ::std::string* SignerDetails::mutable_patronymic() {
  set_has_patronymic();
  if (patronymic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patronymic_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.SignerDetails.Patronymic)
  return patronymic_;
}
inline ::std::string* SignerDetails::release_patronymic() {
  clear_has_patronymic();
  if (patronymic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = patronymic_;
    patronymic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignerDetails::set_allocated_patronymic(::std::string* patronymic) {
  if (patronymic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patronymic_;
  }
  if (patronymic) {
    set_has_patronymic();
    patronymic_ = patronymic;
  } else {
    clear_has_patronymic();
    patronymic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.SignerDetails.Patronymic)
}

// optional string JobTitle = 4;
inline bool SignerDetails::has_jobtitle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignerDetails::set_has_jobtitle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignerDetails::clear_has_jobtitle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignerDetails::clear_jobtitle() {
  if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobtitle_->clear();
  }
  clear_has_jobtitle();
}
inline const ::std::string& SignerDetails::jobtitle() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.SignerDetails.JobTitle)
  return *jobtitle_;
}
inline void SignerDetails::set_jobtitle(const ::std::string& value) {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobtitle_ = new ::std::string;
  }
  jobtitle_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.SignerDetails.JobTitle)
}
inline void SignerDetails::set_jobtitle(const char* value) {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobtitle_ = new ::std::string;
  }
  jobtitle_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.SignerDetails.JobTitle)
}
inline void SignerDetails::set_jobtitle(const char* value, size_t size) {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobtitle_ = new ::std::string;
  }
  jobtitle_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.SignerDetails.JobTitle)
}
inline ::std::string* SignerDetails::mutable_jobtitle() {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobtitle_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.SignerDetails.JobTitle)
  return jobtitle_;
}
inline ::std::string* SignerDetails::release_jobtitle() {
  clear_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = jobtitle_;
    jobtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignerDetails::set_allocated_jobtitle(::std::string* jobtitle) {
  if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobtitle_;
  }
  if (jobtitle) {
    set_has_jobtitle();
    jobtitle_ = jobtitle;
  } else {
    clear_has_jobtitle();
    jobtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.SignerDetails.JobTitle)
}

// optional string Inn = 5;
inline bool SignerDetails::has_inn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SignerDetails::set_has_inn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SignerDetails::clear_has_inn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SignerDetails::clear_inn() {
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_->clear();
  }
  clear_has_inn();
}
inline const ::std::string& SignerDetails::inn() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.SignerDetails.Inn)
  return *inn_;
}
inline void SignerDetails::set_inn(const ::std::string& value) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.SignerDetails.Inn)
}
inline void SignerDetails::set_inn(const char* value) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.SignerDetails.Inn)
}
inline void SignerDetails::set_inn(const char* value, size_t size) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.SignerDetails.Inn)
}
inline ::std::string* SignerDetails::mutable_inn() {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.SignerDetails.Inn)
  return inn_;
}
inline ::std::string* SignerDetails::release_inn() {
  clear_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inn_;
    inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignerDetails::set_allocated_inn(::std::string* inn) {
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inn_;
  }
  if (inn) {
    set_has_inn();
    inn_ = inn;
  } else {
    clear_has_inn();
    inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.SignerDetails.Inn)
}

// optional string SoleProprietorRegistrationCertificate = 6;
inline bool SignerDetails::has_soleproprietorregistrationcertificate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SignerDetails::set_has_soleproprietorregistrationcertificate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SignerDetails::clear_has_soleproprietorregistrationcertificate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SignerDetails::clear_soleproprietorregistrationcertificate() {
  if (soleproprietorregistrationcertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soleproprietorregistrationcertificate_->clear();
  }
  clear_has_soleproprietorregistrationcertificate();
}
inline const ::std::string& SignerDetails::soleproprietorregistrationcertificate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.SignerDetails.SoleProprietorRegistrationCertificate)
  return *soleproprietorregistrationcertificate_;
}
inline void SignerDetails::set_soleproprietorregistrationcertificate(const ::std::string& value) {
  set_has_soleproprietorregistrationcertificate();
  if (soleproprietorregistrationcertificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soleproprietorregistrationcertificate_ = new ::std::string;
  }
  soleproprietorregistrationcertificate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.SignerDetails.SoleProprietorRegistrationCertificate)
}
inline void SignerDetails::set_soleproprietorregistrationcertificate(const char* value) {
  set_has_soleproprietorregistrationcertificate();
  if (soleproprietorregistrationcertificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soleproprietorregistrationcertificate_ = new ::std::string;
  }
  soleproprietorregistrationcertificate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.SignerDetails.SoleProprietorRegistrationCertificate)
}
inline void SignerDetails::set_soleproprietorregistrationcertificate(const char* value, size_t size) {
  set_has_soleproprietorregistrationcertificate();
  if (soleproprietorregistrationcertificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soleproprietorregistrationcertificate_ = new ::std::string;
  }
  soleproprietorregistrationcertificate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.SignerDetails.SoleProprietorRegistrationCertificate)
}
inline ::std::string* SignerDetails::mutable_soleproprietorregistrationcertificate() {
  set_has_soleproprietorregistrationcertificate();
  if (soleproprietorregistrationcertificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soleproprietorregistrationcertificate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.SignerDetails.SoleProprietorRegistrationCertificate)
  return soleproprietorregistrationcertificate_;
}
inline ::std::string* SignerDetails::release_soleproprietorregistrationcertificate() {
  clear_has_soleproprietorregistrationcertificate();
  if (soleproprietorregistrationcertificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = soleproprietorregistrationcertificate_;
    soleproprietorregistrationcertificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignerDetails::set_allocated_soleproprietorregistrationcertificate(::std::string* soleproprietorregistrationcertificate) {
  if (soleproprietorregistrationcertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete soleproprietorregistrationcertificate_;
  }
  if (soleproprietorregistrationcertificate) {
    set_has_soleproprietorregistrationcertificate();
    soleproprietorregistrationcertificate_ = soleproprietorregistrationcertificate;
  } else {
    clear_has_soleproprietorregistrationcertificate();
    soleproprietorregistrationcertificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.SignerDetails.SoleProprietorRegistrationCertificate)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Invoicing
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Invoicing_2fSigner_2eproto__INCLUDED
