// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invoicing/ExtendedOrganizationInfo.proto

#ifndef PROTOBUF_Invoicing_2fExtendedOrganizationInfo_2eproto__INCLUDED
#define PROTOBUF_Invoicing_2fExtendedOrganizationInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Address.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Invoicing {
namespace Organizations {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Invoicing_2fExtendedOrganizationInfo_2eproto();
void protobuf_AssignDesc_Invoicing_2fExtendedOrganizationInfo_2eproto();
void protobuf_ShutdownFile_Invoicing_2fExtendedOrganizationInfo_2eproto();

class ExtendedOrganizationInfo;

enum OrgType {
  LegalEntity = 1,
  IndividualEntity = 2,
  ForeignEntity = 3,
  PhysicalEntity = 4
};
bool OrgType_IsValid(int value);
const OrgType OrgType_MIN = LegalEntity;
const OrgType OrgType_MAX = PhysicalEntity;
const int OrgType_ARRAYSIZE = OrgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrgType_descriptor();
inline const ::std::string& OrgType_Name(OrgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrgType_descriptor(), value);
}
inline bool OrgType_Parse(
    const ::std::string& name, OrgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrgType>(
    OrgType_descriptor(), name, value);
}
// ===================================================================

class ExtendedOrganizationInfo : public ::google::protobuf::Message {
 public:
  ExtendedOrganizationInfo();
  virtual ~ExtendedOrganizationInfo();

  ExtendedOrganizationInfo(const ExtendedOrganizationInfo& from);

  inline ExtendedOrganizationInfo& operator=(const ExtendedOrganizationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtendedOrganizationInfo& default_instance();

  void Swap(ExtendedOrganizationInfo* other);

  // implements Message ----------------------------------------------

  ExtendedOrganizationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtendedOrganizationInfo& from);
  void MergeFrom(const ExtendedOrganizationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BoxId = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 1;
  inline const ::std::string& boxid() const;
  inline void set_boxid(const ::std::string& value);
  inline void set_boxid(const char* value);
  inline void set_boxid(const char* value, size_t size);
  inline ::std::string* mutable_boxid();
  inline ::std::string* release_boxid();
  inline void set_allocated_boxid(::std::string* boxid);

  // optional string OrgName = 2;
  inline bool has_orgname() const;
  inline void clear_orgname();
  static const int kOrgNameFieldNumber = 2;
  inline const ::std::string& orgname() const;
  inline void set_orgname(const ::std::string& value);
  inline void set_orgname(const char* value);
  inline void set_orgname(const char* value, size_t size);
  inline ::std::string* mutable_orgname();
  inline ::std::string* release_orgname();
  inline void set_allocated_orgname(::std::string* orgname);

  // optional string Inn = 3;
  inline bool has_inn() const;
  inline void clear_inn();
  static const int kInnFieldNumber = 3;
  inline const ::std::string& inn() const;
  inline void set_inn(const ::std::string& value);
  inline void set_inn(const char* value);
  inline void set_inn(const char* value, size_t size);
  inline ::std::string* mutable_inn();
  inline ::std::string* release_inn();
  inline void set_allocated_inn(::std::string* inn);

  // optional string Kpp = 4;
  inline bool has_kpp() const;
  inline void clear_kpp();
  static const int kKppFieldNumber = 4;
  inline const ::std::string& kpp() const;
  inline void set_kpp(const ::std::string& value);
  inline void set_kpp(const char* value);
  inline void set_kpp(const char* value, size_t size);
  inline ::std::string* mutable_kpp();
  inline ::std::string* release_kpp();
  inline void set_allocated_kpp(::std::string* kpp);

  // optional .Diadoc.Api.Proto.Address Address = 5;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Address& address() const;
  inline ::Diadoc::Api::Proto::Address* mutable_address();
  inline ::Diadoc::Api::Proto::Address* release_address();
  inline void set_allocated_address(::Diadoc::Api::Proto::Address* address);

  // optional string FnsParticipantId = 6;
  inline bool has_fnsparticipantid() const;
  inline void clear_fnsparticipantid();
  static const int kFnsParticipantIdFieldNumber = 6;
  inline const ::std::string& fnsparticipantid() const;
  inline void set_fnsparticipantid(const ::std::string& value);
  inline void set_fnsparticipantid(const char* value);
  inline void set_fnsparticipantid(const char* value, size_t size);
  inline ::std::string* mutable_fnsparticipantid();
  inline ::std::string* release_fnsparticipantid();
  inline void set_allocated_fnsparticipantid(::std::string* fnsparticipantid);

  // required .Diadoc.Api.Proto.Invoicing.Organizations.OrgType OrgType = 7;
  inline bool has_orgtype() const;
  inline void clear_orgtype();
  static const int kOrgTypeFieldNumber = 7;
  inline ::Diadoc::Api::Proto::Invoicing::Organizations::OrgType orgtype() const;
  inline void set_orgtype(::Diadoc::Api::Proto::Invoicing::Organizations::OrgType value);

  // optional string Okopf = 8;
  inline bool has_okopf() const;
  inline void clear_okopf();
  static const int kOkopfFieldNumber = 8;
  inline const ::std::string& okopf() const;
  inline void set_okopf(const ::std::string& value);
  inline void set_okopf(const char* value);
  inline void set_okopf(const char* value, size_t size);
  inline ::std::string* mutable_okopf();
  inline ::std::string* release_okopf();
  inline void set_allocated_okopf(::std::string* okopf);

  // optional string Okpo = 9;
  inline bool has_okpo() const;
  inline void clear_okpo();
  static const int kOkpoFieldNumber = 9;
  inline const ::std::string& okpo() const;
  inline void set_okpo(const ::std::string& value);
  inline void set_okpo(const char* value);
  inline void set_okpo(const char* value, size_t size);
  inline ::std::string* mutable_okpo();
  inline ::std::string* release_okpo();
  inline void set_allocated_okpo(::std::string* okpo);

  // optional string Okdp = 10;
  inline bool has_okdp() const;
  inline void clear_okdp();
  static const int kOkdpFieldNumber = 10;
  inline const ::std::string& okdp() const;
  inline void set_okdp(const ::std::string& value);
  inline void set_okdp(const char* value);
  inline void set_okdp(const char* value, size_t size);
  inline ::std::string* mutable_okdp();
  inline ::std::string* release_okdp();
  inline void set_allocated_okdp(::std::string* okdp);

  // optional string Phone = 11;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 11;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // optional string Email = 12;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 12;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional string CorrespondentAccount = 13;
  inline bool has_correspondentaccount() const;
  inline void clear_correspondentaccount();
  static const int kCorrespondentAccountFieldNumber = 13;
  inline const ::std::string& correspondentaccount() const;
  inline void set_correspondentaccount(const ::std::string& value);
  inline void set_correspondentaccount(const char* value);
  inline void set_correspondentaccount(const char* value, size_t size);
  inline ::std::string* mutable_correspondentaccount();
  inline ::std::string* release_correspondentaccount();
  inline void set_allocated_correspondentaccount(::std::string* correspondentaccount);

  // optional string BankAccountNumber = 14;
  inline bool has_bankaccountnumber() const;
  inline void clear_bankaccountnumber();
  static const int kBankAccountNumberFieldNumber = 14;
  inline const ::std::string& bankaccountnumber() const;
  inline void set_bankaccountnumber(const ::std::string& value);
  inline void set_bankaccountnumber(const char* value);
  inline void set_bankaccountnumber(const char* value, size_t size);
  inline ::std::string* mutable_bankaccountnumber();
  inline ::std::string* release_bankaccountnumber();
  inline void set_allocated_bankaccountnumber(::std::string* bankaccountnumber);

  // optional string BankName = 15;
  inline bool has_bankname() const;
  inline void clear_bankname();
  static const int kBankNameFieldNumber = 15;
  inline const ::std::string& bankname() const;
  inline void set_bankname(const ::std::string& value);
  inline void set_bankname(const char* value);
  inline void set_bankname(const char* value, size_t size);
  inline ::std::string* mutable_bankname();
  inline ::std::string* release_bankname();
  inline void set_allocated_bankname(::std::string* bankname);

  // optional string BankId = 16;
  inline bool has_bankid() const;
  inline void clear_bankid();
  static const int kBankIdFieldNumber = 16;
  inline const ::std::string& bankid() const;
  inline void set_bankid(const ::std::string& value);
  inline void set_bankid(const char* value);
  inline void set_bankid(const char* value, size_t size);
  inline ::std::string* mutable_bankid();
  inline ::std::string* release_bankid();
  inline void set_allocated_bankid(::std::string* bankid);

  // optional string Department = 17;
  inline bool has_department() const;
  inline void clear_department();
  static const int kDepartmentFieldNumber = 17;
  inline const ::std::string& department() const;
  inline void set_department(const ::std::string& value);
  inline void set_department(const char* value);
  inline void set_department(const char* value, size_t size);
  inline ::std::string* mutable_department();
  inline ::std::string* release_department();
  inline void set_allocated_department(::std::string* department);

  // optional string OrganizationAdditionalInfo = 18;
  inline bool has_organizationadditionalinfo() const;
  inline void clear_organizationadditionalinfo();
  static const int kOrganizationAdditionalInfoFieldNumber = 18;
  inline const ::std::string& organizationadditionalinfo() const;
  inline void set_organizationadditionalinfo(const ::std::string& value);
  inline void set_organizationadditionalinfo(const char* value);
  inline void set_organizationadditionalinfo(const char* value, size_t size);
  inline ::std::string* mutable_organizationadditionalinfo();
  inline ::std::string* release_organizationadditionalinfo();
  inline void set_allocated_organizationadditionalinfo(::std::string* organizationadditionalinfo);

  // optional string OrganizationOrPersonInfo = 19;
  inline bool has_organizationorpersoninfo() const;
  inline void clear_organizationorpersoninfo();
  static const int kOrganizationOrPersonInfoFieldNumber = 19;
  inline const ::std::string& organizationorpersoninfo() const;
  inline void set_organizationorpersoninfo(const ::std::string& value);
  inline void set_organizationorpersoninfo(const char* value);
  inline void set_organizationorpersoninfo(const char* value, size_t size);
  inline ::std::string* mutable_organizationorpersoninfo();
  inline ::std::string* release_organizationorpersoninfo();
  inline void set_allocated_organizationorpersoninfo(::std::string* organizationorpersoninfo);

  // optional string IndividualEntityRegistrationCertificate = 20;
  inline bool has_individualentityregistrationcertificate() const;
  inline void clear_individualentityregistrationcertificate();
  static const int kIndividualEntityRegistrationCertificateFieldNumber = 20;
  inline const ::std::string& individualentityregistrationcertificate() const;
  inline void set_individualentityregistrationcertificate(const ::std::string& value);
  inline void set_individualentityregistrationcertificate(const char* value);
  inline void set_individualentityregistrationcertificate(const char* value, size_t size);
  inline ::std::string* mutable_individualentityregistrationcertificate();
  inline ::std::string* release_individualentityregistrationcertificate();
  inline void set_allocated_individualentityregistrationcertificate(::std::string* individualentityregistrationcertificate);

  // optional string Country = 21;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 21;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_orgname();
  inline void clear_has_orgname();
  inline void set_has_inn();
  inline void clear_has_inn();
  inline void set_has_kpp();
  inline void clear_has_kpp();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_fnsparticipantid();
  inline void clear_has_fnsparticipantid();
  inline void set_has_orgtype();
  inline void clear_has_orgtype();
  inline void set_has_okopf();
  inline void clear_has_okopf();
  inline void set_has_okpo();
  inline void clear_has_okpo();
  inline void set_has_okdp();
  inline void clear_has_okdp();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_correspondentaccount();
  inline void clear_has_correspondentaccount();
  inline void set_has_bankaccountnumber();
  inline void clear_has_bankaccountnumber();
  inline void set_has_bankname();
  inline void clear_has_bankname();
  inline void set_has_bankid();
  inline void clear_has_bankid();
  inline void set_has_department();
  inline void clear_has_department();
  inline void set_has_organizationadditionalinfo();
  inline void clear_has_organizationadditionalinfo();
  inline void set_has_organizationorpersoninfo();
  inline void clear_has_organizationorpersoninfo();
  inline void set_has_individualentityregistrationcertificate();
  inline void clear_has_individualentityregistrationcertificate();
  inline void set_has_country();
  inline void clear_has_country();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* boxid_;
  ::std::string* orgname_;
  ::std::string* inn_;
  ::std::string* kpp_;
  ::Diadoc::Api::Proto::Address* address_;
  ::std::string* fnsparticipantid_;
  ::std::string* okopf_;
  ::std::string* okpo_;
  ::std::string* okdp_;
  ::std::string* phone_;
  ::std::string* email_;
  ::std::string* correspondentaccount_;
  ::std::string* bankaccountnumber_;
  ::std::string* bankname_;
  ::std::string* bankid_;
  ::std::string* department_;
  ::std::string* organizationadditionalinfo_;
  ::std::string* organizationorpersoninfo_;
  ::std::string* individualentityregistrationcertificate_;
  ::std::string* country_;
  int orgtype_;
  friend void  protobuf_AddDesc_Invoicing_2fExtendedOrganizationInfo_2eproto();
  friend void protobuf_AssignDesc_Invoicing_2fExtendedOrganizationInfo_2eproto();
  friend void protobuf_ShutdownFile_Invoicing_2fExtendedOrganizationInfo_2eproto();

  void InitAsDefaultInstance();
  static ExtendedOrganizationInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ExtendedOrganizationInfo

// optional string BoxId = 1;
inline bool ExtendedOrganizationInfo::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtendedOrganizationInfo::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtendedOrganizationInfo::clear_boxid() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_->clear();
  }
  clear_has_boxid();
}
inline const ::std::string& ExtendedOrganizationInfo::boxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BoxId)
  return *boxid_;
}
inline void ExtendedOrganizationInfo::set_boxid(const ::std::string& value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BoxId)
}
inline void ExtendedOrganizationInfo::set_boxid(const char* value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BoxId)
}
inline void ExtendedOrganizationInfo::set_boxid(const char* value, size_t size) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BoxId)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_boxid() {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BoxId)
  return boxid_;
}
inline ::std::string* ExtendedOrganizationInfo::release_boxid() {
  clear_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = boxid_;
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_boxid(::std::string* boxid) {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (boxid) {
    set_has_boxid();
    boxid_ = boxid;
  } else {
    clear_has_boxid();
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BoxId)
}

// optional string OrgName = 2;
inline bool ExtendedOrganizationInfo::has_orgname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_orgname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtendedOrganizationInfo::clear_has_orgname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtendedOrganizationInfo::clear_orgname() {
  if (orgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgname_->clear();
  }
  clear_has_orgname();
}
inline const ::std::string& ExtendedOrganizationInfo::orgname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrgName)
  return *orgname_;
}
inline void ExtendedOrganizationInfo::set_orgname(const ::std::string& value) {
  set_has_orgname();
  if (orgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgname_ = new ::std::string;
  }
  orgname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrgName)
}
inline void ExtendedOrganizationInfo::set_orgname(const char* value) {
  set_has_orgname();
  if (orgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgname_ = new ::std::string;
  }
  orgname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrgName)
}
inline void ExtendedOrganizationInfo::set_orgname(const char* value, size_t size) {
  set_has_orgname();
  if (orgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgname_ = new ::std::string;
  }
  orgname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrgName)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_orgname() {
  set_has_orgname();
  if (orgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrgName)
  return orgname_;
}
inline ::std::string* ExtendedOrganizationInfo::release_orgname() {
  clear_has_orgname();
  if (orgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = orgname_;
    orgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_orgname(::std::string* orgname) {
  if (orgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgname_;
  }
  if (orgname) {
    set_has_orgname();
    orgname_ = orgname;
  } else {
    clear_has_orgname();
    orgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrgName)
}

// optional string Inn = 3;
inline bool ExtendedOrganizationInfo::has_inn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_inn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExtendedOrganizationInfo::clear_has_inn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExtendedOrganizationInfo::clear_inn() {
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_->clear();
  }
  clear_has_inn();
}
inline const ::std::string& ExtendedOrganizationInfo::inn() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Inn)
  return *inn_;
}
inline void ExtendedOrganizationInfo::set_inn(const ::std::string& value) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Inn)
}
inline void ExtendedOrganizationInfo::set_inn(const char* value) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Inn)
}
inline void ExtendedOrganizationInfo::set_inn(const char* value, size_t size) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Inn)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_inn() {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Inn)
  return inn_;
}
inline ::std::string* ExtendedOrganizationInfo::release_inn() {
  clear_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inn_;
    inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_inn(::std::string* inn) {
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inn_;
  }
  if (inn) {
    set_has_inn();
    inn_ = inn;
  } else {
    clear_has_inn();
    inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Inn)
}

// optional string Kpp = 4;
inline bool ExtendedOrganizationInfo::has_kpp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_kpp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExtendedOrganizationInfo::clear_has_kpp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExtendedOrganizationInfo::clear_kpp() {
  if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_->clear();
  }
  clear_has_kpp();
}
inline const ::std::string& ExtendedOrganizationInfo::kpp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Kpp)
  return *kpp_;
}
inline void ExtendedOrganizationInfo::set_kpp(const ::std::string& value) {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  kpp_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Kpp)
}
inline void ExtendedOrganizationInfo::set_kpp(const char* value) {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  kpp_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Kpp)
}
inline void ExtendedOrganizationInfo::set_kpp(const char* value, size_t size) {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  kpp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Kpp)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_kpp() {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Kpp)
  return kpp_;
}
inline ::std::string* ExtendedOrganizationInfo::release_kpp() {
  clear_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = kpp_;
    kpp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_kpp(::std::string* kpp) {
  if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kpp_;
  }
  if (kpp) {
    set_has_kpp();
    kpp_ = kpp;
  } else {
    clear_has_kpp();
    kpp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Kpp)
}

// optional .Diadoc.Api.Proto.Address Address = 5;
inline bool ExtendedOrganizationInfo::has_address() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_address() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExtendedOrganizationInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExtendedOrganizationInfo::clear_address() {
  if (address_ != NULL) address_->::Diadoc::Api::Proto::Address::Clear();
  clear_has_address();
}
inline const ::Diadoc::Api::Proto::Address& ExtendedOrganizationInfo::address() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::Diadoc::Api::Proto::Address* ExtendedOrganizationInfo::mutable_address() {
  set_has_address();
  if (address_ == NULL) address_ = new ::Diadoc::Api::Proto::Address;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Address)
  return address_;
}
inline ::Diadoc::Api::Proto::Address* ExtendedOrganizationInfo::release_address() {
  clear_has_address();
  ::Diadoc::Api::Proto::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline void ExtendedOrganizationInfo::set_allocated_address(::Diadoc::Api::Proto::Address* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Address)
}

// optional string FnsParticipantId = 6;
inline bool ExtendedOrganizationInfo::has_fnsparticipantid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_fnsparticipantid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExtendedOrganizationInfo::clear_has_fnsparticipantid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExtendedOrganizationInfo::clear_fnsparticipantid() {
  if (fnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fnsparticipantid_->clear();
  }
  clear_has_fnsparticipantid();
}
inline const ::std::string& ExtendedOrganizationInfo::fnsparticipantid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.FnsParticipantId)
  return *fnsparticipantid_;
}
inline void ExtendedOrganizationInfo::set_fnsparticipantid(const ::std::string& value) {
  set_has_fnsparticipantid();
  if (fnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fnsparticipantid_ = new ::std::string;
  }
  fnsparticipantid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.FnsParticipantId)
}
inline void ExtendedOrganizationInfo::set_fnsparticipantid(const char* value) {
  set_has_fnsparticipantid();
  if (fnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fnsparticipantid_ = new ::std::string;
  }
  fnsparticipantid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.FnsParticipantId)
}
inline void ExtendedOrganizationInfo::set_fnsparticipantid(const char* value, size_t size) {
  set_has_fnsparticipantid();
  if (fnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fnsparticipantid_ = new ::std::string;
  }
  fnsparticipantid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.FnsParticipantId)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_fnsparticipantid() {
  set_has_fnsparticipantid();
  if (fnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fnsparticipantid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.FnsParticipantId)
  return fnsparticipantid_;
}
inline ::std::string* ExtendedOrganizationInfo::release_fnsparticipantid() {
  clear_has_fnsparticipantid();
  if (fnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fnsparticipantid_;
    fnsparticipantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_fnsparticipantid(::std::string* fnsparticipantid) {
  if (fnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fnsparticipantid_;
  }
  if (fnsparticipantid) {
    set_has_fnsparticipantid();
    fnsparticipantid_ = fnsparticipantid;
  } else {
    clear_has_fnsparticipantid();
    fnsparticipantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.FnsParticipantId)
}

// required .Diadoc.Api.Proto.Invoicing.Organizations.OrgType OrgType = 7;
inline bool ExtendedOrganizationInfo::has_orgtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_orgtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExtendedOrganizationInfo::clear_has_orgtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExtendedOrganizationInfo::clear_orgtype() {
  orgtype_ = 1;
  clear_has_orgtype();
}
inline ::Diadoc::Api::Proto::Invoicing::Organizations::OrgType ExtendedOrganizationInfo::orgtype() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrgType)
  return static_cast< ::Diadoc::Api::Proto::Invoicing::Organizations::OrgType >(orgtype_);
}
inline void ExtendedOrganizationInfo::set_orgtype(::Diadoc::Api::Proto::Invoicing::Organizations::OrgType value) {
  assert(::Diadoc::Api::Proto::Invoicing::Organizations::OrgType_IsValid(value));
  set_has_orgtype();
  orgtype_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrgType)
}

// optional string Okopf = 8;
inline bool ExtendedOrganizationInfo::has_okopf() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_okopf() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ExtendedOrganizationInfo::clear_has_okopf() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ExtendedOrganizationInfo::clear_okopf() {
  if (okopf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    okopf_->clear();
  }
  clear_has_okopf();
}
inline const ::std::string& ExtendedOrganizationInfo::okopf() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okopf)
  return *okopf_;
}
inline void ExtendedOrganizationInfo::set_okopf(const ::std::string& value) {
  set_has_okopf();
  if (okopf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    okopf_ = new ::std::string;
  }
  okopf_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okopf)
}
inline void ExtendedOrganizationInfo::set_okopf(const char* value) {
  set_has_okopf();
  if (okopf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    okopf_ = new ::std::string;
  }
  okopf_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okopf)
}
inline void ExtendedOrganizationInfo::set_okopf(const char* value, size_t size) {
  set_has_okopf();
  if (okopf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    okopf_ = new ::std::string;
  }
  okopf_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okopf)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_okopf() {
  set_has_okopf();
  if (okopf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    okopf_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okopf)
  return okopf_;
}
inline ::std::string* ExtendedOrganizationInfo::release_okopf() {
  clear_has_okopf();
  if (okopf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = okopf_;
    okopf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_okopf(::std::string* okopf) {
  if (okopf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete okopf_;
  }
  if (okopf) {
    set_has_okopf();
    okopf_ = okopf;
  } else {
    clear_has_okopf();
    okopf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okopf)
}

// optional string Okpo = 9;
inline bool ExtendedOrganizationInfo::has_okpo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_okpo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ExtendedOrganizationInfo::clear_has_okpo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ExtendedOrganizationInfo::clear_okpo() {
  if (okpo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    okpo_->clear();
  }
  clear_has_okpo();
}
inline const ::std::string& ExtendedOrganizationInfo::okpo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okpo)
  return *okpo_;
}
inline void ExtendedOrganizationInfo::set_okpo(const ::std::string& value) {
  set_has_okpo();
  if (okpo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    okpo_ = new ::std::string;
  }
  okpo_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okpo)
}
inline void ExtendedOrganizationInfo::set_okpo(const char* value) {
  set_has_okpo();
  if (okpo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    okpo_ = new ::std::string;
  }
  okpo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okpo)
}
inline void ExtendedOrganizationInfo::set_okpo(const char* value, size_t size) {
  set_has_okpo();
  if (okpo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    okpo_ = new ::std::string;
  }
  okpo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okpo)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_okpo() {
  set_has_okpo();
  if (okpo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    okpo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okpo)
  return okpo_;
}
inline ::std::string* ExtendedOrganizationInfo::release_okpo() {
  clear_has_okpo();
  if (okpo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = okpo_;
    okpo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_okpo(::std::string* okpo) {
  if (okpo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete okpo_;
  }
  if (okpo) {
    set_has_okpo();
    okpo_ = okpo;
  } else {
    clear_has_okpo();
    okpo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okpo)
}

// optional string Okdp = 10;
inline bool ExtendedOrganizationInfo::has_okdp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_okdp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ExtendedOrganizationInfo::clear_has_okdp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ExtendedOrganizationInfo::clear_okdp() {
  if (okdp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    okdp_->clear();
  }
  clear_has_okdp();
}
inline const ::std::string& ExtendedOrganizationInfo::okdp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okdp)
  return *okdp_;
}
inline void ExtendedOrganizationInfo::set_okdp(const ::std::string& value) {
  set_has_okdp();
  if (okdp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    okdp_ = new ::std::string;
  }
  okdp_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okdp)
}
inline void ExtendedOrganizationInfo::set_okdp(const char* value) {
  set_has_okdp();
  if (okdp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    okdp_ = new ::std::string;
  }
  okdp_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okdp)
}
inline void ExtendedOrganizationInfo::set_okdp(const char* value, size_t size) {
  set_has_okdp();
  if (okdp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    okdp_ = new ::std::string;
  }
  okdp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okdp)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_okdp() {
  set_has_okdp();
  if (okdp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    okdp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okdp)
  return okdp_;
}
inline ::std::string* ExtendedOrganizationInfo::release_okdp() {
  clear_has_okdp();
  if (okdp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = okdp_;
    okdp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_okdp(::std::string* okdp) {
  if (okdp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete okdp_;
  }
  if (okdp) {
    set_has_okdp();
    okdp_ = okdp;
  } else {
    clear_has_okdp();
    okdp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Okdp)
}

// optional string Phone = 11;
inline bool ExtendedOrganizationInfo::has_phone() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_phone() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ExtendedOrganizationInfo::clear_has_phone() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ExtendedOrganizationInfo::clear_phone() {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& ExtendedOrganizationInfo::phone() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Phone)
  return *phone_;
}
inline void ExtendedOrganizationInfo::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Phone)
}
inline void ExtendedOrganizationInfo::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Phone)
}
inline void ExtendedOrganizationInfo::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Phone)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Phone)
  return phone_;
}
inline ::std::string* ExtendedOrganizationInfo::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Phone)
}

// optional string Email = 12;
inline bool ExtendedOrganizationInfo::has_email() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_email() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ExtendedOrganizationInfo::clear_has_email() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ExtendedOrganizationInfo::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& ExtendedOrganizationInfo::email() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Email)
  return *email_;
}
inline void ExtendedOrganizationInfo::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Email)
}
inline void ExtendedOrganizationInfo::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Email)
}
inline void ExtendedOrganizationInfo::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Email)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Email)
  return email_;
}
inline ::std::string* ExtendedOrganizationInfo::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Email)
}

// optional string CorrespondentAccount = 13;
inline bool ExtendedOrganizationInfo::has_correspondentaccount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_correspondentaccount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ExtendedOrganizationInfo::clear_has_correspondentaccount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ExtendedOrganizationInfo::clear_correspondentaccount() {
  if (correspondentaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    correspondentaccount_->clear();
  }
  clear_has_correspondentaccount();
}
inline const ::std::string& ExtendedOrganizationInfo::correspondentaccount() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.CorrespondentAccount)
  return *correspondentaccount_;
}
inline void ExtendedOrganizationInfo::set_correspondentaccount(const ::std::string& value) {
  set_has_correspondentaccount();
  if (correspondentaccount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    correspondentaccount_ = new ::std::string;
  }
  correspondentaccount_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.CorrespondentAccount)
}
inline void ExtendedOrganizationInfo::set_correspondentaccount(const char* value) {
  set_has_correspondentaccount();
  if (correspondentaccount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    correspondentaccount_ = new ::std::string;
  }
  correspondentaccount_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.CorrespondentAccount)
}
inline void ExtendedOrganizationInfo::set_correspondentaccount(const char* value, size_t size) {
  set_has_correspondentaccount();
  if (correspondentaccount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    correspondentaccount_ = new ::std::string;
  }
  correspondentaccount_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.CorrespondentAccount)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_correspondentaccount() {
  set_has_correspondentaccount();
  if (correspondentaccount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    correspondentaccount_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.CorrespondentAccount)
  return correspondentaccount_;
}
inline ::std::string* ExtendedOrganizationInfo::release_correspondentaccount() {
  clear_has_correspondentaccount();
  if (correspondentaccount_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = correspondentaccount_;
    correspondentaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_correspondentaccount(::std::string* correspondentaccount) {
  if (correspondentaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete correspondentaccount_;
  }
  if (correspondentaccount) {
    set_has_correspondentaccount();
    correspondentaccount_ = correspondentaccount;
  } else {
    clear_has_correspondentaccount();
    correspondentaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.CorrespondentAccount)
}

// optional string BankAccountNumber = 14;
inline bool ExtendedOrganizationInfo::has_bankaccountnumber() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_bankaccountnumber() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ExtendedOrganizationInfo::clear_has_bankaccountnumber() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ExtendedOrganizationInfo::clear_bankaccountnumber() {
  if (bankaccountnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bankaccountnumber_->clear();
  }
  clear_has_bankaccountnumber();
}
inline const ::std::string& ExtendedOrganizationInfo::bankaccountnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankAccountNumber)
  return *bankaccountnumber_;
}
inline void ExtendedOrganizationInfo::set_bankaccountnumber(const ::std::string& value) {
  set_has_bankaccountnumber();
  if (bankaccountnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bankaccountnumber_ = new ::std::string;
  }
  bankaccountnumber_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankAccountNumber)
}
inline void ExtendedOrganizationInfo::set_bankaccountnumber(const char* value) {
  set_has_bankaccountnumber();
  if (bankaccountnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bankaccountnumber_ = new ::std::string;
  }
  bankaccountnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankAccountNumber)
}
inline void ExtendedOrganizationInfo::set_bankaccountnumber(const char* value, size_t size) {
  set_has_bankaccountnumber();
  if (bankaccountnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bankaccountnumber_ = new ::std::string;
  }
  bankaccountnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankAccountNumber)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_bankaccountnumber() {
  set_has_bankaccountnumber();
  if (bankaccountnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bankaccountnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankAccountNumber)
  return bankaccountnumber_;
}
inline ::std::string* ExtendedOrganizationInfo::release_bankaccountnumber() {
  clear_has_bankaccountnumber();
  if (bankaccountnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bankaccountnumber_;
    bankaccountnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_bankaccountnumber(::std::string* bankaccountnumber) {
  if (bankaccountnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bankaccountnumber_;
  }
  if (bankaccountnumber) {
    set_has_bankaccountnumber();
    bankaccountnumber_ = bankaccountnumber;
  } else {
    clear_has_bankaccountnumber();
    bankaccountnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankAccountNumber)
}

// optional string BankName = 15;
inline bool ExtendedOrganizationInfo::has_bankname() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_bankname() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ExtendedOrganizationInfo::clear_has_bankname() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ExtendedOrganizationInfo::clear_bankname() {
  if (bankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bankname_->clear();
  }
  clear_has_bankname();
}
inline const ::std::string& ExtendedOrganizationInfo::bankname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankName)
  return *bankname_;
}
inline void ExtendedOrganizationInfo::set_bankname(const ::std::string& value) {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bankname_ = new ::std::string;
  }
  bankname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankName)
}
inline void ExtendedOrganizationInfo::set_bankname(const char* value) {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bankname_ = new ::std::string;
  }
  bankname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankName)
}
inline void ExtendedOrganizationInfo::set_bankname(const char* value, size_t size) {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bankname_ = new ::std::string;
  }
  bankname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankName)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_bankname() {
  set_has_bankname();
  if (bankname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bankname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankName)
  return bankname_;
}
inline ::std::string* ExtendedOrganizationInfo::release_bankname() {
  clear_has_bankname();
  if (bankname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bankname_;
    bankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_bankname(::std::string* bankname) {
  if (bankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bankname_;
  }
  if (bankname) {
    set_has_bankname();
    bankname_ = bankname;
  } else {
    clear_has_bankname();
    bankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankName)
}

// optional string BankId = 16;
inline bool ExtendedOrganizationInfo::has_bankid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_bankid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ExtendedOrganizationInfo::clear_has_bankid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ExtendedOrganizationInfo::clear_bankid() {
  if (bankid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bankid_->clear();
  }
  clear_has_bankid();
}
inline const ::std::string& ExtendedOrganizationInfo::bankid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankId)
  return *bankid_;
}
inline void ExtendedOrganizationInfo::set_bankid(const ::std::string& value) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankId)
}
inline void ExtendedOrganizationInfo::set_bankid(const char* value) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankId)
}
inline void ExtendedOrganizationInfo::set_bankid(const char* value, size_t size) {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bankid_ = new ::std::string;
  }
  bankid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankId)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_bankid() {
  set_has_bankid();
  if (bankid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bankid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankId)
  return bankid_;
}
inline ::std::string* ExtendedOrganizationInfo::release_bankid() {
  clear_has_bankid();
  if (bankid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bankid_;
    bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_bankid(::std::string* bankid) {
  if (bankid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bankid_;
  }
  if (bankid) {
    set_has_bankid();
    bankid_ = bankid;
  } else {
    clear_has_bankid();
    bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.BankId)
}

// optional string Department = 17;
inline bool ExtendedOrganizationInfo::has_department() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_department() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ExtendedOrganizationInfo::clear_has_department() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ExtendedOrganizationInfo::clear_department() {
  if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    department_->clear();
  }
  clear_has_department();
}
inline const ::std::string& ExtendedOrganizationInfo::department() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Department)
  return *department_;
}
inline void ExtendedOrganizationInfo::set_department(const ::std::string& value) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    department_ = new ::std::string;
  }
  department_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Department)
}
inline void ExtendedOrganizationInfo::set_department(const char* value) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    department_ = new ::std::string;
  }
  department_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Department)
}
inline void ExtendedOrganizationInfo::set_department(const char* value, size_t size) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    department_ = new ::std::string;
  }
  department_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Department)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_department() {
  set_has_department();
  if (department_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    department_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Department)
  return department_;
}
inline ::std::string* ExtendedOrganizationInfo::release_department() {
  clear_has_department();
  if (department_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = department_;
    department_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_department(::std::string* department) {
  if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete department_;
  }
  if (department) {
    set_has_department();
    department_ = department;
  } else {
    clear_has_department();
    department_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Department)
}

// optional string OrganizationAdditionalInfo = 18;
inline bool ExtendedOrganizationInfo::has_organizationadditionalinfo() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_organizationadditionalinfo() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ExtendedOrganizationInfo::clear_has_organizationadditionalinfo() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ExtendedOrganizationInfo::clear_organizationadditionalinfo() {
  if (organizationadditionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationadditionalinfo_->clear();
  }
  clear_has_organizationadditionalinfo();
}
inline const ::std::string& ExtendedOrganizationInfo::organizationadditionalinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrganizationAdditionalInfo)
  return *organizationadditionalinfo_;
}
inline void ExtendedOrganizationInfo::set_organizationadditionalinfo(const ::std::string& value) {
  set_has_organizationadditionalinfo();
  if (organizationadditionalinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationadditionalinfo_ = new ::std::string;
  }
  organizationadditionalinfo_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrganizationAdditionalInfo)
}
inline void ExtendedOrganizationInfo::set_organizationadditionalinfo(const char* value) {
  set_has_organizationadditionalinfo();
  if (organizationadditionalinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationadditionalinfo_ = new ::std::string;
  }
  organizationadditionalinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrganizationAdditionalInfo)
}
inline void ExtendedOrganizationInfo::set_organizationadditionalinfo(const char* value, size_t size) {
  set_has_organizationadditionalinfo();
  if (organizationadditionalinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationadditionalinfo_ = new ::std::string;
  }
  organizationadditionalinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrganizationAdditionalInfo)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_organizationadditionalinfo() {
  set_has_organizationadditionalinfo();
  if (organizationadditionalinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationadditionalinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrganizationAdditionalInfo)
  return organizationadditionalinfo_;
}
inline ::std::string* ExtendedOrganizationInfo::release_organizationadditionalinfo() {
  clear_has_organizationadditionalinfo();
  if (organizationadditionalinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = organizationadditionalinfo_;
    organizationadditionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_organizationadditionalinfo(::std::string* organizationadditionalinfo) {
  if (organizationadditionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete organizationadditionalinfo_;
  }
  if (organizationadditionalinfo) {
    set_has_organizationadditionalinfo();
    organizationadditionalinfo_ = organizationadditionalinfo;
  } else {
    clear_has_organizationadditionalinfo();
    organizationadditionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrganizationAdditionalInfo)
}

// optional string OrganizationOrPersonInfo = 19;
inline bool ExtendedOrganizationInfo::has_organizationorpersoninfo() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_organizationorpersoninfo() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ExtendedOrganizationInfo::clear_has_organizationorpersoninfo() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ExtendedOrganizationInfo::clear_organizationorpersoninfo() {
  if (organizationorpersoninfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationorpersoninfo_->clear();
  }
  clear_has_organizationorpersoninfo();
}
inline const ::std::string& ExtendedOrganizationInfo::organizationorpersoninfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrganizationOrPersonInfo)
  return *organizationorpersoninfo_;
}
inline void ExtendedOrganizationInfo::set_organizationorpersoninfo(const ::std::string& value) {
  set_has_organizationorpersoninfo();
  if (organizationorpersoninfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationorpersoninfo_ = new ::std::string;
  }
  organizationorpersoninfo_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrganizationOrPersonInfo)
}
inline void ExtendedOrganizationInfo::set_organizationorpersoninfo(const char* value) {
  set_has_organizationorpersoninfo();
  if (organizationorpersoninfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationorpersoninfo_ = new ::std::string;
  }
  organizationorpersoninfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrganizationOrPersonInfo)
}
inline void ExtendedOrganizationInfo::set_organizationorpersoninfo(const char* value, size_t size) {
  set_has_organizationorpersoninfo();
  if (organizationorpersoninfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationorpersoninfo_ = new ::std::string;
  }
  organizationorpersoninfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrganizationOrPersonInfo)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_organizationorpersoninfo() {
  set_has_organizationorpersoninfo();
  if (organizationorpersoninfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationorpersoninfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrganizationOrPersonInfo)
  return organizationorpersoninfo_;
}
inline ::std::string* ExtendedOrganizationInfo::release_organizationorpersoninfo() {
  clear_has_organizationorpersoninfo();
  if (organizationorpersoninfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = organizationorpersoninfo_;
    organizationorpersoninfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_organizationorpersoninfo(::std::string* organizationorpersoninfo) {
  if (organizationorpersoninfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete organizationorpersoninfo_;
  }
  if (organizationorpersoninfo) {
    set_has_organizationorpersoninfo();
    organizationorpersoninfo_ = organizationorpersoninfo;
  } else {
    clear_has_organizationorpersoninfo();
    organizationorpersoninfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.OrganizationOrPersonInfo)
}

// optional string IndividualEntityRegistrationCertificate = 20;
inline bool ExtendedOrganizationInfo::has_individualentityregistrationcertificate() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_individualentityregistrationcertificate() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ExtendedOrganizationInfo::clear_has_individualentityregistrationcertificate() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ExtendedOrganizationInfo::clear_individualentityregistrationcertificate() {
  if (individualentityregistrationcertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    individualentityregistrationcertificate_->clear();
  }
  clear_has_individualentityregistrationcertificate();
}
inline const ::std::string& ExtendedOrganizationInfo::individualentityregistrationcertificate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.IndividualEntityRegistrationCertificate)
  return *individualentityregistrationcertificate_;
}
inline void ExtendedOrganizationInfo::set_individualentityregistrationcertificate(const ::std::string& value) {
  set_has_individualentityregistrationcertificate();
  if (individualentityregistrationcertificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    individualentityregistrationcertificate_ = new ::std::string;
  }
  individualentityregistrationcertificate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.IndividualEntityRegistrationCertificate)
}
inline void ExtendedOrganizationInfo::set_individualentityregistrationcertificate(const char* value) {
  set_has_individualentityregistrationcertificate();
  if (individualentityregistrationcertificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    individualentityregistrationcertificate_ = new ::std::string;
  }
  individualentityregistrationcertificate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.IndividualEntityRegistrationCertificate)
}
inline void ExtendedOrganizationInfo::set_individualentityregistrationcertificate(const char* value, size_t size) {
  set_has_individualentityregistrationcertificate();
  if (individualentityregistrationcertificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    individualentityregistrationcertificate_ = new ::std::string;
  }
  individualentityregistrationcertificate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.IndividualEntityRegistrationCertificate)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_individualentityregistrationcertificate() {
  set_has_individualentityregistrationcertificate();
  if (individualentityregistrationcertificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    individualentityregistrationcertificate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.IndividualEntityRegistrationCertificate)
  return individualentityregistrationcertificate_;
}
inline ::std::string* ExtendedOrganizationInfo::release_individualentityregistrationcertificate() {
  clear_has_individualentityregistrationcertificate();
  if (individualentityregistrationcertificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = individualentityregistrationcertificate_;
    individualentityregistrationcertificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_individualentityregistrationcertificate(::std::string* individualentityregistrationcertificate) {
  if (individualentityregistrationcertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete individualentityregistrationcertificate_;
  }
  if (individualentityregistrationcertificate) {
    set_has_individualentityregistrationcertificate();
    individualentityregistrationcertificate_ = individualentityregistrationcertificate;
  } else {
    clear_has_individualentityregistrationcertificate();
    individualentityregistrationcertificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.IndividualEntityRegistrationCertificate)
}

// optional string Country = 21;
inline bool ExtendedOrganizationInfo::has_country() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ExtendedOrganizationInfo::set_has_country() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ExtendedOrganizationInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ExtendedOrganizationInfo::clear_country() {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& ExtendedOrganizationInfo::country() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Country)
  return *country_;
}
inline void ExtendedOrganizationInfo::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Country)
}
inline void ExtendedOrganizationInfo::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Country)
}
inline void ExtendedOrganizationInfo::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Country)
}
inline ::std::string* ExtendedOrganizationInfo::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Country)
  return country_;
}
inline ::std::string* ExtendedOrganizationInfo::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExtendedOrganizationInfo::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo.Country)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Organizations
}  // namespace Invoicing
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Diadoc::Api::Proto::Invoicing::Organizations::OrgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Invoicing::Organizations::OrgType>() {
  return ::Diadoc::Api::Proto::Invoicing::Organizations::OrgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Invoicing_2fExtendedOrganizationInfo_2eproto__INCLUDED
