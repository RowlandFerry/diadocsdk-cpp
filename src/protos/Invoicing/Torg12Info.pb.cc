// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invoicing/Torg12Info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Invoicing/Torg12Info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Invoicing {

namespace {

const ::google::protobuf::Descriptor* Torg12SellerTitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Torg12SellerTitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Torg12BuyerTitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Torg12BuyerTitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Torg12Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Torg12Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Grounds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Grounds_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Invoicing_2fTorg12Info_2eproto() {
  protobuf_AddDesc_Invoicing_2fTorg12Info_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Invoicing/Torg12Info.proto");
  GOOGLE_CHECK(file != NULL);
  Torg12SellerTitleInfo_descriptor_ = file->message_type(0);
  static const int Torg12SellerTitleInfo_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, sellerdocflowparticipant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, buyerdocflowparticipant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, shipper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, consignee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, supplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, payer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, grounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, waybilldate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, waybillnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, operationcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, parcelsquantitytotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, parcelsquantitytotalinwords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, grossquantitytotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, grossquantitytotalinwords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, netquantitytotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, netquantitytotalinwords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, quantitytotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, totalwithvatexcluded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, totalinwords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, supplydate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, supplyallowedby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, supplyperformedby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, chiefaccountant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, signer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, additionalinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, attachmentsheetsquantity_),
  };
  Torg12SellerTitleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Torg12SellerTitleInfo_descriptor_,
      Torg12SellerTitleInfo::default_instance_,
      Torg12SellerTitleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12SellerTitleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Torg12SellerTitleInfo));
  Torg12BuyerTitleInfo_descriptor_ = file->message_type(1);
  static const int Torg12BuyerTitleInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12BuyerTitleInfo, shipmentreceiptdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12BuyerTitleInfo, attorney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12BuyerTitleInfo, acceptedby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12BuyerTitleInfo, receivedby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12BuyerTitleInfo, signer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12BuyerTitleInfo, additionalinfo_),
  };
  Torg12BuyerTitleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Torg12BuyerTitleInfo_descriptor_,
      Torg12BuyerTitleInfo::default_instance_,
      Torg12BuyerTitleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12BuyerTitleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12BuyerTitleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Torg12BuyerTitleInfo));
  Torg12Item_descriptor_ = file->message_type(2);
  static const int Torg12Item_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, nomenclaturearticle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, unitcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, unitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, parceltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, parcelcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, parcelsquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, grossquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, taxrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, subtotalwithvatexcluded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, subtotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, additionalinfo_),
  };
  Torg12Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Torg12Item_descriptor_,
      Torg12Item::default_instance_,
      Torg12Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg12Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Torg12Item));
  Grounds_descriptor_ = file->message_type(3);
  static const int Grounds_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grounds, documentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grounds, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grounds, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grounds, additionalinfo_),
  };
  Grounds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Grounds_descriptor_,
      Grounds::default_instance_,
      Grounds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grounds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grounds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Grounds));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Invoicing_2fTorg12Info_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Torg12SellerTitleInfo_descriptor_, &Torg12SellerTitleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Torg12BuyerTitleInfo_descriptor_, &Torg12BuyerTitleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Torg12Item_descriptor_, &Torg12Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Grounds_descriptor_, &Grounds::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Invoicing_2fTorg12Info_2eproto() {
  delete Torg12SellerTitleInfo::default_instance_;
  delete Torg12SellerTitleInfo_reflection_;
  delete Torg12BuyerTitleInfo::default_instance_;
  delete Torg12BuyerTitleInfo_reflection_;
  delete Torg12Item::default_instance_;
  delete Torg12Item_reflection_;
  delete Grounds::default_instance_;
  delete Grounds_reflection_;
}

void protobuf_AddDesc_Invoicing_2fTorg12Info_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::Invoicing::protobuf_AddDesc_Invoicing_2fSigner_2eproto();
  ::Diadoc::Api::Proto::Invoicing::protobuf_AddDesc_Invoicing_2fOfficial_2eproto();
  ::Diadoc::Api::Proto::Invoicing::protobuf_AddDesc_Invoicing_2fOrganizationInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032Invoicing/Torg12Info.proto\022\032Diadoc.Api"
    ".Proto.Invoicing\032\026Invoicing/Signer.proto"
    "\032\030Invoicing/Official.proto\032 Invoicing/Or"
    "ganizationInfo.proto\"\372\t\n\025Torg12SellerTit"
    "leInfo\022\024\n\014DocumentDate\030\001 \002(\t\022\026\n\016Document"
    "Number\030\002 \001(\t\022P\n\030SellerDocflowParticipant"
    "\030\003 \002(\0132..Diadoc.Api.Proto.Invoicing.Docf"
    "lowParticipant\022O\n\027BuyerDocflowParticipan"
    "t\030\004 \002(\0132..Diadoc.Api.Proto.Invoicing.Doc"
    "flowParticipant\022=\n\007Shipper\030\005 \001(\0132,.Diado"
    "c.Api.Proto.Invoicing.OrganizationInfo\022\?"
    "\n\tConsignee\030\006 \001(\0132,.Diadoc.Api.Proto.Inv"
    "oicing.OrganizationInfo\022>\n\010Supplier\030\007 \001("
    "\0132,.Diadoc.Api.Proto.Invoicing.Organizat"
    "ionInfo\022;\n\005Payer\030\010 \001(\0132,.Diadoc.Api.Prot"
    "o.Invoicing.OrganizationInfo\0224\n\007Grounds\030"
    "\t \001(\0132#.Diadoc.Api.Proto.Invoicing.Groun"
    "ds\022\023\n\013WaybillDate\030\n \001(\t\022\025\n\rWaybillNumber"
    "\030\013 \001(\t\022\025\n\rOperationCode\030\014 \001(\t\0225\n\005Items\030\r"
    " \003(\0132&.Diadoc.Api.Proto.Invoicing.Torg12"
    "Item\022\034\n\024ParcelsQuantityTotal\030\016 \001(\t\022#\n\033Pa"
    "rcelsQuantityTotalInWords\030\017 \001(\t\022\032\n\022Gross"
    "QuantityTotal\030\020 \001(\t\022!\n\031GrossQuantityTota"
    "lInWords\030\021 \001(\t\022\030\n\020NetQuantityTotal\030\022 \001(\t"
    "\022\037\n\027NetQuantityTotalInWords\030\023 \001(\t\022\025\n\rQua"
    "ntityTotal\030\024 \001(\t\022\034\n\024TotalWithVatExcluded"
    "\030\025 \001(\t\022\013\n\003Vat\030\026 \001(\t\022\r\n\005Total\030\027 \002(\t\022\024\n\014To"
    "talInWords\030\030 \001(\t\022\022\n\nSupplyDate\030\031 \001(\t\022=\n\017"
    "SupplyAllowedBy\030\032 \001(\0132$.Diadoc.Api.Proto"
    ".Invoicing.Official\022\?\n\021SupplyPerformedBy"
    "\030\033 \001(\0132$.Diadoc.Api.Proto.Invoicing.Offi"
    "cial\022=\n\017ChiefAccountant\030\034 \001(\0132$.Diadoc.A"
    "pi.Proto.Invoicing.Official\0222\n\006Signer\030\035 "
    "\002(\0132\".Diadoc.Api.Proto.Invoicing.Signer\022"
    "\026\n\016AdditionalInfo\030\036 \001(\t\022 \n\030AttachmentShe"
    "etsQuantity\030\037 \001(\t\"\253\002\n\024Torg12BuyerTitleIn"
    "fo\022\033\n\023ShipmentReceiptDate\030\001 \002(\t\0226\n\010Attor"
    "ney\030\002 \001(\0132$.Diadoc.Api.Proto.Invoicing.A"
    "ttorney\0228\n\nAcceptedBy\030\003 \001(\0132$.Diadoc.Api"
    ".Proto.Invoicing.Official\0228\n\nReceivedBy\030"
    "\004 \001(\0132$.Diadoc.Api.Proto.Invoicing.Offic"
    "ial\0222\n\006Signer\030\005 \002(\0132\".Diadoc.Api.Proto.I"
    "nvoicing.Signer\022\026\n\016AdditionalInfo\030\006 \001(\t\""
    "\356\002\n\nTorg12Item\022\014\n\004Name\030\001 \002(\t\022\017\n\007Feature\030"
    "\002 \001(\t\022\014\n\004Sort\030\003 \001(\t\022\033\n\023NomenclatureArtic"
    "le\030\004 \001(\t\022\014\n\004Code\030\005 \001(\t\022\020\n\010UnitCode\030\006 \001(\t"
    "\022\020\n\010UnitName\030\007 \002(\t\022\022\n\nParcelType\030\010 \001(\t\022\026"
    "\n\016ParcelCapacity\030\t \001(\t\022\027\n\017ParcelsQuantit"
    "y\030\n \001(\t\022\025\n\rGrossQuantity\030\013 \001(\t\022\020\n\010Quanti"
    "ty\030\014 \002(\t\022\r\n\005Price\030\r \001(\t\022\017\n\007TaxRate\030\016 \002(\t"
    "\022\037\n\027SubtotalWithVatExcluded\030\017 \001(\t\022\013\n\003Vat"
    "\030\020 \001(\t\022\020\n\010Subtotal\030\021 \002(\t\022\026\n\016AdditionalIn"
    "fo\030\022 \001(\t\"e\n\007Grounds\022\024\n\014DocumentName\030\001 \001("
    "\t\022\026\n\016DocumentNumber\030\002 \001(\t\022\024\n\014DocumentDat"
    "e\030\003 \001(\t\022\026\n\016AdditionalInfo\030\004 \001(\t", 2191);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Invoicing/Torg12Info.proto", &protobuf_RegisterTypes);
  Torg12SellerTitleInfo::default_instance_ = new Torg12SellerTitleInfo();
  Torg12BuyerTitleInfo::default_instance_ = new Torg12BuyerTitleInfo();
  Torg12Item::default_instance_ = new Torg12Item();
  Grounds::default_instance_ = new Grounds();
  Torg12SellerTitleInfo::default_instance_->InitAsDefaultInstance();
  Torg12BuyerTitleInfo::default_instance_->InitAsDefaultInstance();
  Torg12Item::default_instance_->InitAsDefaultInstance();
  Grounds::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Invoicing_2fTorg12Info_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Invoicing_2fTorg12Info_2eproto {
  StaticDescriptorInitializer_Invoicing_2fTorg12Info_2eproto() {
    protobuf_AddDesc_Invoicing_2fTorg12Info_2eproto();
  }
} static_descriptor_initializer_Invoicing_2fTorg12Info_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Torg12SellerTitleInfo::kDocumentDateFieldNumber;
const int Torg12SellerTitleInfo::kDocumentNumberFieldNumber;
const int Torg12SellerTitleInfo::kSellerDocflowParticipantFieldNumber;
const int Torg12SellerTitleInfo::kBuyerDocflowParticipantFieldNumber;
const int Torg12SellerTitleInfo::kShipperFieldNumber;
const int Torg12SellerTitleInfo::kConsigneeFieldNumber;
const int Torg12SellerTitleInfo::kSupplierFieldNumber;
const int Torg12SellerTitleInfo::kPayerFieldNumber;
const int Torg12SellerTitleInfo::kGroundsFieldNumber;
const int Torg12SellerTitleInfo::kWaybillDateFieldNumber;
const int Torg12SellerTitleInfo::kWaybillNumberFieldNumber;
const int Torg12SellerTitleInfo::kOperationCodeFieldNumber;
const int Torg12SellerTitleInfo::kItemsFieldNumber;
const int Torg12SellerTitleInfo::kParcelsQuantityTotalFieldNumber;
const int Torg12SellerTitleInfo::kParcelsQuantityTotalInWordsFieldNumber;
const int Torg12SellerTitleInfo::kGrossQuantityTotalFieldNumber;
const int Torg12SellerTitleInfo::kGrossQuantityTotalInWordsFieldNumber;
const int Torg12SellerTitleInfo::kNetQuantityTotalFieldNumber;
const int Torg12SellerTitleInfo::kNetQuantityTotalInWordsFieldNumber;
const int Torg12SellerTitleInfo::kQuantityTotalFieldNumber;
const int Torg12SellerTitleInfo::kTotalWithVatExcludedFieldNumber;
const int Torg12SellerTitleInfo::kVatFieldNumber;
const int Torg12SellerTitleInfo::kTotalFieldNumber;
const int Torg12SellerTitleInfo::kTotalInWordsFieldNumber;
const int Torg12SellerTitleInfo::kSupplyDateFieldNumber;
const int Torg12SellerTitleInfo::kSupplyAllowedByFieldNumber;
const int Torg12SellerTitleInfo::kSupplyPerformedByFieldNumber;
const int Torg12SellerTitleInfo::kChiefAccountantFieldNumber;
const int Torg12SellerTitleInfo::kSignerFieldNumber;
const int Torg12SellerTitleInfo::kAdditionalInfoFieldNumber;
const int Torg12SellerTitleInfo::kAttachmentSheetsQuantityFieldNumber;
#endif  // !_MSC_VER

Torg12SellerTitleInfo::Torg12SellerTitleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.Torg12SellerTitleInfo)
}

void Torg12SellerTitleInfo::InitAsDefaultInstance() {
  sellerdocflowparticipant_ = const_cast< ::Diadoc::Api::Proto::Invoicing::DocflowParticipant*>(&::Diadoc::Api::Proto::Invoicing::DocflowParticipant::default_instance());
  buyerdocflowparticipant_ = const_cast< ::Diadoc::Api::Proto::Invoicing::DocflowParticipant*>(&::Diadoc::Api::Proto::Invoicing::DocflowParticipant::default_instance());
  shipper_ = const_cast< ::Diadoc::Api::Proto::Invoicing::OrganizationInfo*>(&::Diadoc::Api::Proto::Invoicing::OrganizationInfo::default_instance());
  consignee_ = const_cast< ::Diadoc::Api::Proto::Invoicing::OrganizationInfo*>(&::Diadoc::Api::Proto::Invoicing::OrganizationInfo::default_instance());
  supplier_ = const_cast< ::Diadoc::Api::Proto::Invoicing::OrganizationInfo*>(&::Diadoc::Api::Proto::Invoicing::OrganizationInfo::default_instance());
  payer_ = const_cast< ::Diadoc::Api::Proto::Invoicing::OrganizationInfo*>(&::Diadoc::Api::Proto::Invoicing::OrganizationInfo::default_instance());
  grounds_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Grounds*>(&::Diadoc::Api::Proto::Invoicing::Grounds::default_instance());
  supplyallowedby_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Official*>(&::Diadoc::Api::Proto::Invoicing::Official::default_instance());
  supplyperformedby_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Official*>(&::Diadoc::Api::Proto::Invoicing::Official::default_instance());
  chiefaccountant_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Official*>(&::Diadoc::Api::Proto::Invoicing::Official::default_instance());
  signer_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Signer*>(&::Diadoc::Api::Proto::Invoicing::Signer::default_instance());
}

Torg12SellerTitleInfo::Torg12SellerTitleInfo(const Torg12SellerTitleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.Torg12SellerTitleInfo)
}

void Torg12SellerTitleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sellerdocflowparticipant_ = NULL;
  buyerdocflowparticipant_ = NULL;
  shipper_ = NULL;
  consignee_ = NULL;
  supplier_ = NULL;
  payer_ = NULL;
  grounds_ = NULL;
  waybilldate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waybillnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operationcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parcelsquantitytotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parcelsquantitytotalinwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grossquantitytotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grossquantitytotalinwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netquantitytotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netquantitytotalinwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantitytotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totalwithvatexcluded_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totalinwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supplydate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supplyallowedby_ = NULL;
  supplyperformedby_ = NULL;
  chiefaccountant_ = NULL;
  signer_ = NULL;
  additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attachmentsheetsquantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Torg12SellerTitleInfo::~Torg12SellerTitleInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.Torg12SellerTitleInfo)
  SharedDtor();
}

void Torg12SellerTitleInfo::SharedDtor() {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (waybilldate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete waybilldate_;
  }
  if (waybillnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete waybillnumber_;
  }
  if (operationcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operationcode_;
  }
  if (parcelsquantitytotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parcelsquantitytotal_;
  }
  if (parcelsquantitytotalinwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parcelsquantitytotalinwords_;
  }
  if (grossquantitytotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grossquantitytotal_;
  }
  if (grossquantitytotalinwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grossquantitytotalinwords_;
  }
  if (netquantitytotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netquantitytotal_;
  }
  if (netquantitytotalinwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netquantitytotalinwords_;
  }
  if (quantitytotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quantitytotal_;
  }
  if (totalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete totalwithvatexcluded_;
  }
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (totalinwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete totalinwords_;
  }
  if (supplydate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete supplydate_;
  }
  if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete additionalinfo_;
  }
  if (attachmentsheetsquantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attachmentsheetsquantity_;
  }
  if (this != default_instance_) {
    delete sellerdocflowparticipant_;
    delete buyerdocflowparticipant_;
    delete shipper_;
    delete consignee_;
    delete supplier_;
    delete payer_;
    delete grounds_;
    delete supplyallowedby_;
    delete supplyperformedby_;
    delete chiefaccountant_;
    delete signer_;
  }
}

void Torg12SellerTitleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Torg12SellerTitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Torg12SellerTitleInfo_descriptor_;
}

const Torg12SellerTitleInfo& Torg12SellerTitleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fTorg12Info_2eproto();
  return *default_instance_;
}

Torg12SellerTitleInfo* Torg12SellerTitleInfo::default_instance_ = NULL;

Torg12SellerTitleInfo* Torg12SellerTitleInfo::New() const {
  return new Torg12SellerTitleInfo;
}

void Torg12SellerTitleInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentnumber_->clear();
      }
    }
    if (has_sellerdocflowparticipant()) {
      if (sellerdocflowparticipant_ != NULL) sellerdocflowparticipant_->::Diadoc::Api::Proto::Invoicing::DocflowParticipant::Clear();
    }
    if (has_buyerdocflowparticipant()) {
      if (buyerdocflowparticipant_ != NULL) buyerdocflowparticipant_->::Diadoc::Api::Proto::Invoicing::DocflowParticipant::Clear();
    }
    if (has_shipper()) {
      if (shipper_ != NULL) shipper_->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::Clear();
    }
    if (has_consignee()) {
      if (consignee_ != NULL) consignee_->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::Clear();
    }
    if (has_supplier()) {
      if (supplier_ != NULL) supplier_->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::Clear();
    }
    if (has_payer()) {
      if (payer_ != NULL) payer_->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 61184) {
    if (has_grounds()) {
      if (grounds_ != NULL) grounds_->::Diadoc::Api::Proto::Invoicing::Grounds::Clear();
    }
    if (has_waybilldate()) {
      if (waybilldate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        waybilldate_->clear();
      }
    }
    if (has_waybillnumber()) {
      if (waybillnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        waybillnumber_->clear();
      }
    }
    if (has_operationcode()) {
      if (operationcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        operationcode_->clear();
      }
    }
    if (has_parcelsquantitytotal()) {
      if (parcelsquantitytotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parcelsquantitytotal_->clear();
      }
    }
    if (has_parcelsquantitytotalinwords()) {
      if (parcelsquantitytotalinwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parcelsquantitytotalinwords_->clear();
      }
    }
    if (has_grossquantitytotal()) {
      if (grossquantitytotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grossquantitytotal_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_grossquantitytotalinwords()) {
      if (grossquantitytotalinwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grossquantitytotalinwords_->clear();
      }
    }
    if (has_netquantitytotal()) {
      if (netquantitytotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        netquantitytotal_->clear();
      }
    }
    if (has_netquantitytotalinwords()) {
      if (netquantitytotalinwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        netquantitytotalinwords_->clear();
      }
    }
    if (has_quantitytotal()) {
      if (quantitytotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quantitytotal_->clear();
      }
    }
    if (has_totalwithvatexcluded()) {
      if (totalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        totalwithvatexcluded_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vat_->clear();
      }
    }
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        total_->clear();
      }
    }
    if (has_totalinwords()) {
      if (totalinwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        totalinwords_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 2130706432) {
    if (has_supplydate()) {
      if (supplydate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        supplydate_->clear();
      }
    }
    if (has_supplyallowedby()) {
      if (supplyallowedby_ != NULL) supplyallowedby_->::Diadoc::Api::Proto::Invoicing::Official::Clear();
    }
    if (has_supplyperformedby()) {
      if (supplyperformedby_ != NULL) supplyperformedby_->::Diadoc::Api::Proto::Invoicing::Official::Clear();
    }
    if (has_chiefaccountant()) {
      if (chiefaccountant_ != NULL) chiefaccountant_->::Diadoc::Api::Proto::Invoicing::Official::Clear();
    }
    if (has_signer()) {
      if (signer_ != NULL) signer_->::Diadoc::Api::Proto::Invoicing::Signer::Clear();
    }
    if (has_additionalinfo()) {
      if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        additionalinfo_->clear();
      }
    }
    if (has_attachmentsheetsquantity()) {
      if (attachmentsheetsquantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attachmentsheetsquantity_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Torg12SellerTitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.Torg12SellerTitleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string DocumentDate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DocumentNumber;
        break;
      }

      // optional string DocumentNumber = 2;
      case 2: {
        if (tag == 18) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SellerDocflowParticipant;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.DocflowParticipant SellerDocflowParticipant = 3;
      case 3: {
        if (tag == 26) {
         parse_SellerDocflowParticipant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sellerdocflowparticipant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BuyerDocflowParticipant;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.DocflowParticipant BuyerDocflowParticipant = 4;
      case 4: {
        if (tag == 34) {
         parse_BuyerDocflowParticipant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyerdocflowparticipant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Shipper;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Shipper = 5;
      case 5: {
        if (tag == 42) {
         parse_Shipper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shipper()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Consignee;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Consignee = 6;
      case 6: {
        if (tag == 50) {
         parse_Consignee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consignee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Supplier;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Supplier = 7;
      case 7: {
        if (tag == 58) {
         parse_Supplier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_supplier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Payer;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Payer = 8;
      case 8: {
        if (tag == 66) {
         parse_Payer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Grounds;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.Grounds Grounds = 9;
      case 9: {
        if (tag == 74) {
         parse_Grounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grounds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_WaybillDate;
        break;
      }

      // optional string WaybillDate = 10;
      case 10: {
        if (tag == 82) {
         parse_WaybillDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_waybilldate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->waybilldate().data(), this->waybilldate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "waybilldate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_WaybillNumber;
        break;
      }

      // optional string WaybillNumber = 11;
      case 11: {
        if (tag == 90) {
         parse_WaybillNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_waybillnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->waybillnumber().data(), this->waybillnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "waybillnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_OperationCode;
        break;
      }

      // optional string OperationCode = 12;
      case 12: {
        if (tag == 98) {
         parse_OperationCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operationcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operationcode().data(), this->operationcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "operationcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Items;
        break;
      }

      // repeated .Diadoc.Api.Proto.Invoicing.Torg12Item Items = 13;
      case 13: {
        if (tag == 106) {
         parse_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Items;
        if (input->ExpectTag(114)) goto parse_ParcelsQuantityTotal;
        break;
      }

      // optional string ParcelsQuantityTotal = 14;
      case 14: {
        if (tag == 114) {
         parse_ParcelsQuantityTotal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parcelsquantitytotal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parcelsquantitytotal().data(), this->parcelsquantitytotal().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parcelsquantitytotal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_ParcelsQuantityTotalInWords;
        break;
      }

      // optional string ParcelsQuantityTotalInWords = 15;
      case 15: {
        if (tag == 122) {
         parse_ParcelsQuantityTotalInWords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parcelsquantitytotalinwords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parcelsquantitytotalinwords().data(), this->parcelsquantitytotalinwords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parcelsquantitytotalinwords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_GrossQuantityTotal;
        break;
      }

      // optional string GrossQuantityTotal = 16;
      case 16: {
        if (tag == 130) {
         parse_GrossQuantityTotal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grossquantitytotal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grossquantitytotal().data(), this->grossquantitytotal().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grossquantitytotal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_GrossQuantityTotalInWords;
        break;
      }

      // optional string GrossQuantityTotalInWords = 17;
      case 17: {
        if (tag == 138) {
         parse_GrossQuantityTotalInWords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grossquantitytotalinwords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grossquantitytotalinwords().data(), this->grossquantitytotalinwords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grossquantitytotalinwords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_NetQuantityTotal;
        break;
      }

      // optional string NetQuantityTotal = 18;
      case 18: {
        if (tag == 146) {
         parse_NetQuantityTotal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netquantitytotal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->netquantitytotal().data(), this->netquantitytotal().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netquantitytotal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_NetQuantityTotalInWords;
        break;
      }

      // optional string NetQuantityTotalInWords = 19;
      case 19: {
        if (tag == 154) {
         parse_NetQuantityTotalInWords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netquantitytotalinwords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->netquantitytotalinwords().data(), this->netquantitytotalinwords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netquantitytotalinwords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_QuantityTotal;
        break;
      }

      // optional string QuantityTotal = 20;
      case 20: {
        if (tag == 162) {
         parse_QuantityTotal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quantitytotal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quantitytotal().data(), this->quantitytotal().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quantitytotal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_TotalWithVatExcluded;
        break;
      }

      // optional string TotalWithVatExcluded = 21;
      case 21: {
        if (tag == 170) {
         parse_TotalWithVatExcluded:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totalwithvatexcluded()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->totalwithvatexcluded().data(), this->totalwithvatexcluded().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "totalwithvatexcluded");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_Vat;
        break;
      }

      // optional string Vat = 22;
      case 22: {
        if (tag == 178) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_Total;
        break;
      }

      // required string Total = 23;
      case 23: {
        if (tag == 186) {
         parse_Total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "total");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_TotalInWords;
        break;
      }

      // optional string TotalInWords = 24;
      case 24: {
        if (tag == 194) {
         parse_TotalInWords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totalinwords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->totalinwords().data(), this->totalinwords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "totalinwords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_SupplyDate;
        break;
      }

      // optional string SupplyDate = 25;
      case 25: {
        if (tag == 202) {
         parse_SupplyDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_supplydate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->supplydate().data(), this->supplydate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "supplydate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_SupplyAllowedBy;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.Official SupplyAllowedBy = 26;
      case 26: {
        if (tag == 210) {
         parse_SupplyAllowedBy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_supplyallowedby()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_SupplyPerformedBy;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.Official SupplyPerformedBy = 27;
      case 27: {
        if (tag == 218) {
         parse_SupplyPerformedBy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_supplyperformedby()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_ChiefAccountant;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.Official ChiefAccountant = 28;
      case 28: {
        if (tag == 226) {
         parse_ChiefAccountant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chiefaccountant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_Signer;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 29;
      case 29: {
        if (tag == 234) {
         parse_Signer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_AdditionalInfo;
        break;
      }

      // optional string AdditionalInfo = 30;
      case 30: {
        if (tag == 242) {
         parse_AdditionalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->additionalinfo().data(), this->additionalinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "additionalinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_AttachmentSheetsQuantity;
        break;
      }

      // optional string AttachmentSheetsQuantity = 31;
      case 31: {
        if (tag == 250) {
         parse_AttachmentSheetsQuantity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attachmentsheetsquantity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attachmentsheetsquantity().data(), this->attachmentsheetsquantity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "attachmentsheetsquantity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.Torg12SellerTitleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.Torg12SellerTitleInfo)
  return false;
#undef DO_
}

void Torg12SellerTitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.Torg12SellerTitleInfo)
  // required string DocumentDate = 1;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->documentdate(), output);
  }

  // optional string DocumentNumber = 2;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->documentnumber(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.DocflowParticipant SellerDocflowParticipant = 3;
  if (has_sellerdocflowparticipant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sellerdocflowparticipant(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.DocflowParticipant BuyerDocflowParticipant = 4;
  if (has_buyerdocflowparticipant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buyerdocflowparticipant(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Shipper = 5;
  if (has_shipper()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->shipper(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Consignee = 6;
  if (has_consignee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->consignee(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Supplier = 7;
  if (has_supplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->supplier(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Payer = 8;
  if (has_payer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->payer(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Grounds Grounds = 9;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->grounds(), output);
  }

  // optional string WaybillDate = 10;
  if (has_waybilldate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->waybilldate().data(), this->waybilldate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "waybilldate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->waybilldate(), output);
  }

  // optional string WaybillNumber = 11;
  if (has_waybillnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->waybillnumber().data(), this->waybillnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "waybillnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->waybillnumber(), output);
  }

  // optional string OperationCode = 12;
  if (has_operationcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operationcode().data(), this->operationcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "operationcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->operationcode(), output);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.Torg12Item Items = 13;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->items(i), output);
  }

  // optional string ParcelsQuantityTotal = 14;
  if (has_parcelsquantitytotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parcelsquantitytotal().data(), this->parcelsquantitytotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parcelsquantitytotal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->parcelsquantitytotal(), output);
  }

  // optional string ParcelsQuantityTotalInWords = 15;
  if (has_parcelsquantitytotalinwords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parcelsquantitytotalinwords().data(), this->parcelsquantitytotalinwords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parcelsquantitytotalinwords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->parcelsquantitytotalinwords(), output);
  }

  // optional string GrossQuantityTotal = 16;
  if (has_grossquantitytotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grossquantitytotal().data(), this->grossquantitytotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grossquantitytotal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->grossquantitytotal(), output);
  }

  // optional string GrossQuantityTotalInWords = 17;
  if (has_grossquantitytotalinwords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grossquantitytotalinwords().data(), this->grossquantitytotalinwords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grossquantitytotalinwords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->grossquantitytotalinwords(), output);
  }

  // optional string NetQuantityTotal = 18;
  if (has_netquantitytotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netquantitytotal().data(), this->netquantitytotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netquantitytotal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->netquantitytotal(), output);
  }

  // optional string NetQuantityTotalInWords = 19;
  if (has_netquantitytotalinwords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netquantitytotalinwords().data(), this->netquantitytotalinwords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netquantitytotalinwords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->netquantitytotalinwords(), output);
  }

  // optional string QuantityTotal = 20;
  if (has_quantitytotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quantitytotal().data(), this->quantitytotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quantitytotal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->quantitytotal(), output);
  }

  // optional string TotalWithVatExcluded = 21;
  if (has_totalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totalwithvatexcluded().data(), this->totalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totalwithvatexcluded");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->totalwithvatexcluded(), output);
  }

  // optional string Vat = 22;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->vat(), output);
  }

  // required string Total = 23;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->total(), output);
  }

  // optional string TotalInWords = 24;
  if (has_totalinwords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totalinwords().data(), this->totalinwords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totalinwords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->totalinwords(), output);
  }

  // optional string SupplyDate = 25;
  if (has_supplydate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->supplydate().data(), this->supplydate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "supplydate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->supplydate(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official SupplyAllowedBy = 26;
  if (has_supplyallowedby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->supplyallowedby(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official SupplyPerformedBy = 27;
  if (has_supplyperformedby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->supplyperformedby(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official ChiefAccountant = 28;
  if (has_chiefaccountant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->chiefaccountant(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 29;
  if (has_signer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->signer(), output);
  }

  // optional string AdditionalInfo = 30;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->additionalinfo(), output);
  }

  // optional string AttachmentSheetsQuantity = 31;
  if (has_attachmentsheetsquantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attachmentsheetsquantity().data(), this->attachmentsheetsquantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attachmentsheetsquantity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->attachmentsheetsquantity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.Torg12SellerTitleInfo)
}

::google::protobuf::uint8* Torg12SellerTitleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.Torg12SellerTitleInfo)
  // required string DocumentDate = 1;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->documentdate(), target);
  }

  // optional string DocumentNumber = 2;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->documentnumber(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.DocflowParticipant SellerDocflowParticipant = 3;
  if (has_sellerdocflowparticipant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sellerdocflowparticipant(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.DocflowParticipant BuyerDocflowParticipant = 4;
  if (has_buyerdocflowparticipant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buyerdocflowparticipant(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Shipper = 5;
  if (has_shipper()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->shipper(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Consignee = 6;
  if (has_consignee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->consignee(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Supplier = 7;
  if (has_supplier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->supplier(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Payer = 8;
  if (has_payer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->payer(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Grounds Grounds = 9;
  if (has_grounds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->grounds(), target);
  }

  // optional string WaybillDate = 10;
  if (has_waybilldate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->waybilldate().data(), this->waybilldate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "waybilldate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->waybilldate(), target);
  }

  // optional string WaybillNumber = 11;
  if (has_waybillnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->waybillnumber().data(), this->waybillnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "waybillnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->waybillnumber(), target);
  }

  // optional string OperationCode = 12;
  if (has_operationcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operationcode().data(), this->operationcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "operationcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->operationcode(), target);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.Torg12Item Items = 13;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->items(i), target);
  }

  // optional string ParcelsQuantityTotal = 14;
  if (has_parcelsquantitytotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parcelsquantitytotal().data(), this->parcelsquantitytotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parcelsquantitytotal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->parcelsquantitytotal(), target);
  }

  // optional string ParcelsQuantityTotalInWords = 15;
  if (has_parcelsquantitytotalinwords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parcelsquantitytotalinwords().data(), this->parcelsquantitytotalinwords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parcelsquantitytotalinwords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->parcelsquantitytotalinwords(), target);
  }

  // optional string GrossQuantityTotal = 16;
  if (has_grossquantitytotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grossquantitytotal().data(), this->grossquantitytotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grossquantitytotal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->grossquantitytotal(), target);
  }

  // optional string GrossQuantityTotalInWords = 17;
  if (has_grossquantitytotalinwords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grossquantitytotalinwords().data(), this->grossquantitytotalinwords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grossquantitytotalinwords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->grossquantitytotalinwords(), target);
  }

  // optional string NetQuantityTotal = 18;
  if (has_netquantitytotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netquantitytotal().data(), this->netquantitytotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netquantitytotal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->netquantitytotal(), target);
  }

  // optional string NetQuantityTotalInWords = 19;
  if (has_netquantitytotalinwords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netquantitytotalinwords().data(), this->netquantitytotalinwords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netquantitytotalinwords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->netquantitytotalinwords(), target);
  }

  // optional string QuantityTotal = 20;
  if (has_quantitytotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quantitytotal().data(), this->quantitytotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quantitytotal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->quantitytotal(), target);
  }

  // optional string TotalWithVatExcluded = 21;
  if (has_totalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totalwithvatexcluded().data(), this->totalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totalwithvatexcluded");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->totalwithvatexcluded(), target);
  }

  // optional string Vat = 22;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->vat(), target);
  }

  // required string Total = 23;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->total(), target);
  }

  // optional string TotalInWords = 24;
  if (has_totalinwords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totalinwords().data(), this->totalinwords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totalinwords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->totalinwords(), target);
  }

  // optional string SupplyDate = 25;
  if (has_supplydate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->supplydate().data(), this->supplydate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "supplydate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->supplydate(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official SupplyAllowedBy = 26;
  if (has_supplyallowedby()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->supplyallowedby(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official SupplyPerformedBy = 27;
  if (has_supplyperformedby()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->supplyperformedby(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official ChiefAccountant = 28;
  if (has_chiefaccountant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->chiefaccountant(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 29;
  if (has_signer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->signer(), target);
  }

  // optional string AdditionalInfo = 30;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->additionalinfo(), target);
  }

  // optional string AttachmentSheetsQuantity = 31;
  if (has_attachmentsheetsquantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attachmentsheetsquantity().data(), this->attachmentsheetsquantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attachmentsheetsquantity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->attachmentsheetsquantity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.Torg12SellerTitleInfo)
  return target;
}

int Torg12SellerTitleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string DocumentDate = 1;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // optional string DocumentNumber = 2;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

    // required .Diadoc.Api.Proto.Invoicing.DocflowParticipant SellerDocflowParticipant = 3;
    if (has_sellerdocflowparticipant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sellerdocflowparticipant());
    }

    // required .Diadoc.Api.Proto.Invoicing.DocflowParticipant BuyerDocflowParticipant = 4;
    if (has_buyerdocflowparticipant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyerdocflowparticipant());
    }

    // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Shipper = 5;
    if (has_shipper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shipper());
    }

    // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Consignee = 6;
    if (has_consignee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->consignee());
    }

    // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Supplier = 7;
    if (has_supplier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->supplier());
    }

    // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Payer = 8;
    if (has_payer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->payer());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Diadoc.Api.Proto.Invoicing.Grounds Grounds = 9;
    if (has_grounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grounds());
    }

    // optional string WaybillDate = 10;
    if (has_waybilldate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->waybilldate());
    }

    // optional string WaybillNumber = 11;
    if (has_waybillnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->waybillnumber());
    }

    // optional string OperationCode = 12;
    if (has_operationcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operationcode());
    }

    // optional string ParcelsQuantityTotal = 14;
    if (has_parcelsquantitytotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parcelsquantitytotal());
    }

    // optional string ParcelsQuantityTotalInWords = 15;
    if (has_parcelsquantitytotalinwords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parcelsquantitytotalinwords());
    }

    // optional string GrossQuantityTotal = 16;
    if (has_grossquantitytotal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grossquantitytotal());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string GrossQuantityTotalInWords = 17;
    if (has_grossquantitytotalinwords()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grossquantitytotalinwords());
    }

    // optional string NetQuantityTotal = 18;
    if (has_netquantitytotal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netquantitytotal());
    }

    // optional string NetQuantityTotalInWords = 19;
    if (has_netquantitytotalinwords()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netquantitytotalinwords());
    }

    // optional string QuantityTotal = 20;
    if (has_quantitytotal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quantitytotal());
    }

    // optional string TotalWithVatExcluded = 21;
    if (has_totalwithvatexcluded()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totalwithvatexcluded());
    }

    // optional string Vat = 22;
    if (has_vat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

    // required string Total = 23;
    if (has_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

    // optional string TotalInWords = 24;
    if (has_totalinwords()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totalinwords());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string SupplyDate = 25;
    if (has_supplydate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->supplydate());
    }

    // optional .Diadoc.Api.Proto.Invoicing.Official SupplyAllowedBy = 26;
    if (has_supplyallowedby()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->supplyallowedby());
    }

    // optional .Diadoc.Api.Proto.Invoicing.Official SupplyPerformedBy = 27;
    if (has_supplyperformedby()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->supplyperformedby());
    }

    // optional .Diadoc.Api.Proto.Invoicing.Official ChiefAccountant = 28;
    if (has_chiefaccountant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chiefaccountant());
    }

    // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 29;
    if (has_signer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signer());
    }

    // optional string AdditionalInfo = 30;
    if (has_additionalinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalinfo());
    }

    // optional string AttachmentSheetsQuantity = 31;
    if (has_attachmentsheetsquantity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attachmentsheetsquantity());
    }

  }
  // repeated .Diadoc.Api.Proto.Invoicing.Torg12Item Items = 13;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Torg12SellerTitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Torg12SellerTitleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Torg12SellerTitleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Torg12SellerTitleInfo::MergeFrom(const Torg12SellerTitleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
    if (from.has_sellerdocflowparticipant()) {
      mutable_sellerdocflowparticipant()->::Diadoc::Api::Proto::Invoicing::DocflowParticipant::MergeFrom(from.sellerdocflowparticipant());
    }
    if (from.has_buyerdocflowparticipant()) {
      mutable_buyerdocflowparticipant()->::Diadoc::Api::Proto::Invoicing::DocflowParticipant::MergeFrom(from.buyerdocflowparticipant());
    }
    if (from.has_shipper()) {
      mutable_shipper()->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::MergeFrom(from.shipper());
    }
    if (from.has_consignee()) {
      mutable_consignee()->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::MergeFrom(from.consignee());
    }
    if (from.has_supplier()) {
      mutable_supplier()->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::MergeFrom(from.supplier());
    }
    if (from.has_payer()) {
      mutable_payer()->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::MergeFrom(from.payer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_grounds()) {
      mutable_grounds()->::Diadoc::Api::Proto::Invoicing::Grounds::MergeFrom(from.grounds());
    }
    if (from.has_waybilldate()) {
      set_waybilldate(from.waybilldate());
    }
    if (from.has_waybillnumber()) {
      set_waybillnumber(from.waybillnumber());
    }
    if (from.has_operationcode()) {
      set_operationcode(from.operationcode());
    }
    if (from.has_parcelsquantitytotal()) {
      set_parcelsquantitytotal(from.parcelsquantitytotal());
    }
    if (from.has_parcelsquantitytotalinwords()) {
      set_parcelsquantitytotalinwords(from.parcelsquantitytotalinwords());
    }
    if (from.has_grossquantitytotal()) {
      set_grossquantitytotal(from.grossquantitytotal());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_grossquantitytotalinwords()) {
      set_grossquantitytotalinwords(from.grossquantitytotalinwords());
    }
    if (from.has_netquantitytotal()) {
      set_netquantitytotal(from.netquantitytotal());
    }
    if (from.has_netquantitytotalinwords()) {
      set_netquantitytotalinwords(from.netquantitytotalinwords());
    }
    if (from.has_quantitytotal()) {
      set_quantitytotal(from.quantitytotal());
    }
    if (from.has_totalwithvatexcluded()) {
      set_totalwithvatexcluded(from.totalwithvatexcluded());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_totalinwords()) {
      set_totalinwords(from.totalinwords());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_supplydate()) {
      set_supplydate(from.supplydate());
    }
    if (from.has_supplyallowedby()) {
      mutable_supplyallowedby()->::Diadoc::Api::Proto::Invoicing::Official::MergeFrom(from.supplyallowedby());
    }
    if (from.has_supplyperformedby()) {
      mutable_supplyperformedby()->::Diadoc::Api::Proto::Invoicing::Official::MergeFrom(from.supplyperformedby());
    }
    if (from.has_chiefaccountant()) {
      mutable_chiefaccountant()->::Diadoc::Api::Proto::Invoicing::Official::MergeFrom(from.chiefaccountant());
    }
    if (from.has_signer()) {
      mutable_signer()->::Diadoc::Api::Proto::Invoicing::Signer::MergeFrom(from.signer());
    }
    if (from.has_additionalinfo()) {
      set_additionalinfo(from.additionalinfo());
    }
    if (from.has_attachmentsheetsquantity()) {
      set_attachmentsheetsquantity(from.attachmentsheetsquantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Torg12SellerTitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Torg12SellerTitleInfo::CopyFrom(const Torg12SellerTitleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Torg12SellerTitleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x1040000d) != 0x1040000d) return false;

  if (has_shipper()) {
    if (!this->shipper().IsInitialized()) return false;
  }
  if (has_consignee()) {
    if (!this->consignee().IsInitialized()) return false;
  }
  if (has_supplier()) {
    if (!this->supplier().IsInitialized()) return false;
  }
  if (has_payer()) {
    if (!this->payer().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  if (has_supplyallowedby()) {
    if (!this->supplyallowedby().IsInitialized()) return false;
  }
  if (has_supplyperformedby()) {
    if (!this->supplyperformedby().IsInitialized()) return false;
  }
  if (has_chiefaccountant()) {
    if (!this->chiefaccountant().IsInitialized()) return false;
  }
  if (has_signer()) {
    if (!this->signer().IsInitialized()) return false;
  }
  return true;
}

void Torg12SellerTitleInfo::Swap(Torg12SellerTitleInfo* other) {
  if (other != this) {
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(sellerdocflowparticipant_, other->sellerdocflowparticipant_);
    std::swap(buyerdocflowparticipant_, other->buyerdocflowparticipant_);
    std::swap(shipper_, other->shipper_);
    std::swap(consignee_, other->consignee_);
    std::swap(supplier_, other->supplier_);
    std::swap(payer_, other->payer_);
    std::swap(grounds_, other->grounds_);
    std::swap(waybilldate_, other->waybilldate_);
    std::swap(waybillnumber_, other->waybillnumber_);
    std::swap(operationcode_, other->operationcode_);
    items_.Swap(&other->items_);
    std::swap(parcelsquantitytotal_, other->parcelsquantitytotal_);
    std::swap(parcelsquantitytotalinwords_, other->parcelsquantitytotalinwords_);
    std::swap(grossquantitytotal_, other->grossquantitytotal_);
    std::swap(grossquantitytotalinwords_, other->grossquantitytotalinwords_);
    std::swap(netquantitytotal_, other->netquantitytotal_);
    std::swap(netquantitytotalinwords_, other->netquantitytotalinwords_);
    std::swap(quantitytotal_, other->quantitytotal_);
    std::swap(totalwithvatexcluded_, other->totalwithvatexcluded_);
    std::swap(vat_, other->vat_);
    std::swap(total_, other->total_);
    std::swap(totalinwords_, other->totalinwords_);
    std::swap(supplydate_, other->supplydate_);
    std::swap(supplyallowedby_, other->supplyallowedby_);
    std::swap(supplyperformedby_, other->supplyperformedby_);
    std::swap(chiefaccountant_, other->chiefaccountant_);
    std::swap(signer_, other->signer_);
    std::swap(additionalinfo_, other->additionalinfo_);
    std::swap(attachmentsheetsquantity_, other->attachmentsheetsquantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Torg12SellerTitleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Torg12SellerTitleInfo_descriptor_;
  metadata.reflection = Torg12SellerTitleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Torg12BuyerTitleInfo::kShipmentReceiptDateFieldNumber;
const int Torg12BuyerTitleInfo::kAttorneyFieldNumber;
const int Torg12BuyerTitleInfo::kAcceptedByFieldNumber;
const int Torg12BuyerTitleInfo::kReceivedByFieldNumber;
const int Torg12BuyerTitleInfo::kSignerFieldNumber;
const int Torg12BuyerTitleInfo::kAdditionalInfoFieldNumber;
#endif  // !_MSC_VER

Torg12BuyerTitleInfo::Torg12BuyerTitleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.Torg12BuyerTitleInfo)
}

void Torg12BuyerTitleInfo::InitAsDefaultInstance() {
  attorney_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Attorney*>(&::Diadoc::Api::Proto::Invoicing::Attorney::default_instance());
  acceptedby_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Official*>(&::Diadoc::Api::Proto::Invoicing::Official::default_instance());
  receivedby_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Official*>(&::Diadoc::Api::Proto::Invoicing::Official::default_instance());
  signer_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Signer*>(&::Diadoc::Api::Proto::Invoicing::Signer::default_instance());
}

Torg12BuyerTitleInfo::Torg12BuyerTitleInfo(const Torg12BuyerTitleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.Torg12BuyerTitleInfo)
}

void Torg12BuyerTitleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  shipmentreceiptdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attorney_ = NULL;
  acceptedby_ = NULL;
  receivedby_ = NULL;
  signer_ = NULL;
  additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Torg12BuyerTitleInfo::~Torg12BuyerTitleInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.Torg12BuyerTitleInfo)
  SharedDtor();
}

void Torg12BuyerTitleInfo::SharedDtor() {
  if (shipmentreceiptdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shipmentreceiptdate_;
  }
  if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete additionalinfo_;
  }
  if (this != default_instance_) {
    delete attorney_;
    delete acceptedby_;
    delete receivedby_;
    delete signer_;
  }
}

void Torg12BuyerTitleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Torg12BuyerTitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Torg12BuyerTitleInfo_descriptor_;
}

const Torg12BuyerTitleInfo& Torg12BuyerTitleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fTorg12Info_2eproto();
  return *default_instance_;
}

Torg12BuyerTitleInfo* Torg12BuyerTitleInfo::default_instance_ = NULL;

Torg12BuyerTitleInfo* Torg12BuyerTitleInfo::New() const {
  return new Torg12BuyerTitleInfo;
}

void Torg12BuyerTitleInfo::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_shipmentreceiptdate()) {
      if (shipmentreceiptdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shipmentreceiptdate_->clear();
      }
    }
    if (has_attorney()) {
      if (attorney_ != NULL) attorney_->::Diadoc::Api::Proto::Invoicing::Attorney::Clear();
    }
    if (has_acceptedby()) {
      if (acceptedby_ != NULL) acceptedby_->::Diadoc::Api::Proto::Invoicing::Official::Clear();
    }
    if (has_receivedby()) {
      if (receivedby_ != NULL) receivedby_->::Diadoc::Api::Proto::Invoicing::Official::Clear();
    }
    if (has_signer()) {
      if (signer_ != NULL) signer_->::Diadoc::Api::Proto::Invoicing::Signer::Clear();
    }
    if (has_additionalinfo()) {
      if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        additionalinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Torg12BuyerTitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.Torg12BuyerTitleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ShipmentReceiptDate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shipmentreceiptdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shipmentreceiptdate().data(), this->shipmentreceiptdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shipmentreceiptdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Attorney;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.Attorney Attorney = 2;
      case 2: {
        if (tag == 18) {
         parse_Attorney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attorney()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AcceptedBy;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.Official AcceptedBy = 3;
      case 3: {
        if (tag == 26) {
         parse_AcceptedBy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceptedby()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ReceivedBy;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.Official ReceivedBy = 4;
      case 4: {
        if (tag == 34) {
         parse_ReceivedBy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receivedby()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Signer;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 5;
      case 5: {
        if (tag == 42) {
         parse_Signer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_AdditionalInfo;
        break;
      }

      // optional string AdditionalInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_AdditionalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->additionalinfo().data(), this->additionalinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "additionalinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.Torg12BuyerTitleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.Torg12BuyerTitleInfo)
  return false;
#undef DO_
}

void Torg12BuyerTitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.Torg12BuyerTitleInfo)
  // required string ShipmentReceiptDate = 1;
  if (has_shipmentreceiptdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shipmentreceiptdate().data(), this->shipmentreceiptdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shipmentreceiptdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->shipmentreceiptdate(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Attorney Attorney = 2;
  if (has_attorney()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attorney(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official AcceptedBy = 3;
  if (has_acceptedby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->acceptedby(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official ReceivedBy = 4;
  if (has_receivedby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->receivedby(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 5;
  if (has_signer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->signer(), output);
  }

  // optional string AdditionalInfo = 6;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->additionalinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.Torg12BuyerTitleInfo)
}

::google::protobuf::uint8* Torg12BuyerTitleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.Torg12BuyerTitleInfo)
  // required string ShipmentReceiptDate = 1;
  if (has_shipmentreceiptdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shipmentreceiptdate().data(), this->shipmentreceiptdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shipmentreceiptdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->shipmentreceiptdate(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Attorney Attorney = 2;
  if (has_attorney()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attorney(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official AcceptedBy = 3;
  if (has_acceptedby()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->acceptedby(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official ReceivedBy = 4;
  if (has_receivedby()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->receivedby(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 5;
  if (has_signer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->signer(), target);
  }

  // optional string AdditionalInfo = 6;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->additionalinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.Torg12BuyerTitleInfo)
  return target;
}

int Torg12BuyerTitleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ShipmentReceiptDate = 1;
    if (has_shipmentreceiptdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shipmentreceiptdate());
    }

    // optional .Diadoc.Api.Proto.Invoicing.Attorney Attorney = 2;
    if (has_attorney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attorney());
    }

    // optional .Diadoc.Api.Proto.Invoicing.Official AcceptedBy = 3;
    if (has_acceptedby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceptedby());
    }

    // optional .Diadoc.Api.Proto.Invoicing.Official ReceivedBy = 4;
    if (has_receivedby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receivedby());
    }

    // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 5;
    if (has_signer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signer());
    }

    // optional string AdditionalInfo = 6;
    if (has_additionalinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Torg12BuyerTitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Torg12BuyerTitleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Torg12BuyerTitleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Torg12BuyerTitleInfo::MergeFrom(const Torg12BuyerTitleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shipmentreceiptdate()) {
      set_shipmentreceiptdate(from.shipmentreceiptdate());
    }
    if (from.has_attorney()) {
      mutable_attorney()->::Diadoc::Api::Proto::Invoicing::Attorney::MergeFrom(from.attorney());
    }
    if (from.has_acceptedby()) {
      mutable_acceptedby()->::Diadoc::Api::Proto::Invoicing::Official::MergeFrom(from.acceptedby());
    }
    if (from.has_receivedby()) {
      mutable_receivedby()->::Diadoc::Api::Proto::Invoicing::Official::MergeFrom(from.receivedby());
    }
    if (from.has_signer()) {
      mutable_signer()->::Diadoc::Api::Proto::Invoicing::Signer::MergeFrom(from.signer());
    }
    if (from.has_additionalinfo()) {
      set_additionalinfo(from.additionalinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Torg12BuyerTitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Torg12BuyerTitleInfo::CopyFrom(const Torg12BuyerTitleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Torg12BuyerTitleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;

  if (has_attorney()) {
    if (!this->attorney().IsInitialized()) return false;
  }
  if (has_acceptedby()) {
    if (!this->acceptedby().IsInitialized()) return false;
  }
  if (has_receivedby()) {
    if (!this->receivedby().IsInitialized()) return false;
  }
  if (has_signer()) {
    if (!this->signer().IsInitialized()) return false;
  }
  return true;
}

void Torg12BuyerTitleInfo::Swap(Torg12BuyerTitleInfo* other) {
  if (other != this) {
    std::swap(shipmentreceiptdate_, other->shipmentreceiptdate_);
    std::swap(attorney_, other->attorney_);
    std::swap(acceptedby_, other->acceptedby_);
    std::swap(receivedby_, other->receivedby_);
    std::swap(signer_, other->signer_);
    std::swap(additionalinfo_, other->additionalinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Torg12BuyerTitleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Torg12BuyerTitleInfo_descriptor_;
  metadata.reflection = Torg12BuyerTitleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Torg12Item::kNameFieldNumber;
const int Torg12Item::kFeatureFieldNumber;
const int Torg12Item::kSortFieldNumber;
const int Torg12Item::kNomenclatureArticleFieldNumber;
const int Torg12Item::kCodeFieldNumber;
const int Torg12Item::kUnitCodeFieldNumber;
const int Torg12Item::kUnitNameFieldNumber;
const int Torg12Item::kParcelTypeFieldNumber;
const int Torg12Item::kParcelCapacityFieldNumber;
const int Torg12Item::kParcelsQuantityFieldNumber;
const int Torg12Item::kGrossQuantityFieldNumber;
const int Torg12Item::kQuantityFieldNumber;
const int Torg12Item::kPriceFieldNumber;
const int Torg12Item::kTaxRateFieldNumber;
const int Torg12Item::kSubtotalWithVatExcludedFieldNumber;
const int Torg12Item::kVatFieldNumber;
const int Torg12Item::kSubtotalFieldNumber;
const int Torg12Item::kAdditionalInfoFieldNumber;
#endif  // !_MSC_VER

Torg12Item::Torg12Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.Torg12Item)
}

void Torg12Item::InitAsDefaultInstance() {
}

Torg12Item::Torg12Item(const Torg12Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.Torg12Item)
}

void Torg12Item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sort_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nomenclaturearticle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unitcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parceltype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parcelcapacity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parcelsquantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grossquantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taxrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtotalwithvatexcluded_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Torg12Item::~Torg12Item() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.Torg12Item)
  SharedDtor();
}

void Torg12Item::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (feature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feature_;
  }
  if (sort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sort_;
  }
  if (nomenclaturearticle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nomenclaturearticle_;
  }
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (unitcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unitcode_;
  }
  if (unitname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unitname_;
  }
  if (parceltype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parceltype_;
  }
  if (parcelcapacity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parcelcapacity_;
  }
  if (parcelsquantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parcelsquantity_;
  }
  if (grossquantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grossquantity_;
  }
  if (quantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quantity_;
  }
  if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete price_;
  }
  if (taxrate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete taxrate_;
  }
  if (subtotalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtotalwithvatexcluded_;
  }
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (subtotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtotal_;
  }
  if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete additionalinfo_;
  }
  if (this != default_instance_) {
  }
}

void Torg12Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Torg12Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Torg12Item_descriptor_;
}

const Torg12Item& Torg12Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fTorg12Info_2eproto();
  return *default_instance_;
}

Torg12Item* Torg12Item::default_instance_ = NULL;

Torg12Item* Torg12Item::New() const {
  return new Torg12Item;
}

void Torg12Item::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_feature()) {
      if (feature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        feature_->clear();
      }
    }
    if (has_sort()) {
      if (sort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sort_->clear();
      }
    }
    if (has_nomenclaturearticle()) {
      if (nomenclaturearticle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nomenclaturearticle_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
    if (has_unitcode()) {
      if (unitcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unitcode_->clear();
      }
    }
    if (has_unitname()) {
      if (unitname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unitname_->clear();
      }
    }
    if (has_parceltype()) {
      if (parceltype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parceltype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_parcelcapacity()) {
      if (parcelcapacity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parcelcapacity_->clear();
      }
    }
    if (has_parcelsquantity()) {
      if (parcelsquantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parcelsquantity_->clear();
      }
    }
    if (has_grossquantity()) {
      if (grossquantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grossquantity_->clear();
      }
    }
    if (has_quantity()) {
      if (quantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quantity_->clear();
      }
    }
    if (has_price()) {
      if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        price_->clear();
      }
    }
    if (has_taxrate()) {
      if (taxrate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        taxrate_->clear();
      }
    }
    if (has_subtotalwithvatexcluded()) {
      if (subtotalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtotalwithvatexcluded_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vat_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_subtotal()) {
      if (subtotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtotal_->clear();
      }
    }
    if (has_additionalinfo()) {
      if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        additionalinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Torg12Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.Torg12Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Feature;
        break;
      }

      // optional string Feature = 2;
      case 2: {
        if (tag == 18) {
         parse_Feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feature().data(), this->feature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "feature");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Sort;
        break;
      }

      // optional string Sort = 3;
      case 3: {
        if (tag == 26) {
         parse_Sort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sort()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sort().data(), this->sort().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sort");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_NomenclatureArticle;
        break;
      }

      // optional string NomenclatureArticle = 4;
      case 4: {
        if (tag == 34) {
         parse_NomenclatureArticle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nomenclaturearticle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nomenclaturearticle().data(), this->nomenclaturearticle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nomenclaturearticle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Code;
        break;
      }

      // optional string Code = 5;
      case 5: {
        if (tag == 42) {
         parse_Code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_UnitCode;
        break;
      }

      // optional string UnitCode = 6;
      case 6: {
        if (tag == 50) {
         parse_UnitCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unitcode().data(), this->unitcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unitcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_UnitName;
        break;
      }

      // required string UnitName = 7;
      case 7: {
        if (tag == 58) {
         parse_UnitName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unitname().data(), this->unitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unitname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ParcelType;
        break;
      }

      // optional string ParcelType = 8;
      case 8: {
        if (tag == 66) {
         parse_ParcelType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parceltype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parceltype().data(), this->parceltype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parceltype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ParcelCapacity;
        break;
      }

      // optional string ParcelCapacity = 9;
      case 9: {
        if (tag == 74) {
         parse_ParcelCapacity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parcelcapacity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parcelcapacity().data(), this->parcelcapacity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parcelcapacity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ParcelsQuantity;
        break;
      }

      // optional string ParcelsQuantity = 10;
      case 10: {
        if (tag == 82) {
         parse_ParcelsQuantity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parcelsquantity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parcelsquantity().data(), this->parcelsquantity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parcelsquantity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_GrossQuantity;
        break;
      }

      // optional string GrossQuantity = 11;
      case 11: {
        if (tag == 90) {
         parse_GrossQuantity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grossquantity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grossquantity().data(), this->grossquantity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grossquantity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_Quantity;
        break;
      }

      // required string Quantity = 12;
      case 12: {
        if (tag == 98) {
         parse_Quantity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quantity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quantity().data(), this->quantity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quantity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Price;
        break;
      }

      // optional string Price = 13;
      case 13: {
        if (tag == 106) {
         parse_Price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->price().data(), this->price().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "price");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_TaxRate;
        break;
      }

      // required string TaxRate = 14;
      case 14: {
        if (tag == 114) {
         parse_TaxRate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taxrate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->taxrate().data(), this->taxrate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "taxrate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_SubtotalWithVatExcluded;
        break;
      }

      // optional string SubtotalWithVatExcluded = 15;
      case 15: {
        if (tag == 122) {
         parse_SubtotalWithVatExcluded:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtotalwithvatexcluded()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subtotalwithvatexcluded().data(), this->subtotalwithvatexcluded().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subtotalwithvatexcluded");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_Vat;
        break;
      }

      // optional string Vat = 16;
      case 16: {
        if (tag == 130) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_Subtotal;
        break;
      }

      // required string Subtotal = 17;
      case 17: {
        if (tag == 138) {
         parse_Subtotal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtotal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subtotal().data(), this->subtotal().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subtotal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_AdditionalInfo;
        break;
      }

      // optional string AdditionalInfo = 18;
      case 18: {
        if (tag == 146) {
         parse_AdditionalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->additionalinfo().data(), this->additionalinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "additionalinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.Torg12Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.Torg12Item)
  return false;
#undef DO_
}

void Torg12Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.Torg12Item)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string Feature = 2;
  if (has_feature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature().data(), this->feature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "feature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->feature(), output);
  }

  // optional string Sort = 3;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sort().data(), this->sort().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sort");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sort(), output);
  }

  // optional string NomenclatureArticle = 4;
  if (has_nomenclaturearticle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nomenclaturearticle().data(), this->nomenclaturearticle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nomenclaturearticle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nomenclaturearticle(), output);
  }

  // optional string Code = 5;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  // optional string UnitCode = 6;
  if (has_unitcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unitcode().data(), this->unitcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unitcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->unitcode(), output);
  }

  // required string UnitName = 7;
  if (has_unitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unitname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->unitname(), output);
  }

  // optional string ParcelType = 8;
  if (has_parceltype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parceltype().data(), this->parceltype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parceltype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->parceltype(), output);
  }

  // optional string ParcelCapacity = 9;
  if (has_parcelcapacity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parcelcapacity().data(), this->parcelcapacity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parcelcapacity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->parcelcapacity(), output);
  }

  // optional string ParcelsQuantity = 10;
  if (has_parcelsquantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parcelsquantity().data(), this->parcelsquantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parcelsquantity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->parcelsquantity(), output);
  }

  // optional string GrossQuantity = 11;
  if (has_grossquantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grossquantity().data(), this->grossquantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grossquantity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->grossquantity(), output);
  }

  // required string Quantity = 12;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quantity().data(), this->quantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quantity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->quantity(), output);
  }

  // optional string Price = 13;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "price");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->price(), output);
  }

  // required string TaxRate = 14;
  if (has_taxrate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->taxrate().data(), this->taxrate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "taxrate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->taxrate(), output);
  }

  // optional string SubtotalWithVatExcluded = 15;
  if (has_subtotalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotalwithvatexcluded().data(), this->subtotalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotalwithvatexcluded");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->subtotalwithvatexcluded(), output);
  }

  // optional string Vat = 16;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->vat(), output);
  }

  // required string Subtotal = 17;
  if (has_subtotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotal().data(), this->subtotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->subtotal(), output);
  }

  // optional string AdditionalInfo = 18;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->additionalinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.Torg12Item)
}

::google::protobuf::uint8* Torg12Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.Torg12Item)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string Feature = 2;
  if (has_feature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature().data(), this->feature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "feature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->feature(), target);
  }

  // optional string Sort = 3;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sort().data(), this->sort().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sort");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sort(), target);
  }

  // optional string NomenclatureArticle = 4;
  if (has_nomenclaturearticle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nomenclaturearticle().data(), this->nomenclaturearticle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nomenclaturearticle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nomenclaturearticle(), target);
  }

  // optional string Code = 5;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  // optional string UnitCode = 6;
  if (has_unitcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unitcode().data(), this->unitcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unitcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->unitcode(), target);
  }

  // required string UnitName = 7;
  if (has_unitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unitname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->unitname(), target);
  }

  // optional string ParcelType = 8;
  if (has_parceltype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parceltype().data(), this->parceltype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parceltype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->parceltype(), target);
  }

  // optional string ParcelCapacity = 9;
  if (has_parcelcapacity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parcelcapacity().data(), this->parcelcapacity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parcelcapacity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->parcelcapacity(), target);
  }

  // optional string ParcelsQuantity = 10;
  if (has_parcelsquantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parcelsquantity().data(), this->parcelsquantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parcelsquantity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->parcelsquantity(), target);
  }

  // optional string GrossQuantity = 11;
  if (has_grossquantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grossquantity().data(), this->grossquantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grossquantity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->grossquantity(), target);
  }

  // required string Quantity = 12;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quantity().data(), this->quantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quantity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->quantity(), target);
  }

  // optional string Price = 13;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "price");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->price(), target);
  }

  // required string TaxRate = 14;
  if (has_taxrate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->taxrate().data(), this->taxrate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "taxrate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->taxrate(), target);
  }

  // optional string SubtotalWithVatExcluded = 15;
  if (has_subtotalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotalwithvatexcluded().data(), this->subtotalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotalwithvatexcluded");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->subtotalwithvatexcluded(), target);
  }

  // optional string Vat = 16;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->vat(), target);
  }

  // required string Subtotal = 17;
  if (has_subtotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotal().data(), this->subtotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->subtotal(), target);
  }

  // optional string AdditionalInfo = 18;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->additionalinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.Torg12Item)
  return target;
}

int Torg12Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Feature = 2;
    if (has_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feature());
    }

    // optional string Sort = 3;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sort());
    }

    // optional string NomenclatureArticle = 4;
    if (has_nomenclaturearticle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nomenclaturearticle());
    }

    // optional string Code = 5;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string UnitCode = 6;
    if (has_unitcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitcode());
    }

    // required string UnitName = 7;
    if (has_unitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitname());
    }

    // optional string ParcelType = 8;
    if (has_parceltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parceltype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ParcelCapacity = 9;
    if (has_parcelcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parcelcapacity());
    }

    // optional string ParcelsQuantity = 10;
    if (has_parcelsquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parcelsquantity());
    }

    // optional string GrossQuantity = 11;
    if (has_grossquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grossquantity());
    }

    // required string Quantity = 12;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quantity());
    }

    // optional string Price = 13;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price());
    }

    // required string TaxRate = 14;
    if (has_taxrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taxrate());
    }

    // optional string SubtotalWithVatExcluded = 15;
    if (has_subtotalwithvatexcluded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtotalwithvatexcluded());
    }

    // optional string Vat = 16;
    if (has_vat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string Subtotal = 17;
    if (has_subtotal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtotal());
    }

    // optional string AdditionalInfo = 18;
    if (has_additionalinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Torg12Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Torg12Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Torg12Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Torg12Item::MergeFrom(const Torg12Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_feature()) {
      set_feature(from.feature());
    }
    if (from.has_sort()) {
      set_sort(from.sort());
    }
    if (from.has_nomenclaturearticle()) {
      set_nomenclaturearticle(from.nomenclaturearticle());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_unitcode()) {
      set_unitcode(from.unitcode());
    }
    if (from.has_unitname()) {
      set_unitname(from.unitname());
    }
    if (from.has_parceltype()) {
      set_parceltype(from.parceltype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_parcelcapacity()) {
      set_parcelcapacity(from.parcelcapacity());
    }
    if (from.has_parcelsquantity()) {
      set_parcelsquantity(from.parcelsquantity());
    }
    if (from.has_grossquantity()) {
      set_grossquantity(from.grossquantity());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_taxrate()) {
      set_taxrate(from.taxrate());
    }
    if (from.has_subtotalwithvatexcluded()) {
      set_subtotalwithvatexcluded(from.subtotalwithvatexcluded());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_subtotal()) {
      set_subtotal(from.subtotal());
    }
    if (from.has_additionalinfo()) {
      set_additionalinfo(from.additionalinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Torg12Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Torg12Item::CopyFrom(const Torg12Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Torg12Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00012841) != 0x00012841) return false;

  return true;
}

void Torg12Item::Swap(Torg12Item* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(feature_, other->feature_);
    std::swap(sort_, other->sort_);
    std::swap(nomenclaturearticle_, other->nomenclaturearticle_);
    std::swap(code_, other->code_);
    std::swap(unitcode_, other->unitcode_);
    std::swap(unitname_, other->unitname_);
    std::swap(parceltype_, other->parceltype_);
    std::swap(parcelcapacity_, other->parcelcapacity_);
    std::swap(parcelsquantity_, other->parcelsquantity_);
    std::swap(grossquantity_, other->grossquantity_);
    std::swap(quantity_, other->quantity_);
    std::swap(price_, other->price_);
    std::swap(taxrate_, other->taxrate_);
    std::swap(subtotalwithvatexcluded_, other->subtotalwithvatexcluded_);
    std::swap(vat_, other->vat_);
    std::swap(subtotal_, other->subtotal_);
    std::swap(additionalinfo_, other->additionalinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Torg12Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Torg12Item_descriptor_;
  metadata.reflection = Torg12Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Grounds::kDocumentNameFieldNumber;
const int Grounds::kDocumentNumberFieldNumber;
const int Grounds::kDocumentDateFieldNumber;
const int Grounds::kAdditionalInfoFieldNumber;
#endif  // !_MSC_VER

Grounds::Grounds()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.Grounds)
}

void Grounds::InitAsDefaultInstance() {
}

Grounds::Grounds(const Grounds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.Grounds)
}

void Grounds::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Grounds::~Grounds() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.Grounds)
  SharedDtor();
}

void Grounds::SharedDtor() {
  if (documentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentname_;
  }
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete additionalinfo_;
  }
  if (this != default_instance_) {
  }
}

void Grounds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grounds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Grounds_descriptor_;
}

const Grounds& Grounds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fTorg12Info_2eproto();
  return *default_instance_;
}

Grounds* Grounds::default_instance_ = NULL;

Grounds* Grounds::New() const {
  return new Grounds;
}

void Grounds::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_documentname()) {
      if (documentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentname_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentnumber_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentdate_->clear();
      }
    }
    if (has_additionalinfo()) {
      if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        additionalinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Grounds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.Grounds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DocumentName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentname().data(), this->documentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DocumentNumber;
        break;
      }

      // optional string DocumentNumber = 2;
      case 2: {
        if (tag == 18) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DocumentDate;
        break;
      }

      // optional string DocumentDate = 3;
      case 3: {
        if (tag == 26) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AdditionalInfo;
        break;
      }

      // optional string AdditionalInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_AdditionalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->additionalinfo().data(), this->additionalinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "additionalinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.Grounds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.Grounds)
  return false;
#undef DO_
}

void Grounds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.Grounds)
  // optional string DocumentName = 1;
  if (has_documentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentname().data(), this->documentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->documentname(), output);
  }

  // optional string DocumentNumber = 2;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->documentnumber(), output);
  }

  // optional string DocumentDate = 3;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->documentdate(), output);
  }

  // optional string AdditionalInfo = 4;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->additionalinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.Grounds)
}

::google::protobuf::uint8* Grounds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.Grounds)
  // optional string DocumentName = 1;
  if (has_documentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentname().data(), this->documentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->documentname(), target);
  }

  // optional string DocumentNumber = 2;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->documentnumber(), target);
  }

  // optional string DocumentDate = 3;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->documentdate(), target);
  }

  // optional string AdditionalInfo = 4;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->additionalinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.Grounds)
  return target;
}

int Grounds::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string DocumentName = 1;
    if (has_documentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentname());
    }

    // optional string DocumentNumber = 2;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

    // optional string DocumentDate = 3;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // optional string AdditionalInfo = 4;
    if (has_additionalinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grounds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Grounds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Grounds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Grounds::MergeFrom(const Grounds& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentname()) {
      set_documentname(from.documentname());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_additionalinfo()) {
      set_additionalinfo(from.additionalinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Grounds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grounds::CopyFrom(const Grounds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grounds::IsInitialized() const {

  return true;
}

void Grounds::Swap(Grounds* other) {
  if (other != this) {
    std::swap(documentname_, other->documentname_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(additionalinfo_, other->additionalinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Grounds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Grounds_descriptor_;
  metadata.reflection = Grounds_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Invoicing
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
