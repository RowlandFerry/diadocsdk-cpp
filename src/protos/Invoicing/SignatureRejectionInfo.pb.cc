// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invoicing/SignatureRejectionInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Invoicing/SignatureRejectionInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Invoicing {

namespace {

const ::google::protobuf::Descriptor* SignatureRejectionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignatureRejectionInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Invoicing_2fSignatureRejectionInfo_2eproto() {
  protobuf_AddDesc_Invoicing_2fSignatureRejectionInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Invoicing/SignatureRejectionInfo.proto");
  GOOGLE_CHECK(file != NULL);
  SignatureRejectionInfo_descriptor_ = file->message_type(0);
  static const int SignatureRejectionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureRejectionInfo, errormessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureRejectionInfo, signer_),
  };
  SignatureRejectionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignatureRejectionInfo_descriptor_,
      SignatureRejectionInfo::default_instance_,
      SignatureRejectionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureRejectionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureRejectionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignatureRejectionInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Invoicing_2fSignatureRejectionInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignatureRejectionInfo_descriptor_, &SignatureRejectionInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Invoicing_2fSignatureRejectionInfo_2eproto() {
  delete SignatureRejectionInfo::default_instance_;
  delete SignatureRejectionInfo_reflection_;
}

void protobuf_AddDesc_Invoicing_2fSignatureRejectionInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::Invoicing::protobuf_AddDesc_Invoicing_2fSigner_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&Invoicing/SignatureRejectionInfo.proto"
    "\022\032Diadoc.Api.Proto.Invoicing\032\026Invoicing/"
    "Signer.proto\"b\n\026SignatureRejectionInfo\022\024"
    "\n\014ErrorMessage\030\001 \001(\t\0222\n\006Signer\030\002 \002(\0132\".D"
    "iadoc.Api.Proto.Invoicing.Signer", 192);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Invoicing/SignatureRejectionInfo.proto", &protobuf_RegisterTypes);
  SignatureRejectionInfo::default_instance_ = new SignatureRejectionInfo();
  SignatureRejectionInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Invoicing_2fSignatureRejectionInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Invoicing_2fSignatureRejectionInfo_2eproto {
  StaticDescriptorInitializer_Invoicing_2fSignatureRejectionInfo_2eproto() {
    protobuf_AddDesc_Invoicing_2fSignatureRejectionInfo_2eproto();
  }
} static_descriptor_initializer_Invoicing_2fSignatureRejectionInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SignatureRejectionInfo::kErrorMessageFieldNumber;
const int SignatureRejectionInfo::kSignerFieldNumber;
#endif  // !_MSC_VER

SignatureRejectionInfo::SignatureRejectionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.SignatureRejectionInfo)
}

void SignatureRejectionInfo::InitAsDefaultInstance() {
  signer_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Signer*>(&::Diadoc::Api::Proto::Invoicing::Signer::default_instance());
}

SignatureRejectionInfo::SignatureRejectionInfo(const SignatureRejectionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.SignatureRejectionInfo)
}

void SignatureRejectionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignatureRejectionInfo::~SignatureRejectionInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.SignatureRejectionInfo)
  SharedDtor();
}

void SignatureRejectionInfo::SharedDtor() {
  if (errormessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errormessage_;
  }
  if (this != default_instance_) {
    delete signer_;
  }
}

void SignatureRejectionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignatureRejectionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignatureRejectionInfo_descriptor_;
}

const SignatureRejectionInfo& SignatureRejectionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fSignatureRejectionInfo_2eproto();
  return *default_instance_;
}

SignatureRejectionInfo* SignatureRejectionInfo::default_instance_ = NULL;

SignatureRejectionInfo* SignatureRejectionInfo::New() const {
  return new SignatureRejectionInfo;
}

void SignatureRejectionInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_errormessage()) {
      if (errormessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errormessage_->clear();
      }
    }
    if (has_signer()) {
      if (signer_ != NULL) signer_->::Diadoc::Api::Proto::Invoicing::Signer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignatureRejectionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.SignatureRejectionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ErrorMessage = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errormessage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Signer;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 2;
      case 2: {
        if (tag == 18) {
         parse_Signer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.SignatureRejectionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.SignatureRejectionInfo)
  return false;
#undef DO_
}

void SignatureRejectionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.SignatureRejectionInfo)
  // optional string ErrorMessage = 1;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errormessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->errormessage(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 2;
  if (has_signer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.SignatureRejectionInfo)
}

::google::protobuf::uint8* SignatureRejectionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.SignatureRejectionInfo)
  // optional string ErrorMessage = 1;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errormessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->errormessage(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 2;
  if (has_signer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.SignatureRejectionInfo)
  return target;
}

int SignatureRejectionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ErrorMessage = 1;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }

    // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 2;
    if (has_signer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignatureRejectionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignatureRejectionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignatureRejectionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignatureRejectionInfo::MergeFrom(const SignatureRejectionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errormessage()) {
      set_errormessage(from.errormessage());
    }
    if (from.has_signer()) {
      mutable_signer()->::Diadoc::Api::Proto::Invoicing::Signer::MergeFrom(from.signer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignatureRejectionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureRejectionInfo::CopyFrom(const SignatureRejectionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureRejectionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_signer()) {
    if (!this->signer().IsInitialized()) return false;
  }
  return true;
}

void SignatureRejectionInfo::Swap(SignatureRejectionInfo* other) {
  if (other != this) {
    std::swap(errormessage_, other->errormessage_);
    std::swap(signer_, other->signer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignatureRejectionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignatureRejectionInfo_descriptor_;
  metadata.reflection = SignatureRejectionInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Invoicing
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
