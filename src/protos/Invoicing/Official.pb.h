// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invoicing/Official.proto

#ifndef PROTOBUF_Invoicing_2fOfficial_2eproto__INCLUDED
#define PROTOBUF_Invoicing_2fOfficial_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Invoicing {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Invoicing_2fOfficial_2eproto();
void protobuf_AssignDesc_Invoicing_2fOfficial_2eproto();
void protobuf_ShutdownFile_Invoicing_2fOfficial_2eproto();

class Official;
class Attorney;

// ===================================================================

class Official : public ::google::protobuf::Message {
 public:
  Official();
  virtual ~Official();

  Official(const Official& from);

  inline Official& operator=(const Official& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Official& default_instance();

  void Swap(Official* other);

  // implements Message ----------------------------------------------

  Official* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Official& from);
  void MergeFrom(const Official& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Surname = 1;
  inline bool has_surname() const;
  inline void clear_surname();
  static const int kSurnameFieldNumber = 1;
  inline const ::std::string& surname() const;
  inline void set_surname(const ::std::string& value);
  inline void set_surname(const char* value);
  inline void set_surname(const char* value, size_t size);
  inline ::std::string* mutable_surname();
  inline ::std::string* release_surname();
  inline void set_allocated_surname(::std::string* surname);

  // required string FirstName = 2;
  inline bool has_firstname() const;
  inline void clear_firstname();
  static const int kFirstNameFieldNumber = 2;
  inline const ::std::string& firstname() const;
  inline void set_firstname(const ::std::string& value);
  inline void set_firstname(const char* value);
  inline void set_firstname(const char* value, size_t size);
  inline ::std::string* mutable_firstname();
  inline ::std::string* release_firstname();
  inline void set_allocated_firstname(::std::string* firstname);

  // optional string Patronymic = 3;
  inline bool has_patronymic() const;
  inline void clear_patronymic();
  static const int kPatronymicFieldNumber = 3;
  inline const ::std::string& patronymic() const;
  inline void set_patronymic(const ::std::string& value);
  inline void set_patronymic(const char* value);
  inline void set_patronymic(const char* value, size_t size);
  inline ::std::string* mutable_patronymic();
  inline ::std::string* release_patronymic();
  inline void set_allocated_patronymic(::std::string* patronymic);

  // optional string JobTitle = 4;
  inline bool has_jobtitle() const;
  inline void clear_jobtitle();
  static const int kJobTitleFieldNumber = 4;
  inline const ::std::string& jobtitle() const;
  inline void set_jobtitle(const ::std::string& value);
  inline void set_jobtitle(const char* value);
  inline void set_jobtitle(const char* value, size_t size);
  inline ::std::string* mutable_jobtitle();
  inline ::std::string* release_jobtitle();
  inline void set_allocated_jobtitle(::std::string* jobtitle);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Invoicing.Official)
 private:
  inline void set_has_surname();
  inline void clear_has_surname();
  inline void set_has_firstname();
  inline void clear_has_firstname();
  inline void set_has_patronymic();
  inline void clear_has_patronymic();
  inline void set_has_jobtitle();
  inline void clear_has_jobtitle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* surname_;
  ::std::string* firstname_;
  ::std::string* patronymic_;
  ::std::string* jobtitle_;
  friend void  protobuf_AddDesc_Invoicing_2fOfficial_2eproto();
  friend void protobuf_AssignDesc_Invoicing_2fOfficial_2eproto();
  friend void protobuf_ShutdownFile_Invoicing_2fOfficial_2eproto();

  void InitAsDefaultInstance();
  static Official* default_instance_;
};
// -------------------------------------------------------------------

class Attorney : public ::google::protobuf::Message {
 public:
  Attorney();
  virtual ~Attorney();

  Attorney(const Attorney& from);

  inline Attorney& operator=(const Attorney& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attorney& default_instance();

  void Swap(Attorney* other);

  // implements Message ----------------------------------------------

  Attorney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attorney& from);
  void MergeFrom(const Attorney& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Date = 1;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 1;
  inline const ::std::string& date() const;
  inline void set_date(const ::std::string& value);
  inline void set_date(const char* value);
  inline void set_date(const char* value, size_t size);
  inline ::std::string* mutable_date();
  inline ::std::string* release_date();
  inline void set_allocated_date(::std::string* date);

  // optional string Number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // optional string IssuerOrganizationName = 3;
  inline bool has_issuerorganizationname() const;
  inline void clear_issuerorganizationname();
  static const int kIssuerOrganizationNameFieldNumber = 3;
  inline const ::std::string& issuerorganizationname() const;
  inline void set_issuerorganizationname(const ::std::string& value);
  inline void set_issuerorganizationname(const char* value);
  inline void set_issuerorganizationname(const char* value, size_t size);
  inline ::std::string* mutable_issuerorganizationname();
  inline ::std::string* release_issuerorganizationname();
  inline void set_allocated_issuerorganizationname(::std::string* issuerorganizationname);

  // optional .Diadoc.Api.Proto.Invoicing.Official IssuerPerson = 4;
  inline bool has_issuerperson() const;
  inline void clear_issuerperson();
  static const int kIssuerPersonFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Invoicing::Official& issuerperson() const;
  inline ::Diadoc::Api::Proto::Invoicing::Official* mutable_issuerperson();
  inline ::Diadoc::Api::Proto::Invoicing::Official* release_issuerperson();
  inline void set_allocated_issuerperson(::Diadoc::Api::Proto::Invoicing::Official* issuerperson);

  // optional string IssuerAdditionalInfo = 5;
  inline bool has_issueradditionalinfo() const;
  inline void clear_issueradditionalinfo();
  static const int kIssuerAdditionalInfoFieldNumber = 5;
  inline const ::std::string& issueradditionalinfo() const;
  inline void set_issueradditionalinfo(const ::std::string& value);
  inline void set_issueradditionalinfo(const char* value);
  inline void set_issueradditionalinfo(const char* value, size_t size);
  inline ::std::string* mutable_issueradditionalinfo();
  inline ::std::string* release_issueradditionalinfo();
  inline void set_allocated_issueradditionalinfo(::std::string* issueradditionalinfo);

  // optional .Diadoc.Api.Proto.Invoicing.Official RecipientPerson = 6;
  inline bool has_recipientperson() const;
  inline void clear_recipientperson();
  static const int kRecipientPersonFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::Invoicing::Official& recipientperson() const;
  inline ::Diadoc::Api::Proto::Invoicing::Official* mutable_recipientperson();
  inline ::Diadoc::Api::Proto::Invoicing::Official* release_recipientperson();
  inline void set_allocated_recipientperson(::Diadoc::Api::Proto::Invoicing::Official* recipientperson);

  // optional string RecipientAdditionalInfo = 7;
  inline bool has_recipientadditionalinfo() const;
  inline void clear_recipientadditionalinfo();
  static const int kRecipientAdditionalInfoFieldNumber = 7;
  inline const ::std::string& recipientadditionalinfo() const;
  inline void set_recipientadditionalinfo(const ::std::string& value);
  inline void set_recipientadditionalinfo(const char* value);
  inline void set_recipientadditionalinfo(const char* value, size_t size);
  inline ::std::string* mutable_recipientadditionalinfo();
  inline ::std::string* release_recipientadditionalinfo();
  inline void set_allocated_recipientadditionalinfo(::std::string* recipientadditionalinfo);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Invoicing.Attorney)
 private:
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_issuerorganizationname();
  inline void clear_has_issuerorganizationname();
  inline void set_has_issuerperson();
  inline void clear_has_issuerperson();
  inline void set_has_issueradditionalinfo();
  inline void clear_has_issueradditionalinfo();
  inline void set_has_recipientperson();
  inline void clear_has_recipientperson();
  inline void set_has_recipientadditionalinfo();
  inline void clear_has_recipientadditionalinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* date_;
  ::std::string* number_;
  ::std::string* issuerorganizationname_;
  ::Diadoc::Api::Proto::Invoicing::Official* issuerperson_;
  ::std::string* issueradditionalinfo_;
  ::Diadoc::Api::Proto::Invoicing::Official* recipientperson_;
  ::std::string* recipientadditionalinfo_;
  friend void  protobuf_AddDesc_Invoicing_2fOfficial_2eproto();
  friend void protobuf_AssignDesc_Invoicing_2fOfficial_2eproto();
  friend void protobuf_ShutdownFile_Invoicing_2fOfficial_2eproto();

  void InitAsDefaultInstance();
  static Attorney* default_instance_;
};
// ===================================================================


// ===================================================================

// Official

// required string Surname = 1;
inline bool Official::has_surname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Official::set_has_surname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Official::clear_has_surname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Official::clear_surname() {
  if (surname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    surname_->clear();
  }
  clear_has_surname();
}
inline const ::std::string& Official::surname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Official.Surname)
  return *surname_;
}
inline void Official::set_surname(const ::std::string& value) {
  set_has_surname();
  if (surname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    surname_ = new ::std::string;
  }
  surname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Official.Surname)
}
inline void Official::set_surname(const char* value) {
  set_has_surname();
  if (surname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    surname_ = new ::std::string;
  }
  surname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Official.Surname)
}
inline void Official::set_surname(const char* value, size_t size) {
  set_has_surname();
  if (surname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    surname_ = new ::std::string;
  }
  surname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Official.Surname)
}
inline ::std::string* Official::mutable_surname() {
  set_has_surname();
  if (surname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    surname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Official.Surname)
  return surname_;
}
inline ::std::string* Official::release_surname() {
  clear_has_surname();
  if (surname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = surname_;
    surname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Official::set_allocated_surname(::std::string* surname) {
  if (surname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete surname_;
  }
  if (surname) {
    set_has_surname();
    surname_ = surname;
  } else {
    clear_has_surname();
    surname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Official.Surname)
}

// required string FirstName = 2;
inline bool Official::has_firstname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Official::set_has_firstname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Official::clear_has_firstname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Official::clear_firstname() {
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstname_->clear();
  }
  clear_has_firstname();
}
inline const ::std::string& Official::firstname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Official.FirstName)
  return *firstname_;
}
inline void Official::set_firstname(const ::std::string& value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Official.FirstName)
}
inline void Official::set_firstname(const char* value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Official.FirstName)
}
inline void Official::set_firstname(const char* value, size_t size) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Official.FirstName)
}
inline ::std::string* Official::mutable_firstname() {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Official.FirstName)
  return firstname_;
}
inline ::std::string* Official::release_firstname() {
  clear_has_firstname();
  if (firstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = firstname_;
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Official::set_allocated_firstname(::std::string* firstname) {
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstname_;
  }
  if (firstname) {
    set_has_firstname();
    firstname_ = firstname;
  } else {
    clear_has_firstname();
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Official.FirstName)
}

// optional string Patronymic = 3;
inline bool Official::has_patronymic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Official::set_has_patronymic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Official::clear_has_patronymic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Official::clear_patronymic() {
  if (patronymic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patronymic_->clear();
  }
  clear_has_patronymic();
}
inline const ::std::string& Official::patronymic() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Official.Patronymic)
  return *patronymic_;
}
inline void Official::set_patronymic(const ::std::string& value) {
  set_has_patronymic();
  if (patronymic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patronymic_ = new ::std::string;
  }
  patronymic_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Official.Patronymic)
}
inline void Official::set_patronymic(const char* value) {
  set_has_patronymic();
  if (patronymic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patronymic_ = new ::std::string;
  }
  patronymic_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Official.Patronymic)
}
inline void Official::set_patronymic(const char* value, size_t size) {
  set_has_patronymic();
  if (patronymic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patronymic_ = new ::std::string;
  }
  patronymic_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Official.Patronymic)
}
inline ::std::string* Official::mutable_patronymic() {
  set_has_patronymic();
  if (patronymic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patronymic_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Official.Patronymic)
  return patronymic_;
}
inline ::std::string* Official::release_patronymic() {
  clear_has_patronymic();
  if (patronymic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = patronymic_;
    patronymic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Official::set_allocated_patronymic(::std::string* patronymic) {
  if (patronymic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patronymic_;
  }
  if (patronymic) {
    set_has_patronymic();
    patronymic_ = patronymic;
  } else {
    clear_has_patronymic();
    patronymic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Official.Patronymic)
}

// optional string JobTitle = 4;
inline bool Official::has_jobtitle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Official::set_has_jobtitle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Official::clear_has_jobtitle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Official::clear_jobtitle() {
  if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobtitle_->clear();
  }
  clear_has_jobtitle();
}
inline const ::std::string& Official::jobtitle() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Official.JobTitle)
  return *jobtitle_;
}
inline void Official::set_jobtitle(const ::std::string& value) {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobtitle_ = new ::std::string;
  }
  jobtitle_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Official.JobTitle)
}
inline void Official::set_jobtitle(const char* value) {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobtitle_ = new ::std::string;
  }
  jobtitle_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Official.JobTitle)
}
inline void Official::set_jobtitle(const char* value, size_t size) {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobtitle_ = new ::std::string;
  }
  jobtitle_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Official.JobTitle)
}
inline ::std::string* Official::mutable_jobtitle() {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobtitle_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Official.JobTitle)
  return jobtitle_;
}
inline ::std::string* Official::release_jobtitle() {
  clear_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = jobtitle_;
    jobtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Official::set_allocated_jobtitle(::std::string* jobtitle) {
  if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobtitle_;
  }
  if (jobtitle) {
    set_has_jobtitle();
    jobtitle_ = jobtitle;
  } else {
    clear_has_jobtitle();
    jobtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Official.JobTitle)
}

// -------------------------------------------------------------------

// Attorney

// optional string Date = 1;
inline bool Attorney::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attorney::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attorney::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attorney::clear_date() {
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_->clear();
  }
  clear_has_date();
}
inline const ::std::string& Attorney::date() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Attorney.Date)
  return *date_;
}
inline void Attorney::set_date(const ::std::string& value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Attorney.Date)
}
inline void Attorney::set_date(const char* value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Attorney.Date)
}
inline void Attorney::set_date(const char* value, size_t size) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Attorney.Date)
}
inline ::std::string* Attorney::mutable_date() {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Attorney.Date)
  return date_;
}
inline ::std::string* Attorney::release_date() {
  clear_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = date_;
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Attorney::set_allocated_date(::std::string* date) {
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_;
  }
  if (date) {
    set_has_date();
    date_ = date;
  } else {
    clear_has_date();
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Attorney.Date)
}

// optional string Number = 2;
inline bool Attorney::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attorney::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attorney::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attorney::clear_number() {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& Attorney::number() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Attorney.Number)
  return *number_;
}
inline void Attorney::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Attorney.Number)
}
inline void Attorney::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Attorney.Number)
}
inline void Attorney::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Attorney.Number)
}
inline ::std::string* Attorney::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    number_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Attorney.Number)
  return number_;
}
inline ::std::string* Attorney::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Attorney::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Attorney.Number)
}

// optional string IssuerOrganizationName = 3;
inline bool Attorney::has_issuerorganizationname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attorney::set_has_issuerorganizationname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attorney::clear_has_issuerorganizationname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attorney::clear_issuerorganizationname() {
  if (issuerorganizationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    issuerorganizationname_->clear();
  }
  clear_has_issuerorganizationname();
}
inline const ::std::string& Attorney::issuerorganizationname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Attorney.IssuerOrganizationName)
  return *issuerorganizationname_;
}
inline void Attorney::set_issuerorganizationname(const ::std::string& value) {
  set_has_issuerorganizationname();
  if (issuerorganizationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    issuerorganizationname_ = new ::std::string;
  }
  issuerorganizationname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Attorney.IssuerOrganizationName)
}
inline void Attorney::set_issuerorganizationname(const char* value) {
  set_has_issuerorganizationname();
  if (issuerorganizationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    issuerorganizationname_ = new ::std::string;
  }
  issuerorganizationname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Attorney.IssuerOrganizationName)
}
inline void Attorney::set_issuerorganizationname(const char* value, size_t size) {
  set_has_issuerorganizationname();
  if (issuerorganizationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    issuerorganizationname_ = new ::std::string;
  }
  issuerorganizationname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Attorney.IssuerOrganizationName)
}
inline ::std::string* Attorney::mutable_issuerorganizationname() {
  set_has_issuerorganizationname();
  if (issuerorganizationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    issuerorganizationname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Attorney.IssuerOrganizationName)
  return issuerorganizationname_;
}
inline ::std::string* Attorney::release_issuerorganizationname() {
  clear_has_issuerorganizationname();
  if (issuerorganizationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = issuerorganizationname_;
    issuerorganizationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Attorney::set_allocated_issuerorganizationname(::std::string* issuerorganizationname) {
  if (issuerorganizationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete issuerorganizationname_;
  }
  if (issuerorganizationname) {
    set_has_issuerorganizationname();
    issuerorganizationname_ = issuerorganizationname;
  } else {
    clear_has_issuerorganizationname();
    issuerorganizationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Attorney.IssuerOrganizationName)
}

// optional .Diadoc.Api.Proto.Invoicing.Official IssuerPerson = 4;
inline bool Attorney::has_issuerperson() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Attorney::set_has_issuerperson() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Attorney::clear_has_issuerperson() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Attorney::clear_issuerperson() {
  if (issuerperson_ != NULL) issuerperson_->::Diadoc::Api::Proto::Invoicing::Official::Clear();
  clear_has_issuerperson();
}
inline const ::Diadoc::Api::Proto::Invoicing::Official& Attorney::issuerperson() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Attorney.IssuerPerson)
  return issuerperson_ != NULL ? *issuerperson_ : *default_instance_->issuerperson_;
}
inline ::Diadoc::Api::Proto::Invoicing::Official* Attorney::mutable_issuerperson() {
  set_has_issuerperson();
  if (issuerperson_ == NULL) issuerperson_ = new ::Diadoc::Api::Proto::Invoicing::Official;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Attorney.IssuerPerson)
  return issuerperson_;
}
inline ::Diadoc::Api::Proto::Invoicing::Official* Attorney::release_issuerperson() {
  clear_has_issuerperson();
  ::Diadoc::Api::Proto::Invoicing::Official* temp = issuerperson_;
  issuerperson_ = NULL;
  return temp;
}
inline void Attorney::set_allocated_issuerperson(::Diadoc::Api::Proto::Invoicing::Official* issuerperson) {
  delete issuerperson_;
  issuerperson_ = issuerperson;
  if (issuerperson) {
    set_has_issuerperson();
  } else {
    clear_has_issuerperson();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Attorney.IssuerPerson)
}

// optional string IssuerAdditionalInfo = 5;
inline bool Attorney::has_issueradditionalinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Attorney::set_has_issueradditionalinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Attorney::clear_has_issueradditionalinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Attorney::clear_issueradditionalinfo() {
  if (issueradditionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    issueradditionalinfo_->clear();
  }
  clear_has_issueradditionalinfo();
}
inline const ::std::string& Attorney::issueradditionalinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Attorney.IssuerAdditionalInfo)
  return *issueradditionalinfo_;
}
inline void Attorney::set_issueradditionalinfo(const ::std::string& value) {
  set_has_issueradditionalinfo();
  if (issueradditionalinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    issueradditionalinfo_ = new ::std::string;
  }
  issueradditionalinfo_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Attorney.IssuerAdditionalInfo)
}
inline void Attorney::set_issueradditionalinfo(const char* value) {
  set_has_issueradditionalinfo();
  if (issueradditionalinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    issueradditionalinfo_ = new ::std::string;
  }
  issueradditionalinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Attorney.IssuerAdditionalInfo)
}
inline void Attorney::set_issueradditionalinfo(const char* value, size_t size) {
  set_has_issueradditionalinfo();
  if (issueradditionalinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    issueradditionalinfo_ = new ::std::string;
  }
  issueradditionalinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Attorney.IssuerAdditionalInfo)
}
inline ::std::string* Attorney::mutable_issueradditionalinfo() {
  set_has_issueradditionalinfo();
  if (issueradditionalinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    issueradditionalinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Attorney.IssuerAdditionalInfo)
  return issueradditionalinfo_;
}
inline ::std::string* Attorney::release_issueradditionalinfo() {
  clear_has_issueradditionalinfo();
  if (issueradditionalinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = issueradditionalinfo_;
    issueradditionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Attorney::set_allocated_issueradditionalinfo(::std::string* issueradditionalinfo) {
  if (issueradditionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete issueradditionalinfo_;
  }
  if (issueradditionalinfo) {
    set_has_issueradditionalinfo();
    issueradditionalinfo_ = issueradditionalinfo;
  } else {
    clear_has_issueradditionalinfo();
    issueradditionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Attorney.IssuerAdditionalInfo)
}

// optional .Diadoc.Api.Proto.Invoicing.Official RecipientPerson = 6;
inline bool Attorney::has_recipientperson() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Attorney::set_has_recipientperson() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Attorney::clear_has_recipientperson() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Attorney::clear_recipientperson() {
  if (recipientperson_ != NULL) recipientperson_->::Diadoc::Api::Proto::Invoicing::Official::Clear();
  clear_has_recipientperson();
}
inline const ::Diadoc::Api::Proto::Invoicing::Official& Attorney::recipientperson() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Attorney.RecipientPerson)
  return recipientperson_ != NULL ? *recipientperson_ : *default_instance_->recipientperson_;
}
inline ::Diadoc::Api::Proto::Invoicing::Official* Attorney::mutable_recipientperson() {
  set_has_recipientperson();
  if (recipientperson_ == NULL) recipientperson_ = new ::Diadoc::Api::Proto::Invoicing::Official;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Attorney.RecipientPerson)
  return recipientperson_;
}
inline ::Diadoc::Api::Proto::Invoicing::Official* Attorney::release_recipientperson() {
  clear_has_recipientperson();
  ::Diadoc::Api::Proto::Invoicing::Official* temp = recipientperson_;
  recipientperson_ = NULL;
  return temp;
}
inline void Attorney::set_allocated_recipientperson(::Diadoc::Api::Proto::Invoicing::Official* recipientperson) {
  delete recipientperson_;
  recipientperson_ = recipientperson;
  if (recipientperson) {
    set_has_recipientperson();
  } else {
    clear_has_recipientperson();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Attorney.RecipientPerson)
}

// optional string RecipientAdditionalInfo = 7;
inline bool Attorney::has_recipientadditionalinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Attorney::set_has_recipientadditionalinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Attorney::clear_has_recipientadditionalinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Attorney::clear_recipientadditionalinfo() {
  if (recipientadditionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recipientadditionalinfo_->clear();
  }
  clear_has_recipientadditionalinfo();
}
inline const ::std::string& Attorney::recipientadditionalinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.Attorney.RecipientAdditionalInfo)
  return *recipientadditionalinfo_;
}
inline void Attorney::set_recipientadditionalinfo(const ::std::string& value) {
  set_has_recipientadditionalinfo();
  if (recipientadditionalinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recipientadditionalinfo_ = new ::std::string;
  }
  recipientadditionalinfo_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.Attorney.RecipientAdditionalInfo)
}
inline void Attorney::set_recipientadditionalinfo(const char* value) {
  set_has_recipientadditionalinfo();
  if (recipientadditionalinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recipientadditionalinfo_ = new ::std::string;
  }
  recipientadditionalinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.Attorney.RecipientAdditionalInfo)
}
inline void Attorney::set_recipientadditionalinfo(const char* value, size_t size) {
  set_has_recipientadditionalinfo();
  if (recipientadditionalinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recipientadditionalinfo_ = new ::std::string;
  }
  recipientadditionalinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.Attorney.RecipientAdditionalInfo)
}
inline ::std::string* Attorney::mutable_recipientadditionalinfo() {
  set_has_recipientadditionalinfo();
  if (recipientadditionalinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recipientadditionalinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.Attorney.RecipientAdditionalInfo)
  return recipientadditionalinfo_;
}
inline ::std::string* Attorney::release_recipientadditionalinfo() {
  clear_has_recipientadditionalinfo();
  if (recipientadditionalinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = recipientadditionalinfo_;
    recipientadditionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Attorney::set_allocated_recipientadditionalinfo(::std::string* recipientadditionalinfo) {
  if (recipientadditionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recipientadditionalinfo_;
  }
  if (recipientadditionalinfo) {
    set_has_recipientadditionalinfo();
    recipientadditionalinfo_ = recipientadditionalinfo;
  } else {
    clear_has_recipientadditionalinfo();
    recipientadditionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.Attorney.RecipientAdditionalInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Invoicing
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Invoicing_2fOfficial_2eproto__INCLUDED
