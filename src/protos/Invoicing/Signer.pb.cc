// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invoicing/Signer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Invoicing/Signer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Invoicing {

namespace {

const ::google::protobuf::Descriptor* Signer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Signer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignerDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignerDetails_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Invoicing_2fSigner_2eproto() {
  protobuf_AddDesc_Invoicing_2fSigner_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Invoicing/Signer.proto");
  GOOGLE_CHECK(file != NULL);
  Signer_descriptor_ = file->message_type(0);
  static const int Signer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signer, signercertificate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signer, signerdetails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signer, signercertificatethumbprint_),
  };
  Signer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Signer_descriptor_,
      Signer::default_instance_,
      Signer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Signer));
  SignerDetails_descriptor_ = file->message_type(1);
  static const int SignerDetails_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignerDetails, surname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignerDetails, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignerDetails, patronymic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignerDetails, jobtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignerDetails, inn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignerDetails, soleproprietorregistrationcertificate_),
  };
  SignerDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignerDetails_descriptor_,
      SignerDetails::default_instance_,
      SignerDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignerDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignerDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignerDetails));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Invoicing_2fSigner_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Signer_descriptor_, &Signer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignerDetails_descriptor_, &SignerDetails::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Invoicing_2fSigner_2eproto() {
  delete Signer::default_instance_;
  delete Signer_reflection_;
  delete SignerDetails::default_instance_;
  delete SignerDetails_reflection_;
}

void protobuf_AddDesc_Invoicing_2fSigner_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026Invoicing/Signer.proto\022\032Diadoc.Api.Pro"
    "to.Invoicing\"\212\001\n\006Signer\022\031\n\021SignerCertifi"
    "cate\030\001 \001(\014\022@\n\rSignerDetails\030\002 \001(\0132).Diad"
    "oc.Api.Proto.Invoicing.SignerDetails\022#\n\033"
    "SignerCertificateThumbprint\030\003 \001(\t\"\225\001\n\rSi"
    "gnerDetails\022\017\n\007Surname\030\001 \002(\t\022\021\n\tFirstNam"
    "e\030\002 \002(\t\022\022\n\nPatronymic\030\003 \001(\t\022\020\n\010JobTitle\030"
    "\004 \001(\t\022\013\n\003Inn\030\005 \001(\t\022-\n%SoleProprietorRegi"
    "strationCertificate\030\006 \001(\t", 345);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Invoicing/Signer.proto", &protobuf_RegisterTypes);
  Signer::default_instance_ = new Signer();
  SignerDetails::default_instance_ = new SignerDetails();
  Signer::default_instance_->InitAsDefaultInstance();
  SignerDetails::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Invoicing_2fSigner_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Invoicing_2fSigner_2eproto {
  StaticDescriptorInitializer_Invoicing_2fSigner_2eproto() {
    protobuf_AddDesc_Invoicing_2fSigner_2eproto();
  }
} static_descriptor_initializer_Invoicing_2fSigner_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Signer::kSignerCertificateFieldNumber;
const int Signer::kSignerDetailsFieldNumber;
const int Signer::kSignerCertificateThumbprintFieldNumber;
#endif  // !_MSC_VER

Signer::Signer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.Signer)
}

void Signer::InitAsDefaultInstance() {
  signerdetails_ = const_cast< ::Diadoc::Api::Proto::Invoicing::SignerDetails*>(&::Diadoc::Api::Proto::Invoicing::SignerDetails::default_instance());
}

Signer::Signer(const Signer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.Signer)
}

void Signer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signercertificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signerdetails_ = NULL;
  signercertificatethumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Signer::~Signer() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.Signer)
  SharedDtor();
}

void Signer::SharedDtor() {
  if (signercertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signercertificate_;
  }
  if (signercertificatethumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signercertificatethumbprint_;
  }
  if (this != default_instance_) {
    delete signerdetails_;
  }
}

void Signer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signer_descriptor_;
}

const Signer& Signer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fSigner_2eproto();
  return *default_instance_;
}

Signer* Signer::default_instance_ = NULL;

Signer* Signer::New() const {
  return new Signer;
}

void Signer::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_signercertificate()) {
      if (signercertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signercertificate_->clear();
      }
    }
    if (has_signerdetails()) {
      if (signerdetails_ != NULL) signerdetails_->::Diadoc::Api::Proto::Invoicing::SignerDetails::Clear();
    }
    if (has_signercertificatethumbprint()) {
      if (signercertificatethumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signercertificatethumbprint_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Signer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.Signer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes SignerCertificate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signercertificate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SignerDetails;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.SignerDetails SignerDetails = 2;
      case 2: {
        if (tag == 18) {
         parse_SignerDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signerdetails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SignerCertificateThumbprint;
        break;
      }

      // optional string SignerCertificateThumbprint = 3;
      case 3: {
        if (tag == 26) {
         parse_SignerCertificateThumbprint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signercertificatethumbprint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signercertificatethumbprint().data(), this->signercertificatethumbprint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signercertificatethumbprint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.Signer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.Signer)
  return false;
#undef DO_
}

void Signer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.Signer)
  // optional bytes SignerCertificate = 1;
  if (has_signercertificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signercertificate(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.SignerDetails SignerDetails = 2;
  if (has_signerdetails()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signerdetails(), output);
  }

  // optional string SignerCertificateThumbprint = 3;
  if (has_signercertificatethumbprint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signercertificatethumbprint().data(), this->signercertificatethumbprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signercertificatethumbprint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->signercertificatethumbprint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.Signer)
}

::google::protobuf::uint8* Signer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.Signer)
  // optional bytes SignerCertificate = 1;
  if (has_signercertificate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signercertificate(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.SignerDetails SignerDetails = 2;
  if (has_signerdetails()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signerdetails(), target);
  }

  // optional string SignerCertificateThumbprint = 3;
  if (has_signercertificatethumbprint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signercertificatethumbprint().data(), this->signercertificatethumbprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signercertificatethumbprint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->signercertificatethumbprint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.Signer)
  return target;
}

int Signer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes SignerCertificate = 1;
    if (has_signercertificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signercertificate());
    }

    // optional .Diadoc.Api.Proto.Invoicing.SignerDetails SignerDetails = 2;
    if (has_signerdetails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signerdetails());
    }

    // optional string SignerCertificateThumbprint = 3;
    if (has_signercertificatethumbprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signercertificatethumbprint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Signer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Signer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Signer::MergeFrom(const Signer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signercertificate()) {
      set_signercertificate(from.signercertificate());
    }
    if (from.has_signerdetails()) {
      mutable_signerdetails()->::Diadoc::Api::Proto::Invoicing::SignerDetails::MergeFrom(from.signerdetails());
    }
    if (from.has_signercertificatethumbprint()) {
      set_signercertificatethumbprint(from.signercertificatethumbprint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Signer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signer::CopyFrom(const Signer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signer::IsInitialized() const {

  if (has_signerdetails()) {
    if (!this->signerdetails().IsInitialized()) return false;
  }
  return true;
}

void Signer::Swap(Signer* other) {
  if (other != this) {
    std::swap(signercertificate_, other->signercertificate_);
    std::swap(signerdetails_, other->signerdetails_);
    std::swap(signercertificatethumbprint_, other->signercertificatethumbprint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Signer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Signer_descriptor_;
  metadata.reflection = Signer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignerDetails::kSurnameFieldNumber;
const int SignerDetails::kFirstNameFieldNumber;
const int SignerDetails::kPatronymicFieldNumber;
const int SignerDetails::kJobTitleFieldNumber;
const int SignerDetails::kInnFieldNumber;
const int SignerDetails::kSoleProprietorRegistrationCertificateFieldNumber;
#endif  // !_MSC_VER

SignerDetails::SignerDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.SignerDetails)
}

void SignerDetails::InitAsDefaultInstance() {
}

SignerDetails::SignerDetails(const SignerDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.SignerDetails)
}

void SignerDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  surname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patronymic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jobtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  soleproprietorregistrationcertificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignerDetails::~SignerDetails() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.SignerDetails)
  SharedDtor();
}

void SignerDetails::SharedDtor() {
  if (surname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete surname_;
  }
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstname_;
  }
  if (patronymic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patronymic_;
  }
  if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobtitle_;
  }
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inn_;
  }
  if (soleproprietorregistrationcertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete soleproprietorregistrationcertificate_;
  }
  if (this != default_instance_) {
  }
}

void SignerDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignerDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignerDetails_descriptor_;
}

const SignerDetails& SignerDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fSigner_2eproto();
  return *default_instance_;
}

SignerDetails* SignerDetails::default_instance_ = NULL;

SignerDetails* SignerDetails::New() const {
  return new SignerDetails;
}

void SignerDetails::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_surname()) {
      if (surname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        surname_->clear();
      }
    }
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firstname_->clear();
      }
    }
    if (has_patronymic()) {
      if (patronymic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        patronymic_->clear();
      }
    }
    if (has_jobtitle()) {
      if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jobtitle_->clear();
      }
    }
    if (has_inn()) {
      if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inn_->clear();
      }
    }
    if (has_soleproprietorregistrationcertificate()) {
      if (soleproprietorregistrationcertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        soleproprietorregistrationcertificate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignerDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.SignerDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Surname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_surname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->surname().data(), this->surname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "surname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FirstName;
        break;
      }

      // required string FirstName = 2;
      case 2: {
        if (tag == 18) {
         parse_FirstName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firstname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Patronymic;
        break;
      }

      // optional string Patronymic = 3;
      case 3: {
        if (tag == 26) {
         parse_Patronymic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patronymic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patronymic().data(), this->patronymic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "patronymic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_JobTitle;
        break;
      }

      // optional string JobTitle = 4;
      case 4: {
        if (tag == 34) {
         parse_JobTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jobtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jobtitle().data(), this->jobtitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jobtitle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Inn;
        break;
      }

      // optional string Inn = 5;
      case 5: {
        if (tag == 42) {
         parse_Inn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inn().data(), this->inn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SoleProprietorRegistrationCertificate;
        break;
      }

      // optional string SoleProprietorRegistrationCertificate = 6;
      case 6: {
        if (tag == 50) {
         parse_SoleProprietorRegistrationCertificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soleproprietorregistrationcertificate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->soleproprietorregistrationcertificate().data(), this->soleproprietorregistrationcertificate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "soleproprietorregistrationcertificate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.SignerDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.SignerDetails)
  return false;
#undef DO_
}

void SignerDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.SignerDetails)
  // required string Surname = 1;
  if (has_surname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->surname().data(), this->surname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "surname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->surname(), output);
  }

  // required string FirstName = 2;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firstname(), output);
  }

  // optional string Patronymic = 3;
  if (has_patronymic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patronymic().data(), this->patronymic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patronymic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->patronymic(), output);
  }

  // optional string JobTitle = 4;
  if (has_jobtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jobtitle().data(), this->jobtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jobtitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->jobtitle(), output);
  }

  // optional string Inn = 5;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->inn(), output);
  }

  // optional string SoleProprietorRegistrationCertificate = 6;
  if (has_soleproprietorregistrationcertificate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->soleproprietorregistrationcertificate().data(), this->soleproprietorregistrationcertificate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "soleproprietorregistrationcertificate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->soleproprietorregistrationcertificate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.SignerDetails)
}

::google::protobuf::uint8* SignerDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.SignerDetails)
  // required string Surname = 1;
  if (has_surname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->surname().data(), this->surname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "surname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->surname(), target);
  }

  // required string FirstName = 2;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->firstname(), target);
  }

  // optional string Patronymic = 3;
  if (has_patronymic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patronymic().data(), this->patronymic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patronymic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->patronymic(), target);
  }

  // optional string JobTitle = 4;
  if (has_jobtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jobtitle().data(), this->jobtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jobtitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jobtitle(), target);
  }

  // optional string Inn = 5;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->inn(), target);
  }

  // optional string SoleProprietorRegistrationCertificate = 6;
  if (has_soleproprietorregistrationcertificate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->soleproprietorregistrationcertificate().data(), this->soleproprietorregistrationcertificate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "soleproprietorregistrationcertificate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->soleproprietorregistrationcertificate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.SignerDetails)
  return target;
}

int SignerDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Surname = 1;
    if (has_surname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->surname());
    }

    // required string FirstName = 2;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }

    // optional string Patronymic = 3;
    if (has_patronymic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patronymic());
    }

    // optional string JobTitle = 4;
    if (has_jobtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jobtitle());
    }

    // optional string Inn = 5;
    if (has_inn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inn());
    }

    // optional string SoleProprietorRegistrationCertificate = 6;
    if (has_soleproprietorregistrationcertificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soleproprietorregistrationcertificate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignerDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignerDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignerDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignerDetails::MergeFrom(const SignerDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_surname()) {
      set_surname(from.surname());
    }
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_patronymic()) {
      set_patronymic(from.patronymic());
    }
    if (from.has_jobtitle()) {
      set_jobtitle(from.jobtitle());
    }
    if (from.has_inn()) {
      set_inn(from.inn());
    }
    if (from.has_soleproprietorregistrationcertificate()) {
      set_soleproprietorregistrationcertificate(from.soleproprietorregistrationcertificate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignerDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignerDetails::CopyFrom(const SignerDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignerDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SignerDetails::Swap(SignerDetails* other) {
  if (other != this) {
    std::swap(surname_, other->surname_);
    std::swap(firstname_, other->firstname_);
    std::swap(patronymic_, other->patronymic_);
    std::swap(jobtitle_, other->jobtitle_);
    std::swap(inn_, other->inn_);
    std::swap(soleproprietorregistrationcertificate_, other->soleproprietorregistrationcertificate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignerDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignerDetails_descriptor_;
  metadata.reflection = SignerDetails_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Invoicing
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
