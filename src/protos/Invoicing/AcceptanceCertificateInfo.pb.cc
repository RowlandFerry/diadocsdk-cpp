// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invoicing/AcceptanceCertificateInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Invoicing/AcceptanceCertificateInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Invoicing {

namespace {

const ::google::protobuf::Descriptor* AcceptanceCertificateSellerTitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptanceCertificateSellerTitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptanceCertificateBuyerTitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptanceCertificateBuyerTitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptanceCertificateSignatureInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptanceCertificateSignatureInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Invoicing_2fAcceptanceCertificateInfo_2eproto() {
  protobuf_AddDesc_Invoicing_2fAcceptanceCertificateInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Invoicing/AcceptanceCertificateInfo.proto");
  GOOGLE_CHECK(file != NULL);
  AcceptanceCertificateSellerTitleInfo_descriptor_ = file->message_type(0);
  static const int AcceptanceCertificateSellerTitleInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSellerTitleInfo, seller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSellerTitleInfo, buyer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSellerTitleInfo, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSellerTitleInfo, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSellerTitleInfo, documenttitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSellerTitleInfo, works_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSellerTitleInfo, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSellerTitleInfo, signer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSellerTitleInfo, additionalinfo_),
  };
  AcceptanceCertificateSellerTitleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptanceCertificateSellerTitleInfo_descriptor_,
      AcceptanceCertificateSellerTitleInfo::default_instance_,
      AcceptanceCertificateSellerTitleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSellerTitleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSellerTitleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptanceCertificateSellerTitleInfo));
  AcceptanceCertificateBuyerTitleInfo_descriptor_ = file->message_type(1);
  static const int AcceptanceCertificateBuyerTitleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateBuyerTitleInfo, complaints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateBuyerTitleInfo, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateBuyerTitleInfo, signer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateBuyerTitleInfo, additionalinfo_),
  };
  AcceptanceCertificateBuyerTitleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptanceCertificateBuyerTitleInfo_descriptor_,
      AcceptanceCertificateBuyerTitleInfo::default_instance_,
      AcceptanceCertificateBuyerTitleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateBuyerTitleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateBuyerTitleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptanceCertificateBuyerTitleInfo));
  AcceptanceCertificateSignatureInfo_descriptor_ = file->message_type(2);
  static const int AcceptanceCertificateSignatureInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSignatureInfo, signaturedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSignatureInfo, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSignatureInfo, attorney_),
  };
  AcceptanceCertificateSignatureInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptanceCertificateSignatureInfo_descriptor_,
      AcceptanceCertificateSignatureInfo::default_instance_,
      AcceptanceCertificateSignatureInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSignatureInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateSignatureInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptanceCertificateSignatureInfo));
  WorkDescription_descriptor_ = file->message_type(3);
  static const int WorkDescription_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkDescription, startingdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkDescription, completiondate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkDescription, totalwithvatexcluded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkDescription, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkDescription, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkDescription, items_),
  };
  WorkDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkDescription_descriptor_,
      WorkDescription::default_instance_,
      WorkDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkDescription));
  WorkItem_descriptor_ = file->message_type(4);
  static const int WorkItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkItem, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkItem, unitcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkItem, unitname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkItem, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkItem, subtotalwithvatexcluded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkItem, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkItem, subtotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkItem, additionalinfo_),
  };
  WorkItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkItem_descriptor_,
      WorkItem::default_instance_,
      WorkItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Invoicing_2fAcceptanceCertificateInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptanceCertificateSellerTitleInfo_descriptor_, &AcceptanceCertificateSellerTitleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptanceCertificateBuyerTitleInfo_descriptor_, &AcceptanceCertificateBuyerTitleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptanceCertificateSignatureInfo_descriptor_, &AcceptanceCertificateSignatureInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkDescription_descriptor_, &WorkDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkItem_descriptor_, &WorkItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Invoicing_2fAcceptanceCertificateInfo_2eproto() {
  delete AcceptanceCertificateSellerTitleInfo::default_instance_;
  delete AcceptanceCertificateSellerTitleInfo_reflection_;
  delete AcceptanceCertificateBuyerTitleInfo::default_instance_;
  delete AcceptanceCertificateBuyerTitleInfo_reflection_;
  delete AcceptanceCertificateSignatureInfo::default_instance_;
  delete AcceptanceCertificateSignatureInfo_reflection_;
  delete WorkDescription::default_instance_;
  delete WorkDescription_reflection_;
  delete WorkItem::default_instance_;
  delete WorkItem_reflection_;
}

void protobuf_AddDesc_Invoicing_2fAcceptanceCertificateInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::Invoicing::protobuf_AddDesc_Invoicing_2fSigner_2eproto();
  ::Diadoc::Api::Proto::Invoicing::protobuf_AddDesc_Invoicing_2fOfficial_2eproto();
  ::Diadoc::Api::Proto::Invoicing::protobuf_AddDesc_Invoicing_2fOrganizationInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)Invoicing/AcceptanceCertificateInfo.pr"
    "oto\022\032Diadoc.Api.Proto.Invoicing\032\026Invoici"
    "ng/Signer.proto\032\030Invoicing/Official.prot"
    "o\032 Invoicing/OrganizationInfo.proto\"\311\003\n$"
    "AcceptanceCertificateSellerTitleInfo\022B\n\006"
    "Seller\030\001 \002(\01322.Diadoc.Api.Proto.Invoicin"
    "g.DiadocOrganizationInfo\022=\n\005Buyer\030\002 \002(\0132"
    "..Diadoc.Api.Proto.Invoicing.DocflowPart"
    "icipant\022\024\n\014DocumentDate\030\003 \002(\t\022\026\n\016Documen"
    "tNumber\030\004 \001(\t\022\025\n\rDocumentTitle\030\005 \002(\t\022:\n\005"
    "Works\030\006 \003(\0132+.Diadoc.Api.Proto.Invoicing"
    ".WorkDescription\022Q\n\tSignature\030\007 \002(\0132>.Di"
    "adoc.Api.Proto.Invoicing.AcceptanceCerti"
    "ficateSignatureInfo\0222\n\006Signer\030\010 \002(\0132\".Di"
    "adoc.Api.Proto.Invoicing.Signer\022\026\n\016Addit"
    "ionalInfo\030\t \001(\t\"\330\001\n#AcceptanceCertificat"
    "eBuyerTitleInfo\022\022\n\nComplaints\030\001 \001(\t\022Q\n\tS"
    "ignature\030\002 \002(\0132>.Diadoc.Api.Proto.Invoic"
    "ing.AcceptanceCertificateSignatureInfo\0222"
    "\n\006Signer\030\003 \002(\0132\".Diadoc.Api.Proto.Invoic"
    "ing.Signer\022\026\n\016AdditionalInfo\030\004 \001(\t\"\253\001\n\"A"
    "cceptanceCertificateSignatureInfo\022\025\n\rSig"
    "natureDate\030\001 \001(\t\0226\n\010Official\030\002 \001(\0132$.Dia"
    "doc.Api.Proto.Invoicing.Official\0226\n\010Atto"
    "rney\030\003 \001(\0132$.Diadoc.Api.Proto.Invoicing."
    "Attorney\"\256\001\n\017WorkDescription\022\024\n\014Starting"
    "Date\030\001 \001(\t\022\026\n\016CompletionDate\030\002 \001(\t\022\034\n\024To"
    "talWithVatExcluded\030\003 \001(\t\022\013\n\003Vat\030\004 \001(\t\022\r\n"
    "\005Total\030\005 \002(\t\0223\n\005Items\030\006 \003(\0132$.Diadoc.Api"
    ".Proto.Invoicing.WorkItem\"\312\001\n\010WorkItem\022\014"
    "\n\004Name\030\001 \001(\t\022\023\n\013Description\030\002 \001(\t\022\020\n\010Uni"
    "tCode\030\003 \001(\t\022\020\n\010UnitName\030\004 \001(\t\022\r\n\005Price\030\005"
    " \001(\t\022\020\n\010Quantity\030\006 \001(\t\022\037\n\027SubtotalWithVa"
    "tExcluded\030\007 \001(\t\022\013\n\003Vat\030\010 \001(\t\022\020\n\010Subtotal"
    "\030\t \001(\t\022\026\n\016AdditionalInfo\030\n \001(\t", 1390);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Invoicing/AcceptanceCertificateInfo.proto", &protobuf_RegisterTypes);
  AcceptanceCertificateSellerTitleInfo::default_instance_ = new AcceptanceCertificateSellerTitleInfo();
  AcceptanceCertificateBuyerTitleInfo::default_instance_ = new AcceptanceCertificateBuyerTitleInfo();
  AcceptanceCertificateSignatureInfo::default_instance_ = new AcceptanceCertificateSignatureInfo();
  WorkDescription::default_instance_ = new WorkDescription();
  WorkItem::default_instance_ = new WorkItem();
  AcceptanceCertificateSellerTitleInfo::default_instance_->InitAsDefaultInstance();
  AcceptanceCertificateBuyerTitleInfo::default_instance_->InitAsDefaultInstance();
  AcceptanceCertificateSignatureInfo::default_instance_->InitAsDefaultInstance();
  WorkDescription::default_instance_->InitAsDefaultInstance();
  WorkItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Invoicing_2fAcceptanceCertificateInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Invoicing_2fAcceptanceCertificateInfo_2eproto {
  StaticDescriptorInitializer_Invoicing_2fAcceptanceCertificateInfo_2eproto() {
    protobuf_AddDesc_Invoicing_2fAcceptanceCertificateInfo_2eproto();
  }
} static_descriptor_initializer_Invoicing_2fAcceptanceCertificateInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AcceptanceCertificateSellerTitleInfo::kSellerFieldNumber;
const int AcceptanceCertificateSellerTitleInfo::kBuyerFieldNumber;
const int AcceptanceCertificateSellerTitleInfo::kDocumentDateFieldNumber;
const int AcceptanceCertificateSellerTitleInfo::kDocumentNumberFieldNumber;
const int AcceptanceCertificateSellerTitleInfo::kDocumentTitleFieldNumber;
const int AcceptanceCertificateSellerTitleInfo::kWorksFieldNumber;
const int AcceptanceCertificateSellerTitleInfo::kSignatureFieldNumber;
const int AcceptanceCertificateSellerTitleInfo::kSignerFieldNumber;
const int AcceptanceCertificateSellerTitleInfo::kAdditionalInfoFieldNumber;
#endif  // !_MSC_VER

AcceptanceCertificateSellerTitleInfo::AcceptanceCertificateSellerTitleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSellerTitleInfo)
}

void AcceptanceCertificateSellerTitleInfo::InitAsDefaultInstance() {
  seller_ = const_cast< ::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo*>(&::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo::default_instance());
  buyer_ = const_cast< ::Diadoc::Api::Proto::Invoicing::DocflowParticipant*>(&::Diadoc::Api::Proto::Invoicing::DocflowParticipant::default_instance());
  signature_ = const_cast< ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificateSignatureInfo*>(&::Diadoc::Api::Proto::Invoicing::AcceptanceCertificateSignatureInfo::default_instance());
  signer_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Signer*>(&::Diadoc::Api::Proto::Invoicing::Signer::default_instance());
}

AcceptanceCertificateSellerTitleInfo::AcceptanceCertificateSellerTitleInfo(const AcceptanceCertificateSellerTitleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSellerTitleInfo)
}

void AcceptanceCertificateSellerTitleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seller_ = NULL;
  buyer_ = NULL;
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documenttitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_ = NULL;
  signer_ = NULL;
  additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptanceCertificateSellerTitleInfo::~AcceptanceCertificateSellerTitleInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSellerTitleInfo)
  SharedDtor();
}

void AcceptanceCertificateSellerTitleInfo::SharedDtor() {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (documenttitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documenttitle_;
  }
  if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete additionalinfo_;
  }
  if (this != default_instance_) {
    delete seller_;
    delete buyer_;
    delete signature_;
    delete signer_;
  }
}

void AcceptanceCertificateSellerTitleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptanceCertificateSellerTitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptanceCertificateSellerTitleInfo_descriptor_;
}

const AcceptanceCertificateSellerTitleInfo& AcceptanceCertificateSellerTitleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fAcceptanceCertificateInfo_2eproto();
  return *default_instance_;
}

AcceptanceCertificateSellerTitleInfo* AcceptanceCertificateSellerTitleInfo::default_instance_ = NULL;

AcceptanceCertificateSellerTitleInfo* AcceptanceCertificateSellerTitleInfo::New() const {
  return new AcceptanceCertificateSellerTitleInfo;
}

void AcceptanceCertificateSellerTitleInfo::Clear() {
  if (_has_bits_[0 / 32] & 223) {
    if (has_seller()) {
      if (seller_ != NULL) seller_->::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo::Clear();
    }
    if (has_buyer()) {
      if (buyer_ != NULL) buyer_->::Diadoc::Api::Proto::Invoicing::DocflowParticipant::Clear();
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentnumber_->clear();
      }
    }
    if (has_documenttitle()) {
      if (documenttitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documenttitle_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != NULL) signature_->::Diadoc::Api::Proto::Invoicing::AcceptanceCertificateSignatureInfo::Clear();
    }
    if (has_signer()) {
      if (signer_ != NULL) signer_->::Diadoc::Api::Proto::Invoicing::Signer::Clear();
    }
  }
  if (has_additionalinfo()) {
    if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      additionalinfo_->clear();
    }
  }
  works_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptanceCertificateSellerTitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSellerTitleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Seller = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seller()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Buyer;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.DocflowParticipant Buyer = 2;
      case 2: {
        if (tag == 18) {
         parse_Buyer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DocumentDate;
        break;
      }

      // required string DocumentDate = 3;
      case 3: {
        if (tag == 26) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DocumentNumber;
        break;
      }

      // optional string DocumentNumber = 4;
      case 4: {
        if (tag == 34) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DocumentTitle;
        break;
      }

      // required string DocumentTitle = 5;
      case 5: {
        if (tag == 42) {
         parse_DocumentTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documenttitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documenttitle().data(), this->documenttitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documenttitle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Works;
        break;
      }

      // repeated .Diadoc.Api.Proto.Invoicing.WorkDescription Works = 6;
      case 6: {
        if (tag == 50) {
         parse_Works:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_works()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Works;
        if (input->ExpectTag(58)) goto parse_Signature;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo Signature = 7;
      case 7: {
        if (tag == 58) {
         parse_Signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Signer;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 8;
      case 8: {
        if (tag == 66) {
         parse_Signer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_AdditionalInfo;
        break;
      }

      // optional string AdditionalInfo = 9;
      case 9: {
        if (tag == 74) {
         parse_AdditionalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->additionalinfo().data(), this->additionalinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "additionalinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSellerTitleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSellerTitleInfo)
  return false;
#undef DO_
}

void AcceptanceCertificateSellerTitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSellerTitleInfo)
  // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Seller = 1;
  if (has_seller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->seller(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.DocflowParticipant Buyer = 2;
  if (has_buyer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buyer(), output);
  }

  // required string DocumentDate = 3;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->documentdate(), output);
  }

  // optional string DocumentNumber = 4;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->documentnumber(), output);
  }

  // required string DocumentTitle = 5;
  if (has_documenttitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documenttitle().data(), this->documenttitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documenttitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->documenttitle(), output);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.WorkDescription Works = 6;
  for (int i = 0; i < this->works_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->works(i), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo Signature = 7;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->signature(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 8;
  if (has_signer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->signer(), output);
  }

  // optional string AdditionalInfo = 9;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->additionalinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSellerTitleInfo)
}

::google::protobuf::uint8* AcceptanceCertificateSellerTitleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSellerTitleInfo)
  // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Seller = 1;
  if (has_seller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->seller(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.DocflowParticipant Buyer = 2;
  if (has_buyer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buyer(), target);
  }

  // required string DocumentDate = 3;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->documentdate(), target);
  }

  // optional string DocumentNumber = 4;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->documentnumber(), target);
  }

  // required string DocumentTitle = 5;
  if (has_documenttitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documenttitle().data(), this->documenttitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documenttitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->documenttitle(), target);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.WorkDescription Works = 6;
  for (int i = 0; i < this->works_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->works(i), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo Signature = 7;
  if (has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->signature(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 8;
  if (has_signer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->signer(), target);
  }

  // optional string AdditionalInfo = 9;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->additionalinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSellerTitleInfo)
  return target;
}

int AcceptanceCertificateSellerTitleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Seller = 1;
    if (has_seller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seller());
    }

    // required .Diadoc.Api.Proto.Invoicing.DocflowParticipant Buyer = 2;
    if (has_buyer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyer());
    }

    // required string DocumentDate = 3;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // optional string DocumentNumber = 4;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

    // required string DocumentTitle = 5;
    if (has_documenttitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documenttitle());
    }

    // required .Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo Signature = 7;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signature());
    }

    // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 8;
    if (has_signer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signer());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string AdditionalInfo = 9;
    if (has_additionalinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalinfo());
    }

  }
  // repeated .Diadoc.Api.Proto.Invoicing.WorkDescription Works = 6;
  total_size += 1 * this->works_size();
  for (int i = 0; i < this->works_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->works(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptanceCertificateSellerTitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptanceCertificateSellerTitleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptanceCertificateSellerTitleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptanceCertificateSellerTitleInfo::MergeFrom(const AcceptanceCertificateSellerTitleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  works_.MergeFrom(from.works_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seller()) {
      mutable_seller()->::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo::MergeFrom(from.seller());
    }
    if (from.has_buyer()) {
      mutable_buyer()->::Diadoc::Api::Proto::Invoicing::DocflowParticipant::MergeFrom(from.buyer());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
    if (from.has_documenttitle()) {
      set_documenttitle(from.documenttitle());
    }
    if (from.has_signature()) {
      mutable_signature()->::Diadoc::Api::Proto::Invoicing::AcceptanceCertificateSignatureInfo::MergeFrom(from.signature());
    }
    if (from.has_signer()) {
      mutable_signer()->::Diadoc::Api::Proto::Invoicing::Signer::MergeFrom(from.signer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_additionalinfo()) {
      set_additionalinfo(from.additionalinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptanceCertificateSellerTitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptanceCertificateSellerTitleInfo::CopyFrom(const AcceptanceCertificateSellerTitleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptanceCertificateSellerTitleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000d7) != 0x000000d7) return false;

  if (has_seller()) {
    if (!this->seller().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->works())) return false;
  if (has_signature()) {
    if (!this->signature().IsInitialized()) return false;
  }
  if (has_signer()) {
    if (!this->signer().IsInitialized()) return false;
  }
  return true;
}

void AcceptanceCertificateSellerTitleInfo::Swap(AcceptanceCertificateSellerTitleInfo* other) {
  if (other != this) {
    std::swap(seller_, other->seller_);
    std::swap(buyer_, other->buyer_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(documenttitle_, other->documenttitle_);
    works_.Swap(&other->works_);
    std::swap(signature_, other->signature_);
    std::swap(signer_, other->signer_);
    std::swap(additionalinfo_, other->additionalinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptanceCertificateSellerTitleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptanceCertificateSellerTitleInfo_descriptor_;
  metadata.reflection = AcceptanceCertificateSellerTitleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptanceCertificateBuyerTitleInfo::kComplaintsFieldNumber;
const int AcceptanceCertificateBuyerTitleInfo::kSignatureFieldNumber;
const int AcceptanceCertificateBuyerTitleInfo::kSignerFieldNumber;
const int AcceptanceCertificateBuyerTitleInfo::kAdditionalInfoFieldNumber;
#endif  // !_MSC_VER

AcceptanceCertificateBuyerTitleInfo::AcceptanceCertificateBuyerTitleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateBuyerTitleInfo)
}

void AcceptanceCertificateBuyerTitleInfo::InitAsDefaultInstance() {
  signature_ = const_cast< ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificateSignatureInfo*>(&::Diadoc::Api::Proto::Invoicing::AcceptanceCertificateSignatureInfo::default_instance());
  signer_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Signer*>(&::Diadoc::Api::Proto::Invoicing::Signer::default_instance());
}

AcceptanceCertificateBuyerTitleInfo::AcceptanceCertificateBuyerTitleInfo(const AcceptanceCertificateBuyerTitleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateBuyerTitleInfo)
}

void AcceptanceCertificateBuyerTitleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  complaints_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_ = NULL;
  signer_ = NULL;
  additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptanceCertificateBuyerTitleInfo::~AcceptanceCertificateBuyerTitleInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateBuyerTitleInfo)
  SharedDtor();
}

void AcceptanceCertificateBuyerTitleInfo::SharedDtor() {
  if (complaints_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete complaints_;
  }
  if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete additionalinfo_;
  }
  if (this != default_instance_) {
    delete signature_;
    delete signer_;
  }
}

void AcceptanceCertificateBuyerTitleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptanceCertificateBuyerTitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptanceCertificateBuyerTitleInfo_descriptor_;
}

const AcceptanceCertificateBuyerTitleInfo& AcceptanceCertificateBuyerTitleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fAcceptanceCertificateInfo_2eproto();
  return *default_instance_;
}

AcceptanceCertificateBuyerTitleInfo* AcceptanceCertificateBuyerTitleInfo::default_instance_ = NULL;

AcceptanceCertificateBuyerTitleInfo* AcceptanceCertificateBuyerTitleInfo::New() const {
  return new AcceptanceCertificateBuyerTitleInfo;
}

void AcceptanceCertificateBuyerTitleInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_complaints()) {
      if (complaints_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        complaints_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != NULL) signature_->::Diadoc::Api::Proto::Invoicing::AcceptanceCertificateSignatureInfo::Clear();
    }
    if (has_signer()) {
      if (signer_ != NULL) signer_->::Diadoc::Api::Proto::Invoicing::Signer::Clear();
    }
    if (has_additionalinfo()) {
      if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        additionalinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptanceCertificateBuyerTitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateBuyerTitleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Complaints = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_complaints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->complaints().data(), this->complaints().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "complaints");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Signature;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo Signature = 2;
      case 2: {
        if (tag == 18) {
         parse_Signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Signer;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 3;
      case 3: {
        if (tag == 26) {
         parse_Signer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AdditionalInfo;
        break;
      }

      // optional string AdditionalInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_AdditionalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->additionalinfo().data(), this->additionalinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "additionalinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateBuyerTitleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateBuyerTitleInfo)
  return false;
#undef DO_
}

void AcceptanceCertificateBuyerTitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateBuyerTitleInfo)
  // optional string Complaints = 1;
  if (has_complaints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->complaints().data(), this->complaints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "complaints");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->complaints(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo Signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signature(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 3;
  if (has_signer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signer(), output);
  }

  // optional string AdditionalInfo = 4;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->additionalinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateBuyerTitleInfo)
}

::google::protobuf::uint8* AcceptanceCertificateBuyerTitleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateBuyerTitleInfo)
  // optional string Complaints = 1;
  if (has_complaints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->complaints().data(), this->complaints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "complaints");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->complaints(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo Signature = 2;
  if (has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signature(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 3;
  if (has_signer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->signer(), target);
  }

  // optional string AdditionalInfo = 4;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->additionalinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateBuyerTitleInfo)
  return target;
}

int AcceptanceCertificateBuyerTitleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Complaints = 1;
    if (has_complaints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->complaints());
    }

    // required .Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo Signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signature());
    }

    // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 3;
    if (has_signer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signer());
    }

    // optional string AdditionalInfo = 4;
    if (has_additionalinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptanceCertificateBuyerTitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptanceCertificateBuyerTitleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptanceCertificateBuyerTitleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptanceCertificateBuyerTitleInfo::MergeFrom(const AcceptanceCertificateBuyerTitleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_complaints()) {
      set_complaints(from.complaints());
    }
    if (from.has_signature()) {
      mutable_signature()->::Diadoc::Api::Proto::Invoicing::AcceptanceCertificateSignatureInfo::MergeFrom(from.signature());
    }
    if (from.has_signer()) {
      mutable_signer()->::Diadoc::Api::Proto::Invoicing::Signer::MergeFrom(from.signer());
    }
    if (from.has_additionalinfo()) {
      set_additionalinfo(from.additionalinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptanceCertificateBuyerTitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptanceCertificateBuyerTitleInfo::CopyFrom(const AcceptanceCertificateBuyerTitleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptanceCertificateBuyerTitleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_signature()) {
    if (!this->signature().IsInitialized()) return false;
  }
  if (has_signer()) {
    if (!this->signer().IsInitialized()) return false;
  }
  return true;
}

void AcceptanceCertificateBuyerTitleInfo::Swap(AcceptanceCertificateBuyerTitleInfo* other) {
  if (other != this) {
    std::swap(complaints_, other->complaints_);
    std::swap(signature_, other->signature_);
    std::swap(signer_, other->signer_);
    std::swap(additionalinfo_, other->additionalinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptanceCertificateBuyerTitleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptanceCertificateBuyerTitleInfo_descriptor_;
  metadata.reflection = AcceptanceCertificateBuyerTitleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptanceCertificateSignatureInfo::kSignatureDateFieldNumber;
const int AcceptanceCertificateSignatureInfo::kOfficialFieldNumber;
const int AcceptanceCertificateSignatureInfo::kAttorneyFieldNumber;
#endif  // !_MSC_VER

AcceptanceCertificateSignatureInfo::AcceptanceCertificateSignatureInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo)
}

void AcceptanceCertificateSignatureInfo::InitAsDefaultInstance() {
  official_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Official*>(&::Diadoc::Api::Proto::Invoicing::Official::default_instance());
  attorney_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Attorney*>(&::Diadoc::Api::Proto::Invoicing::Attorney::default_instance());
}

AcceptanceCertificateSignatureInfo::AcceptanceCertificateSignatureInfo(const AcceptanceCertificateSignatureInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo)
}

void AcceptanceCertificateSignatureInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signaturedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  official_ = NULL;
  attorney_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptanceCertificateSignatureInfo::~AcceptanceCertificateSignatureInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo)
  SharedDtor();
}

void AcceptanceCertificateSignatureInfo::SharedDtor() {
  if (signaturedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signaturedate_;
  }
  if (this != default_instance_) {
    delete official_;
    delete attorney_;
  }
}

void AcceptanceCertificateSignatureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptanceCertificateSignatureInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptanceCertificateSignatureInfo_descriptor_;
}

const AcceptanceCertificateSignatureInfo& AcceptanceCertificateSignatureInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fAcceptanceCertificateInfo_2eproto();
  return *default_instance_;
}

AcceptanceCertificateSignatureInfo* AcceptanceCertificateSignatureInfo::default_instance_ = NULL;

AcceptanceCertificateSignatureInfo* AcceptanceCertificateSignatureInfo::New() const {
  return new AcceptanceCertificateSignatureInfo;
}

void AcceptanceCertificateSignatureInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_signaturedate()) {
      if (signaturedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signaturedate_->clear();
      }
    }
    if (has_official()) {
      if (official_ != NULL) official_->::Diadoc::Api::Proto::Invoicing::Official::Clear();
    }
    if (has_attorney()) {
      if (attorney_ != NULL) attorney_->::Diadoc::Api::Proto::Invoicing::Attorney::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptanceCertificateSignatureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SignatureDate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signaturedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signaturedate().data(), this->signaturedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signaturedate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Official;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.Official Official = 2;
      case 2: {
        if (tag == 18) {
         parse_Official:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_official()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Attorney;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.Attorney Attorney = 3;
      case 3: {
        if (tag == 26) {
         parse_Attorney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attorney()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo)
  return false;
#undef DO_
}

void AcceptanceCertificateSignatureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo)
  // optional string SignatureDate = 1;
  if (has_signaturedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signaturedate().data(), this->signaturedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signaturedate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signaturedate(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official Official = 2;
  if (has_official()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->official(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Attorney Attorney = 3;
  if (has_attorney()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attorney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo)
}

::google::protobuf::uint8* AcceptanceCertificateSignatureInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo)
  // optional string SignatureDate = 1;
  if (has_signaturedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signaturedate().data(), this->signaturedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signaturedate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signaturedate(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official Official = 2;
  if (has_official()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->official(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Attorney Attorney = 3;
  if (has_attorney()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attorney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.AcceptanceCertificateSignatureInfo)
  return target;
}

int AcceptanceCertificateSignatureInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SignatureDate = 1;
    if (has_signaturedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signaturedate());
    }

    // optional .Diadoc.Api.Proto.Invoicing.Official Official = 2;
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->official());
    }

    // optional .Diadoc.Api.Proto.Invoicing.Attorney Attorney = 3;
    if (has_attorney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attorney());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptanceCertificateSignatureInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptanceCertificateSignatureInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptanceCertificateSignatureInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptanceCertificateSignatureInfo::MergeFrom(const AcceptanceCertificateSignatureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signaturedate()) {
      set_signaturedate(from.signaturedate());
    }
    if (from.has_official()) {
      mutable_official()->::Diadoc::Api::Proto::Invoicing::Official::MergeFrom(from.official());
    }
    if (from.has_attorney()) {
      mutable_attorney()->::Diadoc::Api::Proto::Invoicing::Attorney::MergeFrom(from.attorney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptanceCertificateSignatureInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptanceCertificateSignatureInfo::CopyFrom(const AcceptanceCertificateSignatureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptanceCertificateSignatureInfo::IsInitialized() const {

  if (has_official()) {
    if (!this->official().IsInitialized()) return false;
  }
  if (has_attorney()) {
    if (!this->attorney().IsInitialized()) return false;
  }
  return true;
}

void AcceptanceCertificateSignatureInfo::Swap(AcceptanceCertificateSignatureInfo* other) {
  if (other != this) {
    std::swap(signaturedate_, other->signaturedate_);
    std::swap(official_, other->official_);
    std::swap(attorney_, other->attorney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptanceCertificateSignatureInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptanceCertificateSignatureInfo_descriptor_;
  metadata.reflection = AcceptanceCertificateSignatureInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkDescription::kStartingDateFieldNumber;
const int WorkDescription::kCompletionDateFieldNumber;
const int WorkDescription::kTotalWithVatExcludedFieldNumber;
const int WorkDescription::kVatFieldNumber;
const int WorkDescription::kTotalFieldNumber;
const int WorkDescription::kItemsFieldNumber;
#endif  // !_MSC_VER

WorkDescription::WorkDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.WorkDescription)
}

void WorkDescription::InitAsDefaultInstance() {
}

WorkDescription::WorkDescription(const WorkDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.WorkDescription)
}

void WorkDescription::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  startingdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  completiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totalwithvatexcluded_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkDescription::~WorkDescription() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.WorkDescription)
  SharedDtor();
}

void WorkDescription::SharedDtor() {
  if (startingdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete startingdate_;
  }
  if (completiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete completiondate_;
  }
  if (totalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete totalwithvatexcluded_;
  }
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (this != default_instance_) {
  }
}

void WorkDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkDescription_descriptor_;
}

const WorkDescription& WorkDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fAcceptanceCertificateInfo_2eproto();
  return *default_instance_;
}

WorkDescription* WorkDescription::default_instance_ = NULL;

WorkDescription* WorkDescription::New() const {
  return new WorkDescription;
}

void WorkDescription::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_startingdate()) {
      if (startingdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        startingdate_->clear();
      }
    }
    if (has_completiondate()) {
      if (completiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        completiondate_->clear();
      }
    }
    if (has_totalwithvatexcluded()) {
      if (totalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        totalwithvatexcluded_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vat_->clear();
      }
    }
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        total_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.WorkDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string StartingDate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startingdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->startingdate().data(), this->startingdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "startingdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CompletionDate;
        break;
      }

      // optional string CompletionDate = 2;
      case 2: {
        if (tag == 18) {
         parse_CompletionDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_completiondate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->completiondate().data(), this->completiondate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "completiondate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TotalWithVatExcluded;
        break;
      }

      // optional string TotalWithVatExcluded = 3;
      case 3: {
        if (tag == 26) {
         parse_TotalWithVatExcluded:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totalwithvatexcluded()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->totalwithvatexcluded().data(), this->totalwithvatexcluded().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "totalwithvatexcluded");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Vat;
        break;
      }

      // optional string Vat = 4;
      case 4: {
        if (tag == 34) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Total;
        break;
      }

      // required string Total = 5;
      case 5: {
        if (tag == 42) {
         parse_Total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "total");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Items;
        break;
      }

      // repeated .Diadoc.Api.Proto.Invoicing.WorkItem Items = 6;
      case 6: {
        if (tag == 50) {
         parse_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.WorkDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.WorkDescription)
  return false;
#undef DO_
}

void WorkDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.WorkDescription)
  // optional string StartingDate = 1;
  if (has_startingdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startingdate().data(), this->startingdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "startingdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->startingdate(), output);
  }

  // optional string CompletionDate = 2;
  if (has_completiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->completiondate().data(), this->completiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "completiondate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->completiondate(), output);
  }

  // optional string TotalWithVatExcluded = 3;
  if (has_totalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totalwithvatexcluded().data(), this->totalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totalwithvatexcluded");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->totalwithvatexcluded(), output);
  }

  // optional string Vat = 4;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->vat(), output);
  }

  // required string Total = 5;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->total(), output);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.WorkItem Items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.WorkDescription)
}

::google::protobuf::uint8* WorkDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.WorkDescription)
  // optional string StartingDate = 1;
  if (has_startingdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startingdate().data(), this->startingdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "startingdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->startingdate(), target);
  }

  // optional string CompletionDate = 2;
  if (has_completiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->completiondate().data(), this->completiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "completiondate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->completiondate(), target);
  }

  // optional string TotalWithVatExcluded = 3;
  if (has_totalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totalwithvatexcluded().data(), this->totalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totalwithvatexcluded");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->totalwithvatexcluded(), target);
  }

  // optional string Vat = 4;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vat(), target);
  }

  // required string Total = 5;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->total(), target);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.WorkItem Items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.WorkDescription)
  return target;
}

int WorkDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string StartingDate = 1;
    if (has_startingdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startingdate());
    }

    // optional string CompletionDate = 2;
    if (has_completiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->completiondate());
    }

    // optional string TotalWithVatExcluded = 3;
    if (has_totalwithvatexcluded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totalwithvatexcluded());
    }

    // optional string Vat = 4;
    if (has_vat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

    // required string Total = 5;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

  }
  // repeated .Diadoc.Api.Proto.Invoicing.WorkItem Items = 6;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkDescription::MergeFrom(const WorkDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startingdate()) {
      set_startingdate(from.startingdate());
    }
    if (from.has_completiondate()) {
      set_completiondate(from.completiondate());
    }
    if (from.has_totalwithvatexcluded()) {
      set_totalwithvatexcluded(from.totalwithvatexcluded());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkDescription::CopyFrom(const WorkDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  return true;
}

void WorkDescription::Swap(WorkDescription* other) {
  if (other != this) {
    std::swap(startingdate_, other->startingdate_);
    std::swap(completiondate_, other->completiondate_);
    std::swap(totalwithvatexcluded_, other->totalwithvatexcluded_);
    std::swap(vat_, other->vat_);
    std::swap(total_, other->total_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkDescription_descriptor_;
  metadata.reflection = WorkDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkItem::kNameFieldNumber;
const int WorkItem::kDescriptionFieldNumber;
const int WorkItem::kUnitCodeFieldNumber;
const int WorkItem::kUnitNameFieldNumber;
const int WorkItem::kPriceFieldNumber;
const int WorkItem::kQuantityFieldNumber;
const int WorkItem::kSubtotalWithVatExcludedFieldNumber;
const int WorkItem::kVatFieldNumber;
const int WorkItem::kSubtotalFieldNumber;
const int WorkItem::kAdditionalInfoFieldNumber;
#endif  // !_MSC_VER

WorkItem::WorkItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.WorkItem)
}

void WorkItem::InitAsDefaultInstance() {
}

WorkItem::WorkItem(const WorkItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.WorkItem)
}

void WorkItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unitcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtotalwithvatexcluded_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkItem::~WorkItem() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.WorkItem)
  SharedDtor();
}

void WorkItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (unitcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unitcode_;
  }
  if (unitname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unitname_;
  }
  if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete price_;
  }
  if (quantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quantity_;
  }
  if (subtotalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtotalwithvatexcluded_;
  }
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (subtotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtotal_;
  }
  if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete additionalinfo_;
  }
  if (this != default_instance_) {
  }
}

void WorkItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkItem_descriptor_;
}

const WorkItem& WorkItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fAcceptanceCertificateInfo_2eproto();
  return *default_instance_;
}

WorkItem* WorkItem::default_instance_ = NULL;

WorkItem* WorkItem::New() const {
  return new WorkItem;
}

void WorkItem::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_unitcode()) {
      if (unitcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unitcode_->clear();
      }
    }
    if (has_unitname()) {
      if (unitname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unitname_->clear();
      }
    }
    if (has_price()) {
      if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        price_->clear();
      }
    }
    if (has_quantity()) {
      if (quantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quantity_->clear();
      }
    }
    if (has_subtotalwithvatexcluded()) {
      if (subtotalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtotalwithvatexcluded_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vat_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_subtotal()) {
      if (subtotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtotal_->clear();
      }
    }
    if (has_additionalinfo()) {
      if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        additionalinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.WorkItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Description;
        break;
      }

      // optional string Description = 2;
      case 2: {
        if (tag == 18) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UnitCode;
        break;
      }

      // optional string UnitCode = 3;
      case 3: {
        if (tag == 26) {
         parse_UnitCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unitcode().data(), this->unitcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unitcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UnitName;
        break;
      }

      // optional string UnitName = 4;
      case 4: {
        if (tag == 34) {
         parse_UnitName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unitname().data(), this->unitname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unitname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Price;
        break;
      }

      // optional string Price = 5;
      case 5: {
        if (tag == 42) {
         parse_Price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->price().data(), this->price().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "price");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Quantity;
        break;
      }

      // optional string Quantity = 6;
      case 6: {
        if (tag == 50) {
         parse_Quantity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quantity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quantity().data(), this->quantity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quantity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SubtotalWithVatExcluded;
        break;
      }

      // optional string SubtotalWithVatExcluded = 7;
      case 7: {
        if (tag == 58) {
         parse_SubtotalWithVatExcluded:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtotalwithvatexcluded()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subtotalwithvatexcluded().data(), this->subtotalwithvatexcluded().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subtotalwithvatexcluded");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Vat;
        break;
      }

      // optional string Vat = 8;
      case 8: {
        if (tag == 66) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Subtotal;
        break;
      }

      // optional string Subtotal = 9;
      case 9: {
        if (tag == 74) {
         parse_Subtotal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtotal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subtotal().data(), this->subtotal().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subtotal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_AdditionalInfo;
        break;
      }

      // optional string AdditionalInfo = 10;
      case 10: {
        if (tag == 82) {
         parse_AdditionalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->additionalinfo().data(), this->additionalinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "additionalinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.WorkItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.WorkItem)
  return false;
#undef DO_
}

void WorkItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.WorkItem)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string Description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string UnitCode = 3;
  if (has_unitcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unitcode().data(), this->unitcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unitcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->unitcode(), output);
  }

  // optional string UnitName = 4;
  if (has_unitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unitname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->unitname(), output);
  }

  // optional string Price = 5;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "price");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->price(), output);
  }

  // optional string Quantity = 6;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quantity().data(), this->quantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quantity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->quantity(), output);
  }

  // optional string SubtotalWithVatExcluded = 7;
  if (has_subtotalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotalwithvatexcluded().data(), this->subtotalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotalwithvatexcluded");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->subtotalwithvatexcluded(), output);
  }

  // optional string Vat = 8;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->vat(), output);
  }

  // optional string Subtotal = 9;
  if (has_subtotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotal().data(), this->subtotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->subtotal(), output);
  }

  // optional string AdditionalInfo = 10;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->additionalinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.WorkItem)
}

::google::protobuf::uint8* WorkItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.WorkItem)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string Description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string UnitCode = 3;
  if (has_unitcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unitcode().data(), this->unitcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unitcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->unitcode(), target);
  }

  // optional string UnitName = 4;
  if (has_unitname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unitname().data(), this->unitname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unitname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->unitname(), target);
  }

  // optional string Price = 5;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "price");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->price(), target);
  }

  // optional string Quantity = 6;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quantity().data(), this->quantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quantity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->quantity(), target);
  }

  // optional string SubtotalWithVatExcluded = 7;
  if (has_subtotalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotalwithvatexcluded().data(), this->subtotalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotalwithvatexcluded");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->subtotalwithvatexcluded(), target);
  }

  // optional string Vat = 8;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->vat(), target);
  }

  // optional string Subtotal = 9;
  if (has_subtotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotal().data(), this->subtotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->subtotal(), target);
  }

  // optional string AdditionalInfo = 10;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->additionalinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.WorkItem)
  return target;
}

int WorkItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string UnitCode = 3;
    if (has_unitcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitcode());
    }

    // optional string UnitName = 4;
    if (has_unitname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitname());
    }

    // optional string Price = 5;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price());
    }

    // optional string Quantity = 6;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quantity());
    }

    // optional string SubtotalWithVatExcluded = 7;
    if (has_subtotalwithvatexcluded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtotalwithvatexcluded());
    }

    // optional string Vat = 8;
    if (has_vat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Subtotal = 9;
    if (has_subtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtotal());
    }

    // optional string AdditionalInfo = 10;
    if (has_additionalinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkItem::MergeFrom(const WorkItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_unitcode()) {
      set_unitcode(from.unitcode());
    }
    if (from.has_unitname()) {
      set_unitname(from.unitname());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_subtotalwithvatexcluded()) {
      set_subtotalwithvatexcluded(from.subtotalwithvatexcluded());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subtotal()) {
      set_subtotal(from.subtotal());
    }
    if (from.has_additionalinfo()) {
      set_additionalinfo(from.additionalinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkItem::CopyFrom(const WorkItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkItem::IsInitialized() const {

  return true;
}

void WorkItem::Swap(WorkItem* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(unitcode_, other->unitcode_);
    std::swap(unitname_, other->unitname_);
    std::swap(price_, other->price_);
    std::swap(quantity_, other->quantity_);
    std::swap(subtotalwithvatexcluded_, other->subtotalwithvatexcluded_);
    std::swap(vat_, other->vat_);
    std::swap(subtotal_, other->subtotal_);
    std::swap(additionalinfo_, other->additionalinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkItem_descriptor_;
  metadata.reflection = WorkItem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Invoicing
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
