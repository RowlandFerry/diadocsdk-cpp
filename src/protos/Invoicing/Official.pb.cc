// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invoicing/Official.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Invoicing/Official.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Invoicing {

namespace {

const ::google::protobuf::Descriptor* Official_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Official_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attorney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attorney_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Invoicing_2fOfficial_2eproto() {
  protobuf_AddDesc_Invoicing_2fOfficial_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Invoicing/Official.proto");
  GOOGLE_CHECK(file != NULL);
  Official_descriptor_ = file->message_type(0);
  static const int Official_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Official, surname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Official, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Official, patronymic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Official, jobtitle_),
  };
  Official_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Official_descriptor_,
      Official::default_instance_,
      Official_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Official, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Official, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Official));
  Attorney_descriptor_ = file->message_type(1);
  static const int Attorney_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attorney, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attorney, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attorney, issuerorganizationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attorney, issuerperson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attorney, issueradditionalinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attorney, recipientperson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attorney, recipientadditionalinfo_),
  };
  Attorney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attorney_descriptor_,
      Attorney::default_instance_,
      Attorney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attorney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attorney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attorney));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Invoicing_2fOfficial_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Official_descriptor_, &Official::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attorney_descriptor_, &Attorney::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Invoicing_2fOfficial_2eproto() {
  delete Official::default_instance_;
  delete Official_reflection_;
  delete Attorney::default_instance_;
  delete Attorney_reflection_;
}

void protobuf_AddDesc_Invoicing_2fOfficial_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030Invoicing/Official.proto\022\032Diadoc.Api.P"
    "roto.Invoicing\"T\n\010Official\022\017\n\007Surname\030\001 "
    "\002(\t\022\021\n\tFirstName\030\002 \002(\t\022\022\n\nPatronymic\030\003 \001"
    "(\t\022\020\n\010JobTitle\030\004 \001(\t\"\202\002\n\010Attorney\022\014\n\004Dat"
    "e\030\001 \001(\t\022\016\n\006Number\030\002 \001(\t\022\036\n\026IssuerOrganiz"
    "ationName\030\003 \001(\t\022:\n\014IssuerPerson\030\004 \001(\0132$."
    "Diadoc.Api.Proto.Invoicing.Official\022\034\n\024I"
    "ssuerAdditionalInfo\030\005 \001(\t\022=\n\017RecipientPe"
    "rson\030\006 \001(\0132$.Diadoc.Api.Proto.Invoicing."
    "Official\022\037\n\027RecipientAdditionalInfo\030\007 \001("
    "\t", 401);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Invoicing/Official.proto", &protobuf_RegisterTypes);
  Official::default_instance_ = new Official();
  Attorney::default_instance_ = new Attorney();
  Official::default_instance_->InitAsDefaultInstance();
  Attorney::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Invoicing_2fOfficial_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Invoicing_2fOfficial_2eproto {
  StaticDescriptorInitializer_Invoicing_2fOfficial_2eproto() {
    protobuf_AddDesc_Invoicing_2fOfficial_2eproto();
  }
} static_descriptor_initializer_Invoicing_2fOfficial_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Official::kSurnameFieldNumber;
const int Official::kFirstNameFieldNumber;
const int Official::kPatronymicFieldNumber;
const int Official::kJobTitleFieldNumber;
#endif  // !_MSC_VER

Official::Official()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.Official)
}

void Official::InitAsDefaultInstance() {
}

Official::Official(const Official& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.Official)
}

void Official::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  surname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patronymic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jobtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Official::~Official() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.Official)
  SharedDtor();
}

void Official::SharedDtor() {
  if (surname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete surname_;
  }
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstname_;
  }
  if (patronymic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patronymic_;
  }
  if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobtitle_;
  }
  if (this != default_instance_) {
  }
}

void Official::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Official::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Official_descriptor_;
}

const Official& Official::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fOfficial_2eproto();
  return *default_instance_;
}

Official* Official::default_instance_ = NULL;

Official* Official::New() const {
  return new Official;
}

void Official::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_surname()) {
      if (surname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        surname_->clear();
      }
    }
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firstname_->clear();
      }
    }
    if (has_patronymic()) {
      if (patronymic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        patronymic_->clear();
      }
    }
    if (has_jobtitle()) {
      if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jobtitle_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Official::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.Official)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Surname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_surname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->surname().data(), this->surname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "surname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FirstName;
        break;
      }

      // required string FirstName = 2;
      case 2: {
        if (tag == 18) {
         parse_FirstName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firstname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Patronymic;
        break;
      }

      // optional string Patronymic = 3;
      case 3: {
        if (tag == 26) {
         parse_Patronymic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patronymic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patronymic().data(), this->patronymic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "patronymic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_JobTitle;
        break;
      }

      // optional string JobTitle = 4;
      case 4: {
        if (tag == 34) {
         parse_JobTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jobtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jobtitle().data(), this->jobtitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jobtitle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.Official)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.Official)
  return false;
#undef DO_
}

void Official::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.Official)
  // required string Surname = 1;
  if (has_surname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->surname().data(), this->surname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "surname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->surname(), output);
  }

  // required string FirstName = 2;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firstname(), output);
  }

  // optional string Patronymic = 3;
  if (has_patronymic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patronymic().data(), this->patronymic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patronymic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->patronymic(), output);
  }

  // optional string JobTitle = 4;
  if (has_jobtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jobtitle().data(), this->jobtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jobtitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->jobtitle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.Official)
}

::google::protobuf::uint8* Official::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.Official)
  // required string Surname = 1;
  if (has_surname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->surname().data(), this->surname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "surname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->surname(), target);
  }

  // required string FirstName = 2;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->firstname(), target);
  }

  // optional string Patronymic = 3;
  if (has_patronymic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patronymic().data(), this->patronymic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patronymic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->patronymic(), target);
  }

  // optional string JobTitle = 4;
  if (has_jobtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jobtitle().data(), this->jobtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jobtitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jobtitle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.Official)
  return target;
}

int Official::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Surname = 1;
    if (has_surname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->surname());
    }

    // required string FirstName = 2;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }

    // optional string Patronymic = 3;
    if (has_patronymic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patronymic());
    }

    // optional string JobTitle = 4;
    if (has_jobtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jobtitle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Official::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Official* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Official*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Official::MergeFrom(const Official& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_surname()) {
      set_surname(from.surname());
    }
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_patronymic()) {
      set_patronymic(from.patronymic());
    }
    if (from.has_jobtitle()) {
      set_jobtitle(from.jobtitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Official::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Official::CopyFrom(const Official& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Official::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Official::Swap(Official* other) {
  if (other != this) {
    std::swap(surname_, other->surname_);
    std::swap(firstname_, other->firstname_);
    std::swap(patronymic_, other->patronymic_);
    std::swap(jobtitle_, other->jobtitle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Official::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Official_descriptor_;
  metadata.reflection = Official_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attorney::kDateFieldNumber;
const int Attorney::kNumberFieldNumber;
const int Attorney::kIssuerOrganizationNameFieldNumber;
const int Attorney::kIssuerPersonFieldNumber;
const int Attorney::kIssuerAdditionalInfoFieldNumber;
const int Attorney::kRecipientPersonFieldNumber;
const int Attorney::kRecipientAdditionalInfoFieldNumber;
#endif  // !_MSC_VER

Attorney::Attorney()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.Attorney)
}

void Attorney::InitAsDefaultInstance() {
  issuerperson_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Official*>(&::Diadoc::Api::Proto::Invoicing::Official::default_instance());
  recipientperson_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Official*>(&::Diadoc::Api::Proto::Invoicing::Official::default_instance());
}

Attorney::Attorney(const Attorney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.Attorney)
}

void Attorney::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuerorganizationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuerperson_ = NULL;
  issueradditionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipientperson_ = NULL;
  recipientadditionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attorney::~Attorney() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.Attorney)
  SharedDtor();
}

void Attorney::SharedDtor() {
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_;
  }
  if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete number_;
  }
  if (issuerorganizationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete issuerorganizationname_;
  }
  if (issueradditionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete issueradditionalinfo_;
  }
  if (recipientadditionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recipientadditionalinfo_;
  }
  if (this != default_instance_) {
    delete issuerperson_;
    delete recipientperson_;
  }
}

void Attorney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attorney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attorney_descriptor_;
}

const Attorney& Attorney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fOfficial_2eproto();
  return *default_instance_;
}

Attorney* Attorney::default_instance_ = NULL;

Attorney* Attorney::New() const {
  return new Attorney;
}

void Attorney::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        date_->clear();
      }
    }
    if (has_number()) {
      if (number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        number_->clear();
      }
    }
    if (has_issuerorganizationname()) {
      if (issuerorganizationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        issuerorganizationname_->clear();
      }
    }
    if (has_issuerperson()) {
      if (issuerperson_ != NULL) issuerperson_->::Diadoc::Api::Proto::Invoicing::Official::Clear();
    }
    if (has_issueradditionalinfo()) {
      if (issueradditionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        issueradditionalinfo_->clear();
      }
    }
    if (has_recipientperson()) {
      if (recipientperson_ != NULL) recipientperson_->::Diadoc::Api::Proto::Invoicing::Official::Clear();
    }
    if (has_recipientadditionalinfo()) {
      if (recipientadditionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recipientadditionalinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attorney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.Attorney)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Number;
        break;
      }

      // optional string Number = 2;
      case 2: {
        if (tag == 18) {
         parse_Number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "number");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_IssuerOrganizationName;
        break;
      }

      // optional string IssuerOrganizationName = 3;
      case 3: {
        if (tag == 26) {
         parse_IssuerOrganizationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuerorganizationname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->issuerorganizationname().data(), this->issuerorganizationname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "issuerorganizationname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_IssuerPerson;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.Official IssuerPerson = 4;
      case 4: {
        if (tag == 34) {
         parse_IssuerPerson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_issuerperson()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_IssuerAdditionalInfo;
        break;
      }

      // optional string IssuerAdditionalInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_IssuerAdditionalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issueradditionalinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->issueradditionalinfo().data(), this->issueradditionalinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "issueradditionalinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RecipientPerson;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.Official RecipientPerson = 6;
      case 6: {
        if (tag == 50) {
         parse_RecipientPerson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recipientperson()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_RecipientAdditionalInfo;
        break;
      }

      // optional string RecipientAdditionalInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_RecipientAdditionalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recipientadditionalinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recipientadditionalinfo().data(), this->recipientadditionalinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recipientadditionalinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.Attorney)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.Attorney)
  return false;
#undef DO_
}

void Attorney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.Attorney)
  // optional string Date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->date(), output);
  }

  // optional string Number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->number(), output);
  }

  // optional string IssuerOrganizationName = 3;
  if (has_issuerorganizationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issuerorganizationname().data(), this->issuerorganizationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "issuerorganizationname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->issuerorganizationname(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official IssuerPerson = 4;
  if (has_issuerperson()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->issuerperson(), output);
  }

  // optional string IssuerAdditionalInfo = 5;
  if (has_issueradditionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issueradditionalinfo().data(), this->issueradditionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "issueradditionalinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->issueradditionalinfo(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official RecipientPerson = 6;
  if (has_recipientperson()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->recipientperson(), output);
  }

  // optional string RecipientAdditionalInfo = 7;
  if (has_recipientadditionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recipientadditionalinfo().data(), this->recipientadditionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recipientadditionalinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->recipientadditionalinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.Attorney)
}

::google::protobuf::uint8* Attorney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.Attorney)
  // optional string Date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->date(), target);
  }

  // optional string Number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->number(), target);
  }

  // optional string IssuerOrganizationName = 3;
  if (has_issuerorganizationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issuerorganizationname().data(), this->issuerorganizationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "issuerorganizationname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->issuerorganizationname(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official IssuerPerson = 4;
  if (has_issuerperson()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->issuerperson(), target);
  }

  // optional string IssuerAdditionalInfo = 5;
  if (has_issueradditionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issueradditionalinfo().data(), this->issueradditionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "issueradditionalinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->issueradditionalinfo(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Official RecipientPerson = 6;
  if (has_recipientperson()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->recipientperson(), target);
  }

  // optional string RecipientAdditionalInfo = 7;
  if (has_recipientadditionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recipientadditionalinfo().data(), this->recipientadditionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recipientadditionalinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->recipientadditionalinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.Attorney)
  return target;
}

int Attorney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string Number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

    // optional string IssuerOrganizationName = 3;
    if (has_issuerorganizationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuerorganizationname());
    }

    // optional .Diadoc.Api.Proto.Invoicing.Official IssuerPerson = 4;
    if (has_issuerperson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->issuerperson());
    }

    // optional string IssuerAdditionalInfo = 5;
    if (has_issueradditionalinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issueradditionalinfo());
    }

    // optional .Diadoc.Api.Proto.Invoicing.Official RecipientPerson = 6;
    if (has_recipientperson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recipientperson());
    }

    // optional string RecipientAdditionalInfo = 7;
    if (has_recipientadditionalinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recipientadditionalinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attorney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attorney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attorney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attorney::MergeFrom(const Attorney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_issuerorganizationname()) {
      set_issuerorganizationname(from.issuerorganizationname());
    }
    if (from.has_issuerperson()) {
      mutable_issuerperson()->::Diadoc::Api::Proto::Invoicing::Official::MergeFrom(from.issuerperson());
    }
    if (from.has_issueradditionalinfo()) {
      set_issueradditionalinfo(from.issueradditionalinfo());
    }
    if (from.has_recipientperson()) {
      mutable_recipientperson()->::Diadoc::Api::Proto::Invoicing::Official::MergeFrom(from.recipientperson());
    }
    if (from.has_recipientadditionalinfo()) {
      set_recipientadditionalinfo(from.recipientadditionalinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attorney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attorney::CopyFrom(const Attorney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attorney::IsInitialized() const {

  if (has_issuerperson()) {
    if (!this->issuerperson().IsInitialized()) return false;
  }
  if (has_recipientperson()) {
    if (!this->recipientperson().IsInitialized()) return false;
  }
  return true;
}

void Attorney::Swap(Attorney* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(number_, other->number_);
    std::swap(issuerorganizationname_, other->issuerorganizationname_);
    std::swap(issuerperson_, other->issuerperson_);
    std::swap(issueradditionalinfo_, other->issueradditionalinfo_);
    std::swap(recipientperson_, other->recipientperson_);
    std::swap(recipientadditionalinfo_, other->recipientadditionalinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attorney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attorney_descriptor_;
  metadata.reflection = Attorney_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Invoicing
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
