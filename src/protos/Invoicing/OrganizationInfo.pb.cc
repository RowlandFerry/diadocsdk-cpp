// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invoicing/OrganizationInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Invoicing/OrganizationInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Invoicing {

namespace {

const ::google::protobuf::Descriptor* DocflowParticipant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocflowParticipant_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiadocOrganizationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiadocOrganizationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrganizationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrganizationInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Invoicing_2fOrganizationInfo_2eproto() {
  protobuf_AddDesc_Invoicing_2fOrganizationInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Invoicing/OrganizationInfo.proto");
  GOOGLE_CHECK(file != NULL);
  DocflowParticipant_descriptor_ = file->message_type(0);
  static const int DocflowParticipant_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowParticipant, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowParticipant, inn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowParticipant, kpp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowParticipant, fnsparticipantid_),
  };
  DocflowParticipant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocflowParticipant_descriptor_,
      DocflowParticipant::default_instance_,
      DocflowParticipant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowParticipant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocflowParticipant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocflowParticipant));
  DiadocOrganizationInfo_descriptor_ = file->message_type(1);
  static const int DiadocOrganizationInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiadocOrganizationInfo, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiadocOrganizationInfo, orginfo_),
  };
  DiadocOrganizationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiadocOrganizationInfo_descriptor_,
      DiadocOrganizationInfo::default_instance_,
      DiadocOrganizationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiadocOrganizationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiadocOrganizationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiadocOrganizationInfo));
  OrganizationInfo_descriptor_ = file->message_type(2);
  static const int OrganizationInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, inn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, kpp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, issoleproprietor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, okopf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, okpo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, okdp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, fax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, bankaccountnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, bankname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, bankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, fnsparticipantid_),
  };
  OrganizationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrganizationInfo_descriptor_,
      OrganizationInfo::default_instance_,
      OrganizationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrganizationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrganizationInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Invoicing_2fOrganizationInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocflowParticipant_descriptor_, &DocflowParticipant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiadocOrganizationInfo_descriptor_, &DiadocOrganizationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrganizationInfo_descriptor_, &OrganizationInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Invoicing_2fOrganizationInfo_2eproto() {
  delete DocflowParticipant::default_instance_;
  delete DocflowParticipant_reflection_;
  delete DiadocOrganizationInfo::default_instance_;
  delete DiadocOrganizationInfo_reflection_;
  delete OrganizationInfo::default_instance_;
  delete OrganizationInfo_reflection_;
}

void protobuf_AddDesc_Invoicing_2fOrganizationInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Address_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n Invoicing/OrganizationInfo.proto\022\032Diad"
    "oc.Api.Proto.Invoicing\032\rAddress.proto\"W\n"
    "\022DocflowParticipant\022\r\n\005BoxId\030\001 \001(\t\022\013\n\003In"
    "n\030\002 \001(\t\022\013\n\003Kpp\030\003 \001(\t\022\030\n\020FnsParticipantId"
    "\030\004 \001(\t\"f\n\026DiadocOrganizationInfo\022\r\n\005BoxI"
    "d\030\001 \001(\t\022=\n\007OrgInfo\030\002 \001(\0132,.Diadoc.Api.Pr"
    "oto.Invoicing.OrganizationInfo\"\271\002\n\020Organ"
    "izationInfo\022\014\n\004Name\030\001 \002(\t\022\013\n\003Inn\030\002 \001(\t\022\013"
    "\n\003Kpp\030\003 \001(\t\022*\n\007Address\030\004 \002(\0132\031.Diadoc.Ap"
    "i.Proto.Address\022\037\n\020IsSoleProprietor\030\005 \001("
    "\010:\005false\022\r\n\005Okopf\030\006 \001(\t\022\014\n\004Okpo\030\007 \001(\t\022\014\n"
    "\004Okdp\030\010 \001(\t\022\r\n\005Phone\030\t \001(\t\022\013\n\003Fax\030\n \001(\t\022"
    "\031\n\021BankAccountNumber\030\013 \001(\t\022\020\n\010BankName\030\014"
    " \001(\t\022\016\n\006BankId\030\r \001(\t\022\022\n\nDepartment\030\016 \001(\t"
    "\022\030\n\020FnsParticipantId\030\017 \001(\t", 586);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Invoicing/OrganizationInfo.proto", &protobuf_RegisterTypes);
  DocflowParticipant::default_instance_ = new DocflowParticipant();
  DiadocOrganizationInfo::default_instance_ = new DiadocOrganizationInfo();
  OrganizationInfo::default_instance_ = new OrganizationInfo();
  DocflowParticipant::default_instance_->InitAsDefaultInstance();
  DiadocOrganizationInfo::default_instance_->InitAsDefaultInstance();
  OrganizationInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Invoicing_2fOrganizationInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Invoicing_2fOrganizationInfo_2eproto {
  StaticDescriptorInitializer_Invoicing_2fOrganizationInfo_2eproto() {
    protobuf_AddDesc_Invoicing_2fOrganizationInfo_2eproto();
  }
} static_descriptor_initializer_Invoicing_2fOrganizationInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DocflowParticipant::kBoxIdFieldNumber;
const int DocflowParticipant::kInnFieldNumber;
const int DocflowParticipant::kKppFieldNumber;
const int DocflowParticipant::kFnsParticipantIdFieldNumber;
#endif  // !_MSC_VER

DocflowParticipant::DocflowParticipant()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.DocflowParticipant)
}

void DocflowParticipant::InitAsDefaultInstance() {
}

DocflowParticipant::DocflowParticipant(const DocflowParticipant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.DocflowParticipant)
}

void DocflowParticipant::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kpp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fnsparticipantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocflowParticipant::~DocflowParticipant() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.DocflowParticipant)
  SharedDtor();
}

void DocflowParticipant::SharedDtor() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inn_;
  }
  if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kpp_;
  }
  if (fnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fnsparticipantid_;
  }
  if (this != default_instance_) {
  }
}

void DocflowParticipant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocflowParticipant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocflowParticipant_descriptor_;
}

const DocflowParticipant& DocflowParticipant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fOrganizationInfo_2eproto();
  return *default_instance_;
}

DocflowParticipant* DocflowParticipant::default_instance_ = NULL;

DocflowParticipant* DocflowParticipant::New() const {
  return new DocflowParticipant;
}

void DocflowParticipant::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_boxid()) {
      if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boxid_->clear();
      }
    }
    if (has_inn()) {
      if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inn_->clear();
      }
    }
    if (has_kpp()) {
      if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        kpp_->clear();
      }
    }
    if (has_fnsparticipantid()) {
      if (fnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fnsparticipantid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocflowParticipant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.DocflowParticipant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BoxId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Inn;
        break;
      }

      // optional string Inn = 2;
      case 2: {
        if (tag == 18) {
         parse_Inn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inn().data(), this->inn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Kpp;
        break;
      }

      // optional string Kpp = 3;
      case 3: {
        if (tag == 26) {
         parse_Kpp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kpp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->kpp().data(), this->kpp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kpp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_FnsParticipantId;
        break;
      }

      // optional string FnsParticipantId = 4;
      case 4: {
        if (tag == 34) {
         parse_FnsParticipantId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fnsparticipantid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fnsparticipantid().data(), this->fnsparticipantid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fnsparticipantid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.DocflowParticipant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.DocflowParticipant)
  return false;
#undef DO_
}

void DocflowParticipant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.DocflowParticipant)
  // optional string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->boxid(), output);
  }

  // optional string Inn = 2;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inn(), output);
  }

  // optional string Kpp = 3;
  if (has_kpp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kpp().data(), this->kpp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kpp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->kpp(), output);
  }

  // optional string FnsParticipantId = 4;
  if (has_fnsparticipantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fnsparticipantid().data(), this->fnsparticipantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fnsparticipantid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fnsparticipantid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.DocflowParticipant)
}

::google::protobuf::uint8* DocflowParticipant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.DocflowParticipant)
  // optional string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->boxid(), target);
  }

  // optional string Inn = 2;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inn(), target);
  }

  // optional string Kpp = 3;
  if (has_kpp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kpp().data(), this->kpp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kpp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->kpp(), target);
  }

  // optional string FnsParticipantId = 4;
  if (has_fnsparticipantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fnsparticipantid().data(), this->fnsparticipantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fnsparticipantid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fnsparticipantid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.DocflowParticipant)
  return target;
}

int DocflowParticipant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string BoxId = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

    // optional string Inn = 2;
    if (has_inn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inn());
    }

    // optional string Kpp = 3;
    if (has_kpp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kpp());
    }

    // optional string FnsParticipantId = 4;
    if (has_fnsparticipantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fnsparticipantid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocflowParticipant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocflowParticipant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocflowParticipant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocflowParticipant::MergeFrom(const DocflowParticipant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_inn()) {
      set_inn(from.inn());
    }
    if (from.has_kpp()) {
      set_kpp(from.kpp());
    }
    if (from.has_fnsparticipantid()) {
      set_fnsparticipantid(from.fnsparticipantid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocflowParticipant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocflowParticipant::CopyFrom(const DocflowParticipant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocflowParticipant::IsInitialized() const {

  return true;
}

void DocflowParticipant::Swap(DocflowParticipant* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(inn_, other->inn_);
    std::swap(kpp_, other->kpp_);
    std::swap(fnsparticipantid_, other->fnsparticipantid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocflowParticipant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocflowParticipant_descriptor_;
  metadata.reflection = DocflowParticipant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiadocOrganizationInfo::kBoxIdFieldNumber;
const int DiadocOrganizationInfo::kOrgInfoFieldNumber;
#endif  // !_MSC_VER

DiadocOrganizationInfo::DiadocOrganizationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo)
}

void DiadocOrganizationInfo::InitAsDefaultInstance() {
  orginfo_ = const_cast< ::Diadoc::Api::Proto::Invoicing::OrganizationInfo*>(&::Diadoc::Api::Proto::Invoicing::OrganizationInfo::default_instance());
}

DiadocOrganizationInfo::DiadocOrganizationInfo(const DiadocOrganizationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo)
}

void DiadocOrganizationInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiadocOrganizationInfo::~DiadocOrganizationInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo)
  SharedDtor();
}

void DiadocOrganizationInfo::SharedDtor() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (this != default_instance_) {
    delete orginfo_;
  }
}

void DiadocOrganizationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiadocOrganizationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiadocOrganizationInfo_descriptor_;
}

const DiadocOrganizationInfo& DiadocOrganizationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fOrganizationInfo_2eproto();
  return *default_instance_;
}

DiadocOrganizationInfo* DiadocOrganizationInfo::default_instance_ = NULL;

DiadocOrganizationInfo* DiadocOrganizationInfo::New() const {
  return new DiadocOrganizationInfo;
}

void DiadocOrganizationInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_boxid()) {
      if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boxid_->clear();
      }
    }
    if (has_orginfo()) {
      if (orginfo_ != NULL) orginfo_->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiadocOrganizationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BoxId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_OrgInfo;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo OrgInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_OrgInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo)
  return false;
#undef DO_
}

void DiadocOrganizationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo)
  // optional string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->boxid(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo OrgInfo = 2;
  if (has_orginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->orginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo)
}

::google::protobuf::uint8* DiadocOrganizationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo)
  // optional string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->boxid(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo OrgInfo = 2;
  if (has_orginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->orginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo)
  return target;
}

int DiadocOrganizationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string BoxId = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

    // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo OrgInfo = 2;
    if (has_orginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiadocOrganizationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiadocOrganizationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiadocOrganizationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiadocOrganizationInfo::MergeFrom(const DiadocOrganizationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_orginfo()) {
      mutable_orginfo()->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::MergeFrom(from.orginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiadocOrganizationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiadocOrganizationInfo::CopyFrom(const DiadocOrganizationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiadocOrganizationInfo::IsInitialized() const {

  if (has_orginfo()) {
    if (!this->orginfo().IsInitialized()) return false;
  }
  return true;
}

void DiadocOrganizationInfo::Swap(DiadocOrganizationInfo* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(orginfo_, other->orginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiadocOrganizationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiadocOrganizationInfo_descriptor_;
  metadata.reflection = DiadocOrganizationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrganizationInfo::kNameFieldNumber;
const int OrganizationInfo::kInnFieldNumber;
const int OrganizationInfo::kKppFieldNumber;
const int OrganizationInfo::kAddressFieldNumber;
const int OrganizationInfo::kIsSoleProprietorFieldNumber;
const int OrganizationInfo::kOkopfFieldNumber;
const int OrganizationInfo::kOkpoFieldNumber;
const int OrganizationInfo::kOkdpFieldNumber;
const int OrganizationInfo::kPhoneFieldNumber;
const int OrganizationInfo::kFaxFieldNumber;
const int OrganizationInfo::kBankAccountNumberFieldNumber;
const int OrganizationInfo::kBankNameFieldNumber;
const int OrganizationInfo::kBankIdFieldNumber;
const int OrganizationInfo::kDepartmentFieldNumber;
const int OrganizationInfo::kFnsParticipantIdFieldNumber;
#endif  // !_MSC_VER

OrganizationInfo::OrganizationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.OrganizationInfo)
}

void OrganizationInfo::InitAsDefaultInstance() {
  address_ = const_cast< ::Diadoc::Api::Proto::Address*>(&::Diadoc::Api::Proto::Address::default_instance());
}

OrganizationInfo::OrganizationInfo(const OrganizationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.OrganizationInfo)
}

void OrganizationInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kpp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_ = NULL;
  issoleproprietor_ = false;
  okopf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  okpo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  okdp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fax_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bankaccountnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  department_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fnsparticipantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrganizationInfo::~OrganizationInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.OrganizationInfo)
  SharedDtor();
}

void OrganizationInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inn_;
  }
  if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kpp_;
  }
  if (okopf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete okopf_;
  }
  if (okpo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete okpo_;
  }
  if (okdp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete okdp_;
  }
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (fax_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fax_;
  }
  if (bankaccountnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bankaccountnumber_;
  }
  if (bankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bankname_;
  }
  if (bankid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bankid_;
  }
  if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete department_;
  }
  if (fnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fnsparticipantid_;
  }
  if (this != default_instance_) {
    delete address_;
  }
}

void OrganizationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrganizationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrganizationInfo_descriptor_;
}

const OrganizationInfo& OrganizationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fOrganizationInfo_2eproto();
  return *default_instance_;
}

OrganizationInfo* OrganizationInfo::default_instance_ = NULL;

OrganizationInfo* OrganizationInfo::New() const {
  return new OrganizationInfo;
}

void OrganizationInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_inn()) {
      if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inn_->clear();
      }
    }
    if (has_kpp()) {
      if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        kpp_->clear();
      }
    }
    if (has_address()) {
      if (address_ != NULL) address_->::Diadoc::Api::Proto::Address::Clear();
    }
    issoleproprietor_ = false;
    if (has_okopf()) {
      if (okopf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        okopf_->clear();
      }
    }
    if (has_okpo()) {
      if (okpo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        okpo_->clear();
      }
    }
    if (has_okdp()) {
      if (okdp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        okdp_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_->clear();
      }
    }
    if (has_fax()) {
      if (fax_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fax_->clear();
      }
    }
    if (has_bankaccountnumber()) {
      if (bankaccountnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bankaccountnumber_->clear();
      }
    }
    if (has_bankname()) {
      if (bankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bankname_->clear();
      }
    }
    if (has_bankid()) {
      if (bankid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bankid_->clear();
      }
    }
    if (has_department()) {
      if (department_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        department_->clear();
      }
    }
    if (has_fnsparticipantid()) {
      if (fnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fnsparticipantid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrganizationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.OrganizationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Inn;
        break;
      }

      // optional string Inn = 2;
      case 2: {
        if (tag == 18) {
         parse_Inn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inn().data(), this->inn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Kpp;
        break;
      }

      // optional string Kpp = 3;
      case 3: {
        if (tag == 26) {
         parse_Kpp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kpp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->kpp().data(), this->kpp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kpp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Address;
        break;
      }

      // required .Diadoc.Api.Proto.Address Address = 4;
      case 4: {
        if (tag == 34) {
         parse_Address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsSoleProprietor;
        break;
      }

      // optional bool IsSoleProprietor = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_IsSoleProprietor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issoleproprietor_)));
          set_has_issoleproprietor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Okopf;
        break;
      }

      // optional string Okopf = 6;
      case 6: {
        if (tag == 50) {
         parse_Okopf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_okopf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->okopf().data(), this->okopf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "okopf");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Okpo;
        break;
      }

      // optional string Okpo = 7;
      case 7: {
        if (tag == 58) {
         parse_Okpo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_okpo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->okpo().data(), this->okpo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "okpo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Okdp;
        break;
      }

      // optional string Okdp = 8;
      case 8: {
        if (tag == 66) {
         parse_Okdp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_okdp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->okdp().data(), this->okdp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "okdp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Phone;
        break;
      }

      // optional string Phone = 9;
      case 9: {
        if (tag == 74) {
         parse_Phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Fax;
        break;
      }

      // optional string Fax = 10;
      case 10: {
        if (tag == 82) {
         parse_Fax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fax()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fax().data(), this->fax().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fax");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_BankAccountNumber;
        break;
      }

      // optional string BankAccountNumber = 11;
      case 11: {
        if (tag == 90) {
         parse_BankAccountNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankaccountnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bankaccountnumber().data(), this->bankaccountnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bankaccountnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_BankName;
        break;
      }

      // optional string BankName = 12;
      case 12: {
        if (tag == 98) {
         parse_BankName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bankname().data(), this->bankname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bankname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_BankId;
        break;
      }

      // optional string BankId = 13;
      case 13: {
        if (tag == 106) {
         parse_BankId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bankid().data(), this->bankid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bankid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_Department;
        break;
      }

      // optional string Department = 14;
      case 14: {
        if (tag == 114) {
         parse_Department:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_department()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->department().data(), this->department().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "department");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_FnsParticipantId;
        break;
      }

      // optional string FnsParticipantId = 15;
      case 15: {
        if (tag == 122) {
         parse_FnsParticipantId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fnsparticipantid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fnsparticipantid().data(), this->fnsparticipantid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fnsparticipantid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.OrganizationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.OrganizationInfo)
  return false;
#undef DO_
}

void OrganizationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.OrganizationInfo)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string Inn = 2;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inn(), output);
  }

  // optional string Kpp = 3;
  if (has_kpp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kpp().data(), this->kpp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kpp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->kpp(), output);
  }

  // required .Diadoc.Api.Proto.Address Address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->address(), output);
  }

  // optional bool IsSoleProprietor = 5 [default = false];
  if (has_issoleproprietor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->issoleproprietor(), output);
  }

  // optional string Okopf = 6;
  if (has_okopf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->okopf().data(), this->okopf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "okopf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->okopf(), output);
  }

  // optional string Okpo = 7;
  if (has_okpo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->okpo().data(), this->okpo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "okpo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->okpo(), output);
  }

  // optional string Okdp = 8;
  if (has_okdp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->okdp().data(), this->okdp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "okdp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->okdp(), output);
  }

  // optional string Phone = 9;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->phone(), output);
  }

  // optional string Fax = 10;
  if (has_fax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fax().data(), this->fax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fax");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->fax(), output);
  }

  // optional string BankAccountNumber = 11;
  if (has_bankaccountnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bankaccountnumber().data(), this->bankaccountnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bankaccountnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->bankaccountnumber(), output);
  }

  // optional string BankName = 12;
  if (has_bankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bankname().data(), this->bankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bankname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->bankname(), output);
  }

  // optional string BankId = 13;
  if (has_bankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bankid().data(), this->bankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bankid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->bankid(), output);
  }

  // optional string Department = 14;
  if (has_department()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->department().data(), this->department().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "department");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->department(), output);
  }

  // optional string FnsParticipantId = 15;
  if (has_fnsparticipantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fnsparticipantid().data(), this->fnsparticipantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fnsparticipantid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->fnsparticipantid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.OrganizationInfo)
}

::google::protobuf::uint8* OrganizationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.OrganizationInfo)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string Inn = 2;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inn(), target);
  }

  // optional string Kpp = 3;
  if (has_kpp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kpp().data(), this->kpp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kpp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->kpp(), target);
  }

  // required .Diadoc.Api.Proto.Address Address = 4;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->address(), target);
  }

  // optional bool IsSoleProprietor = 5 [default = false];
  if (has_issoleproprietor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->issoleproprietor(), target);
  }

  // optional string Okopf = 6;
  if (has_okopf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->okopf().data(), this->okopf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "okopf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->okopf(), target);
  }

  // optional string Okpo = 7;
  if (has_okpo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->okpo().data(), this->okpo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "okpo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->okpo(), target);
  }

  // optional string Okdp = 8;
  if (has_okdp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->okdp().data(), this->okdp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "okdp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->okdp(), target);
  }

  // optional string Phone = 9;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->phone(), target);
  }

  // optional string Fax = 10;
  if (has_fax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fax().data(), this->fax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fax");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fax(), target);
  }

  // optional string BankAccountNumber = 11;
  if (has_bankaccountnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bankaccountnumber().data(), this->bankaccountnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bankaccountnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->bankaccountnumber(), target);
  }

  // optional string BankName = 12;
  if (has_bankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bankname().data(), this->bankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bankname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->bankname(), target);
  }

  // optional string BankId = 13;
  if (has_bankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bankid().data(), this->bankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bankid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->bankid(), target);
  }

  // optional string Department = 14;
  if (has_department()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->department().data(), this->department().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "department");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->department(), target);
  }

  // optional string FnsParticipantId = 15;
  if (has_fnsparticipantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fnsparticipantid().data(), this->fnsparticipantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fnsparticipantid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->fnsparticipantid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.OrganizationInfo)
  return target;
}

int OrganizationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Inn = 2;
    if (has_inn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inn());
    }

    // optional string Kpp = 3;
    if (has_kpp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kpp());
    }

    // required .Diadoc.Api.Proto.Address Address = 4;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

    // optional bool IsSoleProprietor = 5 [default = false];
    if (has_issoleproprietor()) {
      total_size += 1 + 1;
    }

    // optional string Okopf = 6;
    if (has_okopf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->okopf());
    }

    // optional string Okpo = 7;
    if (has_okpo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->okpo());
    }

    // optional string Okdp = 8;
    if (has_okdp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->okdp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Phone = 9;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string Fax = 10;
    if (has_fax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fax());
    }

    // optional string BankAccountNumber = 11;
    if (has_bankaccountnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankaccountnumber());
    }

    // optional string BankName = 12;
    if (has_bankname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankname());
    }

    // optional string BankId = 13;
    if (has_bankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankid());
    }

    // optional string Department = 14;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->department());
    }

    // optional string FnsParticipantId = 15;
    if (has_fnsparticipantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fnsparticipantid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrganizationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrganizationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrganizationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrganizationInfo::MergeFrom(const OrganizationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_inn()) {
      set_inn(from.inn());
    }
    if (from.has_kpp()) {
      set_kpp(from.kpp());
    }
    if (from.has_address()) {
      mutable_address()->::Diadoc::Api::Proto::Address::MergeFrom(from.address());
    }
    if (from.has_issoleproprietor()) {
      set_issoleproprietor(from.issoleproprietor());
    }
    if (from.has_okopf()) {
      set_okopf(from.okopf());
    }
    if (from.has_okpo()) {
      set_okpo(from.okpo());
    }
    if (from.has_okdp()) {
      set_okdp(from.okdp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_fax()) {
      set_fax(from.fax());
    }
    if (from.has_bankaccountnumber()) {
      set_bankaccountnumber(from.bankaccountnumber());
    }
    if (from.has_bankname()) {
      set_bankname(from.bankname());
    }
    if (from.has_bankid()) {
      set_bankid(from.bankid());
    }
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_fnsparticipantid()) {
      set_fnsparticipantid(from.fnsparticipantid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrganizationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrganizationInfo::CopyFrom(const OrganizationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrganizationInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_address()) {
    if (!this->address().IsInitialized()) return false;
  }
  return true;
}

void OrganizationInfo::Swap(OrganizationInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(inn_, other->inn_);
    std::swap(kpp_, other->kpp_);
    std::swap(address_, other->address_);
    std::swap(issoleproprietor_, other->issoleproprietor_);
    std::swap(okopf_, other->okopf_);
    std::swap(okpo_, other->okpo_);
    std::swap(okdp_, other->okdp_);
    std::swap(phone_, other->phone_);
    std::swap(fax_, other->fax_);
    std::swap(bankaccountnumber_, other->bankaccountnumber_);
    std::swap(bankname_, other->bankname_);
    std::swap(bankid_, other->bankid_);
    std::swap(department_, other->department_);
    std::swap(fnsparticipantid_, other->fnsparticipantid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrganizationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrganizationInfo_descriptor_;
  metadata.reflection = OrganizationInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Invoicing
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
