// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invoicing/AcceptanceCertificate552Info.proto

#ifndef PROTOBUF_Invoicing_2fAcceptanceCertificate552Info_2eproto__INCLUDED
#define PROTOBUF_Invoicing_2fAcceptanceCertificate552Info_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Invoicing/InvoiceInfo.pb.h"
#include "Invoicing/ExtendedSigner.pb.h"
#include "Invoicing/ExtendedOrganizationInfo.pb.h"
#include "Invoicing/UniversalTransferDocumentInfo.pb.h"
#include "Invoicing/TovTorgInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Invoicing {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Invoicing_2fAcceptanceCertificate552Info_2eproto();
void protobuf_AssignDesc_Invoicing_2fAcceptanceCertificate552Info_2eproto();
void protobuf_ShutdownFile_Invoicing_2fAcceptanceCertificate552Info_2eproto();

class AcceptanceCertificate552SellerTitleInfo;
class AcceptanceCertificate552TransferInfo;
class AcceptanceCertificate552WorkDescription;
class AcceptanceCertificate552WorkItem;
class AcceptanceCertificate552BuyerTitleInfo;

// ===================================================================

class AcceptanceCertificate552SellerTitleInfo : public ::google::protobuf::Message {
 public:
  AcceptanceCertificate552SellerTitleInfo();
  virtual ~AcceptanceCertificate552SellerTitleInfo();

  AcceptanceCertificate552SellerTitleInfo(const AcceptanceCertificate552SellerTitleInfo& from);

  inline AcceptanceCertificate552SellerTitleInfo& operator=(const AcceptanceCertificate552SellerTitleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptanceCertificate552SellerTitleInfo& default_instance();

  void Swap(AcceptanceCertificate552SellerTitleInfo* other);

  // implements Message ----------------------------------------------

  AcceptanceCertificate552SellerTitleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcceptanceCertificate552SellerTitleInfo& from);
  void MergeFrom(const AcceptanceCertificate552SellerTitleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo Seller = 1;
  inline bool has_seller() const;
  inline void clear_seller();
  static const int kSellerFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo& seller() const;
  inline ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* mutable_seller();
  inline ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* release_seller();
  inline void set_allocated_seller(::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* seller);

  // required .Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo Buyer = 2;
  inline bool has_buyer() const;
  inline void clear_buyer();
  static const int kBuyerFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo& buyer() const;
  inline ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* mutable_buyer();
  inline ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* release_buyer();
  inline void set_allocated_buyer(::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* buyer);

  // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner Signers = 3;
  inline int signers_size() const;
  inline void clear_signers();
  static const int kSignersFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner& signers(int index) const;
  inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* mutable_signers(int index);
  inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* add_signers();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >&
      signers() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >*
      mutable_signers();

  // repeated .Diadoc.Api.Proto.Invoicing.GroundInfo Grounds = 4;
  inline int grounds_size() const;
  inline void clear_grounds();
  static const int kGroundsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Invoicing::GroundInfo& grounds(int index) const;
  inline ::Diadoc::Api::Proto::Invoicing::GroundInfo* mutable_grounds(int index);
  inline ::Diadoc::Api::Proto::Invoicing::GroundInfo* add_grounds();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::GroundInfo >&
      grounds() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::GroundInfo >*
      mutable_grounds();

  // required string Currency = 5;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 5;
  inline const ::std::string& currency() const;
  inline void set_currency(const ::std::string& value);
  inline void set_currency(const char* value);
  inline void set_currency(const char* value, size_t size);
  inline ::std::string* mutable_currency();
  inline ::std::string* release_currency();
  inline void set_allocated_currency(::std::string* currency);

  // optional string CurrencyRate = 6;
  inline bool has_currencyrate() const;
  inline void clear_currencyrate();
  static const int kCurrencyRateFieldNumber = 6;
  inline const ::std::string& currencyrate() const;
  inline void set_currencyrate(const ::std::string& value);
  inline void set_currencyrate(const char* value);
  inline void set_currencyrate(const char* value, size_t size);
  inline ::std::string* mutable_currencyrate();
  inline ::std::string* release_currencyrate();
  inline void set_allocated_currencyrate(::std::string* currencyrate);

  // repeated .Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription Works = 7;
  inline int works_size() const;
  inline void clear_works();
  static const int kWorksFieldNumber = 7;
  inline const ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkDescription& works(int index) const;
  inline ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkDescription* mutable_works(int index);
  inline ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkDescription* add_works();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkDescription >&
      works() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkDescription >*
      mutable_works();

  // required string DocumentDate = 8;
  inline bool has_documentdate() const;
  inline void clear_documentdate();
  static const int kDocumentDateFieldNumber = 8;
  inline const ::std::string& documentdate() const;
  inline void set_documentdate(const ::std::string& value);
  inline void set_documentdate(const char* value);
  inline void set_documentdate(const char* value, size_t size);
  inline ::std::string* mutable_documentdate();
  inline ::std::string* release_documentdate();
  inline void set_allocated_documentdate(::std::string* documentdate);

  // optional string DocumentNumber = 9;
  inline bool has_documentnumber() const;
  inline void clear_documentnumber();
  static const int kDocumentNumberFieldNumber = 9;
  inline const ::std::string& documentnumber() const;
  inline void set_documentnumber(const ::std::string& value);
  inline void set_documentnumber(const char* value);
  inline void set_documentnumber(const char* value, size_t size);
  inline ::std::string* mutable_documentnumber();
  inline ::std::string* release_documentnumber();
  inline void set_allocated_documentnumber(::std::string* documentnumber);

  // optional string RevisionDate = 10;
  inline bool has_revisiondate() const;
  inline void clear_revisiondate();
  static const int kRevisionDateFieldNumber = 10;
  inline const ::std::string& revisiondate() const;
  inline void set_revisiondate(const ::std::string& value);
  inline void set_revisiondate(const char* value);
  inline void set_revisiondate(const char* value, size_t size);
  inline ::std::string* mutable_revisiondate();
  inline ::std::string* release_revisiondate();
  inline void set_allocated_revisiondate(::std::string* revisiondate);

  // optional string RevisionNumber = 11;
  inline bool has_revisionnumber() const;
  inline void clear_revisionnumber();
  static const int kRevisionNumberFieldNumber = 11;
  inline const ::std::string& revisionnumber() const;
  inline void set_revisionnumber(const ::std::string& value);
  inline void set_revisionnumber(const char* value);
  inline void set_revisionnumber(const char* value, size_t size);
  inline ::std::string* mutable_revisionnumber();
  inline ::std::string* release_revisionnumber();
  inline void set_allocated_revisionnumber(::std::string* revisionnumber);

  // required string DocumentCreator = 12;
  inline bool has_documentcreator() const;
  inline void clear_documentcreator();
  static const int kDocumentCreatorFieldNumber = 12;
  inline const ::std::string& documentcreator() const;
  inline void set_documentcreator(const ::std::string& value);
  inline void set_documentcreator(const char* value);
  inline void set_documentcreator(const char* value, size_t size);
  inline ::std::string* mutable_documentcreator();
  inline ::std::string* release_documentcreator();
  inline void set_allocated_documentcreator(::std::string* documentcreator);

  // optional string DocumentCreatorBase = 13;
  inline bool has_documentcreatorbase() const;
  inline void clear_documentcreatorbase();
  static const int kDocumentCreatorBaseFieldNumber = 13;
  inline const ::std::string& documentcreatorbase() const;
  inline void set_documentcreatorbase(const ::std::string& value);
  inline void set_documentcreatorbase(const char* value);
  inline void set_documentcreatorbase(const char* value, size_t size);
  inline ::std::string* mutable_documentcreatorbase();
  inline ::std::string* release_documentcreatorbase();
  inline void set_allocated_documentcreatorbase(::std::string* documentcreatorbase);

  // optional string OperationType = 14;
  inline bool has_operationtype() const;
  inline void clear_operationtype();
  static const int kOperationTypeFieldNumber = 14;
  inline const ::std::string& operationtype() const;
  inline void set_operationtype(const ::std::string& value);
  inline void set_operationtype(const char* value);
  inline void set_operationtype(const char* value, size_t size);
  inline ::std::string* mutable_operationtype();
  inline ::std::string* release_operationtype();
  inline void set_allocated_operationtype(::std::string* operationtype);

  // optional string OperationTitle = 15;
  inline bool has_operationtitle() const;
  inline void clear_operationtitle();
  static const int kOperationTitleFieldNumber = 15;
  inline const ::std::string& operationtitle() const;
  inline void set_operationtitle(const ::std::string& value);
  inline void set_operationtitle(const char* value);
  inline void set_operationtitle(const char* value, size_t size);
  inline ::std::string* mutable_operationtitle();
  inline ::std::string* release_operationtitle();
  inline void set_allocated_operationtitle(::std::string* operationtitle);

  // optional string GovernmentContractInfo = 16;
  inline bool has_governmentcontractinfo() const;
  inline void clear_governmentcontractinfo();
  static const int kGovernmentContractInfoFieldNumber = 16;
  inline const ::std::string& governmentcontractinfo() const;
  inline void set_governmentcontractinfo(const ::std::string& value);
  inline void set_governmentcontractinfo(const char* value);
  inline void set_governmentcontractinfo(const char* value, size_t size);
  inline ::std::string* mutable_governmentcontractinfo();
  inline ::std::string* release_governmentcontractinfo();
  inline void set_allocated_governmentcontractinfo(::std::string* governmentcontractinfo);

  // optional .Diadoc.Api.Proto.Invoicing.AdditionalInfoId AdditionalInfoId = 17;
  inline bool has_additionalinfoid() const;
  inline void clear_additionalinfoid();
  static const int kAdditionalInfoIdFieldNumber = 17;
  inline const ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId& additionalinfoid() const;
  inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* mutable_additionalinfoid();
  inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* release_additionalinfoid();
  inline void set_allocated_additionalinfoid(::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* additionalinfoid);

  // required string DocumentName = 18;
  inline bool has_documentname() const;
  inline void clear_documentname();
  static const int kDocumentNameFieldNumber = 18;
  inline const ::std::string& documentname() const;
  inline void set_documentname(const ::std::string& value);
  inline void set_documentname(const char* value);
  inline void set_documentname(const char* value, size_t size);
  inline ::std::string* mutable_documentname();
  inline ::std::string* release_documentname();
  inline void set_allocated_documentname(::std::string* documentname);

  // required .Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo TransferInfo = 19;
  inline bool has_transferinfo() const;
  inline void clear_transferinfo();
  static const int kTransferInfoFieldNumber = 19;
  inline const ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552TransferInfo& transferinfo() const;
  inline ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552TransferInfo* mutable_transferinfo();
  inline ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552TransferInfo* release_transferinfo();
  inline void set_allocated_transferinfo(::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552TransferInfo* transferinfo);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo)
 private:
  inline void set_has_seller();
  inline void clear_has_seller();
  inline void set_has_buyer();
  inline void clear_has_buyer();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_currencyrate();
  inline void clear_has_currencyrate();
  inline void set_has_documentdate();
  inline void clear_has_documentdate();
  inline void set_has_documentnumber();
  inline void clear_has_documentnumber();
  inline void set_has_revisiondate();
  inline void clear_has_revisiondate();
  inline void set_has_revisionnumber();
  inline void clear_has_revisionnumber();
  inline void set_has_documentcreator();
  inline void clear_has_documentcreator();
  inline void set_has_documentcreatorbase();
  inline void clear_has_documentcreatorbase();
  inline void set_has_operationtype();
  inline void clear_has_operationtype();
  inline void set_has_operationtitle();
  inline void clear_has_operationtitle();
  inline void set_has_governmentcontractinfo();
  inline void clear_has_governmentcontractinfo();
  inline void set_has_additionalinfoid();
  inline void clear_has_additionalinfoid();
  inline void set_has_documentname();
  inline void clear_has_documentname();
  inline void set_has_transferinfo();
  inline void clear_has_transferinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* seller_;
  ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* buyer_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner > signers_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::GroundInfo > grounds_;
  ::std::string* currency_;
  ::std::string* currencyrate_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkDescription > works_;
  ::std::string* documentdate_;
  ::std::string* documentnumber_;
  ::std::string* revisiondate_;
  ::std::string* revisionnumber_;
  ::std::string* documentcreator_;
  ::std::string* documentcreatorbase_;
  ::std::string* operationtype_;
  ::std::string* operationtitle_;
  ::std::string* governmentcontractinfo_;
  ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* additionalinfoid_;
  ::std::string* documentname_;
  ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552TransferInfo* transferinfo_;
  friend void  protobuf_AddDesc_Invoicing_2fAcceptanceCertificate552Info_2eproto();
  friend void protobuf_AssignDesc_Invoicing_2fAcceptanceCertificate552Info_2eproto();
  friend void protobuf_ShutdownFile_Invoicing_2fAcceptanceCertificate552Info_2eproto();

  void InitAsDefaultInstance();
  static AcceptanceCertificate552SellerTitleInfo* default_instance_;
};
// -------------------------------------------------------------------

class AcceptanceCertificate552TransferInfo : public ::google::protobuf::Message {
 public:
  AcceptanceCertificate552TransferInfo();
  virtual ~AcceptanceCertificate552TransferInfo();

  AcceptanceCertificate552TransferInfo(const AcceptanceCertificate552TransferInfo& from);

  inline AcceptanceCertificate552TransferInfo& operator=(const AcceptanceCertificate552TransferInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptanceCertificate552TransferInfo& default_instance();

  void Swap(AcceptanceCertificate552TransferInfo* other);

  // implements Message ----------------------------------------------

  AcceptanceCertificate552TransferInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcceptanceCertificate552TransferInfo& from);
  void MergeFrom(const AcceptanceCertificate552TransferInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string OperationInfo = 1;
  inline bool has_operationinfo() const;
  inline void clear_operationinfo();
  static const int kOperationInfoFieldNumber = 1;
  inline const ::std::string& operationinfo() const;
  inline void set_operationinfo(const ::std::string& value);
  inline void set_operationinfo(const char* value);
  inline void set_operationinfo(const char* value, size_t size);
  inline ::std::string* mutable_operationinfo();
  inline ::std::string* release_operationinfo();
  inline void set_allocated_operationinfo(::std::string* operationinfo);

  // optional string TransferDate = 2;
  inline bool has_transferdate() const;
  inline void clear_transferdate();
  static const int kTransferDateFieldNumber = 2;
  inline const ::std::string& transferdate() const;
  inline void set_transferdate(const ::std::string& value);
  inline void set_transferdate(const char* value);
  inline void set_transferdate(const char* value, size_t size);
  inline ::std::string* mutable_transferdate();
  inline ::std::string* release_transferdate();
  inline void set_allocated_transferdate(::std::string* transferdate);

  // optional string CreatedThingTransferDate = 3;
  inline bool has_createdthingtransferdate() const;
  inline void clear_createdthingtransferdate();
  static const int kCreatedThingTransferDateFieldNumber = 3;
  inline const ::std::string& createdthingtransferdate() const;
  inline void set_createdthingtransferdate(const ::std::string& value);
  inline void set_createdthingtransferdate(const char* value);
  inline void set_createdthingtransferdate(const char* value, size_t size);
  inline ::std::string* mutable_createdthingtransferdate();
  inline ::std::string* release_createdthingtransferdate();
  inline void set_allocated_createdthingtransferdate(::std::string* createdthingtransferdate);

  // optional string CreatedThingInfo = 4;
  inline bool has_createdthinginfo() const;
  inline void clear_createdthinginfo();
  static const int kCreatedThingInfoFieldNumber = 4;
  inline const ::std::string& createdthinginfo() const;
  inline void set_createdthinginfo(const ::std::string& value);
  inline void set_createdthinginfo(const char* value);
  inline void set_createdthinginfo(const char* value, size_t size);
  inline ::std::string* mutable_createdthinginfo();
  inline ::std::string* release_createdthinginfo();
  inline void set_allocated_createdthinginfo(::std::string* createdthinginfo);

  // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 5;
  inline int additionalinfos_size() const;
  inline void clear_additionalinfos();
  static const int kAdditionalInfosFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Invoicing::AdditionalInfo& additionalinfos(int index) const;
  inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfo* mutable_additionalinfos(int index);
  inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfo* add_additionalinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AdditionalInfo >&
      additionalinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AdditionalInfo >*
      mutable_additionalinfos();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo)
 private:
  inline void set_has_operationinfo();
  inline void clear_has_operationinfo();
  inline void set_has_transferdate();
  inline void clear_has_transferdate();
  inline void set_has_createdthingtransferdate();
  inline void clear_has_createdthingtransferdate();
  inline void set_has_createdthinginfo();
  inline void clear_has_createdthinginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* operationinfo_;
  ::std::string* transferdate_;
  ::std::string* createdthingtransferdate_;
  ::std::string* createdthinginfo_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AdditionalInfo > additionalinfos_;
  friend void  protobuf_AddDesc_Invoicing_2fAcceptanceCertificate552Info_2eproto();
  friend void protobuf_AssignDesc_Invoicing_2fAcceptanceCertificate552Info_2eproto();
  friend void protobuf_ShutdownFile_Invoicing_2fAcceptanceCertificate552Info_2eproto();

  void InitAsDefaultInstance();
  static AcceptanceCertificate552TransferInfo* default_instance_;
};
// -------------------------------------------------------------------

class AcceptanceCertificate552WorkDescription : public ::google::protobuf::Message {
 public:
  AcceptanceCertificate552WorkDescription();
  virtual ~AcceptanceCertificate552WorkDescription();

  AcceptanceCertificate552WorkDescription(const AcceptanceCertificate552WorkDescription& from);

  inline AcceptanceCertificate552WorkDescription& operator=(const AcceptanceCertificate552WorkDescription& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptanceCertificate552WorkDescription& default_instance();

  void Swap(AcceptanceCertificate552WorkDescription* other);

  // implements Message ----------------------------------------------

  AcceptanceCertificate552WorkDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcceptanceCertificate552WorkDescription& from);
  void MergeFrom(const AcceptanceCertificate552WorkDescription& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string StartingDate = 1;
  inline bool has_startingdate() const;
  inline void clear_startingdate();
  static const int kStartingDateFieldNumber = 1;
  inline const ::std::string& startingdate() const;
  inline void set_startingdate(const ::std::string& value);
  inline void set_startingdate(const char* value);
  inline void set_startingdate(const char* value, size_t size);
  inline ::std::string* mutable_startingdate();
  inline ::std::string* release_startingdate();
  inline void set_allocated_startingdate(::std::string* startingdate);

  // optional string CompletionDate = 2;
  inline bool has_completiondate() const;
  inline void clear_completiondate();
  static const int kCompletionDateFieldNumber = 2;
  inline const ::std::string& completiondate() const;
  inline void set_completiondate(const ::std::string& value);
  inline void set_completiondate(const char* value);
  inline void set_completiondate(const char* value, size_t size);
  inline ::std::string* mutable_completiondate();
  inline ::std::string* release_completiondate();
  inline void set_allocated_completiondate(::std::string* completiondate);

  // optional string TotalWithVatExcluded = 3;
  inline bool has_totalwithvatexcluded() const;
  inline void clear_totalwithvatexcluded();
  static const int kTotalWithVatExcludedFieldNumber = 3;
  inline const ::std::string& totalwithvatexcluded() const;
  inline void set_totalwithvatexcluded(const ::std::string& value);
  inline void set_totalwithvatexcluded(const char* value);
  inline void set_totalwithvatexcluded(const char* value, size_t size);
  inline ::std::string* mutable_totalwithvatexcluded();
  inline ::std::string* release_totalwithvatexcluded();
  inline void set_allocated_totalwithvatexcluded(::std::string* totalwithvatexcluded);

  // optional string TotalVat = 4;
  inline bool has_totalvat() const;
  inline void clear_totalvat();
  static const int kTotalVatFieldNumber = 4;
  inline const ::std::string& totalvat() const;
  inline void set_totalvat(const ::std::string& value);
  inline void set_totalvat(const char* value);
  inline void set_totalvat(const char* value, size_t size);
  inline ::std::string* mutable_totalvat();
  inline ::std::string* release_totalvat();
  inline void set_allocated_totalvat(::std::string* totalvat);

  // required string Total = 5;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 5;
  inline const ::std::string& total() const;
  inline void set_total(const ::std::string& value);
  inline void set_total(const char* value);
  inline void set_total(const char* value, size_t size);
  inline ::std::string* mutable_total();
  inline ::std::string* release_total();
  inline void set_allocated_total(::std::string* total);

  // repeated .Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem Items = 6;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkItem& items(int index) const;
  inline ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkItem* mutable_items(int index);
  inline ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription)
 private:
  inline void set_has_startingdate();
  inline void clear_has_startingdate();
  inline void set_has_completiondate();
  inline void clear_has_completiondate();
  inline void set_has_totalwithvatexcluded();
  inline void clear_has_totalwithvatexcluded();
  inline void set_has_totalvat();
  inline void clear_has_totalvat();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* startingdate_;
  ::std::string* completiondate_;
  ::std::string* totalwithvatexcluded_;
  ::std::string* totalvat_;
  ::std::string* total_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkItem > items_;
  friend void  protobuf_AddDesc_Invoicing_2fAcceptanceCertificate552Info_2eproto();
  friend void protobuf_AssignDesc_Invoicing_2fAcceptanceCertificate552Info_2eproto();
  friend void protobuf_ShutdownFile_Invoicing_2fAcceptanceCertificate552Info_2eproto();

  void InitAsDefaultInstance();
  static AcceptanceCertificate552WorkDescription* default_instance_;
};
// -------------------------------------------------------------------

class AcceptanceCertificate552WorkItem : public ::google::protobuf::Message {
 public:
  AcceptanceCertificate552WorkItem();
  virtual ~AcceptanceCertificate552WorkItem();

  AcceptanceCertificate552WorkItem(const AcceptanceCertificate552WorkItem& from);

  inline AcceptanceCertificate552WorkItem& operator=(const AcceptanceCertificate552WorkItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptanceCertificate552WorkItem& default_instance();

  void Swap(AcceptanceCertificate552WorkItem* other);

  // implements Message ----------------------------------------------

  AcceptanceCertificate552WorkItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcceptanceCertificate552WorkItem& from);
  void MergeFrom(const AcceptanceCertificate552WorkItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string Description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional string UnitCode = 3;
  inline bool has_unitcode() const;
  inline void clear_unitcode();
  static const int kUnitCodeFieldNumber = 3;
  inline const ::std::string& unitcode() const;
  inline void set_unitcode(const ::std::string& value);
  inline void set_unitcode(const char* value);
  inline void set_unitcode(const char* value, size_t size);
  inline ::std::string* mutable_unitcode();
  inline ::std::string* release_unitcode();
  inline void set_allocated_unitcode(::std::string* unitcode);

  // optional string UnitName = 4;
  inline bool has_unitname() const;
  inline void clear_unitname();
  static const int kUnitNameFieldNumber = 4;
  inline const ::std::string& unitname() const;
  inline void set_unitname(const ::std::string& value);
  inline void set_unitname(const char* value);
  inline void set_unitname(const char* value, size_t size);
  inline ::std::string* mutable_unitname();
  inline ::std::string* release_unitname();
  inline void set_allocated_unitname(::std::string* unitname);

  // optional string Price = 5;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 5;
  inline const ::std::string& price() const;
  inline void set_price(const ::std::string& value);
  inline void set_price(const char* value);
  inline void set_price(const char* value, size_t size);
  inline ::std::string* mutable_price();
  inline ::std::string* release_price();
  inline void set_allocated_price(::std::string* price);

  // optional string Quantity = 6;
  inline bool has_quantity() const;
  inline void clear_quantity();
  static const int kQuantityFieldNumber = 6;
  inline const ::std::string& quantity() const;
  inline void set_quantity(const ::std::string& value);
  inline void set_quantity(const char* value);
  inline void set_quantity(const char* value, size_t size);
  inline ::std::string* mutable_quantity();
  inline ::std::string* release_quantity();
  inline void set_allocated_quantity(::std::string* quantity);

  // optional string SubtotalWithVatExcluded = 7;
  inline bool has_subtotalwithvatexcluded() const;
  inline void clear_subtotalwithvatexcluded();
  static const int kSubtotalWithVatExcludedFieldNumber = 7;
  inline const ::std::string& subtotalwithvatexcluded() const;
  inline void set_subtotalwithvatexcluded(const ::std::string& value);
  inline void set_subtotalwithvatexcluded(const char* value);
  inline void set_subtotalwithvatexcluded(const char* value, size_t size);
  inline ::std::string* mutable_subtotalwithvatexcluded();
  inline ::std::string* release_subtotalwithvatexcluded();
  inline void set_allocated_subtotalwithvatexcluded(::std::string* subtotalwithvatexcluded);

  // optional string Vat = 8;
  inline bool has_vat() const;
  inline void clear_vat();
  static const int kVatFieldNumber = 8;
  inline const ::std::string& vat() const;
  inline void set_vat(const ::std::string& value);
  inline void set_vat(const char* value);
  inline void set_vat(const char* value, size_t size);
  inline ::std::string* mutable_vat();
  inline ::std::string* release_vat();
  inline void set_allocated_vat(::std::string* vat);

  // optional string Subtotal = 9;
  inline bool has_subtotal() const;
  inline void clear_subtotal();
  static const int kSubtotalFieldNumber = 9;
  inline const ::std::string& subtotal() const;
  inline void set_subtotal(const ::std::string& value);
  inline void set_subtotal(const char* value);
  inline void set_subtotal(const char* value, size_t size);
  inline ::std::string* mutable_subtotal();
  inline ::std::string* release_subtotal();
  inline void set_allocated_subtotal(::std::string* subtotal);

  // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 10;
  inline int additionalinfos_size() const;
  inline void clear_additionalinfos();
  static const int kAdditionalInfosFieldNumber = 10;
  inline const ::Diadoc::Api::Proto::Invoicing::AdditionalInfo& additionalinfos(int index) const;
  inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfo* mutable_additionalinfos(int index);
  inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfo* add_additionalinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AdditionalInfo >&
      additionalinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AdditionalInfo >*
      mutable_additionalinfos();

  // optional .Diadoc.Api.Proto.Invoicing.TaxRate TaxRate = 11 [default = Percent_18];
  inline bool has_taxrate() const;
  inline void clear_taxrate();
  static const int kTaxRateFieldNumber = 11;
  inline ::Diadoc::Api::Proto::Invoicing::TaxRate taxrate() const;
  inline void set_taxrate(::Diadoc::Api::Proto::Invoicing::TaxRate value);

  // optional string ItemAccountDebit = 12;
  inline bool has_itemaccountdebit() const;
  inline void clear_itemaccountdebit();
  static const int kItemAccountDebitFieldNumber = 12;
  inline const ::std::string& itemaccountdebit() const;
  inline void set_itemaccountdebit(const ::std::string& value);
  inline void set_itemaccountdebit(const char* value);
  inline void set_itemaccountdebit(const char* value, size_t size);
  inline ::std::string* mutable_itemaccountdebit();
  inline ::std::string* release_itemaccountdebit();
  inline void set_allocated_itemaccountdebit(::std::string* itemaccountdebit);

  // optional string ItemAccountCredit = 13;
  inline bool has_itemaccountcredit() const;
  inline void clear_itemaccountcredit();
  static const int kItemAccountCreditFieldNumber = 13;
  inline const ::std::string& itemaccountcredit() const;
  inline void set_itemaccountcredit(const ::std::string& value);
  inline void set_itemaccountcredit(const char* value);
  inline void set_itemaccountcredit(const char* value, size_t size);
  inline ::std::string* mutable_itemaccountcredit();
  inline ::std::string* release_itemaccountcredit();
  inline void set_allocated_itemaccountcredit(::std::string* itemaccountcredit);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_unitcode();
  inline void clear_has_unitcode();
  inline void set_has_unitname();
  inline void clear_has_unitname();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_quantity();
  inline void clear_has_quantity();
  inline void set_has_subtotalwithvatexcluded();
  inline void clear_has_subtotalwithvatexcluded();
  inline void set_has_vat();
  inline void clear_has_vat();
  inline void set_has_subtotal();
  inline void clear_has_subtotal();
  inline void set_has_taxrate();
  inline void clear_has_taxrate();
  inline void set_has_itemaccountdebit();
  inline void clear_has_itemaccountdebit();
  inline void set_has_itemaccountcredit();
  inline void clear_has_itemaccountcredit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* description_;
  ::std::string* unitcode_;
  ::std::string* unitname_;
  ::std::string* price_;
  ::std::string* quantity_;
  ::std::string* subtotalwithvatexcluded_;
  ::std::string* vat_;
  ::std::string* subtotal_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AdditionalInfo > additionalinfos_;
  ::std::string* itemaccountdebit_;
  ::std::string* itemaccountcredit_;
  int taxrate_;
  friend void  protobuf_AddDesc_Invoicing_2fAcceptanceCertificate552Info_2eproto();
  friend void protobuf_AssignDesc_Invoicing_2fAcceptanceCertificate552Info_2eproto();
  friend void protobuf_ShutdownFile_Invoicing_2fAcceptanceCertificate552Info_2eproto();

  void InitAsDefaultInstance();
  static AcceptanceCertificate552WorkItem* default_instance_;
};
// -------------------------------------------------------------------

class AcceptanceCertificate552BuyerTitleInfo : public ::google::protobuf::Message {
 public:
  AcceptanceCertificate552BuyerTitleInfo();
  virtual ~AcceptanceCertificate552BuyerTitleInfo();

  AcceptanceCertificate552BuyerTitleInfo(const AcceptanceCertificate552BuyerTitleInfo& from);

  inline AcceptanceCertificate552BuyerTitleInfo& operator=(const AcceptanceCertificate552BuyerTitleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptanceCertificate552BuyerTitleInfo& default_instance();

  void Swap(AcceptanceCertificate552BuyerTitleInfo* other);

  // implements Message ----------------------------------------------

  AcceptanceCertificate552BuyerTitleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcceptanceCertificate552BuyerTitleInfo& from);
  void MergeFrom(const AcceptanceCertificate552BuyerTitleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner Signers = 1;
  inline int signers_size() const;
  inline void clear_signers();
  static const int kSignersFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner& signers(int index) const;
  inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* mutable_signers(int index);
  inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* add_signers();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >&
      signers() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >*
      mutable_signers();

  // required string DocumentCreator = 2;
  inline bool has_documentcreator() const;
  inline void clear_documentcreator();
  static const int kDocumentCreatorFieldNumber = 2;
  inline const ::std::string& documentcreator() const;
  inline void set_documentcreator(const ::std::string& value);
  inline void set_documentcreator(const char* value);
  inline void set_documentcreator(const char* value, size_t size);
  inline ::std::string* mutable_documentcreator();
  inline ::std::string* release_documentcreator();
  inline void set_allocated_documentcreator(::std::string* documentcreator);

  // optional string DocumentCreatorBase = 3;
  inline bool has_documentcreatorbase() const;
  inline void clear_documentcreatorbase();
  static const int kDocumentCreatorBaseFieldNumber = 3;
  inline const ::std::string& documentcreatorbase() const;
  inline void set_documentcreatorbase(const ::std::string& value);
  inline void set_documentcreatorbase(const char* value);
  inline void set_documentcreatorbase(const char* value, size_t size);
  inline ::std::string* mutable_documentcreatorbase();
  inline ::std::string* release_documentcreatorbase();
  inline void set_allocated_documentcreatorbase(::std::string* documentcreatorbase);

  // optional string OperationType = 4;
  inline bool has_operationtype() const;
  inline void clear_operationtype();
  static const int kOperationTypeFieldNumber = 4;
  inline const ::std::string& operationtype() const;
  inline void set_operationtype(const ::std::string& value);
  inline void set_operationtype(const char* value);
  inline void set_operationtype(const char* value, size_t size);
  inline ::std::string* mutable_operationtype();
  inline ::std::string* release_operationtype();
  inline void set_allocated_operationtype(::std::string* operationtype);

  // required string OperationContent = 6;
  inline bool has_operationcontent() const;
  inline void clear_operationcontent();
  static const int kOperationContentFieldNumber = 6;
  inline const ::std::string& operationcontent() const;
  inline void set_operationcontent(const ::std::string& value);
  inline void set_operationcontent(const char* value);
  inline void set_operationcontent(const char* value, size_t size);
  inline ::std::string* mutable_operationcontent();
  inline ::std::string* release_operationcontent();
  inline void set_allocated_operationcontent(::std::string* operationcontent);

  // optional string AcceptanceDate = 7;
  inline bool has_acceptancedate() const;
  inline void clear_acceptancedate();
  static const int kAcceptanceDateFieldNumber = 7;
  inline const ::std::string& acceptancedate() const;
  inline void set_acceptancedate(const ::std::string& value);
  inline void set_acceptancedate(const char* value);
  inline void set_acceptancedate(const char* value, size_t size);
  inline ::std::string* mutable_acceptancedate();
  inline ::std::string* release_acceptancedate();
  inline void set_allocated_acceptancedate(::std::string* acceptancedate);

  // optional string CreatedThingAcceptDate = 8;
  inline bool has_createdthingacceptdate() const;
  inline void clear_createdthingacceptdate();
  static const int kCreatedThingAcceptDateFieldNumber = 8;
  inline const ::std::string& createdthingacceptdate() const;
  inline void set_createdthingacceptdate(const ::std::string& value);
  inline void set_createdthingacceptdate(const char* value);
  inline void set_createdthingacceptdate(const char* value, size_t size);
  inline ::std::string* mutable_createdthingacceptdate();
  inline ::std::string* release_createdthingacceptdate();
  inline void set_allocated_createdthingacceptdate(::std::string* createdthingacceptdate);

  // optional string CreatedThingInfo = 9;
  inline bool has_createdthinginfo() const;
  inline void clear_createdthinginfo();
  static const int kCreatedThingInfoFieldNumber = 9;
  inline const ::std::string& createdthinginfo() const;
  inline void set_createdthinginfo(const ::std::string& value);
  inline void set_createdthinginfo(const char* value);
  inline void set_createdthinginfo(const char* value, size_t size);
  inline ::std::string* mutable_createdthinginfo();
  inline ::std::string* release_createdthinginfo();
  inline void set_allocated_createdthinginfo(::std::string* createdthinginfo);

  // optional .Diadoc.Api.Proto.Invoicing.AdditionalInfoId AdditionalInfoId = 10;
  inline bool has_additionalinfoid() const;
  inline void clear_additionalinfoid();
  static const int kAdditionalInfoIdFieldNumber = 10;
  inline const ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId& additionalinfoid() const;
  inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* mutable_additionalinfoid();
  inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* release_additionalinfoid();
  inline void set_allocated_additionalinfoid(::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* additionalinfoid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo)
 private:
  inline void set_has_documentcreator();
  inline void clear_has_documentcreator();
  inline void set_has_documentcreatorbase();
  inline void clear_has_documentcreatorbase();
  inline void set_has_operationtype();
  inline void clear_has_operationtype();
  inline void set_has_operationcontent();
  inline void clear_has_operationcontent();
  inline void set_has_acceptancedate();
  inline void clear_has_acceptancedate();
  inline void set_has_createdthingacceptdate();
  inline void clear_has_createdthingacceptdate();
  inline void set_has_createdthinginfo();
  inline void clear_has_createdthinginfo();
  inline void set_has_additionalinfoid();
  inline void clear_has_additionalinfoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner > signers_;
  ::std::string* documentcreator_;
  ::std::string* documentcreatorbase_;
  ::std::string* operationtype_;
  ::std::string* operationcontent_;
  ::std::string* acceptancedate_;
  ::std::string* createdthingacceptdate_;
  ::std::string* createdthinginfo_;
  ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* additionalinfoid_;
  friend void  protobuf_AddDesc_Invoicing_2fAcceptanceCertificate552Info_2eproto();
  friend void protobuf_AssignDesc_Invoicing_2fAcceptanceCertificate552Info_2eproto();
  friend void protobuf_ShutdownFile_Invoicing_2fAcceptanceCertificate552Info_2eproto();

  void InitAsDefaultInstance();
  static AcceptanceCertificate552BuyerTitleInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// AcceptanceCertificate552SellerTitleInfo

// required .Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo Seller = 1;
inline bool AcceptanceCertificate552SellerTitleInfo::has_seller() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_seller() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_seller() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_seller() {
  if (seller_ != NULL) seller_->::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo::Clear();
  clear_has_seller();
}
inline const ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo& AcceptanceCertificate552SellerTitleInfo::seller() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Seller)
  return seller_ != NULL ? *seller_ : *default_instance_->seller_;
}
inline ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* AcceptanceCertificate552SellerTitleInfo::mutable_seller() {
  set_has_seller();
  if (seller_ == NULL) seller_ = new ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Seller)
  return seller_;
}
inline ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* AcceptanceCertificate552SellerTitleInfo::release_seller() {
  clear_has_seller();
  ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* temp = seller_;
  seller_ = NULL;
  return temp;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_seller(::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* seller) {
  delete seller_;
  seller_ = seller;
  if (seller) {
    set_has_seller();
  } else {
    clear_has_seller();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Seller)
}

// required .Diadoc.Api.Proto.Invoicing.Organizations.ExtendedOrganizationInfo Buyer = 2;
inline bool AcceptanceCertificate552SellerTitleInfo::has_buyer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_buyer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_buyer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_buyer() {
  if (buyer_ != NULL) buyer_->::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo::Clear();
  clear_has_buyer();
}
inline const ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo& AcceptanceCertificate552SellerTitleInfo::buyer() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Buyer)
  return buyer_ != NULL ? *buyer_ : *default_instance_->buyer_;
}
inline ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* AcceptanceCertificate552SellerTitleInfo::mutable_buyer() {
  set_has_buyer();
  if (buyer_ == NULL) buyer_ = new ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Buyer)
  return buyer_;
}
inline ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* AcceptanceCertificate552SellerTitleInfo::release_buyer() {
  clear_has_buyer();
  ::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* temp = buyer_;
  buyer_ = NULL;
  return temp;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_buyer(::Diadoc::Api::Proto::Invoicing::Organizations::ExtendedOrganizationInfo* buyer) {
  delete buyer_;
  buyer_ = buyer;
  if (buyer) {
    set_has_buyer();
  } else {
    clear_has_buyer();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Buyer)
}

// repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner Signers = 3;
inline int AcceptanceCertificate552SellerTitleInfo::signers_size() const {
  return signers_.size();
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_signers() {
  signers_.Clear();
}
inline const ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner& AcceptanceCertificate552SellerTitleInfo::signers(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Signers)
  return signers_.Get(index);
}
inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* AcceptanceCertificate552SellerTitleInfo::mutable_signers(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Signers)
  return signers_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* AcceptanceCertificate552SellerTitleInfo::add_signers() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Signers)
  return signers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >&
AcceptanceCertificate552SellerTitleInfo::signers() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Signers)
  return signers_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >*
AcceptanceCertificate552SellerTitleInfo::mutable_signers() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Signers)
  return &signers_;
}

// repeated .Diadoc.Api.Proto.Invoicing.GroundInfo Grounds = 4;
inline int AcceptanceCertificate552SellerTitleInfo::grounds_size() const {
  return grounds_.size();
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_grounds() {
  grounds_.Clear();
}
inline const ::Diadoc::Api::Proto::Invoicing::GroundInfo& AcceptanceCertificate552SellerTitleInfo::grounds(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Grounds)
  return grounds_.Get(index);
}
inline ::Diadoc::Api::Proto::Invoicing::GroundInfo* AcceptanceCertificate552SellerTitleInfo::mutable_grounds(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Grounds)
  return grounds_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Invoicing::GroundInfo* AcceptanceCertificate552SellerTitleInfo::add_grounds() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Grounds)
  return grounds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::GroundInfo >&
AcceptanceCertificate552SellerTitleInfo::grounds() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Grounds)
  return grounds_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::GroundInfo >*
AcceptanceCertificate552SellerTitleInfo::mutable_grounds() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Grounds)
  return &grounds_;
}

// required string Currency = 5;
inline bool AcceptanceCertificate552SellerTitleInfo::has_currency() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_currency() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_currency() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_currency() {
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_->clear();
  }
  clear_has_currency();
}
inline const ::std::string& AcceptanceCertificate552SellerTitleInfo::currency() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Currency)
  return *currency_;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_currency(const ::std::string& value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Currency)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_currency(const char* value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Currency)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_currency(const char* value, size_t size) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  currency_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Currency)
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::mutable_currency() {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Currency)
  return currency_;
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::release_currency() {
  clear_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = currency_;
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_currency(::std::string* currency) {
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currency_;
  }
  if (currency) {
    set_has_currency();
    currency_ = currency;
  } else {
    clear_has_currency();
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Currency)
}

// optional string CurrencyRate = 6;
inline bool AcceptanceCertificate552SellerTitleInfo::has_currencyrate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_currencyrate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_currencyrate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_currencyrate() {
  if (currencyrate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currencyrate_->clear();
  }
  clear_has_currencyrate();
}
inline const ::std::string& AcceptanceCertificate552SellerTitleInfo::currencyrate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.CurrencyRate)
  return *currencyrate_;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_currencyrate(const ::std::string& value) {
  set_has_currencyrate();
  if (currencyrate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currencyrate_ = new ::std::string;
  }
  currencyrate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.CurrencyRate)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_currencyrate(const char* value) {
  set_has_currencyrate();
  if (currencyrate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currencyrate_ = new ::std::string;
  }
  currencyrate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.CurrencyRate)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_currencyrate(const char* value, size_t size) {
  set_has_currencyrate();
  if (currencyrate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currencyrate_ = new ::std::string;
  }
  currencyrate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.CurrencyRate)
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::mutable_currencyrate() {
  set_has_currencyrate();
  if (currencyrate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currencyrate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.CurrencyRate)
  return currencyrate_;
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::release_currencyrate() {
  clear_has_currencyrate();
  if (currencyrate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = currencyrate_;
    currencyrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_currencyrate(::std::string* currencyrate) {
  if (currencyrate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currencyrate_;
  }
  if (currencyrate) {
    set_has_currencyrate();
    currencyrate_ = currencyrate;
  } else {
    clear_has_currencyrate();
    currencyrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.CurrencyRate)
}

// repeated .Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription Works = 7;
inline int AcceptanceCertificate552SellerTitleInfo::works_size() const {
  return works_.size();
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_works() {
  works_.Clear();
}
inline const ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkDescription& AcceptanceCertificate552SellerTitleInfo::works(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Works)
  return works_.Get(index);
}
inline ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkDescription* AcceptanceCertificate552SellerTitleInfo::mutable_works(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Works)
  return works_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkDescription* AcceptanceCertificate552SellerTitleInfo::add_works() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Works)
  return works_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkDescription >&
AcceptanceCertificate552SellerTitleInfo::works() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Works)
  return works_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkDescription >*
AcceptanceCertificate552SellerTitleInfo::mutable_works() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.Works)
  return &works_;
}

// required string DocumentDate = 8;
inline bool AcceptanceCertificate552SellerTitleInfo::has_documentdate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_documentdate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_documentdate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_documentdate() {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_->clear();
  }
  clear_has_documentdate();
}
inline const ::std::string& AcceptanceCertificate552SellerTitleInfo::documentdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentDate)
  return *documentdate_;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_documentdate(const ::std::string& value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentDate)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_documentdate(const char* value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentDate)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_documentdate(const char* value, size_t size) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentDate)
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::mutable_documentdate() {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentDate)
  return documentdate_;
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::release_documentdate() {
  clear_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentdate_;
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_documentdate(::std::string* documentdate) {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentdate) {
    set_has_documentdate();
    documentdate_ = documentdate;
  } else {
    clear_has_documentdate();
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentDate)
}

// optional string DocumentNumber = 9;
inline bool AcceptanceCertificate552SellerTitleInfo::has_documentnumber() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_documentnumber() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_documentnumber() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_documentnumber() {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_->clear();
  }
  clear_has_documentnumber();
}
inline const ::std::string& AcceptanceCertificate552SellerTitleInfo::documentnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentNumber)
  return *documentnumber_;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_documentnumber(const ::std::string& value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentNumber)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_documentnumber(const char* value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentNumber)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_documentnumber(const char* value, size_t size) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentNumber)
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::mutable_documentnumber() {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentNumber)
  return documentnumber_;
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::release_documentnumber() {
  clear_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentnumber_;
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_documentnumber(::std::string* documentnumber) {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (documentnumber) {
    set_has_documentnumber();
    documentnumber_ = documentnumber;
  } else {
    clear_has_documentnumber();
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentNumber)
}

// optional string RevisionDate = 10;
inline bool AcceptanceCertificate552SellerTitleInfo::has_revisiondate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_revisiondate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_revisiondate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_revisiondate() {
  if (revisiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revisiondate_->clear();
  }
  clear_has_revisiondate();
}
inline const ::std::string& AcceptanceCertificate552SellerTitleInfo::revisiondate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.RevisionDate)
  return *revisiondate_;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_revisiondate(const ::std::string& value) {
  set_has_revisiondate();
  if (revisiondate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revisiondate_ = new ::std::string;
  }
  revisiondate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.RevisionDate)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_revisiondate(const char* value) {
  set_has_revisiondate();
  if (revisiondate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revisiondate_ = new ::std::string;
  }
  revisiondate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.RevisionDate)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_revisiondate(const char* value, size_t size) {
  set_has_revisiondate();
  if (revisiondate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revisiondate_ = new ::std::string;
  }
  revisiondate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.RevisionDate)
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::mutable_revisiondate() {
  set_has_revisiondate();
  if (revisiondate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revisiondate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.RevisionDate)
  return revisiondate_;
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::release_revisiondate() {
  clear_has_revisiondate();
  if (revisiondate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = revisiondate_;
    revisiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_revisiondate(::std::string* revisiondate) {
  if (revisiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete revisiondate_;
  }
  if (revisiondate) {
    set_has_revisiondate();
    revisiondate_ = revisiondate;
  } else {
    clear_has_revisiondate();
    revisiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.RevisionDate)
}

// optional string RevisionNumber = 11;
inline bool AcceptanceCertificate552SellerTitleInfo::has_revisionnumber() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_revisionnumber() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_revisionnumber() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_revisionnumber() {
  if (revisionnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revisionnumber_->clear();
  }
  clear_has_revisionnumber();
}
inline const ::std::string& AcceptanceCertificate552SellerTitleInfo::revisionnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.RevisionNumber)
  return *revisionnumber_;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_revisionnumber(const ::std::string& value) {
  set_has_revisionnumber();
  if (revisionnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revisionnumber_ = new ::std::string;
  }
  revisionnumber_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.RevisionNumber)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_revisionnumber(const char* value) {
  set_has_revisionnumber();
  if (revisionnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revisionnumber_ = new ::std::string;
  }
  revisionnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.RevisionNumber)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_revisionnumber(const char* value, size_t size) {
  set_has_revisionnumber();
  if (revisionnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revisionnumber_ = new ::std::string;
  }
  revisionnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.RevisionNumber)
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::mutable_revisionnumber() {
  set_has_revisionnumber();
  if (revisionnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    revisionnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.RevisionNumber)
  return revisionnumber_;
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::release_revisionnumber() {
  clear_has_revisionnumber();
  if (revisionnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = revisionnumber_;
    revisionnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_revisionnumber(::std::string* revisionnumber) {
  if (revisionnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete revisionnumber_;
  }
  if (revisionnumber) {
    set_has_revisionnumber();
    revisionnumber_ = revisionnumber;
  } else {
    clear_has_revisionnumber();
    revisionnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.RevisionNumber)
}

// required string DocumentCreator = 12;
inline bool AcceptanceCertificate552SellerTitleInfo::has_documentcreator() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_documentcreator() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_documentcreator() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_documentcreator() {
  if (documentcreator_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreator_->clear();
  }
  clear_has_documentcreator();
}
inline const ::std::string& AcceptanceCertificate552SellerTitleInfo::documentcreator() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentCreator)
  return *documentcreator_;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_documentcreator(const ::std::string& value) {
  set_has_documentcreator();
  if (documentcreator_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreator_ = new ::std::string;
  }
  documentcreator_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentCreator)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_documentcreator(const char* value) {
  set_has_documentcreator();
  if (documentcreator_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreator_ = new ::std::string;
  }
  documentcreator_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentCreator)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_documentcreator(const char* value, size_t size) {
  set_has_documentcreator();
  if (documentcreator_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreator_ = new ::std::string;
  }
  documentcreator_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentCreator)
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::mutable_documentcreator() {
  set_has_documentcreator();
  if (documentcreator_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreator_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentCreator)
  return documentcreator_;
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::release_documentcreator() {
  clear_has_documentcreator();
  if (documentcreator_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentcreator_;
    documentcreator_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_documentcreator(::std::string* documentcreator) {
  if (documentcreator_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentcreator_;
  }
  if (documentcreator) {
    set_has_documentcreator();
    documentcreator_ = documentcreator;
  } else {
    clear_has_documentcreator();
    documentcreator_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentCreator)
}

// optional string DocumentCreatorBase = 13;
inline bool AcceptanceCertificate552SellerTitleInfo::has_documentcreatorbase() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_documentcreatorbase() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_documentcreatorbase() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_documentcreatorbase() {
  if (documentcreatorbase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreatorbase_->clear();
  }
  clear_has_documentcreatorbase();
}
inline const ::std::string& AcceptanceCertificate552SellerTitleInfo::documentcreatorbase() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentCreatorBase)
  return *documentcreatorbase_;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_documentcreatorbase(const ::std::string& value) {
  set_has_documentcreatorbase();
  if (documentcreatorbase_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreatorbase_ = new ::std::string;
  }
  documentcreatorbase_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentCreatorBase)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_documentcreatorbase(const char* value) {
  set_has_documentcreatorbase();
  if (documentcreatorbase_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreatorbase_ = new ::std::string;
  }
  documentcreatorbase_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentCreatorBase)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_documentcreatorbase(const char* value, size_t size) {
  set_has_documentcreatorbase();
  if (documentcreatorbase_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreatorbase_ = new ::std::string;
  }
  documentcreatorbase_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentCreatorBase)
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::mutable_documentcreatorbase() {
  set_has_documentcreatorbase();
  if (documentcreatorbase_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreatorbase_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentCreatorBase)
  return documentcreatorbase_;
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::release_documentcreatorbase() {
  clear_has_documentcreatorbase();
  if (documentcreatorbase_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentcreatorbase_;
    documentcreatorbase_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_documentcreatorbase(::std::string* documentcreatorbase) {
  if (documentcreatorbase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentcreatorbase_;
  }
  if (documentcreatorbase) {
    set_has_documentcreatorbase();
    documentcreatorbase_ = documentcreatorbase;
  } else {
    clear_has_documentcreatorbase();
    documentcreatorbase_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentCreatorBase)
}

// optional string OperationType = 14;
inline bool AcceptanceCertificate552SellerTitleInfo::has_operationtype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_operationtype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_operationtype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_operationtype() {
  if (operationtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationtype_->clear();
  }
  clear_has_operationtype();
}
inline const ::std::string& AcceptanceCertificate552SellerTitleInfo::operationtype() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.OperationType)
  return *operationtype_;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_operationtype(const ::std::string& value) {
  set_has_operationtype();
  if (operationtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationtype_ = new ::std::string;
  }
  operationtype_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.OperationType)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_operationtype(const char* value) {
  set_has_operationtype();
  if (operationtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationtype_ = new ::std::string;
  }
  operationtype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.OperationType)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_operationtype(const char* value, size_t size) {
  set_has_operationtype();
  if (operationtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationtype_ = new ::std::string;
  }
  operationtype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.OperationType)
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::mutable_operationtype() {
  set_has_operationtype();
  if (operationtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationtype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.OperationType)
  return operationtype_;
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::release_operationtype() {
  clear_has_operationtype();
  if (operationtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = operationtype_;
    operationtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_operationtype(::std::string* operationtype) {
  if (operationtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operationtype_;
  }
  if (operationtype) {
    set_has_operationtype();
    operationtype_ = operationtype;
  } else {
    clear_has_operationtype();
    operationtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.OperationType)
}

// optional string OperationTitle = 15;
inline bool AcceptanceCertificate552SellerTitleInfo::has_operationtitle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_operationtitle() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_operationtitle() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_operationtitle() {
  if (operationtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationtitle_->clear();
  }
  clear_has_operationtitle();
}
inline const ::std::string& AcceptanceCertificate552SellerTitleInfo::operationtitle() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.OperationTitle)
  return *operationtitle_;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_operationtitle(const ::std::string& value) {
  set_has_operationtitle();
  if (operationtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationtitle_ = new ::std::string;
  }
  operationtitle_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.OperationTitle)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_operationtitle(const char* value) {
  set_has_operationtitle();
  if (operationtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationtitle_ = new ::std::string;
  }
  operationtitle_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.OperationTitle)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_operationtitle(const char* value, size_t size) {
  set_has_operationtitle();
  if (operationtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationtitle_ = new ::std::string;
  }
  operationtitle_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.OperationTitle)
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::mutable_operationtitle() {
  set_has_operationtitle();
  if (operationtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationtitle_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.OperationTitle)
  return operationtitle_;
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::release_operationtitle() {
  clear_has_operationtitle();
  if (operationtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = operationtitle_;
    operationtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_operationtitle(::std::string* operationtitle) {
  if (operationtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operationtitle_;
  }
  if (operationtitle) {
    set_has_operationtitle();
    operationtitle_ = operationtitle;
  } else {
    clear_has_operationtitle();
    operationtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.OperationTitle)
}

// optional string GovernmentContractInfo = 16;
inline bool AcceptanceCertificate552SellerTitleInfo::has_governmentcontractinfo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_governmentcontractinfo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_governmentcontractinfo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_governmentcontractinfo() {
  if (governmentcontractinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    governmentcontractinfo_->clear();
  }
  clear_has_governmentcontractinfo();
}
inline const ::std::string& AcceptanceCertificate552SellerTitleInfo::governmentcontractinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.GovernmentContractInfo)
  return *governmentcontractinfo_;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_governmentcontractinfo(const ::std::string& value) {
  set_has_governmentcontractinfo();
  if (governmentcontractinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    governmentcontractinfo_ = new ::std::string;
  }
  governmentcontractinfo_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.GovernmentContractInfo)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_governmentcontractinfo(const char* value) {
  set_has_governmentcontractinfo();
  if (governmentcontractinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    governmentcontractinfo_ = new ::std::string;
  }
  governmentcontractinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.GovernmentContractInfo)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_governmentcontractinfo(const char* value, size_t size) {
  set_has_governmentcontractinfo();
  if (governmentcontractinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    governmentcontractinfo_ = new ::std::string;
  }
  governmentcontractinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.GovernmentContractInfo)
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::mutable_governmentcontractinfo() {
  set_has_governmentcontractinfo();
  if (governmentcontractinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    governmentcontractinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.GovernmentContractInfo)
  return governmentcontractinfo_;
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::release_governmentcontractinfo() {
  clear_has_governmentcontractinfo();
  if (governmentcontractinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = governmentcontractinfo_;
    governmentcontractinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_governmentcontractinfo(::std::string* governmentcontractinfo) {
  if (governmentcontractinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete governmentcontractinfo_;
  }
  if (governmentcontractinfo) {
    set_has_governmentcontractinfo();
    governmentcontractinfo_ = governmentcontractinfo;
  } else {
    clear_has_governmentcontractinfo();
    governmentcontractinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.GovernmentContractInfo)
}

// optional .Diadoc.Api.Proto.Invoicing.AdditionalInfoId AdditionalInfoId = 17;
inline bool AcceptanceCertificate552SellerTitleInfo::has_additionalinfoid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_additionalinfoid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_additionalinfoid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_additionalinfoid() {
  if (additionalinfoid_ != NULL) additionalinfoid_->::Diadoc::Api::Proto::Invoicing::AdditionalInfoId::Clear();
  clear_has_additionalinfoid();
}
inline const ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId& AcceptanceCertificate552SellerTitleInfo::additionalinfoid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.AdditionalInfoId)
  return additionalinfoid_ != NULL ? *additionalinfoid_ : *default_instance_->additionalinfoid_;
}
inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* AcceptanceCertificate552SellerTitleInfo::mutable_additionalinfoid() {
  set_has_additionalinfoid();
  if (additionalinfoid_ == NULL) additionalinfoid_ = new ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.AdditionalInfoId)
  return additionalinfoid_;
}
inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* AcceptanceCertificate552SellerTitleInfo::release_additionalinfoid() {
  clear_has_additionalinfoid();
  ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* temp = additionalinfoid_;
  additionalinfoid_ = NULL;
  return temp;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_additionalinfoid(::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* additionalinfoid) {
  delete additionalinfoid_;
  additionalinfoid_ = additionalinfoid;
  if (additionalinfoid) {
    set_has_additionalinfoid();
  } else {
    clear_has_additionalinfoid();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.AdditionalInfoId)
}

// required string DocumentName = 18;
inline bool AcceptanceCertificate552SellerTitleInfo::has_documentname() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_documentname() {
  _has_bits_[0] |= 0x00020000u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_documentname() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_documentname() {
  if (documentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentname_->clear();
  }
  clear_has_documentname();
}
inline const ::std::string& AcceptanceCertificate552SellerTitleInfo::documentname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentName)
  return *documentname_;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_documentname(const ::std::string& value) {
  set_has_documentname();
  if (documentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentname_ = new ::std::string;
  }
  documentname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentName)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_documentname(const char* value) {
  set_has_documentname();
  if (documentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentname_ = new ::std::string;
  }
  documentname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentName)
}
inline void AcceptanceCertificate552SellerTitleInfo::set_documentname(const char* value, size_t size) {
  set_has_documentname();
  if (documentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentname_ = new ::std::string;
  }
  documentname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentName)
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::mutable_documentname() {
  set_has_documentname();
  if (documentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentName)
  return documentname_;
}
inline ::std::string* AcceptanceCertificate552SellerTitleInfo::release_documentname() {
  clear_has_documentname();
  if (documentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentname_;
    documentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_documentname(::std::string* documentname) {
  if (documentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentname_;
  }
  if (documentname) {
    set_has_documentname();
    documentname_ = documentname;
  } else {
    clear_has_documentname();
    documentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.DocumentName)
}

// required .Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo TransferInfo = 19;
inline bool AcceptanceCertificate552SellerTitleInfo::has_transferinfo() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_has_transferinfo() {
  _has_bits_[0] |= 0x00040000u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_has_transferinfo() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void AcceptanceCertificate552SellerTitleInfo::clear_transferinfo() {
  if (transferinfo_ != NULL) transferinfo_->::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552TransferInfo::Clear();
  clear_has_transferinfo();
}
inline const ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552TransferInfo& AcceptanceCertificate552SellerTitleInfo::transferinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.TransferInfo)
  return transferinfo_ != NULL ? *transferinfo_ : *default_instance_->transferinfo_;
}
inline ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552TransferInfo* AcceptanceCertificate552SellerTitleInfo::mutable_transferinfo() {
  set_has_transferinfo();
  if (transferinfo_ == NULL) transferinfo_ = new ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552TransferInfo;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.TransferInfo)
  return transferinfo_;
}
inline ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552TransferInfo* AcceptanceCertificate552SellerTitleInfo::release_transferinfo() {
  clear_has_transferinfo();
  ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552TransferInfo* temp = transferinfo_;
  transferinfo_ = NULL;
  return temp;
}
inline void AcceptanceCertificate552SellerTitleInfo::set_allocated_transferinfo(::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552TransferInfo* transferinfo) {
  delete transferinfo_;
  transferinfo_ = transferinfo;
  if (transferinfo) {
    set_has_transferinfo();
  } else {
    clear_has_transferinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552SellerTitleInfo.TransferInfo)
}

// -------------------------------------------------------------------

// AcceptanceCertificate552TransferInfo

// required string OperationInfo = 1;
inline bool AcceptanceCertificate552TransferInfo::has_operationinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcceptanceCertificate552TransferInfo::set_has_operationinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcceptanceCertificate552TransferInfo::clear_has_operationinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcceptanceCertificate552TransferInfo::clear_operationinfo() {
  if (operationinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationinfo_->clear();
  }
  clear_has_operationinfo();
}
inline const ::std::string& AcceptanceCertificate552TransferInfo::operationinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.OperationInfo)
  return *operationinfo_;
}
inline void AcceptanceCertificate552TransferInfo::set_operationinfo(const ::std::string& value) {
  set_has_operationinfo();
  if (operationinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationinfo_ = new ::std::string;
  }
  operationinfo_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.OperationInfo)
}
inline void AcceptanceCertificate552TransferInfo::set_operationinfo(const char* value) {
  set_has_operationinfo();
  if (operationinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationinfo_ = new ::std::string;
  }
  operationinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.OperationInfo)
}
inline void AcceptanceCertificate552TransferInfo::set_operationinfo(const char* value, size_t size) {
  set_has_operationinfo();
  if (operationinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationinfo_ = new ::std::string;
  }
  operationinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.OperationInfo)
}
inline ::std::string* AcceptanceCertificate552TransferInfo::mutable_operationinfo() {
  set_has_operationinfo();
  if (operationinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.OperationInfo)
  return operationinfo_;
}
inline ::std::string* AcceptanceCertificate552TransferInfo::release_operationinfo() {
  clear_has_operationinfo();
  if (operationinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = operationinfo_;
    operationinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552TransferInfo::set_allocated_operationinfo(::std::string* operationinfo) {
  if (operationinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operationinfo_;
  }
  if (operationinfo) {
    set_has_operationinfo();
    operationinfo_ = operationinfo;
  } else {
    clear_has_operationinfo();
    operationinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.OperationInfo)
}

// optional string TransferDate = 2;
inline bool AcceptanceCertificate552TransferInfo::has_transferdate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AcceptanceCertificate552TransferInfo::set_has_transferdate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AcceptanceCertificate552TransferInfo::clear_has_transferdate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AcceptanceCertificate552TransferInfo::clear_transferdate() {
  if (transferdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transferdate_->clear();
  }
  clear_has_transferdate();
}
inline const ::std::string& AcceptanceCertificate552TransferInfo::transferdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.TransferDate)
  return *transferdate_;
}
inline void AcceptanceCertificate552TransferInfo::set_transferdate(const ::std::string& value) {
  set_has_transferdate();
  if (transferdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transferdate_ = new ::std::string;
  }
  transferdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.TransferDate)
}
inline void AcceptanceCertificate552TransferInfo::set_transferdate(const char* value) {
  set_has_transferdate();
  if (transferdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transferdate_ = new ::std::string;
  }
  transferdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.TransferDate)
}
inline void AcceptanceCertificate552TransferInfo::set_transferdate(const char* value, size_t size) {
  set_has_transferdate();
  if (transferdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transferdate_ = new ::std::string;
  }
  transferdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.TransferDate)
}
inline ::std::string* AcceptanceCertificate552TransferInfo::mutable_transferdate() {
  set_has_transferdate();
  if (transferdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    transferdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.TransferDate)
  return transferdate_;
}
inline ::std::string* AcceptanceCertificate552TransferInfo::release_transferdate() {
  clear_has_transferdate();
  if (transferdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = transferdate_;
    transferdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552TransferInfo::set_allocated_transferdate(::std::string* transferdate) {
  if (transferdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transferdate_;
  }
  if (transferdate) {
    set_has_transferdate();
    transferdate_ = transferdate;
  } else {
    clear_has_transferdate();
    transferdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.TransferDate)
}

// optional string CreatedThingTransferDate = 3;
inline bool AcceptanceCertificate552TransferInfo::has_createdthingtransferdate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AcceptanceCertificate552TransferInfo::set_has_createdthingtransferdate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AcceptanceCertificate552TransferInfo::clear_has_createdthingtransferdate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AcceptanceCertificate552TransferInfo::clear_createdthingtransferdate() {
  if (createdthingtransferdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthingtransferdate_->clear();
  }
  clear_has_createdthingtransferdate();
}
inline const ::std::string& AcceptanceCertificate552TransferInfo::createdthingtransferdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.CreatedThingTransferDate)
  return *createdthingtransferdate_;
}
inline void AcceptanceCertificate552TransferInfo::set_createdthingtransferdate(const ::std::string& value) {
  set_has_createdthingtransferdate();
  if (createdthingtransferdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthingtransferdate_ = new ::std::string;
  }
  createdthingtransferdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.CreatedThingTransferDate)
}
inline void AcceptanceCertificate552TransferInfo::set_createdthingtransferdate(const char* value) {
  set_has_createdthingtransferdate();
  if (createdthingtransferdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthingtransferdate_ = new ::std::string;
  }
  createdthingtransferdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.CreatedThingTransferDate)
}
inline void AcceptanceCertificate552TransferInfo::set_createdthingtransferdate(const char* value, size_t size) {
  set_has_createdthingtransferdate();
  if (createdthingtransferdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthingtransferdate_ = new ::std::string;
  }
  createdthingtransferdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.CreatedThingTransferDate)
}
inline ::std::string* AcceptanceCertificate552TransferInfo::mutable_createdthingtransferdate() {
  set_has_createdthingtransferdate();
  if (createdthingtransferdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthingtransferdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.CreatedThingTransferDate)
  return createdthingtransferdate_;
}
inline ::std::string* AcceptanceCertificate552TransferInfo::release_createdthingtransferdate() {
  clear_has_createdthingtransferdate();
  if (createdthingtransferdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = createdthingtransferdate_;
    createdthingtransferdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552TransferInfo::set_allocated_createdthingtransferdate(::std::string* createdthingtransferdate) {
  if (createdthingtransferdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createdthingtransferdate_;
  }
  if (createdthingtransferdate) {
    set_has_createdthingtransferdate();
    createdthingtransferdate_ = createdthingtransferdate;
  } else {
    clear_has_createdthingtransferdate();
    createdthingtransferdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.CreatedThingTransferDate)
}

// optional string CreatedThingInfo = 4;
inline bool AcceptanceCertificate552TransferInfo::has_createdthinginfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AcceptanceCertificate552TransferInfo::set_has_createdthinginfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AcceptanceCertificate552TransferInfo::clear_has_createdthinginfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AcceptanceCertificate552TransferInfo::clear_createdthinginfo() {
  if (createdthinginfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthinginfo_->clear();
  }
  clear_has_createdthinginfo();
}
inline const ::std::string& AcceptanceCertificate552TransferInfo::createdthinginfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.CreatedThingInfo)
  return *createdthinginfo_;
}
inline void AcceptanceCertificate552TransferInfo::set_createdthinginfo(const ::std::string& value) {
  set_has_createdthinginfo();
  if (createdthinginfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthinginfo_ = new ::std::string;
  }
  createdthinginfo_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.CreatedThingInfo)
}
inline void AcceptanceCertificate552TransferInfo::set_createdthinginfo(const char* value) {
  set_has_createdthinginfo();
  if (createdthinginfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthinginfo_ = new ::std::string;
  }
  createdthinginfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.CreatedThingInfo)
}
inline void AcceptanceCertificate552TransferInfo::set_createdthinginfo(const char* value, size_t size) {
  set_has_createdthinginfo();
  if (createdthinginfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthinginfo_ = new ::std::string;
  }
  createdthinginfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.CreatedThingInfo)
}
inline ::std::string* AcceptanceCertificate552TransferInfo::mutable_createdthinginfo() {
  set_has_createdthinginfo();
  if (createdthinginfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthinginfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.CreatedThingInfo)
  return createdthinginfo_;
}
inline ::std::string* AcceptanceCertificate552TransferInfo::release_createdthinginfo() {
  clear_has_createdthinginfo();
  if (createdthinginfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = createdthinginfo_;
    createdthinginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552TransferInfo::set_allocated_createdthinginfo(::std::string* createdthinginfo) {
  if (createdthinginfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createdthinginfo_;
  }
  if (createdthinginfo) {
    set_has_createdthinginfo();
    createdthinginfo_ = createdthinginfo;
  } else {
    clear_has_createdthinginfo();
    createdthinginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.CreatedThingInfo)
}

// repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 5;
inline int AcceptanceCertificate552TransferInfo::additionalinfos_size() const {
  return additionalinfos_.size();
}
inline void AcceptanceCertificate552TransferInfo::clear_additionalinfos() {
  additionalinfos_.Clear();
}
inline const ::Diadoc::Api::Proto::Invoicing::AdditionalInfo& AcceptanceCertificate552TransferInfo::additionalinfos(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.AdditionalInfos)
  return additionalinfos_.Get(index);
}
inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfo* AcceptanceCertificate552TransferInfo::mutable_additionalinfos(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.AdditionalInfos)
  return additionalinfos_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfo* AcceptanceCertificate552TransferInfo::add_additionalinfos() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.AdditionalInfos)
  return additionalinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AdditionalInfo >&
AcceptanceCertificate552TransferInfo::additionalinfos() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.AdditionalInfos)
  return additionalinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AdditionalInfo >*
AcceptanceCertificate552TransferInfo::mutable_additionalinfos() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552TransferInfo.AdditionalInfos)
  return &additionalinfos_;
}

// -------------------------------------------------------------------

// AcceptanceCertificate552WorkDescription

// optional string StartingDate = 1;
inline bool AcceptanceCertificate552WorkDescription::has_startingdate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcceptanceCertificate552WorkDescription::set_has_startingdate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcceptanceCertificate552WorkDescription::clear_has_startingdate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcceptanceCertificate552WorkDescription::clear_startingdate() {
  if (startingdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    startingdate_->clear();
  }
  clear_has_startingdate();
}
inline const ::std::string& AcceptanceCertificate552WorkDescription::startingdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.StartingDate)
  return *startingdate_;
}
inline void AcceptanceCertificate552WorkDescription::set_startingdate(const ::std::string& value) {
  set_has_startingdate();
  if (startingdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    startingdate_ = new ::std::string;
  }
  startingdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.StartingDate)
}
inline void AcceptanceCertificate552WorkDescription::set_startingdate(const char* value) {
  set_has_startingdate();
  if (startingdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    startingdate_ = new ::std::string;
  }
  startingdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.StartingDate)
}
inline void AcceptanceCertificate552WorkDescription::set_startingdate(const char* value, size_t size) {
  set_has_startingdate();
  if (startingdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    startingdate_ = new ::std::string;
  }
  startingdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.StartingDate)
}
inline ::std::string* AcceptanceCertificate552WorkDescription::mutable_startingdate() {
  set_has_startingdate();
  if (startingdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    startingdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.StartingDate)
  return startingdate_;
}
inline ::std::string* AcceptanceCertificate552WorkDescription::release_startingdate() {
  clear_has_startingdate();
  if (startingdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = startingdate_;
    startingdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkDescription::set_allocated_startingdate(::std::string* startingdate) {
  if (startingdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete startingdate_;
  }
  if (startingdate) {
    set_has_startingdate();
    startingdate_ = startingdate;
  } else {
    clear_has_startingdate();
    startingdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.StartingDate)
}

// optional string CompletionDate = 2;
inline bool AcceptanceCertificate552WorkDescription::has_completiondate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AcceptanceCertificate552WorkDescription::set_has_completiondate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AcceptanceCertificate552WorkDescription::clear_has_completiondate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AcceptanceCertificate552WorkDescription::clear_completiondate() {
  if (completiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    completiondate_->clear();
  }
  clear_has_completiondate();
}
inline const ::std::string& AcceptanceCertificate552WorkDescription::completiondate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.CompletionDate)
  return *completiondate_;
}
inline void AcceptanceCertificate552WorkDescription::set_completiondate(const ::std::string& value) {
  set_has_completiondate();
  if (completiondate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    completiondate_ = new ::std::string;
  }
  completiondate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.CompletionDate)
}
inline void AcceptanceCertificate552WorkDescription::set_completiondate(const char* value) {
  set_has_completiondate();
  if (completiondate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    completiondate_ = new ::std::string;
  }
  completiondate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.CompletionDate)
}
inline void AcceptanceCertificate552WorkDescription::set_completiondate(const char* value, size_t size) {
  set_has_completiondate();
  if (completiondate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    completiondate_ = new ::std::string;
  }
  completiondate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.CompletionDate)
}
inline ::std::string* AcceptanceCertificate552WorkDescription::mutable_completiondate() {
  set_has_completiondate();
  if (completiondate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    completiondate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.CompletionDate)
  return completiondate_;
}
inline ::std::string* AcceptanceCertificate552WorkDescription::release_completiondate() {
  clear_has_completiondate();
  if (completiondate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = completiondate_;
    completiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkDescription::set_allocated_completiondate(::std::string* completiondate) {
  if (completiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete completiondate_;
  }
  if (completiondate) {
    set_has_completiondate();
    completiondate_ = completiondate;
  } else {
    clear_has_completiondate();
    completiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.CompletionDate)
}

// optional string TotalWithVatExcluded = 3;
inline bool AcceptanceCertificate552WorkDescription::has_totalwithvatexcluded() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AcceptanceCertificate552WorkDescription::set_has_totalwithvatexcluded() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AcceptanceCertificate552WorkDescription::clear_has_totalwithvatexcluded() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AcceptanceCertificate552WorkDescription::clear_totalwithvatexcluded() {
  if (totalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    totalwithvatexcluded_->clear();
  }
  clear_has_totalwithvatexcluded();
}
inline const ::std::string& AcceptanceCertificate552WorkDescription::totalwithvatexcluded() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.TotalWithVatExcluded)
  return *totalwithvatexcluded_;
}
inline void AcceptanceCertificate552WorkDescription::set_totalwithvatexcluded(const ::std::string& value) {
  set_has_totalwithvatexcluded();
  if (totalwithvatexcluded_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    totalwithvatexcluded_ = new ::std::string;
  }
  totalwithvatexcluded_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.TotalWithVatExcluded)
}
inline void AcceptanceCertificate552WorkDescription::set_totalwithvatexcluded(const char* value) {
  set_has_totalwithvatexcluded();
  if (totalwithvatexcluded_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    totalwithvatexcluded_ = new ::std::string;
  }
  totalwithvatexcluded_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.TotalWithVatExcluded)
}
inline void AcceptanceCertificate552WorkDescription::set_totalwithvatexcluded(const char* value, size_t size) {
  set_has_totalwithvatexcluded();
  if (totalwithvatexcluded_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    totalwithvatexcluded_ = new ::std::string;
  }
  totalwithvatexcluded_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.TotalWithVatExcluded)
}
inline ::std::string* AcceptanceCertificate552WorkDescription::mutable_totalwithvatexcluded() {
  set_has_totalwithvatexcluded();
  if (totalwithvatexcluded_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    totalwithvatexcluded_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.TotalWithVatExcluded)
  return totalwithvatexcluded_;
}
inline ::std::string* AcceptanceCertificate552WorkDescription::release_totalwithvatexcluded() {
  clear_has_totalwithvatexcluded();
  if (totalwithvatexcluded_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = totalwithvatexcluded_;
    totalwithvatexcluded_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkDescription::set_allocated_totalwithvatexcluded(::std::string* totalwithvatexcluded) {
  if (totalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete totalwithvatexcluded_;
  }
  if (totalwithvatexcluded) {
    set_has_totalwithvatexcluded();
    totalwithvatexcluded_ = totalwithvatexcluded;
  } else {
    clear_has_totalwithvatexcluded();
    totalwithvatexcluded_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.TotalWithVatExcluded)
}

// optional string TotalVat = 4;
inline bool AcceptanceCertificate552WorkDescription::has_totalvat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AcceptanceCertificate552WorkDescription::set_has_totalvat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AcceptanceCertificate552WorkDescription::clear_has_totalvat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AcceptanceCertificate552WorkDescription::clear_totalvat() {
  if (totalvat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    totalvat_->clear();
  }
  clear_has_totalvat();
}
inline const ::std::string& AcceptanceCertificate552WorkDescription::totalvat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.TotalVat)
  return *totalvat_;
}
inline void AcceptanceCertificate552WorkDescription::set_totalvat(const ::std::string& value) {
  set_has_totalvat();
  if (totalvat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    totalvat_ = new ::std::string;
  }
  totalvat_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.TotalVat)
}
inline void AcceptanceCertificate552WorkDescription::set_totalvat(const char* value) {
  set_has_totalvat();
  if (totalvat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    totalvat_ = new ::std::string;
  }
  totalvat_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.TotalVat)
}
inline void AcceptanceCertificate552WorkDescription::set_totalvat(const char* value, size_t size) {
  set_has_totalvat();
  if (totalvat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    totalvat_ = new ::std::string;
  }
  totalvat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.TotalVat)
}
inline ::std::string* AcceptanceCertificate552WorkDescription::mutable_totalvat() {
  set_has_totalvat();
  if (totalvat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    totalvat_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.TotalVat)
  return totalvat_;
}
inline ::std::string* AcceptanceCertificate552WorkDescription::release_totalvat() {
  clear_has_totalvat();
  if (totalvat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = totalvat_;
    totalvat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkDescription::set_allocated_totalvat(::std::string* totalvat) {
  if (totalvat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete totalvat_;
  }
  if (totalvat) {
    set_has_totalvat();
    totalvat_ = totalvat;
  } else {
    clear_has_totalvat();
    totalvat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.TotalVat)
}

// required string Total = 5;
inline bool AcceptanceCertificate552WorkDescription::has_total() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AcceptanceCertificate552WorkDescription::set_has_total() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AcceptanceCertificate552WorkDescription::clear_has_total() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AcceptanceCertificate552WorkDescription::clear_total() {
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_->clear();
  }
  clear_has_total();
}
inline const ::std::string& AcceptanceCertificate552WorkDescription::total() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.Total)
  return *total_;
}
inline void AcceptanceCertificate552WorkDescription::set_total(const ::std::string& value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  total_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.Total)
}
inline void AcceptanceCertificate552WorkDescription::set_total(const char* value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  total_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.Total)
}
inline void AcceptanceCertificate552WorkDescription::set_total(const char* value, size_t size) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  total_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.Total)
}
inline ::std::string* AcceptanceCertificate552WorkDescription::mutable_total() {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.Total)
  return total_;
}
inline ::std::string* AcceptanceCertificate552WorkDescription::release_total() {
  clear_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = total_;
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkDescription::set_allocated_total(::std::string* total) {
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (total) {
    set_has_total();
    total_ = total;
  } else {
    clear_has_total();
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.Total)
}

// repeated .Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem Items = 6;
inline int AcceptanceCertificate552WorkDescription::items_size() const {
  return items_.size();
}
inline void AcceptanceCertificate552WorkDescription::clear_items() {
  items_.Clear();
}
inline const ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkItem& AcceptanceCertificate552WorkDescription::items(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.Items)
  return items_.Get(index);
}
inline ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkItem* AcceptanceCertificate552WorkDescription::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.Items)
  return items_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkItem* AcceptanceCertificate552WorkDescription::add_items() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.Items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkItem >&
AcceptanceCertificate552WorkDescription::items() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.Items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AcceptanceCertificate552WorkItem >*
AcceptanceCertificate552WorkDescription::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkDescription.Items)
  return &items_;
}

// -------------------------------------------------------------------

// AcceptanceCertificate552WorkItem

// optional string Name = 1;
inline bool AcceptanceCertificate552WorkItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcceptanceCertificate552WorkItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcceptanceCertificate552WorkItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcceptanceCertificate552WorkItem::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AcceptanceCertificate552WorkItem::name() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Name)
  return *name_;
}
inline void AcceptanceCertificate552WorkItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Name)
}
inline void AcceptanceCertificate552WorkItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Name)
}
inline void AcceptanceCertificate552WorkItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Name)
}
inline ::std::string* AcceptanceCertificate552WorkItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Name)
  return name_;
}
inline ::std::string* AcceptanceCertificate552WorkItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Name)
}

// optional string Description = 2;
inline bool AcceptanceCertificate552WorkItem::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AcceptanceCertificate552WorkItem::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AcceptanceCertificate552WorkItem::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AcceptanceCertificate552WorkItem::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& AcceptanceCertificate552WorkItem::description() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Description)
  return *description_;
}
inline void AcceptanceCertificate552WorkItem::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Description)
}
inline void AcceptanceCertificate552WorkItem::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Description)
}
inline void AcceptanceCertificate552WorkItem::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Description)
}
inline ::std::string* AcceptanceCertificate552WorkItem::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Description)
  return description_;
}
inline ::std::string* AcceptanceCertificate552WorkItem::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkItem::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Description)
}

// optional string UnitCode = 3;
inline bool AcceptanceCertificate552WorkItem::has_unitcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AcceptanceCertificate552WorkItem::set_has_unitcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AcceptanceCertificate552WorkItem::clear_has_unitcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AcceptanceCertificate552WorkItem::clear_unitcode() {
  if (unitcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unitcode_->clear();
  }
  clear_has_unitcode();
}
inline const ::std::string& AcceptanceCertificate552WorkItem::unitcode() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.UnitCode)
  return *unitcode_;
}
inline void AcceptanceCertificate552WorkItem::set_unitcode(const ::std::string& value) {
  set_has_unitcode();
  if (unitcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unitcode_ = new ::std::string;
  }
  unitcode_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.UnitCode)
}
inline void AcceptanceCertificate552WorkItem::set_unitcode(const char* value) {
  set_has_unitcode();
  if (unitcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unitcode_ = new ::std::string;
  }
  unitcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.UnitCode)
}
inline void AcceptanceCertificate552WorkItem::set_unitcode(const char* value, size_t size) {
  set_has_unitcode();
  if (unitcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unitcode_ = new ::std::string;
  }
  unitcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.UnitCode)
}
inline ::std::string* AcceptanceCertificate552WorkItem::mutable_unitcode() {
  set_has_unitcode();
  if (unitcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unitcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.UnitCode)
  return unitcode_;
}
inline ::std::string* AcceptanceCertificate552WorkItem::release_unitcode() {
  clear_has_unitcode();
  if (unitcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = unitcode_;
    unitcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkItem::set_allocated_unitcode(::std::string* unitcode) {
  if (unitcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unitcode_;
  }
  if (unitcode) {
    set_has_unitcode();
    unitcode_ = unitcode;
  } else {
    clear_has_unitcode();
    unitcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.UnitCode)
}

// optional string UnitName = 4;
inline bool AcceptanceCertificate552WorkItem::has_unitname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AcceptanceCertificate552WorkItem::set_has_unitname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AcceptanceCertificate552WorkItem::clear_has_unitname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AcceptanceCertificate552WorkItem::clear_unitname() {
  if (unitname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unitname_->clear();
  }
  clear_has_unitname();
}
inline const ::std::string& AcceptanceCertificate552WorkItem::unitname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.UnitName)
  return *unitname_;
}
inline void AcceptanceCertificate552WorkItem::set_unitname(const ::std::string& value) {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.UnitName)
}
inline void AcceptanceCertificate552WorkItem::set_unitname(const char* value) {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.UnitName)
}
inline void AcceptanceCertificate552WorkItem::set_unitname(const char* value, size_t size) {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.UnitName)
}
inline ::std::string* AcceptanceCertificate552WorkItem::mutable_unitname() {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unitname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.UnitName)
  return unitname_;
}
inline ::std::string* AcceptanceCertificate552WorkItem::release_unitname() {
  clear_has_unitname();
  if (unitname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = unitname_;
    unitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkItem::set_allocated_unitname(::std::string* unitname) {
  if (unitname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unitname_;
  }
  if (unitname) {
    set_has_unitname();
    unitname_ = unitname;
  } else {
    clear_has_unitname();
    unitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.UnitName)
}

// optional string Price = 5;
inline bool AcceptanceCertificate552WorkItem::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AcceptanceCertificate552WorkItem::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AcceptanceCertificate552WorkItem::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AcceptanceCertificate552WorkItem::clear_price() {
  if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_->clear();
  }
  clear_has_price();
}
inline const ::std::string& AcceptanceCertificate552WorkItem::price() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Price)
  return *price_;
}
inline void AcceptanceCertificate552WorkItem::set_price(const ::std::string& value) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  price_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Price)
}
inline void AcceptanceCertificate552WorkItem::set_price(const char* value) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  price_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Price)
}
inline void AcceptanceCertificate552WorkItem::set_price(const char* value, size_t size) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  price_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Price)
}
inline ::std::string* AcceptanceCertificate552WorkItem::mutable_price() {
  set_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    price_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Price)
  return price_;
}
inline ::std::string* AcceptanceCertificate552WorkItem::release_price() {
  clear_has_price();
  if (price_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = price_;
    price_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkItem::set_allocated_price(::std::string* price) {
  if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete price_;
  }
  if (price) {
    set_has_price();
    price_ = price;
  } else {
    clear_has_price();
    price_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Price)
}

// optional string Quantity = 6;
inline bool AcceptanceCertificate552WorkItem::has_quantity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AcceptanceCertificate552WorkItem::set_has_quantity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AcceptanceCertificate552WorkItem::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AcceptanceCertificate552WorkItem::clear_quantity() {
  if (quantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quantity_->clear();
  }
  clear_has_quantity();
}
inline const ::std::string& AcceptanceCertificate552WorkItem::quantity() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Quantity)
  return *quantity_;
}
inline void AcceptanceCertificate552WorkItem::set_quantity(const ::std::string& value) {
  set_has_quantity();
  if (quantity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quantity_ = new ::std::string;
  }
  quantity_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Quantity)
}
inline void AcceptanceCertificate552WorkItem::set_quantity(const char* value) {
  set_has_quantity();
  if (quantity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quantity_ = new ::std::string;
  }
  quantity_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Quantity)
}
inline void AcceptanceCertificate552WorkItem::set_quantity(const char* value, size_t size) {
  set_has_quantity();
  if (quantity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quantity_ = new ::std::string;
  }
  quantity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Quantity)
}
inline ::std::string* AcceptanceCertificate552WorkItem::mutable_quantity() {
  set_has_quantity();
  if (quantity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quantity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Quantity)
  return quantity_;
}
inline ::std::string* AcceptanceCertificate552WorkItem::release_quantity() {
  clear_has_quantity();
  if (quantity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = quantity_;
    quantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkItem::set_allocated_quantity(::std::string* quantity) {
  if (quantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quantity_;
  }
  if (quantity) {
    set_has_quantity();
    quantity_ = quantity;
  } else {
    clear_has_quantity();
    quantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Quantity)
}

// optional string SubtotalWithVatExcluded = 7;
inline bool AcceptanceCertificate552WorkItem::has_subtotalwithvatexcluded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AcceptanceCertificate552WorkItem::set_has_subtotalwithvatexcluded() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AcceptanceCertificate552WorkItem::clear_has_subtotalwithvatexcluded() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AcceptanceCertificate552WorkItem::clear_subtotalwithvatexcluded() {
  if (subtotalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtotalwithvatexcluded_->clear();
  }
  clear_has_subtotalwithvatexcluded();
}
inline const ::std::string& AcceptanceCertificate552WorkItem::subtotalwithvatexcluded() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.SubtotalWithVatExcluded)
  return *subtotalwithvatexcluded_;
}
inline void AcceptanceCertificate552WorkItem::set_subtotalwithvatexcluded(const ::std::string& value) {
  set_has_subtotalwithvatexcluded();
  if (subtotalwithvatexcluded_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtotalwithvatexcluded_ = new ::std::string;
  }
  subtotalwithvatexcluded_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.SubtotalWithVatExcluded)
}
inline void AcceptanceCertificate552WorkItem::set_subtotalwithvatexcluded(const char* value) {
  set_has_subtotalwithvatexcluded();
  if (subtotalwithvatexcluded_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtotalwithvatexcluded_ = new ::std::string;
  }
  subtotalwithvatexcluded_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.SubtotalWithVatExcluded)
}
inline void AcceptanceCertificate552WorkItem::set_subtotalwithvatexcluded(const char* value, size_t size) {
  set_has_subtotalwithvatexcluded();
  if (subtotalwithvatexcluded_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtotalwithvatexcluded_ = new ::std::string;
  }
  subtotalwithvatexcluded_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.SubtotalWithVatExcluded)
}
inline ::std::string* AcceptanceCertificate552WorkItem::mutable_subtotalwithvatexcluded() {
  set_has_subtotalwithvatexcluded();
  if (subtotalwithvatexcluded_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtotalwithvatexcluded_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.SubtotalWithVatExcluded)
  return subtotalwithvatexcluded_;
}
inline ::std::string* AcceptanceCertificate552WorkItem::release_subtotalwithvatexcluded() {
  clear_has_subtotalwithvatexcluded();
  if (subtotalwithvatexcluded_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subtotalwithvatexcluded_;
    subtotalwithvatexcluded_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkItem::set_allocated_subtotalwithvatexcluded(::std::string* subtotalwithvatexcluded) {
  if (subtotalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtotalwithvatexcluded_;
  }
  if (subtotalwithvatexcluded) {
    set_has_subtotalwithvatexcluded();
    subtotalwithvatexcluded_ = subtotalwithvatexcluded;
  } else {
    clear_has_subtotalwithvatexcluded();
    subtotalwithvatexcluded_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.SubtotalWithVatExcluded)
}

// optional string Vat = 8;
inline bool AcceptanceCertificate552WorkItem::has_vat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AcceptanceCertificate552WorkItem::set_has_vat() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AcceptanceCertificate552WorkItem::clear_has_vat() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AcceptanceCertificate552WorkItem::clear_vat() {
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vat_->clear();
  }
  clear_has_vat();
}
inline const ::std::string& AcceptanceCertificate552WorkItem::vat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Vat)
  return *vat_;
}
inline void AcceptanceCertificate552WorkItem::set_vat(const ::std::string& value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Vat)
}
inline void AcceptanceCertificate552WorkItem::set_vat(const char* value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Vat)
}
inline void AcceptanceCertificate552WorkItem::set_vat(const char* value, size_t size) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vat_ = new ::std::string;
  }
  vat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Vat)
}
inline ::std::string* AcceptanceCertificate552WorkItem::mutable_vat() {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vat_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Vat)
  return vat_;
}
inline ::std::string* AcceptanceCertificate552WorkItem::release_vat() {
  clear_has_vat();
  if (vat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vat_;
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkItem::set_allocated_vat(::std::string* vat) {
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (vat) {
    set_has_vat();
    vat_ = vat;
  } else {
    clear_has_vat();
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Vat)
}

// optional string Subtotal = 9;
inline bool AcceptanceCertificate552WorkItem::has_subtotal() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AcceptanceCertificate552WorkItem::set_has_subtotal() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AcceptanceCertificate552WorkItem::clear_has_subtotal() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AcceptanceCertificate552WorkItem::clear_subtotal() {
  if (subtotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtotal_->clear();
  }
  clear_has_subtotal();
}
inline const ::std::string& AcceptanceCertificate552WorkItem::subtotal() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Subtotal)
  return *subtotal_;
}
inline void AcceptanceCertificate552WorkItem::set_subtotal(const ::std::string& value) {
  set_has_subtotal();
  if (subtotal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtotal_ = new ::std::string;
  }
  subtotal_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Subtotal)
}
inline void AcceptanceCertificate552WorkItem::set_subtotal(const char* value) {
  set_has_subtotal();
  if (subtotal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtotal_ = new ::std::string;
  }
  subtotal_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Subtotal)
}
inline void AcceptanceCertificate552WorkItem::set_subtotal(const char* value, size_t size) {
  set_has_subtotal();
  if (subtotal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtotal_ = new ::std::string;
  }
  subtotal_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Subtotal)
}
inline ::std::string* AcceptanceCertificate552WorkItem::mutable_subtotal() {
  set_has_subtotal();
  if (subtotal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtotal_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Subtotal)
  return subtotal_;
}
inline ::std::string* AcceptanceCertificate552WorkItem::release_subtotal() {
  clear_has_subtotal();
  if (subtotal_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subtotal_;
    subtotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkItem::set_allocated_subtotal(::std::string* subtotal) {
  if (subtotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtotal_;
  }
  if (subtotal) {
    set_has_subtotal();
    subtotal_ = subtotal;
  } else {
    clear_has_subtotal();
    subtotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.Subtotal)
}

// repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 10;
inline int AcceptanceCertificate552WorkItem::additionalinfos_size() const {
  return additionalinfos_.size();
}
inline void AcceptanceCertificate552WorkItem::clear_additionalinfos() {
  additionalinfos_.Clear();
}
inline const ::Diadoc::Api::Proto::Invoicing::AdditionalInfo& AcceptanceCertificate552WorkItem::additionalinfos(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.AdditionalInfos)
  return additionalinfos_.Get(index);
}
inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfo* AcceptanceCertificate552WorkItem::mutable_additionalinfos(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.AdditionalInfos)
  return additionalinfos_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfo* AcceptanceCertificate552WorkItem::add_additionalinfos() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.AdditionalInfos)
  return additionalinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AdditionalInfo >&
AcceptanceCertificate552WorkItem::additionalinfos() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.AdditionalInfos)
  return additionalinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::AdditionalInfo >*
AcceptanceCertificate552WorkItem::mutable_additionalinfos() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.AdditionalInfos)
  return &additionalinfos_;
}

// optional .Diadoc.Api.Proto.Invoicing.TaxRate TaxRate = 11 [default = Percent_18];
inline bool AcceptanceCertificate552WorkItem::has_taxrate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AcceptanceCertificate552WorkItem::set_has_taxrate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AcceptanceCertificate552WorkItem::clear_has_taxrate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AcceptanceCertificate552WorkItem::clear_taxrate() {
  taxrate_ = 3;
  clear_has_taxrate();
}
inline ::Diadoc::Api::Proto::Invoicing::TaxRate AcceptanceCertificate552WorkItem::taxrate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.TaxRate)
  return static_cast< ::Diadoc::Api::Proto::Invoicing::TaxRate >(taxrate_);
}
inline void AcceptanceCertificate552WorkItem::set_taxrate(::Diadoc::Api::Proto::Invoicing::TaxRate value) {
  assert(::Diadoc::Api::Proto::Invoicing::TaxRate_IsValid(value));
  set_has_taxrate();
  taxrate_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.TaxRate)
}

// optional string ItemAccountDebit = 12;
inline bool AcceptanceCertificate552WorkItem::has_itemaccountdebit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AcceptanceCertificate552WorkItem::set_has_itemaccountdebit() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AcceptanceCertificate552WorkItem::clear_has_itemaccountdebit() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AcceptanceCertificate552WorkItem::clear_itemaccountdebit() {
  if (itemaccountdebit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemaccountdebit_->clear();
  }
  clear_has_itemaccountdebit();
}
inline const ::std::string& AcceptanceCertificate552WorkItem::itemaccountdebit() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.ItemAccountDebit)
  return *itemaccountdebit_;
}
inline void AcceptanceCertificate552WorkItem::set_itemaccountdebit(const ::std::string& value) {
  set_has_itemaccountdebit();
  if (itemaccountdebit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemaccountdebit_ = new ::std::string;
  }
  itemaccountdebit_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.ItemAccountDebit)
}
inline void AcceptanceCertificate552WorkItem::set_itemaccountdebit(const char* value) {
  set_has_itemaccountdebit();
  if (itemaccountdebit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemaccountdebit_ = new ::std::string;
  }
  itemaccountdebit_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.ItemAccountDebit)
}
inline void AcceptanceCertificate552WorkItem::set_itemaccountdebit(const char* value, size_t size) {
  set_has_itemaccountdebit();
  if (itemaccountdebit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemaccountdebit_ = new ::std::string;
  }
  itemaccountdebit_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.ItemAccountDebit)
}
inline ::std::string* AcceptanceCertificate552WorkItem::mutable_itemaccountdebit() {
  set_has_itemaccountdebit();
  if (itemaccountdebit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemaccountdebit_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.ItemAccountDebit)
  return itemaccountdebit_;
}
inline ::std::string* AcceptanceCertificate552WorkItem::release_itemaccountdebit() {
  clear_has_itemaccountdebit();
  if (itemaccountdebit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemaccountdebit_;
    itemaccountdebit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkItem::set_allocated_itemaccountdebit(::std::string* itemaccountdebit) {
  if (itemaccountdebit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemaccountdebit_;
  }
  if (itemaccountdebit) {
    set_has_itemaccountdebit();
    itemaccountdebit_ = itemaccountdebit;
  } else {
    clear_has_itemaccountdebit();
    itemaccountdebit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.ItemAccountDebit)
}

// optional string ItemAccountCredit = 13;
inline bool AcceptanceCertificate552WorkItem::has_itemaccountcredit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AcceptanceCertificate552WorkItem::set_has_itemaccountcredit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AcceptanceCertificate552WorkItem::clear_has_itemaccountcredit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AcceptanceCertificate552WorkItem::clear_itemaccountcredit() {
  if (itemaccountcredit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemaccountcredit_->clear();
  }
  clear_has_itemaccountcredit();
}
inline const ::std::string& AcceptanceCertificate552WorkItem::itemaccountcredit() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.ItemAccountCredit)
  return *itemaccountcredit_;
}
inline void AcceptanceCertificate552WorkItem::set_itemaccountcredit(const ::std::string& value) {
  set_has_itemaccountcredit();
  if (itemaccountcredit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemaccountcredit_ = new ::std::string;
  }
  itemaccountcredit_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.ItemAccountCredit)
}
inline void AcceptanceCertificate552WorkItem::set_itemaccountcredit(const char* value) {
  set_has_itemaccountcredit();
  if (itemaccountcredit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemaccountcredit_ = new ::std::string;
  }
  itemaccountcredit_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.ItemAccountCredit)
}
inline void AcceptanceCertificate552WorkItem::set_itemaccountcredit(const char* value, size_t size) {
  set_has_itemaccountcredit();
  if (itemaccountcredit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemaccountcredit_ = new ::std::string;
  }
  itemaccountcredit_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.ItemAccountCredit)
}
inline ::std::string* AcceptanceCertificate552WorkItem::mutable_itemaccountcredit() {
  set_has_itemaccountcredit();
  if (itemaccountcredit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemaccountcredit_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.ItemAccountCredit)
  return itemaccountcredit_;
}
inline ::std::string* AcceptanceCertificate552WorkItem::release_itemaccountcredit() {
  clear_has_itemaccountcredit();
  if (itemaccountcredit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemaccountcredit_;
    itemaccountcredit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552WorkItem::set_allocated_itemaccountcredit(::std::string* itemaccountcredit) {
  if (itemaccountcredit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemaccountcredit_;
  }
  if (itemaccountcredit) {
    set_has_itemaccountcredit();
    itemaccountcredit_ = itemaccountcredit;
  } else {
    clear_has_itemaccountcredit();
    itemaccountcredit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552WorkItem.ItemAccountCredit)
}

// -------------------------------------------------------------------

// AcceptanceCertificate552BuyerTitleInfo

// repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner Signers = 1;
inline int AcceptanceCertificate552BuyerTitleInfo::signers_size() const {
  return signers_.size();
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_signers() {
  signers_.Clear();
}
inline const ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner& AcceptanceCertificate552BuyerTitleInfo::signers(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.Signers)
  return signers_.Get(index);
}
inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* AcceptanceCertificate552BuyerTitleInfo::mutable_signers(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.Signers)
  return signers_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* AcceptanceCertificate552BuyerTitleInfo::add_signers() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.Signers)
  return signers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >&
AcceptanceCertificate552BuyerTitleInfo::signers() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.Signers)
  return signers_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >*
AcceptanceCertificate552BuyerTitleInfo::mutable_signers() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.Signers)
  return &signers_;
}

// required string DocumentCreator = 2;
inline bool AcceptanceCertificate552BuyerTitleInfo::has_documentcreator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_has_documentcreator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_has_documentcreator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_documentcreator() {
  if (documentcreator_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreator_->clear();
  }
  clear_has_documentcreator();
}
inline const ::std::string& AcceptanceCertificate552BuyerTitleInfo::documentcreator() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.DocumentCreator)
  return *documentcreator_;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_documentcreator(const ::std::string& value) {
  set_has_documentcreator();
  if (documentcreator_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreator_ = new ::std::string;
  }
  documentcreator_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.DocumentCreator)
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_documentcreator(const char* value) {
  set_has_documentcreator();
  if (documentcreator_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreator_ = new ::std::string;
  }
  documentcreator_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.DocumentCreator)
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_documentcreator(const char* value, size_t size) {
  set_has_documentcreator();
  if (documentcreator_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreator_ = new ::std::string;
  }
  documentcreator_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.DocumentCreator)
}
inline ::std::string* AcceptanceCertificate552BuyerTitleInfo::mutable_documentcreator() {
  set_has_documentcreator();
  if (documentcreator_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreator_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.DocumentCreator)
  return documentcreator_;
}
inline ::std::string* AcceptanceCertificate552BuyerTitleInfo::release_documentcreator() {
  clear_has_documentcreator();
  if (documentcreator_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentcreator_;
    documentcreator_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_allocated_documentcreator(::std::string* documentcreator) {
  if (documentcreator_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentcreator_;
  }
  if (documentcreator) {
    set_has_documentcreator();
    documentcreator_ = documentcreator;
  } else {
    clear_has_documentcreator();
    documentcreator_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.DocumentCreator)
}

// optional string DocumentCreatorBase = 3;
inline bool AcceptanceCertificate552BuyerTitleInfo::has_documentcreatorbase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_has_documentcreatorbase() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_has_documentcreatorbase() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_documentcreatorbase() {
  if (documentcreatorbase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreatorbase_->clear();
  }
  clear_has_documentcreatorbase();
}
inline const ::std::string& AcceptanceCertificate552BuyerTitleInfo::documentcreatorbase() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.DocumentCreatorBase)
  return *documentcreatorbase_;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_documentcreatorbase(const ::std::string& value) {
  set_has_documentcreatorbase();
  if (documentcreatorbase_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreatorbase_ = new ::std::string;
  }
  documentcreatorbase_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.DocumentCreatorBase)
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_documentcreatorbase(const char* value) {
  set_has_documentcreatorbase();
  if (documentcreatorbase_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreatorbase_ = new ::std::string;
  }
  documentcreatorbase_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.DocumentCreatorBase)
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_documentcreatorbase(const char* value, size_t size) {
  set_has_documentcreatorbase();
  if (documentcreatorbase_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreatorbase_ = new ::std::string;
  }
  documentcreatorbase_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.DocumentCreatorBase)
}
inline ::std::string* AcceptanceCertificate552BuyerTitleInfo::mutable_documentcreatorbase() {
  set_has_documentcreatorbase();
  if (documentcreatorbase_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentcreatorbase_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.DocumentCreatorBase)
  return documentcreatorbase_;
}
inline ::std::string* AcceptanceCertificate552BuyerTitleInfo::release_documentcreatorbase() {
  clear_has_documentcreatorbase();
  if (documentcreatorbase_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentcreatorbase_;
    documentcreatorbase_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_allocated_documentcreatorbase(::std::string* documentcreatorbase) {
  if (documentcreatorbase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentcreatorbase_;
  }
  if (documentcreatorbase) {
    set_has_documentcreatorbase();
    documentcreatorbase_ = documentcreatorbase;
  } else {
    clear_has_documentcreatorbase();
    documentcreatorbase_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.DocumentCreatorBase)
}

// optional string OperationType = 4;
inline bool AcceptanceCertificate552BuyerTitleInfo::has_operationtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_has_operationtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_has_operationtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_operationtype() {
  if (operationtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationtype_->clear();
  }
  clear_has_operationtype();
}
inline const ::std::string& AcceptanceCertificate552BuyerTitleInfo::operationtype() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.OperationType)
  return *operationtype_;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_operationtype(const ::std::string& value) {
  set_has_operationtype();
  if (operationtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationtype_ = new ::std::string;
  }
  operationtype_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.OperationType)
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_operationtype(const char* value) {
  set_has_operationtype();
  if (operationtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationtype_ = new ::std::string;
  }
  operationtype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.OperationType)
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_operationtype(const char* value, size_t size) {
  set_has_operationtype();
  if (operationtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationtype_ = new ::std::string;
  }
  operationtype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.OperationType)
}
inline ::std::string* AcceptanceCertificate552BuyerTitleInfo::mutable_operationtype() {
  set_has_operationtype();
  if (operationtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationtype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.OperationType)
  return operationtype_;
}
inline ::std::string* AcceptanceCertificate552BuyerTitleInfo::release_operationtype() {
  clear_has_operationtype();
  if (operationtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = operationtype_;
    operationtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_allocated_operationtype(::std::string* operationtype) {
  if (operationtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operationtype_;
  }
  if (operationtype) {
    set_has_operationtype();
    operationtype_ = operationtype;
  } else {
    clear_has_operationtype();
    operationtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.OperationType)
}

// required string OperationContent = 6;
inline bool AcceptanceCertificate552BuyerTitleInfo::has_operationcontent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_has_operationcontent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_has_operationcontent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_operationcontent() {
  if (operationcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationcontent_->clear();
  }
  clear_has_operationcontent();
}
inline const ::std::string& AcceptanceCertificate552BuyerTitleInfo::operationcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.OperationContent)
  return *operationcontent_;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_operationcontent(const ::std::string& value) {
  set_has_operationcontent();
  if (operationcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationcontent_ = new ::std::string;
  }
  operationcontent_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.OperationContent)
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_operationcontent(const char* value) {
  set_has_operationcontent();
  if (operationcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationcontent_ = new ::std::string;
  }
  operationcontent_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.OperationContent)
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_operationcontent(const char* value, size_t size) {
  set_has_operationcontent();
  if (operationcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationcontent_ = new ::std::string;
  }
  operationcontent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.OperationContent)
}
inline ::std::string* AcceptanceCertificate552BuyerTitleInfo::mutable_operationcontent() {
  set_has_operationcontent();
  if (operationcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operationcontent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.OperationContent)
  return operationcontent_;
}
inline ::std::string* AcceptanceCertificate552BuyerTitleInfo::release_operationcontent() {
  clear_has_operationcontent();
  if (operationcontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = operationcontent_;
    operationcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_allocated_operationcontent(::std::string* operationcontent) {
  if (operationcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operationcontent_;
  }
  if (operationcontent) {
    set_has_operationcontent();
    operationcontent_ = operationcontent;
  } else {
    clear_has_operationcontent();
    operationcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.OperationContent)
}

// optional string AcceptanceDate = 7;
inline bool AcceptanceCertificate552BuyerTitleInfo::has_acceptancedate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_has_acceptancedate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_has_acceptancedate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_acceptancedate() {
  if (acceptancedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acceptancedate_->clear();
  }
  clear_has_acceptancedate();
}
inline const ::std::string& AcceptanceCertificate552BuyerTitleInfo::acceptancedate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.AcceptanceDate)
  return *acceptancedate_;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_acceptancedate(const ::std::string& value) {
  set_has_acceptancedate();
  if (acceptancedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acceptancedate_ = new ::std::string;
  }
  acceptancedate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.AcceptanceDate)
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_acceptancedate(const char* value) {
  set_has_acceptancedate();
  if (acceptancedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acceptancedate_ = new ::std::string;
  }
  acceptancedate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.AcceptanceDate)
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_acceptancedate(const char* value, size_t size) {
  set_has_acceptancedate();
  if (acceptancedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acceptancedate_ = new ::std::string;
  }
  acceptancedate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.AcceptanceDate)
}
inline ::std::string* AcceptanceCertificate552BuyerTitleInfo::mutable_acceptancedate() {
  set_has_acceptancedate();
  if (acceptancedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acceptancedate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.AcceptanceDate)
  return acceptancedate_;
}
inline ::std::string* AcceptanceCertificate552BuyerTitleInfo::release_acceptancedate() {
  clear_has_acceptancedate();
  if (acceptancedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = acceptancedate_;
    acceptancedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_allocated_acceptancedate(::std::string* acceptancedate) {
  if (acceptancedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acceptancedate_;
  }
  if (acceptancedate) {
    set_has_acceptancedate();
    acceptancedate_ = acceptancedate;
  } else {
    clear_has_acceptancedate();
    acceptancedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.AcceptanceDate)
}

// optional string CreatedThingAcceptDate = 8;
inline bool AcceptanceCertificate552BuyerTitleInfo::has_createdthingacceptdate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_has_createdthingacceptdate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_has_createdthingacceptdate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_createdthingacceptdate() {
  if (createdthingacceptdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthingacceptdate_->clear();
  }
  clear_has_createdthingacceptdate();
}
inline const ::std::string& AcceptanceCertificate552BuyerTitleInfo::createdthingacceptdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.CreatedThingAcceptDate)
  return *createdthingacceptdate_;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_createdthingacceptdate(const ::std::string& value) {
  set_has_createdthingacceptdate();
  if (createdthingacceptdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthingacceptdate_ = new ::std::string;
  }
  createdthingacceptdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.CreatedThingAcceptDate)
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_createdthingacceptdate(const char* value) {
  set_has_createdthingacceptdate();
  if (createdthingacceptdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthingacceptdate_ = new ::std::string;
  }
  createdthingacceptdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.CreatedThingAcceptDate)
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_createdthingacceptdate(const char* value, size_t size) {
  set_has_createdthingacceptdate();
  if (createdthingacceptdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthingacceptdate_ = new ::std::string;
  }
  createdthingacceptdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.CreatedThingAcceptDate)
}
inline ::std::string* AcceptanceCertificate552BuyerTitleInfo::mutable_createdthingacceptdate() {
  set_has_createdthingacceptdate();
  if (createdthingacceptdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthingacceptdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.CreatedThingAcceptDate)
  return createdthingacceptdate_;
}
inline ::std::string* AcceptanceCertificate552BuyerTitleInfo::release_createdthingacceptdate() {
  clear_has_createdthingacceptdate();
  if (createdthingacceptdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = createdthingacceptdate_;
    createdthingacceptdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_allocated_createdthingacceptdate(::std::string* createdthingacceptdate) {
  if (createdthingacceptdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createdthingacceptdate_;
  }
  if (createdthingacceptdate) {
    set_has_createdthingacceptdate();
    createdthingacceptdate_ = createdthingacceptdate;
  } else {
    clear_has_createdthingacceptdate();
    createdthingacceptdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.CreatedThingAcceptDate)
}

// optional string CreatedThingInfo = 9;
inline bool AcceptanceCertificate552BuyerTitleInfo::has_createdthinginfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_has_createdthinginfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_has_createdthinginfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_createdthinginfo() {
  if (createdthinginfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthinginfo_->clear();
  }
  clear_has_createdthinginfo();
}
inline const ::std::string& AcceptanceCertificate552BuyerTitleInfo::createdthinginfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.CreatedThingInfo)
  return *createdthinginfo_;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_createdthinginfo(const ::std::string& value) {
  set_has_createdthinginfo();
  if (createdthinginfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthinginfo_ = new ::std::string;
  }
  createdthinginfo_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.CreatedThingInfo)
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_createdthinginfo(const char* value) {
  set_has_createdthinginfo();
  if (createdthinginfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthinginfo_ = new ::std::string;
  }
  createdthinginfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.CreatedThingInfo)
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_createdthinginfo(const char* value, size_t size) {
  set_has_createdthinginfo();
  if (createdthinginfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthinginfo_ = new ::std::string;
  }
  createdthinginfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.CreatedThingInfo)
}
inline ::std::string* AcceptanceCertificate552BuyerTitleInfo::mutable_createdthinginfo() {
  set_has_createdthinginfo();
  if (createdthinginfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdthinginfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.CreatedThingInfo)
  return createdthinginfo_;
}
inline ::std::string* AcceptanceCertificate552BuyerTitleInfo::release_createdthinginfo() {
  clear_has_createdthinginfo();
  if (createdthinginfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = createdthinginfo_;
    createdthinginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_allocated_createdthinginfo(::std::string* createdthinginfo) {
  if (createdthinginfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createdthinginfo_;
  }
  if (createdthinginfo) {
    set_has_createdthinginfo();
    createdthinginfo_ = createdthinginfo;
  } else {
    clear_has_createdthinginfo();
    createdthinginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.CreatedThingInfo)
}

// optional .Diadoc.Api.Proto.Invoicing.AdditionalInfoId AdditionalInfoId = 10;
inline bool AcceptanceCertificate552BuyerTitleInfo::has_additionalinfoid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_has_additionalinfoid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_has_additionalinfoid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AcceptanceCertificate552BuyerTitleInfo::clear_additionalinfoid() {
  if (additionalinfoid_ != NULL) additionalinfoid_->::Diadoc::Api::Proto::Invoicing::AdditionalInfoId::Clear();
  clear_has_additionalinfoid();
}
inline const ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId& AcceptanceCertificate552BuyerTitleInfo::additionalinfoid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.AdditionalInfoId)
  return additionalinfoid_ != NULL ? *additionalinfoid_ : *default_instance_->additionalinfoid_;
}
inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* AcceptanceCertificate552BuyerTitleInfo::mutable_additionalinfoid() {
  set_has_additionalinfoid();
  if (additionalinfoid_ == NULL) additionalinfoid_ = new ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.AdditionalInfoId)
  return additionalinfoid_;
}
inline ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* AcceptanceCertificate552BuyerTitleInfo::release_additionalinfoid() {
  clear_has_additionalinfoid();
  ::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* temp = additionalinfoid_;
  additionalinfoid_ = NULL;
  return temp;
}
inline void AcceptanceCertificate552BuyerTitleInfo::set_allocated_additionalinfoid(::Diadoc::Api::Proto::Invoicing::AdditionalInfoId* additionalinfoid) {
  delete additionalinfoid_;
  additionalinfoid_ = additionalinfoid;
  if (additionalinfoid) {
    set_has_additionalinfoid();
  } else {
    clear_has_additionalinfoid();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Invoicing.AcceptanceCertificate552BuyerTitleInfo.AdditionalInfoId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Invoicing
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Invoicing_2fAcceptanceCertificate552Info_2eproto__INCLUDED
