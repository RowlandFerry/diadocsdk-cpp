// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invoicing/InvoiceInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Invoicing/InvoiceInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Invoicing {

namespace {

const ::google::protobuf::Descriptor* InvoiceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvoiceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdditionalInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdditionalInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvoiceItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvoiceItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CustomsDeclaration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CustomsDeclaration_reflection_ = NULL;
const ::google::protobuf::Descriptor* PaymentDocumentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PaymentDocumentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipperOrConsignee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipperOrConsignee_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvoiceCorrectionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvoiceCorrectionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvoiceTotalsDiff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvoiceTotalsDiff_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvoiceCorrectionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvoiceCorrectionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CorrectableInvoiceItemFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CorrectableInvoiceItemFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvoiceItemAmountsDiff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvoiceItemAmountsDiff_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InvoiceFormatVersion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TaxRate_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Invoicing_2fInvoiceInfo_2eproto() {
  protobuf_AddDesc_Invoicing_2fInvoiceInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Invoicing/InvoiceInfo.proto");
  GOOGLE_CHECK(file != NULL);
  InvoiceInfo_descriptor_ = file->message_type(0);
  static const int InvoiceInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, invoicedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, invoicenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, seller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, buyer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, shipper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, consignee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, signer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, paymentdocuments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, totalwithvatexcluded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, additionalinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, invoicerevisiondate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, invoicerevisionnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, additionalinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, version_),
  };
  InvoiceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvoiceInfo_descriptor_,
      InvoiceInfo::default_instance_,
      InvoiceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvoiceInfo));
  AdditionalInfo_descriptor_ = file->message_type(1);
  static const int AdditionalInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalInfo, value_),
  };
  AdditionalInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdditionalInfo_descriptor_,
      AdditionalInfo::default_instance_,
      AdditionalInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdditionalInfo));
  InvoiceItem_descriptor_ = file->message_type(2);
  static const int InvoiceItem_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, countriesoforigin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, customsdeclarationnumbers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, excise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, taxrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, subtotalwithvatexcluded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, subtotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, additionalinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, customsdeclarations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, additionalinfos_),
  };
  InvoiceItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvoiceItem_descriptor_,
      InvoiceItem::default_instance_,
      InvoiceItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvoiceItem));
  CustomsDeclaration_descriptor_ = file->message_type(3);
  static const int CustomsDeclaration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomsDeclaration, countrycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomsDeclaration, declarationnumber_),
  };
  CustomsDeclaration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CustomsDeclaration_descriptor_,
      CustomsDeclaration::default_instance_,
      CustomsDeclaration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomsDeclaration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomsDeclaration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CustomsDeclaration));
  PaymentDocumentInfo_descriptor_ = file->message_type(4);
  static const int PaymentDocumentInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaymentDocumentInfo, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaymentDocumentInfo, documentnumber_),
  };
  PaymentDocumentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PaymentDocumentInfo_descriptor_,
      PaymentDocumentInfo::default_instance_,
      PaymentDocumentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaymentDocumentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaymentDocumentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PaymentDocumentInfo));
  ShipperOrConsignee_descriptor_ = file->message_type(5);
  static const int ShipperOrConsignee_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipperOrConsignee, sameassellerorbuyer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipperOrConsignee, orginfo_),
  };
  ShipperOrConsignee_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipperOrConsignee_descriptor_,
      ShipperOrConsignee::default_instance_,
      ShipperOrConsignee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipperOrConsignee, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipperOrConsignee, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipperOrConsignee));
  InvoiceCorrectionInfo_descriptor_ = file->message_type(6);
  static const int InvoiceCorrectionInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, invoicedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, invoicenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, invoicerevisiondate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, invoicerevisionnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, invoicecorrectiondate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, invoicecorrectionnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, invoicecorrectionrevisiondate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, invoicecorrectionrevisionnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, seller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, buyer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, signer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, totalsinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, totalsdec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, additionalinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, additionalinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, version_),
  };
  InvoiceCorrectionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvoiceCorrectionInfo_descriptor_,
      InvoiceCorrectionInfo::default_instance_,
      InvoiceCorrectionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvoiceCorrectionInfo));
  InvoiceTotalsDiff_descriptor_ = file->message_type(7);
  static const int InvoiceTotalsDiff_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceTotalsDiff, totalwithvatexcluded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceTotalsDiff, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceTotalsDiff, total_),
  };
  InvoiceTotalsDiff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvoiceTotalsDiff_descriptor_,
      InvoiceTotalsDiff::default_instance_,
      InvoiceTotalsDiff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceTotalsDiff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceTotalsDiff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvoiceTotalsDiff));
  InvoiceCorrectionItem_descriptor_ = file->message_type(8);
  static const int InvoiceCorrectionItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionItem, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionItem, originalvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionItem, correctedvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionItem, amountsinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionItem, amountsdec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionItem, additionalinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionItem, additionalinfos_),
  };
  InvoiceCorrectionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvoiceCorrectionItem_descriptor_,
      InvoiceCorrectionItem::default_instance_,
      InvoiceCorrectionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceCorrectionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvoiceCorrectionItem));
  CorrectableInvoiceItemFields_descriptor_ = file->message_type(9);
  static const int CorrectableInvoiceItemFields_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectableInvoiceItemFields, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectableInvoiceItemFields, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectableInvoiceItemFields, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectableInvoiceItemFields, excise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectableInvoiceItemFields, taxrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectableInvoiceItemFields, subtotalwithvatexcluded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectableInvoiceItemFields, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectableInvoiceItemFields, subtotal_),
  };
  CorrectableInvoiceItemFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CorrectableInvoiceItemFields_descriptor_,
      CorrectableInvoiceItemFields::default_instance_,
      CorrectableInvoiceItemFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectableInvoiceItemFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectableInvoiceItemFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CorrectableInvoiceItemFields));
  InvoiceItemAmountsDiff_descriptor_ = file->message_type(10);
  static const int InvoiceItemAmountsDiff_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItemAmountsDiff, excise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItemAmountsDiff, subtotalwithvatexcluded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItemAmountsDiff, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItemAmountsDiff, subtotal_),
  };
  InvoiceItemAmountsDiff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvoiceItemAmountsDiff_descriptor_,
      InvoiceItemAmountsDiff::default_instance_,
      InvoiceItemAmountsDiff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItemAmountsDiff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvoiceItemAmountsDiff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvoiceItemAmountsDiff));
  InvoiceFormatVersion_descriptor_ = file->enum_type(0);
  TaxRate_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Invoicing_2fInvoiceInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvoiceInfo_descriptor_, &InvoiceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdditionalInfo_descriptor_, &AdditionalInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvoiceItem_descriptor_, &InvoiceItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CustomsDeclaration_descriptor_, &CustomsDeclaration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PaymentDocumentInfo_descriptor_, &PaymentDocumentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipperOrConsignee_descriptor_, &ShipperOrConsignee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvoiceCorrectionInfo_descriptor_, &InvoiceCorrectionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvoiceTotalsDiff_descriptor_, &InvoiceTotalsDiff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvoiceCorrectionItem_descriptor_, &InvoiceCorrectionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CorrectableInvoiceItemFields_descriptor_, &CorrectableInvoiceItemFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvoiceItemAmountsDiff_descriptor_, &InvoiceItemAmountsDiff::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Invoicing_2fInvoiceInfo_2eproto() {
  delete InvoiceInfo::default_instance_;
  delete InvoiceInfo_reflection_;
  delete AdditionalInfo::default_instance_;
  delete AdditionalInfo_reflection_;
  delete InvoiceItem::default_instance_;
  delete InvoiceItem_reflection_;
  delete CustomsDeclaration::default_instance_;
  delete CustomsDeclaration_reflection_;
  delete PaymentDocumentInfo::default_instance_;
  delete PaymentDocumentInfo_reflection_;
  delete ShipperOrConsignee::default_instance_;
  delete ShipperOrConsignee_reflection_;
  delete InvoiceCorrectionInfo::default_instance_;
  delete InvoiceCorrectionInfo_reflection_;
  delete InvoiceTotalsDiff::default_instance_;
  delete InvoiceTotalsDiff_reflection_;
  delete InvoiceCorrectionItem::default_instance_;
  delete InvoiceCorrectionItem_reflection_;
  delete CorrectableInvoiceItemFields::default_instance_;
  delete CorrectableInvoiceItemFields_reflection_;
  delete InvoiceItemAmountsDiff::default_instance_;
  delete InvoiceItemAmountsDiff_reflection_;
}

void protobuf_AddDesc_Invoicing_2fInvoiceInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::Invoicing::protobuf_AddDesc_Invoicing_2fSigner_2eproto();
  ::Diadoc::Api::Proto::Invoicing::protobuf_AddDesc_Invoicing_2fOrganizationInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033Invoicing/InvoiceInfo.proto\022\032Diadoc.Ap"
    "i.Proto.Invoicing\032\026Invoicing/Signer.prot"
    "o\032 Invoicing/OrganizationInfo.proto\"\300\006\n\013"
    "InvoiceInfo\022\023\n\013InvoiceDate\030\001 \002(\t\022\025\n\rInvo"
    "iceNumber\030\002 \002(\t\022B\n\006Seller\030\003 \002(\01322.Diadoc"
    ".Api.Proto.Invoicing.DiadocOrganizationI"
    "nfo\022A\n\005Buyer\030\004 \002(\01322.Diadoc.Api.Proto.In"
    "voicing.DiadocOrganizationInfo\022\?\n\007Shippe"
    "r\030\005 \001(\0132..Diadoc.Api.Proto.Invoicing.Shi"
    "pperOrConsignee\022A\n\tConsignee\030\006 \001(\0132..Dia"
    "doc.Api.Proto.Invoicing.ShipperOrConsign"
    "ee\0222\n\006Signer\030\007 \002(\0132\".Diadoc.Api.Proto.In"
    "voicing.Signer\022I\n\020PaymentDocuments\030\010 \003(\013"
    "2/.Diadoc.Api.Proto.Invoicing.PaymentDoc"
    "umentInfo\0226\n\005Items\030\t \003(\0132\'.Diadoc.Api.Pr"
    "oto.Invoicing.InvoiceItem\022\020\n\010Currency\030\n "
    "\001(\t\022\034\n\024TotalWithVatExcluded\030\013 \001(\t\022\013\n\003Vat"
    "\030\014 \001(\t\022\r\n\005Total\030\r \002(\t\022\026\n\016AdditionalInfo\030"
    "\016 \001(\t\022\033\n\023InvoiceRevisionDate\030\017 \001(\t\022\035\n\025In"
    "voiceRevisionNumber\030\020 \001(\t\022C\n\017AdditionalI"
    "nfos\030\021 \003(\0132*.Diadoc.Api.Proto.Invoicing."
    "AdditionalInfo\022^\n\007Version\030\022 \001(\01620.Diadoc"
    ".Api.Proto.Invoicing.InvoiceFormatVersio"
    "n:\033DefaultInvoiceFormatVersion\"+\n\016Additi"
    "onalInfo\022\n\n\002Id\030\001 \002(\t\022\r\n\005Value\030\002 \002(\t\"\273\003\n\013"
    "InvoiceItem\022\017\n\007Product\030\001 \002(\t\022\014\n\004Unit\030\002 \001"
    "(\t\022\020\n\010Quantity\030\003 \001(\t\022\r\n\005Price\030\004 \001(\t\022\031\n\021C"
    "ountriesOfOrigin\030\005 \003(\t\022!\n\031CustomsDeclara"
    "tionNumbers\030\006 \003(\t\022\016\n\006Excise\030\007 \001(\t\0224\n\007Tax"
    "Rate\030\010 \002(\0162#.Diadoc.Api.Proto.Invoicing."
    "TaxRate\022\037\n\027SubtotalWithVatExcluded\030\t \001(\t"
    "\022\013\n\003Vat\030\n \001(\t\022\020\n\010Subtotal\030\013 \002(\t\022\026\n\016Addit"
    "ionalInfo\030\014 \001(\t\022K\n\023CustomsDeclarations\030\r"
    " \003(\0132..Diadoc.Api.Proto.Invoicing.Custom"
    "sDeclaration\022C\n\017AdditionalInfos\030\016 \003(\0132*."
    "Diadoc.Api.Proto.Invoicing.AdditionalInf"
    "o\"D\n\022CustomsDeclaration\022\023\n\013CountryCode\030\001"
    " \002(\t\022\031\n\021DeclarationNumber\030\002 \002(\t\"C\n\023Payme"
    "ntDocumentInfo\022\024\n\014DocumentDate\030\001 \002(\t\022\026\n\016"
    "DocumentNumber\030\002 \002(\t\"p\n\022ShipperOrConsign"
    "ee\022\033\n\023SameAsSellerOrBuyer\030\001 \001(\010\022=\n\007OrgIn"
    "fo\030\002 \001(\0132,.Diadoc.Api.Proto.Invoicing.Or"
    "ganizationInfo\"\337\006\n\025InvoiceCorrectionInfo"
    "\022\023\n\013InvoiceDate\030\001 \002(\t\022\025\n\rInvoiceNumber\030\002"
    " \002(\t\022\033\n\023InvoiceRevisionDate\030\003 \001(\t\022\035\n\025Inv"
    "oiceRevisionNumber\030\004 \001(\t\022\035\n\025InvoiceCorre"
    "ctionDate\030\005 \002(\t\022\037\n\027InvoiceCorrectionNumb"
    "er\030\006 \002(\t\022%\n\035InvoiceCorrectionRevisionDat"
    "e\030\007 \001(\t\022\'\n\037InvoiceCorrectionRevisionNumb"
    "er\030\010 \001(\t\022B\n\006Seller\030\t \002(\01322.Diadoc.Api.Pr"
    "oto.Invoicing.DiadocOrganizationInfo\022A\n\005"
    "Buyer\030\n \002(\01322.Diadoc.Api.Proto.Invoicing"
    ".DiadocOrganizationInfo\0222\n\006Signer\030\013 \002(\0132"
    "\".Diadoc.Api.Proto.Invoicing.Signer\022@\n\005I"
    "tems\030\014 \003(\01321.Diadoc.Api.Proto.Invoicing."
    "InvoiceCorrectionItem\022\020\n\010Currency\030\r \001(\t\022"
    "@\n\tTotalsInc\030\016 \001(\0132-.Diadoc.Api.Proto.In"
    "voicing.InvoiceTotalsDiff\022@\n\tTotalsDec\030\017"
    " \001(\0132-.Diadoc.Api.Proto.Invoicing.Invoic"
    "eTotalsDiff\022\026\n\016AdditionalInfo\030\020 \001(\t\022C\n\017A"
    "dditionalInfos\030\021 \003(\0132*.Diadoc.Api.Proto."
    "Invoicing.AdditionalInfo\022^\n\007Version\030\022 \001("
    "\01620.Diadoc.Api.Proto.Invoicing.InvoiceFo"
    "rmatVersion:\033DefaultInvoiceFormatVersion"
    "\"M\n\021InvoiceTotalsDiff\022\034\n\024TotalWithVatExc"
    "luded\030\001 \001(\t\022\013\n\003Vat\030\002 \001(\t\022\r\n\005Total\030\003 \002(\t\""
    "\272\003\n\025InvoiceCorrectionItem\022\017\n\007Product\030\001 \002"
    "(\t\022P\n\016OriginalValues\030\002 \002(\01328.Diadoc.Api."
    "Proto.Invoicing.CorrectableInvoiceItemFi"
    "elds\022Q\n\017CorrectedValues\030\003 \002(\01328.Diadoc.A"
    "pi.Proto.Invoicing.CorrectableInvoiceIte"
    "mFields\022F\n\nAmountsInc\030\004 \001(\01322.Diadoc.Api"
    ".Proto.Invoicing.InvoiceItemAmountsDiff\022"
    "F\n\nAmountsDec\030\005 \001(\01322.Diadoc.Api.Proto.I"
    "nvoicing.InvoiceItemAmountsDiff\022\026\n\016Addit"
    "ionalInfo\030\006 \001(\t\022C\n\017AdditionalInfos\030\007 \003(\013"
    "2*.Diadoc.Api.Proto.Invoicing.Additional"
    "Info\"\323\001\n\034CorrectableInvoiceItemFields\022\014\n"
    "\004Unit\030\001 \001(\t\022\020\n\010Quantity\030\002 \001(\t\022\r\n\005Price\030\003"
    " \001(\t\022\016\n\006Excise\030\004 \001(\t\0224\n\007TaxRate\030\005 \002(\0162#."
    "Diadoc.Api.Proto.Invoicing.TaxRate\022\037\n\027Su"
    "btotalWithVatExcluded\030\006 \001(\t\022\013\n\003Vat\030\007 \001(\t"
    "\022\020\n\010Subtotal\030\010 \002(\t\"h\n\026InvoiceItemAmounts"
    "Diff\022\016\n\006Excise\030\001 \001(\t\022\037\n\027SubtotalWithVatE"
    "xcluded\030\002 \001(\t\022\013\n\003Vat\030\003 \001(\t\022\020\n\010Subtotal\030\004"
    " \001(\t*M\n\024InvoiceFormatVersion\022\037\n\033DefaultI"
    "nvoiceFormatVersion\020\000\022\t\n\005v5_01\020\001\022\t\n\005v5_0"
    "2\020\002*\244\001\n\007TaxRate\022\t\n\005NoVat\020\000\022\r\n\tPercent_0\020"
    "\001\022\016\n\nPercent_10\020\002\022\016\n\nPercent_18\020\003\022\016\n\nPer"
    "cent_20\020\004\022\023\n\017Fraction_10_110\020\005\022\023\n\017Fracti"
    "on_18_118\020\006\022\020\n\014TaxedByAgent\020\007\022\023\n\017Fractio"
    "n_20_120\020\010", 3650);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Invoicing/InvoiceInfo.proto", &protobuf_RegisterTypes);
  InvoiceInfo::default_instance_ = new InvoiceInfo();
  AdditionalInfo::default_instance_ = new AdditionalInfo();
  InvoiceItem::default_instance_ = new InvoiceItem();
  CustomsDeclaration::default_instance_ = new CustomsDeclaration();
  PaymentDocumentInfo::default_instance_ = new PaymentDocumentInfo();
  ShipperOrConsignee::default_instance_ = new ShipperOrConsignee();
  InvoiceCorrectionInfo::default_instance_ = new InvoiceCorrectionInfo();
  InvoiceTotalsDiff::default_instance_ = new InvoiceTotalsDiff();
  InvoiceCorrectionItem::default_instance_ = new InvoiceCorrectionItem();
  CorrectableInvoiceItemFields::default_instance_ = new CorrectableInvoiceItemFields();
  InvoiceItemAmountsDiff::default_instance_ = new InvoiceItemAmountsDiff();
  InvoiceInfo::default_instance_->InitAsDefaultInstance();
  AdditionalInfo::default_instance_->InitAsDefaultInstance();
  InvoiceItem::default_instance_->InitAsDefaultInstance();
  CustomsDeclaration::default_instance_->InitAsDefaultInstance();
  PaymentDocumentInfo::default_instance_->InitAsDefaultInstance();
  ShipperOrConsignee::default_instance_->InitAsDefaultInstance();
  InvoiceCorrectionInfo::default_instance_->InitAsDefaultInstance();
  InvoiceTotalsDiff::default_instance_->InitAsDefaultInstance();
  InvoiceCorrectionItem::default_instance_->InitAsDefaultInstance();
  CorrectableInvoiceItemFields::default_instance_->InitAsDefaultInstance();
  InvoiceItemAmountsDiff::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Invoicing_2fInvoiceInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Invoicing_2fInvoiceInfo_2eproto {
  StaticDescriptorInitializer_Invoicing_2fInvoiceInfo_2eproto() {
    protobuf_AddDesc_Invoicing_2fInvoiceInfo_2eproto();
  }
} static_descriptor_initializer_Invoicing_2fInvoiceInfo_2eproto_;
const ::google::protobuf::EnumDescriptor* InvoiceFormatVersion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvoiceFormatVersion_descriptor_;
}
bool InvoiceFormatVersion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TaxRate_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaxRate_descriptor_;
}
bool TaxRate_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int InvoiceInfo::kInvoiceDateFieldNumber;
const int InvoiceInfo::kInvoiceNumberFieldNumber;
const int InvoiceInfo::kSellerFieldNumber;
const int InvoiceInfo::kBuyerFieldNumber;
const int InvoiceInfo::kShipperFieldNumber;
const int InvoiceInfo::kConsigneeFieldNumber;
const int InvoiceInfo::kSignerFieldNumber;
const int InvoiceInfo::kPaymentDocumentsFieldNumber;
const int InvoiceInfo::kItemsFieldNumber;
const int InvoiceInfo::kCurrencyFieldNumber;
const int InvoiceInfo::kTotalWithVatExcludedFieldNumber;
const int InvoiceInfo::kVatFieldNumber;
const int InvoiceInfo::kTotalFieldNumber;
const int InvoiceInfo::kAdditionalInfoFieldNumber;
const int InvoiceInfo::kInvoiceRevisionDateFieldNumber;
const int InvoiceInfo::kInvoiceRevisionNumberFieldNumber;
const int InvoiceInfo::kAdditionalInfosFieldNumber;
const int InvoiceInfo::kVersionFieldNumber;
#endif  // !_MSC_VER

InvoiceInfo::InvoiceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.InvoiceInfo)
}

void InvoiceInfo::InitAsDefaultInstance() {
  seller_ = const_cast< ::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo*>(&::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo::default_instance());
  buyer_ = const_cast< ::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo*>(&::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo::default_instance());
  shipper_ = const_cast< ::Diadoc::Api::Proto::Invoicing::ShipperOrConsignee*>(&::Diadoc::Api::Proto::Invoicing::ShipperOrConsignee::default_instance());
  consignee_ = const_cast< ::Diadoc::Api::Proto::Invoicing::ShipperOrConsignee*>(&::Diadoc::Api::Proto::Invoicing::ShipperOrConsignee::default_instance());
  signer_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Signer*>(&::Diadoc::Api::Proto::Invoicing::Signer::default_instance());
}

InvoiceInfo::InvoiceInfo(const InvoiceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.InvoiceInfo)
}

void InvoiceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invoicedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invoicenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seller_ = NULL;
  buyer_ = NULL;
  shipper_ = NULL;
  consignee_ = NULL;
  signer_ = NULL;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totalwithvatexcluded_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invoicerevisiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invoicerevisionnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvoiceInfo::~InvoiceInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.InvoiceInfo)
  SharedDtor();
}

void InvoiceInfo::SharedDtor() {
  if (invoicedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoicedate_;
  }
  if (invoicenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoicenumber_;
  }
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currency_;
  }
  if (totalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete totalwithvatexcluded_;
  }
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete additionalinfo_;
  }
  if (invoicerevisiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoicerevisiondate_;
  }
  if (invoicerevisionnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoicerevisionnumber_;
  }
  if (this != default_instance_) {
    delete seller_;
    delete buyer_;
    delete shipper_;
    delete consignee_;
    delete signer_;
  }
}

void InvoiceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvoiceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvoiceInfo_descriptor_;
}

const InvoiceInfo& InvoiceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fInvoiceInfo_2eproto();
  return *default_instance_;
}

InvoiceInfo* InvoiceInfo::default_instance_ = NULL;

InvoiceInfo* InvoiceInfo::New() const {
  return new InvoiceInfo;
}

void InvoiceInfo::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_invoicedate()) {
      if (invoicedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invoicedate_->clear();
      }
    }
    if (has_invoicenumber()) {
      if (invoicenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invoicenumber_->clear();
      }
    }
    if (has_seller()) {
      if (seller_ != NULL) seller_->::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo::Clear();
    }
    if (has_buyer()) {
      if (buyer_ != NULL) buyer_->::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo::Clear();
    }
    if (has_shipper()) {
      if (shipper_ != NULL) shipper_->::Diadoc::Api::Proto::Invoicing::ShipperOrConsignee::Clear();
    }
    if (has_consignee()) {
      if (consignee_ != NULL) consignee_->::Diadoc::Api::Proto::Invoicing::ShipperOrConsignee::Clear();
    }
    if (has_signer()) {
      if (signer_ != NULL) signer_->::Diadoc::Api::Proto::Invoicing::Signer::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65024) {
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currency_->clear();
      }
    }
    if (has_totalwithvatexcluded()) {
      if (totalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        totalwithvatexcluded_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vat_->clear();
      }
    }
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        total_->clear();
      }
    }
    if (has_additionalinfo()) {
      if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        additionalinfo_->clear();
      }
    }
    if (has_invoicerevisiondate()) {
      if (invoicerevisiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invoicerevisiondate_->clear();
      }
    }
    if (has_invoicerevisionnumber()) {
      if (invoicerevisionnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invoicerevisionnumber_->clear();
      }
    }
  }
  version_ = 0;
  paymentdocuments_.Clear();
  items_.Clear();
  additionalinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvoiceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.InvoiceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InvoiceDate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invoicedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invoicedate().data(), this->invoicedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invoicedate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_InvoiceNumber;
        break;
      }

      // required string InvoiceNumber = 2;
      case 2: {
        if (tag == 18) {
         parse_InvoiceNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invoicenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invoicenumber().data(), this->invoicenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invoicenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Seller;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Seller = 3;
      case 3: {
        if (tag == 26) {
         parse_Seller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seller()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Buyer;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Buyer = 4;
      case 4: {
        if (tag == 34) {
         parse_Buyer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Shipper;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.ShipperOrConsignee Shipper = 5;
      case 5: {
        if (tag == 42) {
         parse_Shipper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shipper()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Consignee;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.ShipperOrConsignee Consignee = 6;
      case 6: {
        if (tag == 50) {
         parse_Consignee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consignee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Signer;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 7;
      case 7: {
        if (tag == 58) {
         parse_Signer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_PaymentDocuments;
        break;
      }

      // repeated .Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo PaymentDocuments = 8;
      case 8: {
        if (tag == 66) {
         parse_PaymentDocuments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paymentdocuments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_PaymentDocuments;
        if (input->ExpectTag(74)) goto parse_Items;
        break;
      }

      // repeated .Diadoc.Api.Proto.Invoicing.InvoiceItem Items = 9;
      case 9: {
        if (tag == 74) {
         parse_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Items;
        if (input->ExpectTag(82)) goto parse_Currency;
        break;
      }

      // optional string Currency = 10;
      case 10: {
        if (tag == 82) {
         parse_Currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currency");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_TotalWithVatExcluded;
        break;
      }

      // optional string TotalWithVatExcluded = 11;
      case 11: {
        if (tag == 90) {
         parse_TotalWithVatExcluded:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totalwithvatexcluded()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->totalwithvatexcluded().data(), this->totalwithvatexcluded().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "totalwithvatexcluded");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_Vat;
        break;
      }

      // optional string Vat = 12;
      case 12: {
        if (tag == 98) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Total;
        break;
      }

      // required string Total = 13;
      case 13: {
        if (tag == 106) {
         parse_Total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "total");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_AdditionalInfo;
        break;
      }

      // optional string AdditionalInfo = 14;
      case 14: {
        if (tag == 114) {
         parse_AdditionalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->additionalinfo().data(), this->additionalinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "additionalinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_InvoiceRevisionDate;
        break;
      }

      // optional string InvoiceRevisionDate = 15;
      case 15: {
        if (tag == 122) {
         parse_InvoiceRevisionDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invoicerevisiondate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invoicerevisiondate().data(), this->invoicerevisiondate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invoicerevisiondate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_InvoiceRevisionNumber;
        break;
      }

      // optional string InvoiceRevisionNumber = 16;
      case 16: {
        if (tag == 130) {
         parse_InvoiceRevisionNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invoicerevisionnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invoicerevisionnumber().data(), this->invoicerevisionnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invoicerevisionnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_AdditionalInfos;
        break;
      }

      // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 17;
      case 17: {
        if (tag == 138) {
         parse_AdditionalInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additionalinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_AdditionalInfos;
        if (input->ExpectTag(144)) goto parse_Version;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.InvoiceFormatVersion Version = 18 [default = DefaultInvoiceFormatVersion];
      case 18: {
        if (tag == 144) {
         parse_Version:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Invoicing::InvoiceFormatVersion_IsValid(value)) {
            set_version(static_cast< ::Diadoc::Api::Proto::Invoicing::InvoiceFormatVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.InvoiceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.InvoiceInfo)
  return false;
#undef DO_
}

void InvoiceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.InvoiceInfo)
  // required string InvoiceDate = 1;
  if (has_invoicedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicedate().data(), this->invoicedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicedate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->invoicedate(), output);
  }

  // required string InvoiceNumber = 2;
  if (has_invoicenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicenumber().data(), this->invoicenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicenumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->invoicenumber(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Seller = 3;
  if (has_seller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->seller(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Buyer = 4;
  if (has_buyer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buyer(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.ShipperOrConsignee Shipper = 5;
  if (has_shipper()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->shipper(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.ShipperOrConsignee Consignee = 6;
  if (has_consignee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->consignee(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 7;
  if (has_signer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->signer(), output);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo PaymentDocuments = 8;
  for (int i = 0; i < this->paymentdocuments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->paymentdocuments(i), output);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.InvoiceItem Items = 9;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->items(i), output);
  }

  // optional string Currency = 10;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->currency(), output);
  }

  // optional string TotalWithVatExcluded = 11;
  if (has_totalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totalwithvatexcluded().data(), this->totalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totalwithvatexcluded");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->totalwithvatexcluded(), output);
  }

  // optional string Vat = 12;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->vat(), output);
  }

  // required string Total = 13;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->total(), output);
  }

  // optional string AdditionalInfo = 14;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->additionalinfo(), output);
  }

  // optional string InvoiceRevisionDate = 15;
  if (has_invoicerevisiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicerevisiondate().data(), this->invoicerevisiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicerevisiondate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->invoicerevisiondate(), output);
  }

  // optional string InvoiceRevisionNumber = 16;
  if (has_invoicerevisionnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicerevisionnumber().data(), this->invoicerevisionnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicerevisionnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->invoicerevisionnumber(), output);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 17;
  for (int i = 0; i < this->additionalinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->additionalinfos(i), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.InvoiceFormatVersion Version = 18 [default = DefaultInvoiceFormatVersion];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.InvoiceInfo)
}

::google::protobuf::uint8* InvoiceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.InvoiceInfo)
  // required string InvoiceDate = 1;
  if (has_invoicedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicedate().data(), this->invoicedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicedate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->invoicedate(), target);
  }

  // required string InvoiceNumber = 2;
  if (has_invoicenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicenumber().data(), this->invoicenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicenumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invoicenumber(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Seller = 3;
  if (has_seller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->seller(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Buyer = 4;
  if (has_buyer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buyer(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.ShipperOrConsignee Shipper = 5;
  if (has_shipper()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->shipper(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.ShipperOrConsignee Consignee = 6;
  if (has_consignee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->consignee(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 7;
  if (has_signer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->signer(), target);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo PaymentDocuments = 8;
  for (int i = 0; i < this->paymentdocuments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->paymentdocuments(i), target);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.InvoiceItem Items = 9;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->items(i), target);
  }

  // optional string Currency = 10;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->currency(), target);
  }

  // optional string TotalWithVatExcluded = 11;
  if (has_totalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totalwithvatexcluded().data(), this->totalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totalwithvatexcluded");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->totalwithvatexcluded(), target);
  }

  // optional string Vat = 12;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->vat(), target);
  }

  // required string Total = 13;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->total(), target);
  }

  // optional string AdditionalInfo = 14;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->additionalinfo(), target);
  }

  // optional string InvoiceRevisionDate = 15;
  if (has_invoicerevisiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicerevisiondate().data(), this->invoicerevisiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicerevisiondate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->invoicerevisiondate(), target);
  }

  // optional string InvoiceRevisionNumber = 16;
  if (has_invoicerevisionnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicerevisionnumber().data(), this->invoicerevisionnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicerevisionnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->invoicerevisionnumber(), target);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 17;
  for (int i = 0; i < this->additionalinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->additionalinfos(i), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.InvoiceFormatVersion Version = 18 [default = DefaultInvoiceFormatVersion];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.InvoiceInfo)
  return target;
}

int InvoiceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InvoiceDate = 1;
    if (has_invoicedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invoicedate());
    }

    // required string InvoiceNumber = 2;
    if (has_invoicenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invoicenumber());
    }

    // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Seller = 3;
    if (has_seller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seller());
    }

    // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Buyer = 4;
    if (has_buyer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyer());
    }

    // optional .Diadoc.Api.Proto.Invoicing.ShipperOrConsignee Shipper = 5;
    if (has_shipper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shipper());
    }

    // optional .Diadoc.Api.Proto.Invoicing.ShipperOrConsignee Consignee = 6;
    if (has_consignee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->consignee());
    }

    // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 7;
    if (has_signer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signer());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string Currency = 10;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional string TotalWithVatExcluded = 11;
    if (has_totalwithvatexcluded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totalwithvatexcluded());
    }

    // optional string Vat = 12;
    if (has_vat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

    // required string Total = 13;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

    // optional string AdditionalInfo = 14;
    if (has_additionalinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalinfo());
    }

    // optional string InvoiceRevisionDate = 15;
    if (has_invoicerevisiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invoicerevisiondate());
    }

    // optional string InvoiceRevisionNumber = 16;
    if (has_invoicerevisionnumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invoicerevisionnumber());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .Diadoc.Api.Proto.Invoicing.InvoiceFormatVersion Version = 18 [default = DefaultInvoiceFormatVersion];
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->version());
    }

  }
  // repeated .Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo PaymentDocuments = 8;
  total_size += 1 * this->paymentdocuments_size();
  for (int i = 0; i < this->paymentdocuments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paymentdocuments(i));
  }

  // repeated .Diadoc.Api.Proto.Invoicing.InvoiceItem Items = 9;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 17;
  total_size += 2 * this->additionalinfos_size();
  for (int i = 0; i < this->additionalinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additionalinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvoiceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvoiceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvoiceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvoiceInfo::MergeFrom(const InvoiceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  paymentdocuments_.MergeFrom(from.paymentdocuments_);
  items_.MergeFrom(from.items_);
  additionalinfos_.MergeFrom(from.additionalinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invoicedate()) {
      set_invoicedate(from.invoicedate());
    }
    if (from.has_invoicenumber()) {
      set_invoicenumber(from.invoicenumber());
    }
    if (from.has_seller()) {
      mutable_seller()->::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo::MergeFrom(from.seller());
    }
    if (from.has_buyer()) {
      mutable_buyer()->::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo::MergeFrom(from.buyer());
    }
    if (from.has_shipper()) {
      mutable_shipper()->::Diadoc::Api::Proto::Invoicing::ShipperOrConsignee::MergeFrom(from.shipper());
    }
    if (from.has_consignee()) {
      mutable_consignee()->::Diadoc::Api::Proto::Invoicing::ShipperOrConsignee::MergeFrom(from.consignee());
    }
    if (from.has_signer()) {
      mutable_signer()->::Diadoc::Api::Proto::Invoicing::Signer::MergeFrom(from.signer());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_totalwithvatexcluded()) {
      set_totalwithvatexcluded(from.totalwithvatexcluded());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_additionalinfo()) {
      set_additionalinfo(from.additionalinfo());
    }
    if (from.has_invoicerevisiondate()) {
      set_invoicerevisiondate(from.invoicerevisiondate());
    }
    if (from.has_invoicerevisionnumber()) {
      set_invoicerevisionnumber(from.invoicerevisionnumber());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvoiceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvoiceInfo::CopyFrom(const InvoiceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000104f) != 0x0000104f) return false;

  if (has_seller()) {
    if (!this->seller().IsInitialized()) return false;
  }
  if (has_buyer()) {
    if (!this->buyer().IsInitialized()) return false;
  }
  if (has_shipper()) {
    if (!this->shipper().IsInitialized()) return false;
  }
  if (has_consignee()) {
    if (!this->consignee().IsInitialized()) return false;
  }
  if (has_signer()) {
    if (!this->signer().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->paymentdocuments())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->additionalinfos())) return false;
  return true;
}

void InvoiceInfo::Swap(InvoiceInfo* other) {
  if (other != this) {
    std::swap(invoicedate_, other->invoicedate_);
    std::swap(invoicenumber_, other->invoicenumber_);
    std::swap(seller_, other->seller_);
    std::swap(buyer_, other->buyer_);
    std::swap(shipper_, other->shipper_);
    std::swap(consignee_, other->consignee_);
    std::swap(signer_, other->signer_);
    paymentdocuments_.Swap(&other->paymentdocuments_);
    items_.Swap(&other->items_);
    std::swap(currency_, other->currency_);
    std::swap(totalwithvatexcluded_, other->totalwithvatexcluded_);
    std::swap(vat_, other->vat_);
    std::swap(total_, other->total_);
    std::swap(additionalinfo_, other->additionalinfo_);
    std::swap(invoicerevisiondate_, other->invoicerevisiondate_);
    std::swap(invoicerevisionnumber_, other->invoicerevisionnumber_);
    additionalinfos_.Swap(&other->additionalinfos_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvoiceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvoiceInfo_descriptor_;
  metadata.reflection = InvoiceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdditionalInfo::kIdFieldNumber;
const int AdditionalInfo::kValueFieldNumber;
#endif  // !_MSC_VER

AdditionalInfo::AdditionalInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.AdditionalInfo)
}

void AdditionalInfo::InitAsDefaultInstance() {
}

AdditionalInfo::AdditionalInfo(const AdditionalInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.AdditionalInfo)
}

void AdditionalInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdditionalInfo::~AdditionalInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.AdditionalInfo)
  SharedDtor();
}

void AdditionalInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void AdditionalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdditionalInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdditionalInfo_descriptor_;
}

const AdditionalInfo& AdditionalInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fInvoiceInfo_2eproto();
  return *default_instance_;
}

AdditionalInfo* AdditionalInfo::default_instance_ = NULL;

AdditionalInfo* AdditionalInfo::New() const {
  return new AdditionalInfo;
}

void AdditionalInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdditionalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.AdditionalInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // required string Value = 2;
      case 2: {
        if (tag == 18) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.AdditionalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.AdditionalInfo)
  return false;
#undef DO_
}

void AdditionalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.AdditionalInfo)
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.AdditionalInfo)
}

::google::protobuf::uint8* AdditionalInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.AdditionalInfo)
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.AdditionalInfo)
  return target;
}

int AdditionalInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdditionalInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdditionalInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdditionalInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdditionalInfo::MergeFrom(const AdditionalInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdditionalInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalInfo::CopyFrom(const AdditionalInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AdditionalInfo::Swap(AdditionalInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdditionalInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdditionalInfo_descriptor_;
  metadata.reflection = AdditionalInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvoiceItem::kProductFieldNumber;
const int InvoiceItem::kUnitFieldNumber;
const int InvoiceItem::kQuantityFieldNumber;
const int InvoiceItem::kPriceFieldNumber;
const int InvoiceItem::kCountriesOfOriginFieldNumber;
const int InvoiceItem::kCustomsDeclarationNumbersFieldNumber;
const int InvoiceItem::kExciseFieldNumber;
const int InvoiceItem::kTaxRateFieldNumber;
const int InvoiceItem::kSubtotalWithVatExcludedFieldNumber;
const int InvoiceItem::kVatFieldNumber;
const int InvoiceItem::kSubtotalFieldNumber;
const int InvoiceItem::kAdditionalInfoFieldNumber;
const int InvoiceItem::kCustomsDeclarationsFieldNumber;
const int InvoiceItem::kAdditionalInfosFieldNumber;
#endif  // !_MSC_VER

InvoiceItem::InvoiceItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.InvoiceItem)
}

void InvoiceItem::InitAsDefaultInstance() {
}

InvoiceItem::InvoiceItem(const InvoiceItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.InvoiceItem)
}

void InvoiceItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  product_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  excise_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taxrate_ = 0;
  subtotalwithvatexcluded_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvoiceItem::~InvoiceItem() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.InvoiceItem)
  SharedDtor();
}

void InvoiceItem::SharedDtor() {
  if (product_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete product_;
  }
  if (unit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unit_;
  }
  if (quantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quantity_;
  }
  if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete price_;
  }
  if (excise_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete excise_;
  }
  if (subtotalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtotalwithvatexcluded_;
  }
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (subtotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtotal_;
  }
  if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete additionalinfo_;
  }
  if (this != default_instance_) {
  }
}

void InvoiceItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvoiceItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvoiceItem_descriptor_;
}

const InvoiceItem& InvoiceItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fInvoiceInfo_2eproto();
  return *default_instance_;
}

InvoiceItem* InvoiceItem::default_instance_ = NULL;

InvoiceItem* InvoiceItem::New() const {
  return new InvoiceItem;
}

void InvoiceItem::Clear() {
  if (_has_bits_[0 / 32] & 207) {
    if (has_product()) {
      if (product_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        product_->clear();
      }
    }
    if (has_unit()) {
      if (unit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unit_->clear();
      }
    }
    if (has_quantity()) {
      if (quantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quantity_->clear();
      }
    }
    if (has_price()) {
      if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        price_->clear();
      }
    }
    if (has_excise()) {
      if (excise_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        excise_->clear();
      }
    }
    taxrate_ = 0;
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_subtotalwithvatexcluded()) {
      if (subtotalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtotalwithvatexcluded_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vat_->clear();
      }
    }
    if (has_subtotal()) {
      if (subtotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtotal_->clear();
      }
    }
    if (has_additionalinfo()) {
      if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        additionalinfo_->clear();
      }
    }
  }
  countriesoforigin_.Clear();
  customsdeclarationnumbers_.Clear();
  customsdeclarations_.Clear();
  additionalinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvoiceItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.InvoiceItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Product = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product().data(), this->product().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "product");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Unit;
        break;
      }

      // optional string Unit = 2;
      case 2: {
        if (tag == 18) {
         parse_Unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unit");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Quantity;
        break;
      }

      // optional string Quantity = 3;
      case 3: {
        if (tag == 26) {
         parse_Quantity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quantity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quantity().data(), this->quantity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quantity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Price;
        break;
      }

      // optional string Price = 4;
      case 4: {
        if (tag == 34) {
         parse_Price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->price().data(), this->price().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "price");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_CountriesOfOrigin;
        break;
      }

      // repeated string CountriesOfOrigin = 5;
      case 5: {
        if (tag == 42) {
         parse_CountriesOfOrigin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_countriesoforigin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->countriesoforigin(this->countriesoforigin_size() - 1).data(),
            this->countriesoforigin(this->countriesoforigin_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "countriesoforigin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_CountriesOfOrigin;
        if (input->ExpectTag(50)) goto parse_CustomsDeclarationNumbers;
        break;
      }

      // repeated string CustomsDeclarationNumbers = 6;
      case 6: {
        if (tag == 50) {
         parse_CustomsDeclarationNumbers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_customsdeclarationnumbers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customsdeclarationnumbers(this->customsdeclarationnumbers_size() - 1).data(),
            this->customsdeclarationnumbers(this->customsdeclarationnumbers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customsdeclarationnumbers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_CustomsDeclarationNumbers;
        if (input->ExpectTag(58)) goto parse_Excise;
        break;
      }

      // optional string Excise = 7;
      case 7: {
        if (tag == 58) {
         parse_Excise:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_excise()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->excise().data(), this->excise().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "excise");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_TaxRate;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.TaxRate TaxRate = 8;
      case 8: {
        if (tag == 64) {
         parse_TaxRate:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Invoicing::TaxRate_IsValid(value)) {
            set_taxrate(static_cast< ::Diadoc::Api::Proto::Invoicing::TaxRate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_SubtotalWithVatExcluded;
        break;
      }

      // optional string SubtotalWithVatExcluded = 9;
      case 9: {
        if (tag == 74) {
         parse_SubtotalWithVatExcluded:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtotalwithvatexcluded()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subtotalwithvatexcluded().data(), this->subtotalwithvatexcluded().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subtotalwithvatexcluded");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Vat;
        break;
      }

      // optional string Vat = 10;
      case 10: {
        if (tag == 82) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_Subtotal;
        break;
      }

      // required string Subtotal = 11;
      case 11: {
        if (tag == 90) {
         parse_Subtotal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtotal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subtotal().data(), this->subtotal().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subtotal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_AdditionalInfo;
        break;
      }

      // optional string AdditionalInfo = 12;
      case 12: {
        if (tag == 98) {
         parse_AdditionalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->additionalinfo().data(), this->additionalinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "additionalinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_CustomsDeclarations;
        break;
      }

      // repeated .Diadoc.Api.Proto.Invoicing.CustomsDeclaration CustomsDeclarations = 13;
      case 13: {
        if (tag == 106) {
         parse_CustomsDeclarations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customsdeclarations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_CustomsDeclarations;
        if (input->ExpectTag(114)) goto parse_AdditionalInfos;
        break;
      }

      // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 14;
      case 14: {
        if (tag == 114) {
         parse_AdditionalInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additionalinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_AdditionalInfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.InvoiceItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.InvoiceItem)
  return false;
#undef DO_
}

void InvoiceItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.InvoiceItem)
  // required string Product = 1;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product(), output);
  }

  // optional string Unit = 2;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->unit(), output);
  }

  // optional string Quantity = 3;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quantity().data(), this->quantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quantity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->quantity(), output);
  }

  // optional string Price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "price");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->price(), output);
  }

  // repeated string CountriesOfOrigin = 5;
  for (int i = 0; i < this->countriesoforigin_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->countriesoforigin(i).data(), this->countriesoforigin(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "countriesoforigin");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->countriesoforigin(i), output);
  }

  // repeated string CustomsDeclarationNumbers = 6;
  for (int i = 0; i < this->customsdeclarationnumbers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->customsdeclarationnumbers(i).data(), this->customsdeclarationnumbers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "customsdeclarationnumbers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->customsdeclarationnumbers(i), output);
  }

  // optional string Excise = 7;
  if (has_excise()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excise().data(), this->excise().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "excise");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->excise(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.TaxRate TaxRate = 8;
  if (has_taxrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->taxrate(), output);
  }

  // optional string SubtotalWithVatExcluded = 9;
  if (has_subtotalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotalwithvatexcluded().data(), this->subtotalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotalwithvatexcluded");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->subtotalwithvatexcluded(), output);
  }

  // optional string Vat = 10;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->vat(), output);
  }

  // required string Subtotal = 11;
  if (has_subtotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotal().data(), this->subtotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->subtotal(), output);
  }

  // optional string AdditionalInfo = 12;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->additionalinfo(), output);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.CustomsDeclaration CustomsDeclarations = 13;
  for (int i = 0; i < this->customsdeclarations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->customsdeclarations(i), output);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 14;
  for (int i = 0; i < this->additionalinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->additionalinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.InvoiceItem)
}

::google::protobuf::uint8* InvoiceItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.InvoiceItem)
  // required string Product = 1;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product(), target);
  }

  // optional string Unit = 2;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unit(), target);
  }

  // optional string Quantity = 3;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quantity().data(), this->quantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quantity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->quantity(), target);
  }

  // optional string Price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "price");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->price(), target);
  }

  // repeated string CountriesOfOrigin = 5;
  for (int i = 0; i < this->countriesoforigin_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countriesoforigin(i).data(), this->countriesoforigin(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countriesoforigin");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->countriesoforigin(i), target);
  }

  // repeated string CustomsDeclarationNumbers = 6;
  for (int i = 0; i < this->customsdeclarationnumbers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customsdeclarationnumbers(i).data(), this->customsdeclarationnumbers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customsdeclarationnumbers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->customsdeclarationnumbers(i), target);
  }

  // optional string Excise = 7;
  if (has_excise()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excise().data(), this->excise().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "excise");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->excise(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.TaxRate TaxRate = 8;
  if (has_taxrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->taxrate(), target);
  }

  // optional string SubtotalWithVatExcluded = 9;
  if (has_subtotalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotalwithvatexcluded().data(), this->subtotalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotalwithvatexcluded");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->subtotalwithvatexcluded(), target);
  }

  // optional string Vat = 10;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->vat(), target);
  }

  // required string Subtotal = 11;
  if (has_subtotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotal().data(), this->subtotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->subtotal(), target);
  }

  // optional string AdditionalInfo = 12;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->additionalinfo(), target);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.CustomsDeclaration CustomsDeclarations = 13;
  for (int i = 0; i < this->customsdeclarations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->customsdeclarations(i), target);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 14;
  for (int i = 0; i < this->additionalinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->additionalinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.InvoiceItem)
  return target;
}

int InvoiceItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Product = 1;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }

    // optional string Unit = 2;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit());
    }

    // optional string Quantity = 3;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quantity());
    }

    // optional string Price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price());
    }

    // optional string Excise = 7;
    if (has_excise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->excise());
    }

    // required .Diadoc.Api.Proto.Invoicing.TaxRate TaxRate = 8;
    if (has_taxrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->taxrate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string SubtotalWithVatExcluded = 9;
    if (has_subtotalwithvatexcluded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtotalwithvatexcluded());
    }

    // optional string Vat = 10;
    if (has_vat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

    // required string Subtotal = 11;
    if (has_subtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtotal());
    }

    // optional string AdditionalInfo = 12;
    if (has_additionalinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalinfo());
    }

  }
  // repeated string CountriesOfOrigin = 5;
  total_size += 1 * this->countriesoforigin_size();
  for (int i = 0; i < this->countriesoforigin_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->countriesoforigin(i));
  }

  // repeated string CustomsDeclarationNumbers = 6;
  total_size += 1 * this->customsdeclarationnumbers_size();
  for (int i = 0; i < this->customsdeclarationnumbers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->customsdeclarationnumbers(i));
  }

  // repeated .Diadoc.Api.Proto.Invoicing.CustomsDeclaration CustomsDeclarations = 13;
  total_size += 1 * this->customsdeclarations_size();
  for (int i = 0; i < this->customsdeclarations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customsdeclarations(i));
  }

  // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 14;
  total_size += 1 * this->additionalinfos_size();
  for (int i = 0; i < this->additionalinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additionalinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvoiceItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvoiceItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvoiceItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvoiceItem::MergeFrom(const InvoiceItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  countriesoforigin_.MergeFrom(from.countriesoforigin_);
  customsdeclarationnumbers_.MergeFrom(from.customsdeclarationnumbers_);
  customsdeclarations_.MergeFrom(from.customsdeclarations_);
  additionalinfos_.MergeFrom(from.additionalinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_product()) {
      set_product(from.product());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_excise()) {
      set_excise(from.excise());
    }
    if (from.has_taxrate()) {
      set_taxrate(from.taxrate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subtotalwithvatexcluded()) {
      set_subtotalwithvatexcluded(from.subtotalwithvatexcluded());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
    if (from.has_subtotal()) {
      set_subtotal(from.subtotal());
    }
    if (from.has_additionalinfo()) {
      set_additionalinfo(from.additionalinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvoiceItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvoiceItem::CopyFrom(const InvoiceItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000481) != 0x00000481) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->customsdeclarations())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->additionalinfos())) return false;
  return true;
}

void InvoiceItem::Swap(InvoiceItem* other) {
  if (other != this) {
    std::swap(product_, other->product_);
    std::swap(unit_, other->unit_);
    std::swap(quantity_, other->quantity_);
    std::swap(price_, other->price_);
    countriesoforigin_.Swap(&other->countriesoforigin_);
    customsdeclarationnumbers_.Swap(&other->customsdeclarationnumbers_);
    std::swap(excise_, other->excise_);
    std::swap(taxrate_, other->taxrate_);
    std::swap(subtotalwithvatexcluded_, other->subtotalwithvatexcluded_);
    std::swap(vat_, other->vat_);
    std::swap(subtotal_, other->subtotal_);
    std::swap(additionalinfo_, other->additionalinfo_);
    customsdeclarations_.Swap(&other->customsdeclarations_);
    additionalinfos_.Swap(&other->additionalinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvoiceItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvoiceItem_descriptor_;
  metadata.reflection = InvoiceItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CustomsDeclaration::kCountryCodeFieldNumber;
const int CustomsDeclaration::kDeclarationNumberFieldNumber;
#endif  // !_MSC_VER

CustomsDeclaration::CustomsDeclaration()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.CustomsDeclaration)
}

void CustomsDeclaration::InitAsDefaultInstance() {
}

CustomsDeclaration::CustomsDeclaration(const CustomsDeclaration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.CustomsDeclaration)
}

void CustomsDeclaration::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  countrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  declarationnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CustomsDeclaration::~CustomsDeclaration() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.CustomsDeclaration)
  SharedDtor();
}

void CustomsDeclaration::SharedDtor() {
  if (countrycode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete countrycode_;
  }
  if (declarationnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete declarationnumber_;
  }
  if (this != default_instance_) {
  }
}

void CustomsDeclaration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomsDeclaration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustomsDeclaration_descriptor_;
}

const CustomsDeclaration& CustomsDeclaration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fInvoiceInfo_2eproto();
  return *default_instance_;
}

CustomsDeclaration* CustomsDeclaration::default_instance_ = NULL;

CustomsDeclaration* CustomsDeclaration::New() const {
  return new CustomsDeclaration;
}

void CustomsDeclaration::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_countrycode()) {
      if (countrycode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        countrycode_->clear();
      }
    }
    if (has_declarationnumber()) {
      if (declarationnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        declarationnumber_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CustomsDeclaration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.CustomsDeclaration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string CountryCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countrycode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->countrycode().data(), this->countrycode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "countrycode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DeclarationNumber;
        break;
      }

      // required string DeclarationNumber = 2;
      case 2: {
        if (tag == 18) {
         parse_DeclarationNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declarationnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->declarationnumber().data(), this->declarationnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "declarationnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.CustomsDeclaration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.CustomsDeclaration)
  return false;
#undef DO_
}

void CustomsDeclaration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.CustomsDeclaration)
  // required string CountryCode = 1;
  if (has_countrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countrycode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->countrycode(), output);
  }

  // required string DeclarationNumber = 2;
  if (has_declarationnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->declarationnumber().data(), this->declarationnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "declarationnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->declarationnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.CustomsDeclaration)
}

::google::protobuf::uint8* CustomsDeclaration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.CustomsDeclaration)
  // required string CountryCode = 1;
  if (has_countrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countrycode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->countrycode(), target);
  }

  // required string DeclarationNumber = 2;
  if (has_declarationnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->declarationnumber().data(), this->declarationnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "declarationnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->declarationnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.CustomsDeclaration)
  return target;
}

int CustomsDeclaration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string CountryCode = 1;
    if (has_countrycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countrycode());
    }

    // required string DeclarationNumber = 2;
    if (has_declarationnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declarationnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomsDeclaration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CustomsDeclaration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CustomsDeclaration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CustomsDeclaration::MergeFrom(const CustomsDeclaration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countrycode()) {
      set_countrycode(from.countrycode());
    }
    if (from.has_declarationnumber()) {
      set_declarationnumber(from.declarationnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CustomsDeclaration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomsDeclaration::CopyFrom(const CustomsDeclaration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomsDeclaration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CustomsDeclaration::Swap(CustomsDeclaration* other) {
  if (other != this) {
    std::swap(countrycode_, other->countrycode_);
    std::swap(declarationnumber_, other->declarationnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CustomsDeclaration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CustomsDeclaration_descriptor_;
  metadata.reflection = CustomsDeclaration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PaymentDocumentInfo::kDocumentDateFieldNumber;
const int PaymentDocumentInfo::kDocumentNumberFieldNumber;
#endif  // !_MSC_VER

PaymentDocumentInfo::PaymentDocumentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo)
}

void PaymentDocumentInfo::InitAsDefaultInstance() {
}

PaymentDocumentInfo::PaymentDocumentInfo(const PaymentDocumentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo)
}

void PaymentDocumentInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PaymentDocumentInfo::~PaymentDocumentInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo)
  SharedDtor();
}

void PaymentDocumentInfo::SharedDtor() {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (this != default_instance_) {
  }
}

void PaymentDocumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaymentDocumentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PaymentDocumentInfo_descriptor_;
}

const PaymentDocumentInfo& PaymentDocumentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fInvoiceInfo_2eproto();
  return *default_instance_;
}

PaymentDocumentInfo* PaymentDocumentInfo::default_instance_ = NULL;

PaymentDocumentInfo* PaymentDocumentInfo::New() const {
  return new PaymentDocumentInfo;
}

void PaymentDocumentInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentnumber_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PaymentDocumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string DocumentDate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DocumentNumber;
        break;
      }

      // required string DocumentNumber = 2;
      case 2: {
        if (tag == 18) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo)
  return false;
#undef DO_
}

void PaymentDocumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo)
  // required string DocumentDate = 1;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->documentdate(), output);
  }

  // required string DocumentNumber = 2;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->documentnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo)
}

::google::protobuf::uint8* PaymentDocumentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo)
  // required string DocumentDate = 1;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->documentdate(), target);
  }

  // required string DocumentNumber = 2;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->documentnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.PaymentDocumentInfo)
  return target;
}

int PaymentDocumentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string DocumentDate = 1;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // required string DocumentNumber = 2;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaymentDocumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PaymentDocumentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PaymentDocumentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PaymentDocumentInfo::MergeFrom(const PaymentDocumentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PaymentDocumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaymentDocumentInfo::CopyFrom(const PaymentDocumentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentDocumentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PaymentDocumentInfo::Swap(PaymentDocumentInfo* other) {
  if (other != this) {
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PaymentDocumentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PaymentDocumentInfo_descriptor_;
  metadata.reflection = PaymentDocumentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipperOrConsignee::kSameAsSellerOrBuyerFieldNumber;
const int ShipperOrConsignee::kOrgInfoFieldNumber;
#endif  // !_MSC_VER

ShipperOrConsignee::ShipperOrConsignee()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.ShipperOrConsignee)
}

void ShipperOrConsignee::InitAsDefaultInstance() {
  orginfo_ = const_cast< ::Diadoc::Api::Proto::Invoicing::OrganizationInfo*>(&::Diadoc::Api::Proto::Invoicing::OrganizationInfo::default_instance());
}

ShipperOrConsignee::ShipperOrConsignee(const ShipperOrConsignee& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.ShipperOrConsignee)
}

void ShipperOrConsignee::SharedCtor() {
  _cached_size_ = 0;
  sameassellerorbuyer_ = false;
  orginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipperOrConsignee::~ShipperOrConsignee() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.ShipperOrConsignee)
  SharedDtor();
}

void ShipperOrConsignee::SharedDtor() {
  if (this != default_instance_) {
    delete orginfo_;
  }
}

void ShipperOrConsignee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipperOrConsignee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipperOrConsignee_descriptor_;
}

const ShipperOrConsignee& ShipperOrConsignee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fInvoiceInfo_2eproto();
  return *default_instance_;
}

ShipperOrConsignee* ShipperOrConsignee::default_instance_ = NULL;

ShipperOrConsignee* ShipperOrConsignee::New() const {
  return new ShipperOrConsignee;
}

void ShipperOrConsignee::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    sameassellerorbuyer_ = false;
    if (has_orginfo()) {
      if (orginfo_ != NULL) orginfo_->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipperOrConsignee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.ShipperOrConsignee)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool SameAsSellerOrBuyer = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sameassellerorbuyer_)));
          set_has_sameassellerorbuyer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_OrgInfo;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo OrgInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_OrgInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.ShipperOrConsignee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.ShipperOrConsignee)
  return false;
#undef DO_
}

void ShipperOrConsignee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.ShipperOrConsignee)
  // optional bool SameAsSellerOrBuyer = 1;
  if (has_sameassellerorbuyer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->sameassellerorbuyer(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo OrgInfo = 2;
  if (has_orginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->orginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.ShipperOrConsignee)
}

::google::protobuf::uint8* ShipperOrConsignee::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.ShipperOrConsignee)
  // optional bool SameAsSellerOrBuyer = 1;
  if (has_sameassellerorbuyer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->sameassellerorbuyer(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo OrgInfo = 2;
  if (has_orginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->orginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.ShipperOrConsignee)
  return target;
}

int ShipperOrConsignee::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool SameAsSellerOrBuyer = 1;
    if (has_sameassellerorbuyer()) {
      total_size += 1 + 1;
    }

    // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo OrgInfo = 2;
    if (has_orginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipperOrConsignee::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipperOrConsignee* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipperOrConsignee*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipperOrConsignee::MergeFrom(const ShipperOrConsignee& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sameassellerorbuyer()) {
      set_sameassellerorbuyer(from.sameassellerorbuyer());
    }
    if (from.has_orginfo()) {
      mutable_orginfo()->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::MergeFrom(from.orginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipperOrConsignee::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipperOrConsignee::CopyFrom(const ShipperOrConsignee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipperOrConsignee::IsInitialized() const {

  if (has_orginfo()) {
    if (!this->orginfo().IsInitialized()) return false;
  }
  return true;
}

void ShipperOrConsignee::Swap(ShipperOrConsignee* other) {
  if (other != this) {
    std::swap(sameassellerorbuyer_, other->sameassellerorbuyer_);
    std::swap(orginfo_, other->orginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipperOrConsignee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipperOrConsignee_descriptor_;
  metadata.reflection = ShipperOrConsignee_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvoiceCorrectionInfo::kInvoiceDateFieldNumber;
const int InvoiceCorrectionInfo::kInvoiceNumberFieldNumber;
const int InvoiceCorrectionInfo::kInvoiceRevisionDateFieldNumber;
const int InvoiceCorrectionInfo::kInvoiceRevisionNumberFieldNumber;
const int InvoiceCorrectionInfo::kInvoiceCorrectionDateFieldNumber;
const int InvoiceCorrectionInfo::kInvoiceCorrectionNumberFieldNumber;
const int InvoiceCorrectionInfo::kInvoiceCorrectionRevisionDateFieldNumber;
const int InvoiceCorrectionInfo::kInvoiceCorrectionRevisionNumberFieldNumber;
const int InvoiceCorrectionInfo::kSellerFieldNumber;
const int InvoiceCorrectionInfo::kBuyerFieldNumber;
const int InvoiceCorrectionInfo::kSignerFieldNumber;
const int InvoiceCorrectionInfo::kItemsFieldNumber;
const int InvoiceCorrectionInfo::kCurrencyFieldNumber;
const int InvoiceCorrectionInfo::kTotalsIncFieldNumber;
const int InvoiceCorrectionInfo::kTotalsDecFieldNumber;
const int InvoiceCorrectionInfo::kAdditionalInfoFieldNumber;
const int InvoiceCorrectionInfo::kAdditionalInfosFieldNumber;
const int InvoiceCorrectionInfo::kVersionFieldNumber;
#endif  // !_MSC_VER

InvoiceCorrectionInfo::InvoiceCorrectionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionInfo)
}

void InvoiceCorrectionInfo::InitAsDefaultInstance() {
  seller_ = const_cast< ::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo*>(&::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo::default_instance());
  buyer_ = const_cast< ::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo*>(&::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo::default_instance());
  signer_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Signer*>(&::Diadoc::Api::Proto::Invoicing::Signer::default_instance());
  totalsinc_ = const_cast< ::Diadoc::Api::Proto::Invoicing::InvoiceTotalsDiff*>(&::Diadoc::Api::Proto::Invoicing::InvoiceTotalsDiff::default_instance());
  totalsdec_ = const_cast< ::Diadoc::Api::Proto::Invoicing::InvoiceTotalsDiff*>(&::Diadoc::Api::Proto::Invoicing::InvoiceTotalsDiff::default_instance());
}

InvoiceCorrectionInfo::InvoiceCorrectionInfo(const InvoiceCorrectionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionInfo)
}

void InvoiceCorrectionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invoicedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invoicenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invoicerevisiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invoicerevisionnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invoicecorrectiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invoicecorrectionnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invoicecorrectionrevisiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invoicecorrectionrevisionnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seller_ = NULL;
  buyer_ = NULL;
  signer_ = NULL;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totalsinc_ = NULL;
  totalsdec_ = NULL;
  additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvoiceCorrectionInfo::~InvoiceCorrectionInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionInfo)
  SharedDtor();
}

void InvoiceCorrectionInfo::SharedDtor() {
  if (invoicedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoicedate_;
  }
  if (invoicenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoicenumber_;
  }
  if (invoicerevisiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoicerevisiondate_;
  }
  if (invoicerevisionnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoicerevisionnumber_;
  }
  if (invoicecorrectiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoicecorrectiondate_;
  }
  if (invoicecorrectionnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoicecorrectionnumber_;
  }
  if (invoicecorrectionrevisiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoicecorrectionrevisiondate_;
  }
  if (invoicecorrectionrevisionnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invoicecorrectionrevisionnumber_;
  }
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currency_;
  }
  if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete additionalinfo_;
  }
  if (this != default_instance_) {
    delete seller_;
    delete buyer_;
    delete signer_;
    delete totalsinc_;
    delete totalsdec_;
  }
}

void InvoiceCorrectionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvoiceCorrectionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvoiceCorrectionInfo_descriptor_;
}

const InvoiceCorrectionInfo& InvoiceCorrectionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fInvoiceInfo_2eproto();
  return *default_instance_;
}

InvoiceCorrectionInfo* InvoiceCorrectionInfo::default_instance_ = NULL;

InvoiceCorrectionInfo* InvoiceCorrectionInfo::New() const {
  return new InvoiceCorrectionInfo;
}

void InvoiceCorrectionInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_invoicedate()) {
      if (invoicedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invoicedate_->clear();
      }
    }
    if (has_invoicenumber()) {
      if (invoicenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invoicenumber_->clear();
      }
    }
    if (has_invoicerevisiondate()) {
      if (invoicerevisiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invoicerevisiondate_->clear();
      }
    }
    if (has_invoicerevisionnumber()) {
      if (invoicerevisionnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invoicerevisionnumber_->clear();
      }
    }
    if (has_invoicecorrectiondate()) {
      if (invoicecorrectiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invoicecorrectiondate_->clear();
      }
    }
    if (has_invoicecorrectionnumber()) {
      if (invoicecorrectionnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invoicecorrectionnumber_->clear();
      }
    }
    if (has_invoicecorrectionrevisiondate()) {
      if (invoicecorrectionrevisiondate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invoicecorrectionrevisiondate_->clear();
      }
    }
    if (has_invoicecorrectionrevisionnumber()) {
      if (invoicecorrectionrevisionnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invoicecorrectionrevisionnumber_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 63232) {
    if (has_seller()) {
      if (seller_ != NULL) seller_->::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo::Clear();
    }
    if (has_buyer()) {
      if (buyer_ != NULL) buyer_->::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo::Clear();
    }
    if (has_signer()) {
      if (signer_ != NULL) signer_->::Diadoc::Api::Proto::Invoicing::Signer::Clear();
    }
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currency_->clear();
      }
    }
    if (has_totalsinc()) {
      if (totalsinc_ != NULL) totalsinc_->::Diadoc::Api::Proto::Invoicing::InvoiceTotalsDiff::Clear();
    }
    if (has_totalsdec()) {
      if (totalsdec_ != NULL) totalsdec_->::Diadoc::Api::Proto::Invoicing::InvoiceTotalsDiff::Clear();
    }
    if (has_additionalinfo()) {
      if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        additionalinfo_->clear();
      }
    }
  }
  version_ = 0;
  items_.Clear();
  additionalinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvoiceCorrectionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InvoiceDate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invoicedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invoicedate().data(), this->invoicedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invoicedate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_InvoiceNumber;
        break;
      }

      // required string InvoiceNumber = 2;
      case 2: {
        if (tag == 18) {
         parse_InvoiceNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invoicenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invoicenumber().data(), this->invoicenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invoicenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InvoiceRevisionDate;
        break;
      }

      // optional string InvoiceRevisionDate = 3;
      case 3: {
        if (tag == 26) {
         parse_InvoiceRevisionDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invoicerevisiondate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invoicerevisiondate().data(), this->invoicerevisiondate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invoicerevisiondate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InvoiceRevisionNumber;
        break;
      }

      // optional string InvoiceRevisionNumber = 4;
      case 4: {
        if (tag == 34) {
         parse_InvoiceRevisionNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invoicerevisionnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invoicerevisionnumber().data(), this->invoicerevisionnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invoicerevisionnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_InvoiceCorrectionDate;
        break;
      }

      // required string InvoiceCorrectionDate = 5;
      case 5: {
        if (tag == 42) {
         parse_InvoiceCorrectionDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invoicecorrectiondate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invoicecorrectiondate().data(), this->invoicecorrectiondate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invoicecorrectiondate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_InvoiceCorrectionNumber;
        break;
      }

      // required string InvoiceCorrectionNumber = 6;
      case 6: {
        if (tag == 50) {
         parse_InvoiceCorrectionNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invoicecorrectionnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invoicecorrectionnumber().data(), this->invoicecorrectionnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invoicecorrectionnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_InvoiceCorrectionRevisionDate;
        break;
      }

      // optional string InvoiceCorrectionRevisionDate = 7;
      case 7: {
        if (tag == 58) {
         parse_InvoiceCorrectionRevisionDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invoicecorrectionrevisiondate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invoicecorrectionrevisiondate().data(), this->invoicecorrectionrevisiondate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invoicecorrectionrevisiondate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_InvoiceCorrectionRevisionNumber;
        break;
      }

      // optional string InvoiceCorrectionRevisionNumber = 8;
      case 8: {
        if (tag == 66) {
         parse_InvoiceCorrectionRevisionNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invoicecorrectionrevisionnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invoicecorrectionrevisionnumber().data(), this->invoicecorrectionrevisionnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invoicecorrectionrevisionnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Seller;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Seller = 9;
      case 9: {
        if (tag == 74) {
         parse_Seller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seller()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Buyer;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Buyer = 10;
      case 10: {
        if (tag == 82) {
         parse_Buyer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_Signer;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 11;
      case 11: {
        if (tag == 90) {
         parse_Signer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_Items;
        break;
      }

      // repeated .Diadoc.Api.Proto.Invoicing.InvoiceCorrectionItem Items = 12;
      case 12: {
        if (tag == 98) {
         parse_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_Items;
        if (input->ExpectTag(106)) goto parse_Currency;
        break;
      }

      // optional string Currency = 13;
      case 13: {
        if (tag == 106) {
         parse_Currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currency");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_TotalsInc;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff TotalsInc = 14;
      case 14: {
        if (tag == 114) {
         parse_TotalsInc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_totalsinc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_TotalsDec;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff TotalsDec = 15;
      case 15: {
        if (tag == 122) {
         parse_TotalsDec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_totalsdec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_AdditionalInfo;
        break;
      }

      // optional string AdditionalInfo = 16;
      case 16: {
        if (tag == 130) {
         parse_AdditionalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->additionalinfo().data(), this->additionalinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "additionalinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_AdditionalInfos;
        break;
      }

      // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 17;
      case 17: {
        if (tag == 138) {
         parse_AdditionalInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additionalinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_AdditionalInfos;
        if (input->ExpectTag(144)) goto parse_Version;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.InvoiceFormatVersion Version = 18 [default = DefaultInvoiceFormatVersion];
      case 18: {
        if (tag == 144) {
         parse_Version:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Invoicing::InvoiceFormatVersion_IsValid(value)) {
            set_version(static_cast< ::Diadoc::Api::Proto::Invoicing::InvoiceFormatVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionInfo)
  return false;
#undef DO_
}

void InvoiceCorrectionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionInfo)
  // required string InvoiceDate = 1;
  if (has_invoicedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicedate().data(), this->invoicedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicedate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->invoicedate(), output);
  }

  // required string InvoiceNumber = 2;
  if (has_invoicenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicenumber().data(), this->invoicenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicenumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->invoicenumber(), output);
  }

  // optional string InvoiceRevisionDate = 3;
  if (has_invoicerevisiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicerevisiondate().data(), this->invoicerevisiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicerevisiondate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->invoicerevisiondate(), output);
  }

  // optional string InvoiceRevisionNumber = 4;
  if (has_invoicerevisionnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicerevisionnumber().data(), this->invoicerevisionnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicerevisionnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->invoicerevisionnumber(), output);
  }

  // required string InvoiceCorrectionDate = 5;
  if (has_invoicecorrectiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicecorrectiondate().data(), this->invoicecorrectiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicecorrectiondate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->invoicecorrectiondate(), output);
  }

  // required string InvoiceCorrectionNumber = 6;
  if (has_invoicecorrectionnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicecorrectionnumber().data(), this->invoicecorrectionnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicecorrectionnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->invoicecorrectionnumber(), output);
  }

  // optional string InvoiceCorrectionRevisionDate = 7;
  if (has_invoicecorrectionrevisiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicecorrectionrevisiondate().data(), this->invoicecorrectionrevisiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicecorrectionrevisiondate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->invoicecorrectionrevisiondate(), output);
  }

  // optional string InvoiceCorrectionRevisionNumber = 8;
  if (has_invoicecorrectionrevisionnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicecorrectionrevisionnumber().data(), this->invoicecorrectionrevisionnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicecorrectionrevisionnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->invoicecorrectionrevisionnumber(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Seller = 9;
  if (has_seller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->seller(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Buyer = 10;
  if (has_buyer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->buyer(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 11;
  if (has_signer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->signer(), output);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.InvoiceCorrectionItem Items = 12;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->items(i), output);
  }

  // optional string Currency = 13;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->currency(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff TotalsInc = 14;
  if (has_totalsinc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->totalsinc(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff TotalsDec = 15;
  if (has_totalsdec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->totalsdec(), output);
  }

  // optional string AdditionalInfo = 16;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->additionalinfo(), output);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 17;
  for (int i = 0; i < this->additionalinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->additionalinfos(i), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.InvoiceFormatVersion Version = 18 [default = DefaultInvoiceFormatVersion];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionInfo)
}

::google::protobuf::uint8* InvoiceCorrectionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionInfo)
  // required string InvoiceDate = 1;
  if (has_invoicedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicedate().data(), this->invoicedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicedate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->invoicedate(), target);
  }

  // required string InvoiceNumber = 2;
  if (has_invoicenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicenumber().data(), this->invoicenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicenumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invoicenumber(), target);
  }

  // optional string InvoiceRevisionDate = 3;
  if (has_invoicerevisiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicerevisiondate().data(), this->invoicerevisiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicerevisiondate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->invoicerevisiondate(), target);
  }

  // optional string InvoiceRevisionNumber = 4;
  if (has_invoicerevisionnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicerevisionnumber().data(), this->invoicerevisionnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicerevisionnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->invoicerevisionnumber(), target);
  }

  // required string InvoiceCorrectionDate = 5;
  if (has_invoicecorrectiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicecorrectiondate().data(), this->invoicecorrectiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicecorrectiondate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->invoicecorrectiondate(), target);
  }

  // required string InvoiceCorrectionNumber = 6;
  if (has_invoicecorrectionnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicecorrectionnumber().data(), this->invoicecorrectionnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicecorrectionnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->invoicecorrectionnumber(), target);
  }

  // optional string InvoiceCorrectionRevisionDate = 7;
  if (has_invoicecorrectionrevisiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicecorrectionrevisiondate().data(), this->invoicecorrectionrevisiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicecorrectionrevisiondate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->invoicecorrectionrevisiondate(), target);
  }

  // optional string InvoiceCorrectionRevisionNumber = 8;
  if (has_invoicecorrectionrevisionnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invoicecorrectionrevisionnumber().data(), this->invoicecorrectionrevisionnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invoicecorrectionrevisionnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->invoicecorrectionrevisionnumber(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Seller = 9;
  if (has_seller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->seller(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Buyer = 10;
  if (has_buyer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->buyer(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 11;
  if (has_signer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->signer(), target);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.InvoiceCorrectionItem Items = 12;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->items(i), target);
  }

  // optional string Currency = 13;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->currency(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff TotalsInc = 14;
  if (has_totalsinc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->totalsinc(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff TotalsDec = 15;
  if (has_totalsdec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->totalsdec(), target);
  }

  // optional string AdditionalInfo = 16;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->additionalinfo(), target);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 17;
  for (int i = 0; i < this->additionalinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->additionalinfos(i), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.InvoiceFormatVersion Version = 18 [default = DefaultInvoiceFormatVersion];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionInfo)
  return target;
}

int InvoiceCorrectionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InvoiceDate = 1;
    if (has_invoicedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invoicedate());
    }

    // required string InvoiceNumber = 2;
    if (has_invoicenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invoicenumber());
    }

    // optional string InvoiceRevisionDate = 3;
    if (has_invoicerevisiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invoicerevisiondate());
    }

    // optional string InvoiceRevisionNumber = 4;
    if (has_invoicerevisionnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invoicerevisionnumber());
    }

    // required string InvoiceCorrectionDate = 5;
    if (has_invoicecorrectiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invoicecorrectiondate());
    }

    // required string InvoiceCorrectionNumber = 6;
    if (has_invoicecorrectionnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invoicecorrectionnumber());
    }

    // optional string InvoiceCorrectionRevisionDate = 7;
    if (has_invoicecorrectionrevisiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invoicecorrectionrevisiondate());
    }

    // optional string InvoiceCorrectionRevisionNumber = 8;
    if (has_invoicecorrectionrevisionnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invoicecorrectionrevisionnumber());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Seller = 9;
    if (has_seller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seller());
    }

    // required .Diadoc.Api.Proto.Invoicing.DiadocOrganizationInfo Buyer = 10;
    if (has_buyer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyer());
    }

    // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 11;
    if (has_signer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signer());
    }

    // optional string Currency = 13;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional .Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff TotalsInc = 14;
    if (has_totalsinc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->totalsinc());
    }

    // optional .Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff TotalsDec = 15;
    if (has_totalsdec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->totalsdec());
    }

    // optional string AdditionalInfo = 16;
    if (has_additionalinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalinfo());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .Diadoc.Api.Proto.Invoicing.InvoiceFormatVersion Version = 18 [default = DefaultInvoiceFormatVersion];
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->version());
    }

  }
  // repeated .Diadoc.Api.Proto.Invoicing.InvoiceCorrectionItem Items = 12;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 17;
  total_size += 2 * this->additionalinfos_size();
  for (int i = 0; i < this->additionalinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additionalinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvoiceCorrectionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvoiceCorrectionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvoiceCorrectionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvoiceCorrectionInfo::MergeFrom(const InvoiceCorrectionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  additionalinfos_.MergeFrom(from.additionalinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invoicedate()) {
      set_invoicedate(from.invoicedate());
    }
    if (from.has_invoicenumber()) {
      set_invoicenumber(from.invoicenumber());
    }
    if (from.has_invoicerevisiondate()) {
      set_invoicerevisiondate(from.invoicerevisiondate());
    }
    if (from.has_invoicerevisionnumber()) {
      set_invoicerevisionnumber(from.invoicerevisionnumber());
    }
    if (from.has_invoicecorrectiondate()) {
      set_invoicecorrectiondate(from.invoicecorrectiondate());
    }
    if (from.has_invoicecorrectionnumber()) {
      set_invoicecorrectionnumber(from.invoicecorrectionnumber());
    }
    if (from.has_invoicecorrectionrevisiondate()) {
      set_invoicecorrectionrevisiondate(from.invoicecorrectionrevisiondate());
    }
    if (from.has_invoicecorrectionrevisionnumber()) {
      set_invoicecorrectionrevisionnumber(from.invoicecorrectionrevisionnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_seller()) {
      mutable_seller()->::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo::MergeFrom(from.seller());
    }
    if (from.has_buyer()) {
      mutable_buyer()->::Diadoc::Api::Proto::Invoicing::DiadocOrganizationInfo::MergeFrom(from.buyer());
    }
    if (from.has_signer()) {
      mutable_signer()->::Diadoc::Api::Proto::Invoicing::Signer::MergeFrom(from.signer());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_totalsinc()) {
      mutable_totalsinc()->::Diadoc::Api::Proto::Invoicing::InvoiceTotalsDiff::MergeFrom(from.totalsinc());
    }
    if (from.has_totalsdec()) {
      mutable_totalsdec()->::Diadoc::Api::Proto::Invoicing::InvoiceTotalsDiff::MergeFrom(from.totalsdec());
    }
    if (from.has_additionalinfo()) {
      set_additionalinfo(from.additionalinfo());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvoiceCorrectionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvoiceCorrectionInfo::CopyFrom(const InvoiceCorrectionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceCorrectionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000733) != 0x00000733) return false;

  if (has_seller()) {
    if (!this->seller().IsInitialized()) return false;
  }
  if (has_buyer()) {
    if (!this->buyer().IsInitialized()) return false;
  }
  if (has_signer()) {
    if (!this->signer().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  if (has_totalsinc()) {
    if (!this->totalsinc().IsInitialized()) return false;
  }
  if (has_totalsdec()) {
    if (!this->totalsdec().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->additionalinfos())) return false;
  return true;
}

void InvoiceCorrectionInfo::Swap(InvoiceCorrectionInfo* other) {
  if (other != this) {
    std::swap(invoicedate_, other->invoicedate_);
    std::swap(invoicenumber_, other->invoicenumber_);
    std::swap(invoicerevisiondate_, other->invoicerevisiondate_);
    std::swap(invoicerevisionnumber_, other->invoicerevisionnumber_);
    std::swap(invoicecorrectiondate_, other->invoicecorrectiondate_);
    std::swap(invoicecorrectionnumber_, other->invoicecorrectionnumber_);
    std::swap(invoicecorrectionrevisiondate_, other->invoicecorrectionrevisiondate_);
    std::swap(invoicecorrectionrevisionnumber_, other->invoicecorrectionrevisionnumber_);
    std::swap(seller_, other->seller_);
    std::swap(buyer_, other->buyer_);
    std::swap(signer_, other->signer_);
    items_.Swap(&other->items_);
    std::swap(currency_, other->currency_);
    std::swap(totalsinc_, other->totalsinc_);
    std::swap(totalsdec_, other->totalsdec_);
    std::swap(additionalinfo_, other->additionalinfo_);
    additionalinfos_.Swap(&other->additionalinfos_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvoiceCorrectionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvoiceCorrectionInfo_descriptor_;
  metadata.reflection = InvoiceCorrectionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvoiceTotalsDiff::kTotalWithVatExcludedFieldNumber;
const int InvoiceTotalsDiff::kVatFieldNumber;
const int InvoiceTotalsDiff::kTotalFieldNumber;
#endif  // !_MSC_VER

InvoiceTotalsDiff::InvoiceTotalsDiff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff)
}

void InvoiceTotalsDiff::InitAsDefaultInstance() {
}

InvoiceTotalsDiff::InvoiceTotalsDiff(const InvoiceTotalsDiff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff)
}

void InvoiceTotalsDiff::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  totalwithvatexcluded_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvoiceTotalsDiff::~InvoiceTotalsDiff() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff)
  SharedDtor();
}

void InvoiceTotalsDiff::SharedDtor() {
  if (totalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete totalwithvatexcluded_;
  }
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (this != default_instance_) {
  }
}

void InvoiceTotalsDiff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvoiceTotalsDiff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvoiceTotalsDiff_descriptor_;
}

const InvoiceTotalsDiff& InvoiceTotalsDiff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fInvoiceInfo_2eproto();
  return *default_instance_;
}

InvoiceTotalsDiff* InvoiceTotalsDiff::default_instance_ = NULL;

InvoiceTotalsDiff* InvoiceTotalsDiff::New() const {
  return new InvoiceTotalsDiff;
}

void InvoiceTotalsDiff::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_totalwithvatexcluded()) {
      if (totalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        totalwithvatexcluded_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vat_->clear();
      }
    }
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        total_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvoiceTotalsDiff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TotalWithVatExcluded = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totalwithvatexcluded()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->totalwithvatexcluded().data(), this->totalwithvatexcluded().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "totalwithvatexcluded");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Vat;
        break;
      }

      // optional string Vat = 2;
      case 2: {
        if (tag == 18) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Total;
        break;
      }

      // required string Total = 3;
      case 3: {
        if (tag == 26) {
         parse_Total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "total");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff)
  return false;
#undef DO_
}

void InvoiceTotalsDiff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff)
  // optional string TotalWithVatExcluded = 1;
  if (has_totalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totalwithvatexcluded().data(), this->totalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totalwithvatexcluded");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->totalwithvatexcluded(), output);
  }

  // optional string Vat = 2;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vat(), output);
  }

  // required string Total = 3;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff)
}

::google::protobuf::uint8* InvoiceTotalsDiff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff)
  // optional string TotalWithVatExcluded = 1;
  if (has_totalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totalwithvatexcluded().data(), this->totalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totalwithvatexcluded");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->totalwithvatexcluded(), target);
  }

  // optional string Vat = 2;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vat(), target);
  }

  // required string Total = 3;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.InvoiceTotalsDiff)
  return target;
}

int InvoiceTotalsDiff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string TotalWithVatExcluded = 1;
    if (has_totalwithvatexcluded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totalwithvatexcluded());
    }

    // optional string Vat = 2;
    if (has_vat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

    // required string Total = 3;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvoiceTotalsDiff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvoiceTotalsDiff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvoiceTotalsDiff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvoiceTotalsDiff::MergeFrom(const InvoiceTotalsDiff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalwithvatexcluded()) {
      set_totalwithvatexcluded(from.totalwithvatexcluded());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvoiceTotalsDiff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvoiceTotalsDiff::CopyFrom(const InvoiceTotalsDiff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceTotalsDiff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void InvoiceTotalsDiff::Swap(InvoiceTotalsDiff* other) {
  if (other != this) {
    std::swap(totalwithvatexcluded_, other->totalwithvatexcluded_);
    std::swap(vat_, other->vat_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvoiceTotalsDiff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvoiceTotalsDiff_descriptor_;
  metadata.reflection = InvoiceTotalsDiff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvoiceCorrectionItem::kProductFieldNumber;
const int InvoiceCorrectionItem::kOriginalValuesFieldNumber;
const int InvoiceCorrectionItem::kCorrectedValuesFieldNumber;
const int InvoiceCorrectionItem::kAmountsIncFieldNumber;
const int InvoiceCorrectionItem::kAmountsDecFieldNumber;
const int InvoiceCorrectionItem::kAdditionalInfoFieldNumber;
const int InvoiceCorrectionItem::kAdditionalInfosFieldNumber;
#endif  // !_MSC_VER

InvoiceCorrectionItem::InvoiceCorrectionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionItem)
}

void InvoiceCorrectionItem::InitAsDefaultInstance() {
  originalvalues_ = const_cast< ::Diadoc::Api::Proto::Invoicing::CorrectableInvoiceItemFields*>(&::Diadoc::Api::Proto::Invoicing::CorrectableInvoiceItemFields::default_instance());
  correctedvalues_ = const_cast< ::Diadoc::Api::Proto::Invoicing::CorrectableInvoiceItemFields*>(&::Diadoc::Api::Proto::Invoicing::CorrectableInvoiceItemFields::default_instance());
  amountsinc_ = const_cast< ::Diadoc::Api::Proto::Invoicing::InvoiceItemAmountsDiff*>(&::Diadoc::Api::Proto::Invoicing::InvoiceItemAmountsDiff::default_instance());
  amountsdec_ = const_cast< ::Diadoc::Api::Proto::Invoicing::InvoiceItemAmountsDiff*>(&::Diadoc::Api::Proto::Invoicing::InvoiceItemAmountsDiff::default_instance());
}

InvoiceCorrectionItem::InvoiceCorrectionItem(const InvoiceCorrectionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionItem)
}

void InvoiceCorrectionItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  product_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  originalvalues_ = NULL;
  correctedvalues_ = NULL;
  amountsinc_ = NULL;
  amountsdec_ = NULL;
  additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvoiceCorrectionItem::~InvoiceCorrectionItem() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionItem)
  SharedDtor();
}

void InvoiceCorrectionItem::SharedDtor() {
  if (product_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete product_;
  }
  if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete additionalinfo_;
  }
  if (this != default_instance_) {
    delete originalvalues_;
    delete correctedvalues_;
    delete amountsinc_;
    delete amountsdec_;
  }
}

void InvoiceCorrectionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvoiceCorrectionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvoiceCorrectionItem_descriptor_;
}

const InvoiceCorrectionItem& InvoiceCorrectionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fInvoiceInfo_2eproto();
  return *default_instance_;
}

InvoiceCorrectionItem* InvoiceCorrectionItem::default_instance_ = NULL;

InvoiceCorrectionItem* InvoiceCorrectionItem::New() const {
  return new InvoiceCorrectionItem;
}

void InvoiceCorrectionItem::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_product()) {
      if (product_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        product_->clear();
      }
    }
    if (has_originalvalues()) {
      if (originalvalues_ != NULL) originalvalues_->::Diadoc::Api::Proto::Invoicing::CorrectableInvoiceItemFields::Clear();
    }
    if (has_correctedvalues()) {
      if (correctedvalues_ != NULL) correctedvalues_->::Diadoc::Api::Proto::Invoicing::CorrectableInvoiceItemFields::Clear();
    }
    if (has_amountsinc()) {
      if (amountsinc_ != NULL) amountsinc_->::Diadoc::Api::Proto::Invoicing::InvoiceItemAmountsDiff::Clear();
    }
    if (has_amountsdec()) {
      if (amountsdec_ != NULL) amountsdec_->::Diadoc::Api::Proto::Invoicing::InvoiceItemAmountsDiff::Clear();
    }
    if (has_additionalinfo()) {
      if (additionalinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        additionalinfo_->clear();
      }
    }
  }
  additionalinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvoiceCorrectionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Product = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product().data(), this->product().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "product");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_OriginalValues;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields OriginalValues = 2;
      case 2: {
        if (tag == 18) {
         parse_OriginalValues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originalvalues()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_CorrectedValues;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields CorrectedValues = 3;
      case 3: {
        if (tag == 26) {
         parse_CorrectedValues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_correctedvalues()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AmountsInc;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff AmountsInc = 4;
      case 4: {
        if (tag == 34) {
         parse_AmountsInc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_amountsinc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_AmountsDec;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff AmountsDec = 5;
      case 5: {
        if (tag == 42) {
         parse_AmountsDec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_amountsdec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_AdditionalInfo;
        break;
      }

      // optional string AdditionalInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_AdditionalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->additionalinfo().data(), this->additionalinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "additionalinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_AdditionalInfos;
        break;
      }

      // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 7;
      case 7: {
        if (tag == 58) {
         parse_AdditionalInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additionalinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_AdditionalInfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionItem)
  return false;
#undef DO_
}

void InvoiceCorrectionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionItem)
  // required string Product = 1;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields OriginalValues = 2;
  if (has_originalvalues()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->originalvalues(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields CorrectedValues = 3;
  if (has_correctedvalues()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->correctedvalues(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff AmountsInc = 4;
  if (has_amountsinc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->amountsinc(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff AmountsDec = 5;
  if (has_amountsdec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->amountsdec(), output);
  }

  // optional string AdditionalInfo = 6;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->additionalinfo(), output);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 7;
  for (int i = 0; i < this->additionalinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->additionalinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionItem)
}

::google::protobuf::uint8* InvoiceCorrectionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionItem)
  // required string Product = 1;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields OriginalValues = 2;
  if (has_originalvalues()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->originalvalues(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields CorrectedValues = 3;
  if (has_correctedvalues()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->correctedvalues(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff AmountsInc = 4;
  if (has_amountsinc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->amountsinc(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff AmountsDec = 5;
  if (has_amountsdec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->amountsdec(), target);
  }

  // optional string AdditionalInfo = 6;
  if (has_additionalinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "additionalinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->additionalinfo(), target);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 7;
  for (int i = 0; i < this->additionalinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->additionalinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.InvoiceCorrectionItem)
  return target;
}

int InvoiceCorrectionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Product = 1;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }

    // required .Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields OriginalValues = 2;
    if (has_originalvalues()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originalvalues());
    }

    // required .Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields CorrectedValues = 3;
    if (has_correctedvalues()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->correctedvalues());
    }

    // optional .Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff AmountsInc = 4;
    if (has_amountsinc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->amountsinc());
    }

    // optional .Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff AmountsDec = 5;
    if (has_amountsdec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->amountsdec());
    }

    // optional string AdditionalInfo = 6;
    if (has_additionalinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalinfo());
    }

  }
  // repeated .Diadoc.Api.Proto.Invoicing.AdditionalInfo AdditionalInfos = 7;
  total_size += 1 * this->additionalinfos_size();
  for (int i = 0; i < this->additionalinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additionalinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvoiceCorrectionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvoiceCorrectionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvoiceCorrectionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvoiceCorrectionItem::MergeFrom(const InvoiceCorrectionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  additionalinfos_.MergeFrom(from.additionalinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_product()) {
      set_product(from.product());
    }
    if (from.has_originalvalues()) {
      mutable_originalvalues()->::Diadoc::Api::Proto::Invoicing::CorrectableInvoiceItemFields::MergeFrom(from.originalvalues());
    }
    if (from.has_correctedvalues()) {
      mutable_correctedvalues()->::Diadoc::Api::Proto::Invoicing::CorrectableInvoiceItemFields::MergeFrom(from.correctedvalues());
    }
    if (from.has_amountsinc()) {
      mutable_amountsinc()->::Diadoc::Api::Proto::Invoicing::InvoiceItemAmountsDiff::MergeFrom(from.amountsinc());
    }
    if (from.has_amountsdec()) {
      mutable_amountsdec()->::Diadoc::Api::Proto::Invoicing::InvoiceItemAmountsDiff::MergeFrom(from.amountsdec());
    }
    if (from.has_additionalinfo()) {
      set_additionalinfo(from.additionalinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvoiceCorrectionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvoiceCorrectionItem::CopyFrom(const InvoiceCorrectionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceCorrectionItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_originalvalues()) {
    if (!this->originalvalues().IsInitialized()) return false;
  }
  if (has_correctedvalues()) {
    if (!this->correctedvalues().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->additionalinfos())) return false;
  return true;
}

void InvoiceCorrectionItem::Swap(InvoiceCorrectionItem* other) {
  if (other != this) {
    std::swap(product_, other->product_);
    std::swap(originalvalues_, other->originalvalues_);
    std::swap(correctedvalues_, other->correctedvalues_);
    std::swap(amountsinc_, other->amountsinc_);
    std::swap(amountsdec_, other->amountsdec_);
    std::swap(additionalinfo_, other->additionalinfo_);
    additionalinfos_.Swap(&other->additionalinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvoiceCorrectionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvoiceCorrectionItem_descriptor_;
  metadata.reflection = InvoiceCorrectionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CorrectableInvoiceItemFields::kUnitFieldNumber;
const int CorrectableInvoiceItemFields::kQuantityFieldNumber;
const int CorrectableInvoiceItemFields::kPriceFieldNumber;
const int CorrectableInvoiceItemFields::kExciseFieldNumber;
const int CorrectableInvoiceItemFields::kTaxRateFieldNumber;
const int CorrectableInvoiceItemFields::kSubtotalWithVatExcludedFieldNumber;
const int CorrectableInvoiceItemFields::kVatFieldNumber;
const int CorrectableInvoiceItemFields::kSubtotalFieldNumber;
#endif  // !_MSC_VER

CorrectableInvoiceItemFields::CorrectableInvoiceItemFields()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields)
}

void CorrectableInvoiceItemFields::InitAsDefaultInstance() {
}

CorrectableInvoiceItemFields::CorrectableInvoiceItemFields(const CorrectableInvoiceItemFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields)
}

void CorrectableInvoiceItemFields::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  excise_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taxrate_ = 0;
  subtotalwithvatexcluded_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CorrectableInvoiceItemFields::~CorrectableInvoiceItemFields() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields)
  SharedDtor();
}

void CorrectableInvoiceItemFields::SharedDtor() {
  if (unit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unit_;
  }
  if (quantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quantity_;
  }
  if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete price_;
  }
  if (excise_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete excise_;
  }
  if (subtotalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtotalwithvatexcluded_;
  }
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (subtotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtotal_;
  }
  if (this != default_instance_) {
  }
}

void CorrectableInvoiceItemFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CorrectableInvoiceItemFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CorrectableInvoiceItemFields_descriptor_;
}

const CorrectableInvoiceItemFields& CorrectableInvoiceItemFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fInvoiceInfo_2eproto();
  return *default_instance_;
}

CorrectableInvoiceItemFields* CorrectableInvoiceItemFields::default_instance_ = NULL;

CorrectableInvoiceItemFields* CorrectableInvoiceItemFields::New() const {
  return new CorrectableInvoiceItemFields;
}

void CorrectableInvoiceItemFields::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_unit()) {
      if (unit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unit_->clear();
      }
    }
    if (has_quantity()) {
      if (quantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quantity_->clear();
      }
    }
    if (has_price()) {
      if (price_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        price_->clear();
      }
    }
    if (has_excise()) {
      if (excise_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        excise_->clear();
      }
    }
    taxrate_ = 0;
    if (has_subtotalwithvatexcluded()) {
      if (subtotalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtotalwithvatexcluded_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vat_->clear();
      }
    }
    if (has_subtotal()) {
      if (subtotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtotal_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CorrectableInvoiceItemFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Unit = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unit");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Quantity;
        break;
      }

      // optional string Quantity = 2;
      case 2: {
        if (tag == 18) {
         parse_Quantity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quantity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quantity().data(), this->quantity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quantity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Price;
        break;
      }

      // optional string Price = 3;
      case 3: {
        if (tag == 26) {
         parse_Price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->price().data(), this->price().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "price");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Excise;
        break;
      }

      // optional string Excise = 4;
      case 4: {
        if (tag == 34) {
         parse_Excise:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_excise()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->excise().data(), this->excise().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "excise");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TaxRate;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.TaxRate TaxRate = 5;
      case 5: {
        if (tag == 40) {
         parse_TaxRate:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Invoicing::TaxRate_IsValid(value)) {
            set_taxrate(static_cast< ::Diadoc::Api::Proto::Invoicing::TaxRate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SubtotalWithVatExcluded;
        break;
      }

      // optional string SubtotalWithVatExcluded = 6;
      case 6: {
        if (tag == 50) {
         parse_SubtotalWithVatExcluded:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtotalwithvatexcluded()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subtotalwithvatexcluded().data(), this->subtotalwithvatexcluded().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subtotalwithvatexcluded");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Vat;
        break;
      }

      // optional string Vat = 7;
      case 7: {
        if (tag == 58) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Subtotal;
        break;
      }

      // required string Subtotal = 8;
      case 8: {
        if (tag == 66) {
         parse_Subtotal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtotal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subtotal().data(), this->subtotal().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subtotal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields)
  return false;
#undef DO_
}

void CorrectableInvoiceItemFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields)
  // optional string Unit = 1;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unit(), output);
  }

  // optional string Quantity = 2;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quantity().data(), this->quantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quantity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->quantity(), output);
  }

  // optional string Price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "price");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->price(), output);
  }

  // optional string Excise = 4;
  if (has_excise()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excise().data(), this->excise().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "excise");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->excise(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.TaxRate TaxRate = 5;
  if (has_taxrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->taxrate(), output);
  }

  // optional string SubtotalWithVatExcluded = 6;
  if (has_subtotalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotalwithvatexcluded().data(), this->subtotalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotalwithvatexcluded");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->subtotalwithvatexcluded(), output);
  }

  // optional string Vat = 7;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->vat(), output);
  }

  // required string Subtotal = 8;
  if (has_subtotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotal().data(), this->subtotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->subtotal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields)
}

::google::protobuf::uint8* CorrectableInvoiceItemFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields)
  // optional string Unit = 1;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unit(), target);
  }

  // optional string Quantity = 2;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quantity().data(), this->quantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quantity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->quantity(), target);
  }

  // optional string Price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "price");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->price(), target);
  }

  // optional string Excise = 4;
  if (has_excise()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excise().data(), this->excise().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "excise");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->excise(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.TaxRate TaxRate = 5;
  if (has_taxrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->taxrate(), target);
  }

  // optional string SubtotalWithVatExcluded = 6;
  if (has_subtotalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotalwithvatexcluded().data(), this->subtotalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotalwithvatexcluded");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->subtotalwithvatexcluded(), target);
  }

  // optional string Vat = 7;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->vat(), target);
  }

  // required string Subtotal = 8;
  if (has_subtotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotal().data(), this->subtotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->subtotal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.CorrectableInvoiceItemFields)
  return target;
}

int CorrectableInvoiceItemFields::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Unit = 1;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit());
    }

    // optional string Quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quantity());
    }

    // optional string Price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price());
    }

    // optional string Excise = 4;
    if (has_excise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->excise());
    }

    // required .Diadoc.Api.Proto.Invoicing.TaxRate TaxRate = 5;
    if (has_taxrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->taxrate());
    }

    // optional string SubtotalWithVatExcluded = 6;
    if (has_subtotalwithvatexcluded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtotalwithvatexcluded());
    }

    // optional string Vat = 7;
    if (has_vat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

    // required string Subtotal = 8;
    if (has_subtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtotal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CorrectableInvoiceItemFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CorrectableInvoiceItemFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CorrectableInvoiceItemFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CorrectableInvoiceItemFields::MergeFrom(const CorrectableInvoiceItemFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_excise()) {
      set_excise(from.excise());
    }
    if (from.has_taxrate()) {
      set_taxrate(from.taxrate());
    }
    if (from.has_subtotalwithvatexcluded()) {
      set_subtotalwithvatexcluded(from.subtotalwithvatexcluded());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
    if (from.has_subtotal()) {
      set_subtotal(from.subtotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CorrectableInvoiceItemFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorrectableInvoiceItemFields::CopyFrom(const CorrectableInvoiceItemFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorrectableInvoiceItemFields::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000090) != 0x00000090) return false;

  return true;
}

void CorrectableInvoiceItemFields::Swap(CorrectableInvoiceItemFields* other) {
  if (other != this) {
    std::swap(unit_, other->unit_);
    std::swap(quantity_, other->quantity_);
    std::swap(price_, other->price_);
    std::swap(excise_, other->excise_);
    std::swap(taxrate_, other->taxrate_);
    std::swap(subtotalwithvatexcluded_, other->subtotalwithvatexcluded_);
    std::swap(vat_, other->vat_);
    std::swap(subtotal_, other->subtotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CorrectableInvoiceItemFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CorrectableInvoiceItemFields_descriptor_;
  metadata.reflection = CorrectableInvoiceItemFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvoiceItemAmountsDiff::kExciseFieldNumber;
const int InvoiceItemAmountsDiff::kSubtotalWithVatExcludedFieldNumber;
const int InvoiceItemAmountsDiff::kVatFieldNumber;
const int InvoiceItemAmountsDiff::kSubtotalFieldNumber;
#endif  // !_MSC_VER

InvoiceItemAmountsDiff::InvoiceItemAmountsDiff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff)
}

void InvoiceItemAmountsDiff::InitAsDefaultInstance() {
}

InvoiceItemAmountsDiff::InvoiceItemAmountsDiff(const InvoiceItemAmountsDiff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff)
}

void InvoiceItemAmountsDiff::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  excise_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtotalwithvatexcluded_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvoiceItemAmountsDiff::~InvoiceItemAmountsDiff() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff)
  SharedDtor();
}

void InvoiceItemAmountsDiff::SharedDtor() {
  if (excise_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete excise_;
  }
  if (subtotalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtotalwithvatexcluded_;
  }
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (subtotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtotal_;
  }
  if (this != default_instance_) {
  }
}

void InvoiceItemAmountsDiff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvoiceItemAmountsDiff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvoiceItemAmountsDiff_descriptor_;
}

const InvoiceItemAmountsDiff& InvoiceItemAmountsDiff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fInvoiceInfo_2eproto();
  return *default_instance_;
}

InvoiceItemAmountsDiff* InvoiceItemAmountsDiff::default_instance_ = NULL;

InvoiceItemAmountsDiff* InvoiceItemAmountsDiff::New() const {
  return new InvoiceItemAmountsDiff;
}

void InvoiceItemAmountsDiff::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_excise()) {
      if (excise_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        excise_->clear();
      }
    }
    if (has_subtotalwithvatexcluded()) {
      if (subtotalwithvatexcluded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtotalwithvatexcluded_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vat_->clear();
      }
    }
    if (has_subtotal()) {
      if (subtotal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtotal_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvoiceItemAmountsDiff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Excise = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_excise()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->excise().data(), this->excise().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "excise");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SubtotalWithVatExcluded;
        break;
      }

      // optional string SubtotalWithVatExcluded = 2;
      case 2: {
        if (tag == 18) {
         parse_SubtotalWithVatExcluded:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtotalwithvatexcluded()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subtotalwithvatexcluded().data(), this->subtotalwithvatexcluded().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subtotalwithvatexcluded");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Vat;
        break;
      }

      // optional string Vat = 3;
      case 3: {
        if (tag == 26) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Subtotal;
        break;
      }

      // optional string Subtotal = 4;
      case 4: {
        if (tag == 34) {
         parse_Subtotal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtotal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subtotal().data(), this->subtotal().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subtotal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff)
  return false;
#undef DO_
}

void InvoiceItemAmountsDiff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff)
  // optional string Excise = 1;
  if (has_excise()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excise().data(), this->excise().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "excise");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->excise(), output);
  }

  // optional string SubtotalWithVatExcluded = 2;
  if (has_subtotalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotalwithvatexcluded().data(), this->subtotalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotalwithvatexcluded");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subtotalwithvatexcluded(), output);
  }

  // optional string Vat = 3;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vat(), output);
  }

  // optional string Subtotal = 4;
  if (has_subtotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotal().data(), this->subtotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->subtotal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff)
}

::google::protobuf::uint8* InvoiceItemAmountsDiff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff)
  // optional string Excise = 1;
  if (has_excise()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excise().data(), this->excise().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "excise");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->excise(), target);
  }

  // optional string SubtotalWithVatExcluded = 2;
  if (has_subtotalwithvatexcluded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotalwithvatexcluded().data(), this->subtotalwithvatexcluded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotalwithvatexcluded");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subtotalwithvatexcluded(), target);
  }

  // optional string Vat = 3;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vat(), target);
  }

  // optional string Subtotal = 4;
  if (has_subtotal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtotal().data(), this->subtotal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtotal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->subtotal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.InvoiceItemAmountsDiff)
  return target;
}

int InvoiceItemAmountsDiff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Excise = 1;
    if (has_excise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->excise());
    }

    // optional string SubtotalWithVatExcluded = 2;
    if (has_subtotalwithvatexcluded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtotalwithvatexcluded());
    }

    // optional string Vat = 3;
    if (has_vat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

    // optional string Subtotal = 4;
    if (has_subtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtotal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvoiceItemAmountsDiff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvoiceItemAmountsDiff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvoiceItemAmountsDiff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvoiceItemAmountsDiff::MergeFrom(const InvoiceItemAmountsDiff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_excise()) {
      set_excise(from.excise());
    }
    if (from.has_subtotalwithvatexcluded()) {
      set_subtotalwithvatexcluded(from.subtotalwithvatexcluded());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
    if (from.has_subtotal()) {
      set_subtotal(from.subtotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvoiceItemAmountsDiff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvoiceItemAmountsDiff::CopyFrom(const InvoiceItemAmountsDiff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceItemAmountsDiff::IsInitialized() const {

  return true;
}

void InvoiceItemAmountsDiff::Swap(InvoiceItemAmountsDiff* other) {
  if (other != this) {
    std::swap(excise_, other->excise_);
    std::swap(subtotalwithvatexcluded_, other->subtotalwithvatexcluded_);
    std::swap(vat_, other->vat_);
    std::swap(subtotal_, other->subtotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvoiceItemAmountsDiff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvoiceItemAmountsDiff_descriptor_;
  metadata.reflection = InvoiceItemAmountsDiff_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Invoicing
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
