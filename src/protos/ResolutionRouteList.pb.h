// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResolutionRouteList.proto

#ifndef PROTOBUF_ResolutionRouteList_2eproto__INCLUDED
#define PROTOBUF_ResolutionRouteList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ResolutionRouteList_2eproto();
void protobuf_AssignDesc_ResolutionRouteList_2eproto();
void protobuf_ShutdownFile_ResolutionRouteList_2eproto();

class ResolutionRouteList;
class ResolutionRoute;

// ===================================================================

class ResolutionRouteList : public ::google::protobuf::Message {
 public:
  ResolutionRouteList();
  virtual ~ResolutionRouteList();

  ResolutionRouteList(const ResolutionRouteList& from);

  inline ResolutionRouteList& operator=(const ResolutionRouteList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionRouteList& default_instance();

  void Swap(ResolutionRouteList* other);

  // implements Message ----------------------------------------------

  ResolutionRouteList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionRouteList& from);
  void MergeFrom(const ResolutionRouteList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.ResolutionRoute ResolutionRoutes = 1;
  inline int resolutionroutes_size() const;
  inline void clear_resolutionroutes();
  static const int kResolutionRoutesFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::ResolutionRoute& resolutionroutes(int index) const;
  inline ::Diadoc::Api::Proto::ResolutionRoute* mutable_resolutionroutes(int index);
  inline ::Diadoc::Api::Proto::ResolutionRoute* add_resolutionroutes();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ResolutionRoute >&
      resolutionroutes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ResolutionRoute >*
      mutable_resolutionroutes();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.ResolutionRouteList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ResolutionRoute > resolutionroutes_;
  friend void  protobuf_AddDesc_ResolutionRouteList_2eproto();
  friend void protobuf_AssignDesc_ResolutionRouteList_2eproto();
  friend void protobuf_ShutdownFile_ResolutionRouteList_2eproto();

  void InitAsDefaultInstance();
  static ResolutionRouteList* default_instance_;
};
// -------------------------------------------------------------------

class ResolutionRoute : public ::google::protobuf::Message {
 public:
  ResolutionRoute();
  virtual ~ResolutionRoute();

  ResolutionRoute(const ResolutionRoute& from);

  inline ResolutionRoute& operator=(const ResolutionRoute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionRoute& default_instance();

  void Swap(ResolutionRoute* other);

  // implements Message ----------------------------------------------

  ResolutionRoute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionRoute& from);
  void MergeFrom(const ResolutionRoute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string RouteId = 1;
  inline bool has_routeid() const;
  inline void clear_routeid();
  static const int kRouteIdFieldNumber = 1;
  inline const ::std::string& routeid() const;
  inline void set_routeid(const ::std::string& value);
  inline void set_routeid(const char* value);
  inline void set_routeid(const char* value, size_t size);
  inline ::std::string* mutable_routeid();
  inline ::std::string* release_routeid();
  inline void set_allocated_routeid(::std::string* routeid);

  // required string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.ResolutionRoute)
 private:
  inline void set_has_routeid();
  inline void clear_has_routeid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* routeid_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_ResolutionRouteList_2eproto();
  friend void protobuf_AssignDesc_ResolutionRouteList_2eproto();
  friend void protobuf_ShutdownFile_ResolutionRouteList_2eproto();

  void InitAsDefaultInstance();
  static ResolutionRoute* default_instance_;
};
// ===================================================================


// ===================================================================

// ResolutionRouteList

// repeated .Diadoc.Api.Proto.ResolutionRoute ResolutionRoutes = 1;
inline int ResolutionRouteList::resolutionroutes_size() const {
  return resolutionroutes_.size();
}
inline void ResolutionRouteList::clear_resolutionroutes() {
  resolutionroutes_.Clear();
}
inline const ::Diadoc::Api::Proto::ResolutionRoute& ResolutionRouteList::resolutionroutes(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.ResolutionRouteList.ResolutionRoutes)
  return resolutionroutes_.Get(index);
}
inline ::Diadoc::Api::Proto::ResolutionRoute* ResolutionRouteList::mutable_resolutionroutes(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.ResolutionRouteList.ResolutionRoutes)
  return resolutionroutes_.Mutable(index);
}
inline ::Diadoc::Api::Proto::ResolutionRoute* ResolutionRouteList::add_resolutionroutes() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.ResolutionRouteList.ResolutionRoutes)
  return resolutionroutes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ResolutionRoute >&
ResolutionRouteList::resolutionroutes() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.ResolutionRouteList.ResolutionRoutes)
  return resolutionroutes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ResolutionRoute >*
ResolutionRouteList::mutable_resolutionroutes() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.ResolutionRouteList.ResolutionRoutes)
  return &resolutionroutes_;
}

// -------------------------------------------------------------------

// ResolutionRoute

// required string RouteId = 1;
inline bool ResolutionRoute::has_routeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionRoute::set_has_routeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolutionRoute::clear_has_routeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolutionRoute::clear_routeid() {
  if (routeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    routeid_->clear();
  }
  clear_has_routeid();
}
inline const ::std::string& ResolutionRoute::routeid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.ResolutionRoute.RouteId)
  return *routeid_;
}
inline void ResolutionRoute::set_routeid(const ::std::string& value) {
  set_has_routeid();
  if (routeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    routeid_ = new ::std::string;
  }
  routeid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.ResolutionRoute.RouteId)
}
inline void ResolutionRoute::set_routeid(const char* value) {
  set_has_routeid();
  if (routeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    routeid_ = new ::std::string;
  }
  routeid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.ResolutionRoute.RouteId)
}
inline void ResolutionRoute::set_routeid(const char* value, size_t size) {
  set_has_routeid();
  if (routeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    routeid_ = new ::std::string;
  }
  routeid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.ResolutionRoute.RouteId)
}
inline ::std::string* ResolutionRoute::mutable_routeid() {
  set_has_routeid();
  if (routeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    routeid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.ResolutionRoute.RouteId)
  return routeid_;
}
inline ::std::string* ResolutionRoute::release_routeid() {
  clear_has_routeid();
  if (routeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = routeid_;
    routeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRoute::set_allocated_routeid(::std::string* routeid) {
  if (routeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete routeid_;
  }
  if (routeid) {
    set_has_routeid();
    routeid_ = routeid;
  } else {
    clear_has_routeid();
    routeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.ResolutionRoute.RouteId)
}

// required string Name = 2;
inline bool ResolutionRoute::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolutionRoute::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolutionRoute::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolutionRoute::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ResolutionRoute::name() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.ResolutionRoute.Name)
  return *name_;
}
inline void ResolutionRoute::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.ResolutionRoute.Name)
}
inline void ResolutionRoute::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.ResolutionRoute.Name)
}
inline void ResolutionRoute::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.ResolutionRoute.Name)
}
inline ::std::string* ResolutionRoute::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.ResolutionRoute.Name)
  return name_;
}
inline ::std::string* ResolutionRoute::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRoute::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.ResolutionRoute.Name)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ResolutionRouteList_2eproto__INCLUDED
