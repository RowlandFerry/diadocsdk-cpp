// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KeyValueStorage/KeyValueStorage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KeyValueStorage/KeyValueStorage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace KeyValueStorage {

namespace {

const ::google::protobuf::Descriptor* KeyValueStorageEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValueStorageEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValueStorageApiGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValueStorageApiGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValueStorageApiGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValueStorageApiGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValueStorageApiPutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValueStorageApiPutRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_KeyValueStorage_2fKeyValueStorage_2eproto() {
  protobuf_AddDesc_KeyValueStorage_2fKeyValueStorage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KeyValueStorage/KeyValueStorage.proto");
  GOOGLE_CHECK(file != NULL);
  KeyValueStorageEntry_descriptor_ = file->message_type(0);
  static const int KeyValueStorageEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueStorageEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueStorageEntry, value_),
  };
  KeyValueStorageEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValueStorageEntry_descriptor_,
      KeyValueStorageEntry::default_instance_,
      KeyValueStorageEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueStorageEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueStorageEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValueStorageEntry));
  KeyValueStorageApiGetRequest_descriptor_ = file->message_type(1);
  static const int KeyValueStorageApiGetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueStorageApiGetRequest, keys_),
  };
  KeyValueStorageApiGetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValueStorageApiGetRequest_descriptor_,
      KeyValueStorageApiGetRequest::default_instance_,
      KeyValueStorageApiGetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueStorageApiGetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueStorageApiGetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValueStorageApiGetRequest));
  KeyValueStorageApiGetResponse_descriptor_ = file->message_type(2);
  static const int KeyValueStorageApiGetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueStorageApiGetResponse, entries_),
  };
  KeyValueStorageApiGetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValueStorageApiGetResponse_descriptor_,
      KeyValueStorageApiGetResponse::default_instance_,
      KeyValueStorageApiGetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueStorageApiGetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueStorageApiGetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValueStorageApiGetResponse));
  KeyValueStorageApiPutRequest_descriptor_ = file->message_type(3);
  static const int KeyValueStorageApiPutRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueStorageApiPutRequest, entries_),
  };
  KeyValueStorageApiPutRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValueStorageApiPutRequest_descriptor_,
      KeyValueStorageApiPutRequest::default_instance_,
      KeyValueStorageApiPutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueStorageApiPutRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueStorageApiPutRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValueStorageApiPutRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KeyValueStorage_2fKeyValueStorage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValueStorageEntry_descriptor_, &KeyValueStorageEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValueStorageApiGetRequest_descriptor_, &KeyValueStorageApiGetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValueStorageApiGetResponse_descriptor_, &KeyValueStorageApiGetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValueStorageApiPutRequest_descriptor_, &KeyValueStorageApiPutRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KeyValueStorage_2fKeyValueStorage_2eproto() {
  delete KeyValueStorageEntry::default_instance_;
  delete KeyValueStorageEntry_reflection_;
  delete KeyValueStorageApiGetRequest::default_instance_;
  delete KeyValueStorageApiGetRequest_reflection_;
  delete KeyValueStorageApiGetResponse::default_instance_;
  delete KeyValueStorageApiGetResponse_reflection_;
  delete KeyValueStorageApiPutRequest::default_instance_;
  delete KeyValueStorageApiPutRequest_reflection_;
}

void protobuf_AddDesc_KeyValueStorage_2fKeyValueStorage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%KeyValueStorage/KeyValueStorage.proto\022"
    " Diadoc.Api.Proto.KeyValueStorage\"2\n\024Key"
    "ValueStorageEntry\022\013\n\003Key\030\001 \002(\t\022\r\n\005Value\030"
    "\002 \002(\t\",\n\034KeyValueStorageApiGetRequest\022\014\n"
    "\004Keys\030\001 \003(\t\"h\n\035KeyValueStorageApiGetResp"
    "onse\022G\n\007Entries\030\001 \003(\01326.Diadoc.Api.Proto"
    ".KeyValueStorage.KeyValueStorageEntry\"g\n"
    "\034KeyValueStorageApiPutRequest\022G\n\007Entries"
    "\030\001 \003(\01326.Diadoc.Api.Proto.KeyValueStorag"
    "e.KeyValueStorageEntry", 382);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KeyValueStorage/KeyValueStorage.proto", &protobuf_RegisterTypes);
  KeyValueStorageEntry::default_instance_ = new KeyValueStorageEntry();
  KeyValueStorageApiGetRequest::default_instance_ = new KeyValueStorageApiGetRequest();
  KeyValueStorageApiGetResponse::default_instance_ = new KeyValueStorageApiGetResponse();
  KeyValueStorageApiPutRequest::default_instance_ = new KeyValueStorageApiPutRequest();
  KeyValueStorageEntry::default_instance_->InitAsDefaultInstance();
  KeyValueStorageApiGetRequest::default_instance_->InitAsDefaultInstance();
  KeyValueStorageApiGetResponse::default_instance_->InitAsDefaultInstance();
  KeyValueStorageApiPutRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KeyValueStorage_2fKeyValueStorage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KeyValueStorage_2fKeyValueStorage_2eproto {
  StaticDescriptorInitializer_KeyValueStorage_2fKeyValueStorage_2eproto() {
    protobuf_AddDesc_KeyValueStorage_2fKeyValueStorage_2eproto();
  }
} static_descriptor_initializer_KeyValueStorage_2fKeyValueStorage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int KeyValueStorageEntry::kKeyFieldNumber;
const int KeyValueStorageEntry::kValueFieldNumber;
#endif  // !_MSC_VER

KeyValueStorageEntry::KeyValueStorageEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry)
}

void KeyValueStorageEntry::InitAsDefaultInstance() {
}

KeyValueStorageEntry::KeyValueStorageEntry(const KeyValueStorageEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry)
}

void KeyValueStorageEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValueStorageEntry::~KeyValueStorageEntry() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry)
  SharedDtor();
}

void KeyValueStorageEntry::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void KeyValueStorageEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValueStorageEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValueStorageEntry_descriptor_;
}

const KeyValueStorageEntry& KeyValueStorageEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeyValueStorage_2fKeyValueStorage_2eproto();
  return *default_instance_;
}

KeyValueStorageEntry* KeyValueStorageEntry::default_instance_ = NULL;

KeyValueStorageEntry* KeyValueStorageEntry::New() const {
  return new KeyValueStorageEntry;
}

void KeyValueStorageEntry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValueStorageEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // required string Value = 2;
      case 2: {
        if (tag == 18) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry)
  return false;
#undef DO_
}

void KeyValueStorageEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry)
  // required string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry)
}

::google::protobuf::uint8* KeyValueStorageEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry)
  // required string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry)
  return target;
}

int KeyValueStorageEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValueStorageEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValueStorageEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValueStorageEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValueStorageEntry::MergeFrom(const KeyValueStorageEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValueStorageEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValueStorageEntry::CopyFrom(const KeyValueStorageEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValueStorageEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KeyValueStorageEntry::Swap(KeyValueStorageEntry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValueStorageEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValueStorageEntry_descriptor_;
  metadata.reflection = KeyValueStorageEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValueStorageApiGetRequest::kKeysFieldNumber;
#endif  // !_MSC_VER

KeyValueStorageApiGetRequest::KeyValueStorageApiGetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetRequest)
}

void KeyValueStorageApiGetRequest::InitAsDefaultInstance() {
}

KeyValueStorageApiGetRequest::KeyValueStorageApiGetRequest(const KeyValueStorageApiGetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetRequest)
}

void KeyValueStorageApiGetRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValueStorageApiGetRequest::~KeyValueStorageApiGetRequest() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetRequest)
  SharedDtor();
}

void KeyValueStorageApiGetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeyValueStorageApiGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValueStorageApiGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValueStorageApiGetRequest_descriptor_;
}

const KeyValueStorageApiGetRequest& KeyValueStorageApiGetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeyValueStorage_2fKeyValueStorage_2eproto();
  return *default_instance_;
}

KeyValueStorageApiGetRequest* KeyValueStorageApiGetRequest::default_instance_ = NULL;

KeyValueStorageApiGetRequest* KeyValueStorageApiGetRequest::New() const {
  return new KeyValueStorageApiGetRequest;
}

void KeyValueStorageApiGetRequest::Clear() {
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValueStorageApiGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string Keys = 1;
      case 1: {
        if (tag == 10) {
         parse_Keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keys(this->keys_size() - 1).data(),
            this->keys(this->keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keys");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Keys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetRequest)
  return false;
#undef DO_
}

void KeyValueStorageApiGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetRequest)
  // repeated string Keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->keys(i).data(), this->keys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetRequest)
}

::google::protobuf::uint8* KeyValueStorageApiGetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetRequest)
  // repeated string Keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys(i).data(), this->keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetRequest)
  return target;
}

int KeyValueStorageApiGetRequest::ByteSize() const {
  int total_size = 0;

  // repeated string Keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValueStorageApiGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValueStorageApiGetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValueStorageApiGetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValueStorageApiGetRequest::MergeFrom(const KeyValueStorageApiGetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValueStorageApiGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValueStorageApiGetRequest::CopyFrom(const KeyValueStorageApiGetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValueStorageApiGetRequest::IsInitialized() const {

  return true;
}

void KeyValueStorageApiGetRequest::Swap(KeyValueStorageApiGetRequest* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValueStorageApiGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValueStorageApiGetRequest_descriptor_;
  metadata.reflection = KeyValueStorageApiGetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValueStorageApiGetResponse::kEntriesFieldNumber;
#endif  // !_MSC_VER

KeyValueStorageApiGetResponse::KeyValueStorageApiGetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetResponse)
}

void KeyValueStorageApiGetResponse::InitAsDefaultInstance() {
}

KeyValueStorageApiGetResponse::KeyValueStorageApiGetResponse(const KeyValueStorageApiGetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetResponse)
}

void KeyValueStorageApiGetResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValueStorageApiGetResponse::~KeyValueStorageApiGetResponse() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetResponse)
  SharedDtor();
}

void KeyValueStorageApiGetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeyValueStorageApiGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValueStorageApiGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValueStorageApiGetResponse_descriptor_;
}

const KeyValueStorageApiGetResponse& KeyValueStorageApiGetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeyValueStorage_2fKeyValueStorage_2eproto();
  return *default_instance_;
}

KeyValueStorageApiGetResponse* KeyValueStorageApiGetResponse::default_instance_ = NULL;

KeyValueStorageApiGetResponse* KeyValueStorageApiGetResponse::New() const {
  return new KeyValueStorageApiGetResponse;
}

void KeyValueStorageApiGetResponse::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValueStorageApiGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry Entries = 1;
      case 1: {
        if (tag == 10) {
         parse_Entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Entries;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetResponse)
  return false;
#undef DO_
}

void KeyValueStorageApiGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetResponse)
  // repeated .Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry Entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetResponse)
}

::google::protobuf::uint8* KeyValueStorageApiGetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetResponse)
  // repeated .Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry Entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiGetResponse)
  return target;
}

int KeyValueStorageApiGetResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry Entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValueStorageApiGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValueStorageApiGetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValueStorageApiGetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValueStorageApiGetResponse::MergeFrom(const KeyValueStorageApiGetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValueStorageApiGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValueStorageApiGetResponse::CopyFrom(const KeyValueStorageApiGetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValueStorageApiGetResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void KeyValueStorageApiGetResponse::Swap(KeyValueStorageApiGetResponse* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValueStorageApiGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValueStorageApiGetResponse_descriptor_;
  metadata.reflection = KeyValueStorageApiGetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValueStorageApiPutRequest::kEntriesFieldNumber;
#endif  // !_MSC_VER

KeyValueStorageApiPutRequest::KeyValueStorageApiPutRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiPutRequest)
}

void KeyValueStorageApiPutRequest::InitAsDefaultInstance() {
}

KeyValueStorageApiPutRequest::KeyValueStorageApiPutRequest(const KeyValueStorageApiPutRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiPutRequest)
}

void KeyValueStorageApiPutRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValueStorageApiPutRequest::~KeyValueStorageApiPutRequest() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiPutRequest)
  SharedDtor();
}

void KeyValueStorageApiPutRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeyValueStorageApiPutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValueStorageApiPutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValueStorageApiPutRequest_descriptor_;
}

const KeyValueStorageApiPutRequest& KeyValueStorageApiPutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KeyValueStorage_2fKeyValueStorage_2eproto();
  return *default_instance_;
}

KeyValueStorageApiPutRequest* KeyValueStorageApiPutRequest::default_instance_ = NULL;

KeyValueStorageApiPutRequest* KeyValueStorageApiPutRequest::New() const {
  return new KeyValueStorageApiPutRequest;
}

void KeyValueStorageApiPutRequest::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValueStorageApiPutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiPutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry Entries = 1;
      case 1: {
        if (tag == 10) {
         parse_Entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Entries;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiPutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiPutRequest)
  return false;
#undef DO_
}

void KeyValueStorageApiPutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiPutRequest)
  // repeated .Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry Entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiPutRequest)
}

::google::protobuf::uint8* KeyValueStorageApiPutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiPutRequest)
  // repeated .Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry Entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageApiPutRequest)
  return target;
}

int KeyValueStorageApiPutRequest::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.KeyValueStorage.KeyValueStorageEntry Entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValueStorageApiPutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValueStorageApiPutRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValueStorageApiPutRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValueStorageApiPutRequest::MergeFrom(const KeyValueStorageApiPutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValueStorageApiPutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValueStorageApiPutRequest::CopyFrom(const KeyValueStorageApiPutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValueStorageApiPutRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void KeyValueStorageApiPutRequest::Swap(KeyValueStorageApiPutRequest* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValueStorageApiPutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValueStorageApiPutRequest_descriptor_;
  metadata.reflection = KeyValueStorageApiPutRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KeyValueStorage
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
