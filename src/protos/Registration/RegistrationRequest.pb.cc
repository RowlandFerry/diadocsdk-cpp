// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Registration/RegistrationRequest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Registration/RegistrationRequest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Registration {

namespace {

const ::google::protobuf::Descriptor* RegistrationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistrationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegistrationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistrationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegistrationConfirmRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistrationConfirmRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegistrationStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Registration_2fRegistrationRequest_2eproto() {
  protobuf_AddDesc_Registration_2fRegistrationRequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Registration/RegistrationRequest.proto");
  GOOGLE_CHECK(file != NULL);
  RegistrationRequest_descriptor_ = file->message_type(0);
  static const int RegistrationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationRequest, certificatecontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationRequest, thumbprint_),
  };
  RegistrationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistrationRequest_descriptor_,
      RegistrationRequest::default_instance_,
      RegistrationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistrationRequest));
  RegistrationResponse_descriptor_ = file->message_type(1);
  static const int RegistrationResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationResponse, registrationstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationResponse, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationResponse, datatosign_),
  };
  RegistrationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistrationResponse_descriptor_,
      RegistrationResponse::default_instance_,
      RegistrationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistrationResponse));
  RegistrationConfirmRequest_descriptor_ = file->message_type(2);
  static const int RegistrationConfirmRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationConfirmRequest, certificatecontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationConfirmRequest, thumbprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationConfirmRequest, datatosign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationConfirmRequest, signature_),
  };
  RegistrationConfirmRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistrationConfirmRequest_descriptor_,
      RegistrationConfirmRequest::default_instance_,
      RegistrationConfirmRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationConfirmRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationConfirmRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistrationConfirmRequest));
  RegistrationStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Registration_2fRegistrationRequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistrationRequest_descriptor_, &RegistrationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistrationResponse_descriptor_, &RegistrationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistrationConfirmRequest_descriptor_, &RegistrationConfirmRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Registration_2fRegistrationRequest_2eproto() {
  delete RegistrationRequest::default_instance_;
  delete RegistrationRequest_reflection_;
  delete RegistrationResponse::default_instance_;
  delete RegistrationResponse_reflection_;
  delete RegistrationConfirmRequest::default_instance_;
  delete RegistrationConfirmRequest_reflection_;
}

void protobuf_AddDesc_Registration_2fRegistrationRequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&Registration/RegistrationRequest.proto"
    "\022\035Diadoc.Api.Proto.Registration\"E\n\023Regis"
    "trationRequest\022\032\n\022CertificateContent\030\001 \001"
    "(\014\022\022\n\nThumbprint\030\002 \001(\t\"\210\001\n\024RegistrationR"
    "esponse\022M\n\022RegistrationStatus\030\001 \002(\01621.Di"
    "adoc.Api.Proto.Registration.Registration"
    "Status\022\r\n\005BoxId\030\002 \001(\t\022\022\n\nDataToSign\030\003 \001("
    "\014\"s\n\032RegistrationConfirmRequest\022\032\n\022Certi"
    "ficateContent\030\001 \001(\014\022\022\n\nThumbprint\030\002 \001(\t\022"
    "\022\n\nDataToSign\030\003 \002(\014\022\021\n\tSignature\030\004 \002(\014*\260"
    "\002\n\022RegistrationStatus\022\013\n\007Unknown\020\000\022\022\n\016Ac"
    "cessIsDenied\020\001\022\033\n\027AccessRequestIsRejecte"
    "d\020\002\022\'\n#CertificateOwnershipProofIsRequir"
    "ed\020\003\022\035\n\031CertificateIsNotQualified\020\004\022\033\n\027R"
    "egistrationIsCompleted\020\005\022\034\n\030Registration"
    "IsInProgress\020\006\022#\n\037RegistrationInBranchIs"
    "Forbidden\020\007\022\032\n\026AccessRequestIsPending\020\010\022"
    "\030\n\024OrganizationNotFound\020\t", 705);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Registration/RegistrationRequest.proto", &protobuf_RegisterTypes);
  RegistrationRequest::default_instance_ = new RegistrationRequest();
  RegistrationResponse::default_instance_ = new RegistrationResponse();
  RegistrationConfirmRequest::default_instance_ = new RegistrationConfirmRequest();
  RegistrationRequest::default_instance_->InitAsDefaultInstance();
  RegistrationResponse::default_instance_->InitAsDefaultInstance();
  RegistrationConfirmRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Registration_2fRegistrationRequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Registration_2fRegistrationRequest_2eproto {
  StaticDescriptorInitializer_Registration_2fRegistrationRequest_2eproto() {
    protobuf_AddDesc_Registration_2fRegistrationRequest_2eproto();
  }
} static_descriptor_initializer_Registration_2fRegistrationRequest_2eproto_;
const ::google::protobuf::EnumDescriptor* RegistrationStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistrationStatus_descriptor_;
}
bool RegistrationStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RegistrationRequest::kCertificateContentFieldNumber;
const int RegistrationRequest::kThumbprintFieldNumber;
#endif  // !_MSC_VER

RegistrationRequest::RegistrationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Registration.RegistrationRequest)
}

void RegistrationRequest::InitAsDefaultInstance() {
}

RegistrationRequest::RegistrationRequest(const RegistrationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Registration.RegistrationRequest)
}

void RegistrationRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  certificatecontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistrationRequest::~RegistrationRequest() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Registration.RegistrationRequest)
  SharedDtor();
}

void RegistrationRequest::SharedDtor() {
  if (certificatecontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete certificatecontent_;
  }
  if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumbprint_;
  }
  if (this != default_instance_) {
  }
}

void RegistrationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistrationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistrationRequest_descriptor_;
}

const RegistrationRequest& RegistrationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Registration_2fRegistrationRequest_2eproto();
  return *default_instance_;
}

RegistrationRequest* RegistrationRequest::default_instance_ = NULL;

RegistrationRequest* RegistrationRequest::New() const {
  return new RegistrationRequest;
}

void RegistrationRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_certificatecontent()) {
      if (certificatecontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        certificatecontent_->clear();
      }
    }
    if (has_thumbprint()) {
      if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thumbprint_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistrationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Registration.RegistrationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes CertificateContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_certificatecontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Thumbprint;
        break;
      }

      // optional string Thumbprint = 2;
      case 2: {
        if (tag == 18) {
         parse_Thumbprint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbprint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbprint().data(), this->thumbprint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thumbprint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Registration.RegistrationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Registration.RegistrationRequest)
  return false;
#undef DO_
}

void RegistrationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Registration.RegistrationRequest)
  // optional bytes CertificateContent = 1;
  if (has_certificatecontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->certificatecontent(), output);
  }

  // optional string Thumbprint = 2;
  if (has_thumbprint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbprint().data(), this->thumbprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumbprint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->thumbprint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Registration.RegistrationRequest)
}

::google::protobuf::uint8* RegistrationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Registration.RegistrationRequest)
  // optional bytes CertificateContent = 1;
  if (has_certificatecontent()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->certificatecontent(), target);
  }

  // optional string Thumbprint = 2;
  if (has_thumbprint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbprint().data(), this->thumbprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumbprint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->thumbprint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Registration.RegistrationRequest)
  return target;
}

int RegistrationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes CertificateContent = 1;
    if (has_certificatecontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->certificatecontent());
    }

    // optional string Thumbprint = 2;
    if (has_thumbprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbprint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistrationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistrationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistrationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistrationRequest::MergeFrom(const RegistrationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_certificatecontent()) {
      set_certificatecontent(from.certificatecontent());
    }
    if (from.has_thumbprint()) {
      set_thumbprint(from.thumbprint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistrationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistrationRequest::CopyFrom(const RegistrationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationRequest::IsInitialized() const {

  return true;
}

void RegistrationRequest::Swap(RegistrationRequest* other) {
  if (other != this) {
    std::swap(certificatecontent_, other->certificatecontent_);
    std::swap(thumbprint_, other->thumbprint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistrationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistrationRequest_descriptor_;
  metadata.reflection = RegistrationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegistrationResponse::kRegistrationStatusFieldNumber;
const int RegistrationResponse::kBoxIdFieldNumber;
const int RegistrationResponse::kDataToSignFieldNumber;
#endif  // !_MSC_VER

RegistrationResponse::RegistrationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Registration.RegistrationResponse)
}

void RegistrationResponse::InitAsDefaultInstance() {
}

RegistrationResponse::RegistrationResponse(const RegistrationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Registration.RegistrationResponse)
}

void RegistrationResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  registrationstatus_ = 0;
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datatosign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistrationResponse::~RegistrationResponse() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Registration.RegistrationResponse)
  SharedDtor();
}

void RegistrationResponse::SharedDtor() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (datatosign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete datatosign_;
  }
  if (this != default_instance_) {
  }
}

void RegistrationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistrationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistrationResponse_descriptor_;
}

const RegistrationResponse& RegistrationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Registration_2fRegistrationRequest_2eproto();
  return *default_instance_;
}

RegistrationResponse* RegistrationResponse::default_instance_ = NULL;

RegistrationResponse* RegistrationResponse::New() const {
  return new RegistrationResponse;
}

void RegistrationResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    registrationstatus_ = 0;
    if (has_boxid()) {
      if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boxid_->clear();
      }
    }
    if (has_datatosign()) {
      if (datatosign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        datatosign_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistrationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Registration.RegistrationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Registration.RegistrationStatus RegistrationStatus = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Registration::RegistrationStatus_IsValid(value)) {
            set_registrationstatus(static_cast< ::Diadoc::Api::Proto::Registration::RegistrationStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BoxId;
        break;
      }

      // optional string BoxId = 2;
      case 2: {
        if (tag == 18) {
         parse_BoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DataToSign;
        break;
      }

      // optional bytes DataToSign = 3;
      case 3: {
        if (tag == 26) {
         parse_DataToSign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_datatosign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Registration.RegistrationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Registration.RegistrationResponse)
  return false;
#undef DO_
}

void RegistrationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Registration.RegistrationResponse)
  // required .Diadoc.Api.Proto.Registration.RegistrationStatus RegistrationStatus = 1;
  if (has_registrationstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->registrationstatus(), output);
  }

  // optional string BoxId = 2;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->boxid(), output);
  }

  // optional bytes DataToSign = 3;
  if (has_datatosign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->datatosign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Registration.RegistrationResponse)
}

::google::protobuf::uint8* RegistrationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Registration.RegistrationResponse)
  // required .Diadoc.Api.Proto.Registration.RegistrationStatus RegistrationStatus = 1;
  if (has_registrationstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->registrationstatus(), target);
  }

  // optional string BoxId = 2;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->boxid(), target);
  }

  // optional bytes DataToSign = 3;
  if (has_datatosign()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->datatosign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Registration.RegistrationResponse)
  return target;
}

int RegistrationResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Registration.RegistrationStatus RegistrationStatus = 1;
    if (has_registrationstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->registrationstatus());
    }

    // optional string BoxId = 2;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

    // optional bytes DataToSign = 3;
    if (has_datatosign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->datatosign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistrationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistrationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistrationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistrationResponse::MergeFrom(const RegistrationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_registrationstatus()) {
      set_registrationstatus(from.registrationstatus());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_datatosign()) {
      set_datatosign(from.datatosign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistrationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistrationResponse::CopyFrom(const RegistrationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegistrationResponse::Swap(RegistrationResponse* other) {
  if (other != this) {
    std::swap(registrationstatus_, other->registrationstatus_);
    std::swap(boxid_, other->boxid_);
    std::swap(datatosign_, other->datatosign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistrationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistrationResponse_descriptor_;
  metadata.reflection = RegistrationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegistrationConfirmRequest::kCertificateContentFieldNumber;
const int RegistrationConfirmRequest::kThumbprintFieldNumber;
const int RegistrationConfirmRequest::kDataToSignFieldNumber;
const int RegistrationConfirmRequest::kSignatureFieldNumber;
#endif  // !_MSC_VER

RegistrationConfirmRequest::RegistrationConfirmRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest)
}

void RegistrationConfirmRequest::InitAsDefaultInstance() {
}

RegistrationConfirmRequest::RegistrationConfirmRequest(const RegistrationConfirmRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest)
}

void RegistrationConfirmRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  certificatecontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datatosign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistrationConfirmRequest::~RegistrationConfirmRequest() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest)
  SharedDtor();
}

void RegistrationConfirmRequest::SharedDtor() {
  if (certificatecontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete certificatecontent_;
  }
  if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumbprint_;
  }
  if (datatosign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete datatosign_;
  }
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void RegistrationConfirmRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistrationConfirmRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistrationConfirmRequest_descriptor_;
}

const RegistrationConfirmRequest& RegistrationConfirmRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Registration_2fRegistrationRequest_2eproto();
  return *default_instance_;
}

RegistrationConfirmRequest* RegistrationConfirmRequest::default_instance_ = NULL;

RegistrationConfirmRequest* RegistrationConfirmRequest::New() const {
  return new RegistrationConfirmRequest;
}

void RegistrationConfirmRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_certificatecontent()) {
      if (certificatecontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        certificatecontent_->clear();
      }
    }
    if (has_thumbprint()) {
      if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thumbprint_->clear();
      }
    }
    if (has_datatosign()) {
      if (datatosign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        datatosign_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistrationConfirmRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes CertificateContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_certificatecontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Thumbprint;
        break;
      }

      // optional string Thumbprint = 2;
      case 2: {
        if (tag == 18) {
         parse_Thumbprint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbprint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbprint().data(), this->thumbprint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thumbprint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DataToSign;
        break;
      }

      // required bytes DataToSign = 3;
      case 3: {
        if (tag == 26) {
         parse_DataToSign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_datatosign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Signature;
        break;
      }

      // required bytes Signature = 4;
      case 4: {
        if (tag == 34) {
         parse_Signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest)
  return false;
#undef DO_
}

void RegistrationConfirmRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest)
  // optional bytes CertificateContent = 1;
  if (has_certificatecontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->certificatecontent(), output);
  }

  // optional string Thumbprint = 2;
  if (has_thumbprint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbprint().data(), this->thumbprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumbprint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->thumbprint(), output);
  }

  // required bytes DataToSign = 3;
  if (has_datatosign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->datatosign(), output);
  }

  // required bytes Signature = 4;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest)
}

::google::protobuf::uint8* RegistrationConfirmRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest)
  // optional bytes CertificateContent = 1;
  if (has_certificatecontent()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->certificatecontent(), target);
  }

  // optional string Thumbprint = 2;
  if (has_thumbprint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbprint().data(), this->thumbprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumbprint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->thumbprint(), target);
  }

  // required bytes DataToSign = 3;
  if (has_datatosign()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->datatosign(), target);
  }

  // required bytes Signature = 4;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest)
  return target;
}

int RegistrationConfirmRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes CertificateContent = 1;
    if (has_certificatecontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->certificatecontent());
    }

    // optional string Thumbprint = 2;
    if (has_thumbprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbprint());
    }

    // required bytes DataToSign = 3;
    if (has_datatosign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->datatosign());
    }

    // required bytes Signature = 4;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistrationConfirmRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistrationConfirmRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistrationConfirmRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistrationConfirmRequest::MergeFrom(const RegistrationConfirmRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_certificatecontent()) {
      set_certificatecontent(from.certificatecontent());
    }
    if (from.has_thumbprint()) {
      set_thumbprint(from.thumbprint());
    }
    if (from.has_datatosign()) {
      set_datatosign(from.datatosign());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistrationConfirmRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistrationConfirmRequest::CopyFrom(const RegistrationConfirmRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationConfirmRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void RegistrationConfirmRequest::Swap(RegistrationConfirmRequest* other) {
  if (other != this) {
    std::swap(certificatecontent_, other->certificatecontent_);
    std::swap(thumbprint_, other->thumbprint_);
    std::swap(datatosign_, other->datatosign_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistrationConfirmRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistrationConfirmRequest_descriptor_;
  metadata.reflection = RegistrationConfirmRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Registration
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
