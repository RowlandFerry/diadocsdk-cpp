// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Registration/RegistrationRequest.proto

#ifndef PROTOBUF_Registration_2fRegistrationRequest_2eproto__INCLUDED
#define PROTOBUF_Registration_2fRegistrationRequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Registration {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Registration_2fRegistrationRequest_2eproto();
void protobuf_AssignDesc_Registration_2fRegistrationRequest_2eproto();
void protobuf_ShutdownFile_Registration_2fRegistrationRequest_2eproto();

class RegistrationRequest;
class RegistrationResponse;
class RegistrationConfirmRequest;

enum RegistrationStatus {
  Unknown = 0,
  AccessIsDenied = 1,
  AccessRequestIsRejected = 2,
  CertificateOwnershipProofIsRequired = 3,
  CertificateIsNotQualified = 4,
  RegistrationIsCompleted = 5,
  RegistrationIsInProgress = 6,
  RegistrationInBranchIsForbidden = 7,
  AccessRequestIsPending = 8,
  OrganizationNotFound = 9
};
bool RegistrationStatus_IsValid(int value);
const RegistrationStatus RegistrationStatus_MIN = Unknown;
const RegistrationStatus RegistrationStatus_MAX = OrganizationNotFound;
const int RegistrationStatus_ARRAYSIZE = RegistrationStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* RegistrationStatus_descriptor();
inline const ::std::string& RegistrationStatus_Name(RegistrationStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    RegistrationStatus_descriptor(), value);
}
inline bool RegistrationStatus_Parse(
    const ::std::string& name, RegistrationStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RegistrationStatus>(
    RegistrationStatus_descriptor(), name, value);
}
// ===================================================================

class RegistrationRequest : public ::google::protobuf::Message {
 public:
  RegistrationRequest();
  virtual ~RegistrationRequest();

  RegistrationRequest(const RegistrationRequest& from);

  inline RegistrationRequest& operator=(const RegistrationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistrationRequest& default_instance();

  void Swap(RegistrationRequest* other);

  // implements Message ----------------------------------------------

  RegistrationRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegistrationRequest& from);
  void MergeFrom(const RegistrationRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes CertificateContent = 1;
  inline bool has_certificatecontent() const;
  inline void clear_certificatecontent();
  static const int kCertificateContentFieldNumber = 1;
  inline const ::std::string& certificatecontent() const;
  inline void set_certificatecontent(const ::std::string& value);
  inline void set_certificatecontent(const char* value);
  inline void set_certificatecontent(const void* value, size_t size);
  inline ::std::string* mutable_certificatecontent();
  inline ::std::string* release_certificatecontent();
  inline void set_allocated_certificatecontent(::std::string* certificatecontent);

  // optional string Thumbprint = 2;
  inline bool has_thumbprint() const;
  inline void clear_thumbprint();
  static const int kThumbprintFieldNumber = 2;
  inline const ::std::string& thumbprint() const;
  inline void set_thumbprint(const ::std::string& value);
  inline void set_thumbprint(const char* value);
  inline void set_thumbprint(const char* value, size_t size);
  inline ::std::string* mutable_thumbprint();
  inline ::std::string* release_thumbprint();
  inline void set_allocated_thumbprint(::std::string* thumbprint);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Registration.RegistrationRequest)
 private:
  inline void set_has_certificatecontent();
  inline void clear_has_certificatecontent();
  inline void set_has_thumbprint();
  inline void clear_has_thumbprint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* certificatecontent_;
  ::std::string* thumbprint_;
  friend void  protobuf_AddDesc_Registration_2fRegistrationRequest_2eproto();
  friend void protobuf_AssignDesc_Registration_2fRegistrationRequest_2eproto();
  friend void protobuf_ShutdownFile_Registration_2fRegistrationRequest_2eproto();

  void InitAsDefaultInstance();
  static RegistrationRequest* default_instance_;
};
// -------------------------------------------------------------------

class RegistrationResponse : public ::google::protobuf::Message {
 public:
  RegistrationResponse();
  virtual ~RegistrationResponse();

  RegistrationResponse(const RegistrationResponse& from);

  inline RegistrationResponse& operator=(const RegistrationResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistrationResponse& default_instance();

  void Swap(RegistrationResponse* other);

  // implements Message ----------------------------------------------

  RegistrationResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegistrationResponse& from);
  void MergeFrom(const RegistrationResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Registration.RegistrationStatus RegistrationStatus = 1;
  inline bool has_registrationstatus() const;
  inline void clear_registrationstatus();
  static const int kRegistrationStatusFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Registration::RegistrationStatus registrationstatus() const;
  inline void set_registrationstatus(::Diadoc::Api::Proto::Registration::RegistrationStatus value);

  // optional string BoxId = 2;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 2;
  inline const ::std::string& boxid() const;
  inline void set_boxid(const ::std::string& value);
  inline void set_boxid(const char* value);
  inline void set_boxid(const char* value, size_t size);
  inline ::std::string* mutable_boxid();
  inline ::std::string* release_boxid();
  inline void set_allocated_boxid(::std::string* boxid);

  // optional bytes DataToSign = 3;
  inline bool has_datatosign() const;
  inline void clear_datatosign();
  static const int kDataToSignFieldNumber = 3;
  inline const ::std::string& datatosign() const;
  inline void set_datatosign(const ::std::string& value);
  inline void set_datatosign(const char* value);
  inline void set_datatosign(const void* value, size_t size);
  inline ::std::string* mutable_datatosign();
  inline ::std::string* release_datatosign();
  inline void set_allocated_datatosign(::std::string* datatosign);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Registration.RegistrationResponse)
 private:
  inline void set_has_registrationstatus();
  inline void clear_has_registrationstatus();
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_datatosign();
  inline void clear_has_datatosign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* boxid_;
  ::std::string* datatosign_;
  int registrationstatus_;
  friend void  protobuf_AddDesc_Registration_2fRegistrationRequest_2eproto();
  friend void protobuf_AssignDesc_Registration_2fRegistrationRequest_2eproto();
  friend void protobuf_ShutdownFile_Registration_2fRegistrationRequest_2eproto();

  void InitAsDefaultInstance();
  static RegistrationResponse* default_instance_;
};
// -------------------------------------------------------------------

class RegistrationConfirmRequest : public ::google::protobuf::Message {
 public:
  RegistrationConfirmRequest();
  virtual ~RegistrationConfirmRequest();

  RegistrationConfirmRequest(const RegistrationConfirmRequest& from);

  inline RegistrationConfirmRequest& operator=(const RegistrationConfirmRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistrationConfirmRequest& default_instance();

  void Swap(RegistrationConfirmRequest* other);

  // implements Message ----------------------------------------------

  RegistrationConfirmRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegistrationConfirmRequest& from);
  void MergeFrom(const RegistrationConfirmRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes CertificateContent = 1;
  inline bool has_certificatecontent() const;
  inline void clear_certificatecontent();
  static const int kCertificateContentFieldNumber = 1;
  inline const ::std::string& certificatecontent() const;
  inline void set_certificatecontent(const ::std::string& value);
  inline void set_certificatecontent(const char* value);
  inline void set_certificatecontent(const void* value, size_t size);
  inline ::std::string* mutable_certificatecontent();
  inline ::std::string* release_certificatecontent();
  inline void set_allocated_certificatecontent(::std::string* certificatecontent);

  // optional string Thumbprint = 2;
  inline bool has_thumbprint() const;
  inline void clear_thumbprint();
  static const int kThumbprintFieldNumber = 2;
  inline const ::std::string& thumbprint() const;
  inline void set_thumbprint(const ::std::string& value);
  inline void set_thumbprint(const char* value);
  inline void set_thumbprint(const char* value, size_t size);
  inline ::std::string* mutable_thumbprint();
  inline ::std::string* release_thumbprint();
  inline void set_allocated_thumbprint(::std::string* thumbprint);

  // required bytes DataToSign = 3;
  inline bool has_datatosign() const;
  inline void clear_datatosign();
  static const int kDataToSignFieldNumber = 3;
  inline const ::std::string& datatosign() const;
  inline void set_datatosign(const ::std::string& value);
  inline void set_datatosign(const char* value);
  inline void set_datatosign(const void* value, size_t size);
  inline ::std::string* mutable_datatosign();
  inline ::std::string* release_datatosign();
  inline void set_allocated_datatosign(::std::string* datatosign);

  // required bytes Signature = 4;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 4;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest)
 private:
  inline void set_has_certificatecontent();
  inline void clear_has_certificatecontent();
  inline void set_has_thumbprint();
  inline void clear_has_thumbprint();
  inline void set_has_datatosign();
  inline void clear_has_datatosign();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* certificatecontent_;
  ::std::string* thumbprint_;
  ::std::string* datatosign_;
  ::std::string* signature_;
  friend void  protobuf_AddDesc_Registration_2fRegistrationRequest_2eproto();
  friend void protobuf_AssignDesc_Registration_2fRegistrationRequest_2eproto();
  friend void protobuf_ShutdownFile_Registration_2fRegistrationRequest_2eproto();

  void InitAsDefaultInstance();
  static RegistrationConfirmRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// RegistrationRequest

// optional bytes CertificateContent = 1;
inline bool RegistrationRequest::has_certificatecontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegistrationRequest::set_has_certificatecontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegistrationRequest::clear_has_certificatecontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegistrationRequest::clear_certificatecontent() {
  if (certificatecontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificatecontent_->clear();
  }
  clear_has_certificatecontent();
}
inline const ::std::string& RegistrationRequest::certificatecontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Registration.RegistrationRequest.CertificateContent)
  return *certificatecontent_;
}
inline void RegistrationRequest::set_certificatecontent(const ::std::string& value) {
  set_has_certificatecontent();
  if (certificatecontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificatecontent_ = new ::std::string;
  }
  certificatecontent_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Registration.RegistrationRequest.CertificateContent)
}
inline void RegistrationRequest::set_certificatecontent(const char* value) {
  set_has_certificatecontent();
  if (certificatecontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificatecontent_ = new ::std::string;
  }
  certificatecontent_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Registration.RegistrationRequest.CertificateContent)
}
inline void RegistrationRequest::set_certificatecontent(const void* value, size_t size) {
  set_has_certificatecontent();
  if (certificatecontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificatecontent_ = new ::std::string;
  }
  certificatecontent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Registration.RegistrationRequest.CertificateContent)
}
inline ::std::string* RegistrationRequest::mutable_certificatecontent() {
  set_has_certificatecontent();
  if (certificatecontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificatecontent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Registration.RegistrationRequest.CertificateContent)
  return certificatecontent_;
}
inline ::std::string* RegistrationRequest::release_certificatecontent() {
  clear_has_certificatecontent();
  if (certificatecontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = certificatecontent_;
    certificatecontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegistrationRequest::set_allocated_certificatecontent(::std::string* certificatecontent) {
  if (certificatecontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete certificatecontent_;
  }
  if (certificatecontent) {
    set_has_certificatecontent();
    certificatecontent_ = certificatecontent;
  } else {
    clear_has_certificatecontent();
    certificatecontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Registration.RegistrationRequest.CertificateContent)
}

// optional string Thumbprint = 2;
inline bool RegistrationRequest::has_thumbprint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegistrationRequest::set_has_thumbprint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegistrationRequest::clear_has_thumbprint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegistrationRequest::clear_thumbprint() {
  if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_->clear();
  }
  clear_has_thumbprint();
}
inline const ::std::string& RegistrationRequest::thumbprint() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Registration.RegistrationRequest.Thumbprint)
  return *thumbprint_;
}
inline void RegistrationRequest::set_thumbprint(const ::std::string& value) {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  thumbprint_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Registration.RegistrationRequest.Thumbprint)
}
inline void RegistrationRequest::set_thumbprint(const char* value) {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  thumbprint_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Registration.RegistrationRequest.Thumbprint)
}
inline void RegistrationRequest::set_thumbprint(const char* value, size_t size) {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  thumbprint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Registration.RegistrationRequest.Thumbprint)
}
inline ::std::string* RegistrationRequest::mutable_thumbprint() {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Registration.RegistrationRequest.Thumbprint)
  return thumbprint_;
}
inline ::std::string* RegistrationRequest::release_thumbprint() {
  clear_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = thumbprint_;
    thumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegistrationRequest::set_allocated_thumbprint(::std::string* thumbprint) {
  if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumbprint_;
  }
  if (thumbprint) {
    set_has_thumbprint();
    thumbprint_ = thumbprint;
  } else {
    clear_has_thumbprint();
    thumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Registration.RegistrationRequest.Thumbprint)
}

// -------------------------------------------------------------------

// RegistrationResponse

// required .Diadoc.Api.Proto.Registration.RegistrationStatus RegistrationStatus = 1;
inline bool RegistrationResponse::has_registrationstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegistrationResponse::set_has_registrationstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegistrationResponse::clear_has_registrationstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegistrationResponse::clear_registrationstatus() {
  registrationstatus_ = 0;
  clear_has_registrationstatus();
}
inline ::Diadoc::Api::Proto::Registration::RegistrationStatus RegistrationResponse::registrationstatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Registration.RegistrationResponse.RegistrationStatus)
  return static_cast< ::Diadoc::Api::Proto::Registration::RegistrationStatus >(registrationstatus_);
}
inline void RegistrationResponse::set_registrationstatus(::Diadoc::Api::Proto::Registration::RegistrationStatus value) {
  assert(::Diadoc::Api::Proto::Registration::RegistrationStatus_IsValid(value));
  set_has_registrationstatus();
  registrationstatus_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Registration.RegistrationResponse.RegistrationStatus)
}

// optional string BoxId = 2;
inline bool RegistrationResponse::has_boxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegistrationResponse::set_has_boxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegistrationResponse::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegistrationResponse::clear_boxid() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_->clear();
  }
  clear_has_boxid();
}
inline const ::std::string& RegistrationResponse::boxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Registration.RegistrationResponse.BoxId)
  return *boxid_;
}
inline void RegistrationResponse::set_boxid(const ::std::string& value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Registration.RegistrationResponse.BoxId)
}
inline void RegistrationResponse::set_boxid(const char* value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Registration.RegistrationResponse.BoxId)
}
inline void RegistrationResponse::set_boxid(const char* value, size_t size) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Registration.RegistrationResponse.BoxId)
}
inline ::std::string* RegistrationResponse::mutable_boxid() {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Registration.RegistrationResponse.BoxId)
  return boxid_;
}
inline ::std::string* RegistrationResponse::release_boxid() {
  clear_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = boxid_;
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegistrationResponse::set_allocated_boxid(::std::string* boxid) {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (boxid) {
    set_has_boxid();
    boxid_ = boxid;
  } else {
    clear_has_boxid();
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Registration.RegistrationResponse.BoxId)
}

// optional bytes DataToSign = 3;
inline bool RegistrationResponse::has_datatosign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegistrationResponse::set_has_datatosign() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegistrationResponse::clear_has_datatosign() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegistrationResponse::clear_datatosign() {
  if (datatosign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datatosign_->clear();
  }
  clear_has_datatosign();
}
inline const ::std::string& RegistrationResponse::datatosign() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Registration.RegistrationResponse.DataToSign)
  return *datatosign_;
}
inline void RegistrationResponse::set_datatosign(const ::std::string& value) {
  set_has_datatosign();
  if (datatosign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datatosign_ = new ::std::string;
  }
  datatosign_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Registration.RegistrationResponse.DataToSign)
}
inline void RegistrationResponse::set_datatosign(const char* value) {
  set_has_datatosign();
  if (datatosign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datatosign_ = new ::std::string;
  }
  datatosign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Registration.RegistrationResponse.DataToSign)
}
inline void RegistrationResponse::set_datatosign(const void* value, size_t size) {
  set_has_datatosign();
  if (datatosign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datatosign_ = new ::std::string;
  }
  datatosign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Registration.RegistrationResponse.DataToSign)
}
inline ::std::string* RegistrationResponse::mutable_datatosign() {
  set_has_datatosign();
  if (datatosign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datatosign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Registration.RegistrationResponse.DataToSign)
  return datatosign_;
}
inline ::std::string* RegistrationResponse::release_datatosign() {
  clear_has_datatosign();
  if (datatosign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = datatosign_;
    datatosign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegistrationResponse::set_allocated_datatosign(::std::string* datatosign) {
  if (datatosign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete datatosign_;
  }
  if (datatosign) {
    set_has_datatosign();
    datatosign_ = datatosign;
  } else {
    clear_has_datatosign();
    datatosign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Registration.RegistrationResponse.DataToSign)
}

// -------------------------------------------------------------------

// RegistrationConfirmRequest

// optional bytes CertificateContent = 1;
inline bool RegistrationConfirmRequest::has_certificatecontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegistrationConfirmRequest::set_has_certificatecontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegistrationConfirmRequest::clear_has_certificatecontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegistrationConfirmRequest::clear_certificatecontent() {
  if (certificatecontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificatecontent_->clear();
  }
  clear_has_certificatecontent();
}
inline const ::std::string& RegistrationConfirmRequest::certificatecontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.CertificateContent)
  return *certificatecontent_;
}
inline void RegistrationConfirmRequest::set_certificatecontent(const ::std::string& value) {
  set_has_certificatecontent();
  if (certificatecontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificatecontent_ = new ::std::string;
  }
  certificatecontent_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.CertificateContent)
}
inline void RegistrationConfirmRequest::set_certificatecontent(const char* value) {
  set_has_certificatecontent();
  if (certificatecontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificatecontent_ = new ::std::string;
  }
  certificatecontent_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.CertificateContent)
}
inline void RegistrationConfirmRequest::set_certificatecontent(const void* value, size_t size) {
  set_has_certificatecontent();
  if (certificatecontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificatecontent_ = new ::std::string;
  }
  certificatecontent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.CertificateContent)
}
inline ::std::string* RegistrationConfirmRequest::mutable_certificatecontent() {
  set_has_certificatecontent();
  if (certificatecontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificatecontent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.CertificateContent)
  return certificatecontent_;
}
inline ::std::string* RegistrationConfirmRequest::release_certificatecontent() {
  clear_has_certificatecontent();
  if (certificatecontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = certificatecontent_;
    certificatecontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegistrationConfirmRequest::set_allocated_certificatecontent(::std::string* certificatecontent) {
  if (certificatecontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete certificatecontent_;
  }
  if (certificatecontent) {
    set_has_certificatecontent();
    certificatecontent_ = certificatecontent;
  } else {
    clear_has_certificatecontent();
    certificatecontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.CertificateContent)
}

// optional string Thumbprint = 2;
inline bool RegistrationConfirmRequest::has_thumbprint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegistrationConfirmRequest::set_has_thumbprint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegistrationConfirmRequest::clear_has_thumbprint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegistrationConfirmRequest::clear_thumbprint() {
  if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_->clear();
  }
  clear_has_thumbprint();
}
inline const ::std::string& RegistrationConfirmRequest::thumbprint() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.Thumbprint)
  return *thumbprint_;
}
inline void RegistrationConfirmRequest::set_thumbprint(const ::std::string& value) {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  thumbprint_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.Thumbprint)
}
inline void RegistrationConfirmRequest::set_thumbprint(const char* value) {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  thumbprint_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.Thumbprint)
}
inline void RegistrationConfirmRequest::set_thumbprint(const char* value, size_t size) {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  thumbprint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.Thumbprint)
}
inline ::std::string* RegistrationConfirmRequest::mutable_thumbprint() {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.Thumbprint)
  return thumbprint_;
}
inline ::std::string* RegistrationConfirmRequest::release_thumbprint() {
  clear_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = thumbprint_;
    thumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegistrationConfirmRequest::set_allocated_thumbprint(::std::string* thumbprint) {
  if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumbprint_;
  }
  if (thumbprint) {
    set_has_thumbprint();
    thumbprint_ = thumbprint;
  } else {
    clear_has_thumbprint();
    thumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.Thumbprint)
}

// required bytes DataToSign = 3;
inline bool RegistrationConfirmRequest::has_datatosign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegistrationConfirmRequest::set_has_datatosign() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegistrationConfirmRequest::clear_has_datatosign() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegistrationConfirmRequest::clear_datatosign() {
  if (datatosign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datatosign_->clear();
  }
  clear_has_datatosign();
}
inline const ::std::string& RegistrationConfirmRequest::datatosign() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.DataToSign)
  return *datatosign_;
}
inline void RegistrationConfirmRequest::set_datatosign(const ::std::string& value) {
  set_has_datatosign();
  if (datatosign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datatosign_ = new ::std::string;
  }
  datatosign_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.DataToSign)
}
inline void RegistrationConfirmRequest::set_datatosign(const char* value) {
  set_has_datatosign();
  if (datatosign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datatosign_ = new ::std::string;
  }
  datatosign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.DataToSign)
}
inline void RegistrationConfirmRequest::set_datatosign(const void* value, size_t size) {
  set_has_datatosign();
  if (datatosign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datatosign_ = new ::std::string;
  }
  datatosign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.DataToSign)
}
inline ::std::string* RegistrationConfirmRequest::mutable_datatosign() {
  set_has_datatosign();
  if (datatosign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datatosign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.DataToSign)
  return datatosign_;
}
inline ::std::string* RegistrationConfirmRequest::release_datatosign() {
  clear_has_datatosign();
  if (datatosign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = datatosign_;
    datatosign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegistrationConfirmRequest::set_allocated_datatosign(::std::string* datatosign) {
  if (datatosign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete datatosign_;
  }
  if (datatosign) {
    set_has_datatosign();
    datatosign_ = datatosign;
  } else {
    clear_has_datatosign();
    datatosign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.DataToSign)
}

// required bytes Signature = 4;
inline bool RegistrationConfirmRequest::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegistrationConfirmRequest::set_has_signature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegistrationConfirmRequest::clear_has_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegistrationConfirmRequest::clear_signature() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& RegistrationConfirmRequest::signature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.Signature)
  return *signature_;
}
inline void RegistrationConfirmRequest::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.Signature)
}
inline void RegistrationConfirmRequest::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.Signature)
}
inline void RegistrationConfirmRequest::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.Signature)
}
inline ::std::string* RegistrationConfirmRequest::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.Signature)
  return signature_;
}
inline ::std::string* RegistrationConfirmRequest::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegistrationConfirmRequest::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Registration.RegistrationConfirmRequest.Signature)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Registration
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Diadoc::Api::Proto::Registration::RegistrationStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Registration::RegistrationStatus>() {
  return ::Diadoc::Api::Proto::Registration::RegistrationStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Registration_2fRegistrationRequest_2eproto__INCLUDED
