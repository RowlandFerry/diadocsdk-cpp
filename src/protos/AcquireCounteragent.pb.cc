// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AcquireCounteragent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AcquireCounteragent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* AcquireCounteragentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcquireCounteragentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvitationDocument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvitationDocument_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcquireCounteragentResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcquireCounteragentResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AcquireCounteragent_2eproto() {
  protobuf_AddDesc_AcquireCounteragent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AcquireCounteragent.proto");
  GOOGLE_CHECK(file != NULL);
  AcquireCounteragentRequest_descriptor_ = file->message_type(0);
  static const int AcquireCounteragentRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquireCounteragentRequest, orgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquireCounteragentRequest, inn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquireCounteragentRequest, messagetocounteragent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquireCounteragentRequest, invitationdocument_),
  };
  AcquireCounteragentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcquireCounteragentRequest_descriptor_,
      AcquireCounteragentRequest::default_instance_,
      AcquireCounteragentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquireCounteragentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquireCounteragentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcquireCounteragentRequest));
  InvitationDocument_descriptor_ = file->message_type(1);
  static const int InvitationDocument_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationDocument, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationDocument, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationDocument, signaturerequested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationDocument, type_),
  };
  InvitationDocument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvitationDocument_descriptor_,
      InvitationDocument::default_instance_,
      InvitationDocument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationDocument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationDocument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvitationDocument));
  AcquireCounteragentResult_descriptor_ = file->message_type(2);
  static const int AcquireCounteragentResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquireCounteragentResult, orgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquireCounteragentResult, invitationdocumentid_),
  };
  AcquireCounteragentResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcquireCounteragentResult_descriptor_,
      AcquireCounteragentResult::default_instance_,
      AcquireCounteragentResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquireCounteragentResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquireCounteragentResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcquireCounteragentResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AcquireCounteragent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcquireCounteragentRequest_descriptor_, &AcquireCounteragentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvitationDocument_descriptor_, &InvitationDocument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcquireCounteragentResult_descriptor_, &AcquireCounteragentResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AcquireCounteragent_2eproto() {
  delete AcquireCounteragentRequest::default_instance_;
  delete AcquireCounteragentRequest_reflection_;
  delete InvitationDocument::default_instance_;
  delete InvitationDocument_reflection_;
  delete AcquireCounteragentResult::default_instance_;
  delete AcquireCounteragentResult_reflection_;
}

void protobuf_AddDesc_AcquireCounteragent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::Events::protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_DocumentId_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031AcquireCounteragent.proto\022\020Diadoc.Api."
    "Proto\032\"Events/DiadocMessage-PostApi.prot"
    "o\032\020DocumentId.proto\"\231\001\n\032AcquireCounterag"
    "entRequest\022\r\n\005OrgId\030\001 \001(\t\022\013\n\003Inn\030\002 \001(\t\022\035"
    "\n\025MessageToCounteragent\030\003 \001(\t\022@\n\022Invitat"
    "ionDocument\030\004 \001(\0132$.Diadoc.Api.Proto.Inv"
    "itationDocument\"\226\001\n\022InvitationDocument\022="
    "\n\rSignedContent\030\001 \002(\0132&.Diadoc.Api.Proto"
    ".Events.SignedContent\022\020\n\010FileName\030\002 \002(\t\022"
    "!\n\022SignatureRequested\030\003 \001(\010:\005false\022\014\n\004Ty"
    "pe\030\004 \001(\t\"f\n\031AcquireCounteragentResult\022\r\n"
    "\005OrgId\030\001 \002(\t\022:\n\024InvitationDocumentId\030\002 \001"
    "(\0132\034.Diadoc.Api.Proto.DocumentId", 512);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AcquireCounteragent.proto", &protobuf_RegisterTypes);
  AcquireCounteragentRequest::default_instance_ = new AcquireCounteragentRequest();
  InvitationDocument::default_instance_ = new InvitationDocument();
  AcquireCounteragentResult::default_instance_ = new AcquireCounteragentResult();
  AcquireCounteragentRequest::default_instance_->InitAsDefaultInstance();
  InvitationDocument::default_instance_->InitAsDefaultInstance();
  AcquireCounteragentResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AcquireCounteragent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AcquireCounteragent_2eproto {
  StaticDescriptorInitializer_AcquireCounteragent_2eproto() {
    protobuf_AddDesc_AcquireCounteragent_2eproto();
  }
} static_descriptor_initializer_AcquireCounteragent_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AcquireCounteragentRequest::kOrgIdFieldNumber;
const int AcquireCounteragentRequest::kInnFieldNumber;
const int AcquireCounteragentRequest::kMessageToCounteragentFieldNumber;
const int AcquireCounteragentRequest::kInvitationDocumentFieldNumber;
#endif  // !_MSC_VER

AcquireCounteragentRequest::AcquireCounteragentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.AcquireCounteragentRequest)
}

void AcquireCounteragentRequest::InitAsDefaultInstance() {
  invitationdocument_ = const_cast< ::Diadoc::Api::Proto::InvitationDocument*>(&::Diadoc::Api::Proto::InvitationDocument::default_instance());
}

AcquireCounteragentRequest::AcquireCounteragentRequest(const AcquireCounteragentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.AcquireCounteragentRequest)
}

void AcquireCounteragentRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetocounteragent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitationdocument_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcquireCounteragentRequest::~AcquireCounteragentRequest() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.AcquireCounteragentRequest)
  SharedDtor();
}

void AcquireCounteragentRequest::SharedDtor() {
  if (orgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgid_;
  }
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inn_;
  }
  if (messagetocounteragent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagetocounteragent_;
  }
  if (this != default_instance_) {
    delete invitationdocument_;
  }
}

void AcquireCounteragentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcquireCounteragentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcquireCounteragentRequest_descriptor_;
}

const AcquireCounteragentRequest& AcquireCounteragentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AcquireCounteragent_2eproto();
  return *default_instance_;
}

AcquireCounteragentRequest* AcquireCounteragentRequest::default_instance_ = NULL;

AcquireCounteragentRequest* AcquireCounteragentRequest::New() const {
  return new AcquireCounteragentRequest;
}

void AcquireCounteragentRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_orgid()) {
      if (orgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orgid_->clear();
      }
    }
    if (has_inn()) {
      if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inn_->clear();
      }
    }
    if (has_messagetocounteragent()) {
      if (messagetocounteragent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messagetocounteragent_->clear();
      }
    }
    if (has_invitationdocument()) {
      if (invitationdocument_ != NULL) invitationdocument_->::Diadoc::Api::Proto::InvitationDocument::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcquireCounteragentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.AcquireCounteragentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string OrgId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orgid().data(), this->orgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orgid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Inn;
        break;
      }

      // optional string Inn = 2;
      case 2: {
        if (tag == 18) {
         parse_Inn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inn().data(), this->inn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MessageToCounteragent;
        break;
      }

      // optional string MessageToCounteragent = 3;
      case 3: {
        if (tag == 26) {
         parse_MessageToCounteragent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetocounteragent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagetocounteragent().data(), this->messagetocounteragent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messagetocounteragent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InvitationDocument;
        break;
      }

      // optional .Diadoc.Api.Proto.InvitationDocument InvitationDocument = 4;
      case 4: {
        if (tag == 34) {
         parse_InvitationDocument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitationdocument()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.AcquireCounteragentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.AcquireCounteragentRequest)
  return false;
#undef DO_
}

void AcquireCounteragentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.AcquireCounteragentRequest)
  // optional string OrgId = 1;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orgid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->orgid(), output);
  }

  // optional string Inn = 2;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inn(), output);
  }

  // optional string MessageToCounteragent = 3;
  if (has_messagetocounteragent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetocounteragent().data(), this->messagetocounteragent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetocounteragent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->messagetocounteragent(), output);
  }

  // optional .Diadoc.Api.Proto.InvitationDocument InvitationDocument = 4;
  if (has_invitationdocument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->invitationdocument(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.AcquireCounteragentRequest)
}

::google::protobuf::uint8* AcquireCounteragentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.AcquireCounteragentRequest)
  // optional string OrgId = 1;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orgid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orgid(), target);
  }

  // optional string Inn = 2;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inn(), target);
  }

  // optional string MessageToCounteragent = 3;
  if (has_messagetocounteragent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetocounteragent().data(), this->messagetocounteragent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetocounteragent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->messagetocounteragent(), target);
  }

  // optional .Diadoc.Api.Proto.InvitationDocument InvitationDocument = 4;
  if (has_invitationdocument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->invitationdocument(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.AcquireCounteragentRequest)
  return target;
}

int AcquireCounteragentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string OrgId = 1;
    if (has_orgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgid());
    }

    // optional string Inn = 2;
    if (has_inn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inn());
    }

    // optional string MessageToCounteragent = 3;
    if (has_messagetocounteragent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagetocounteragent());
    }

    // optional .Diadoc.Api.Proto.InvitationDocument InvitationDocument = 4;
    if (has_invitationdocument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitationdocument());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcquireCounteragentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcquireCounteragentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcquireCounteragentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcquireCounteragentRequest::MergeFrom(const AcquireCounteragentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orgid()) {
      set_orgid(from.orgid());
    }
    if (from.has_inn()) {
      set_inn(from.inn());
    }
    if (from.has_messagetocounteragent()) {
      set_messagetocounteragent(from.messagetocounteragent());
    }
    if (from.has_invitationdocument()) {
      mutable_invitationdocument()->::Diadoc::Api::Proto::InvitationDocument::MergeFrom(from.invitationdocument());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcquireCounteragentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcquireCounteragentRequest::CopyFrom(const AcquireCounteragentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcquireCounteragentRequest::IsInitialized() const {

  if (has_invitationdocument()) {
    if (!this->invitationdocument().IsInitialized()) return false;
  }
  return true;
}

void AcquireCounteragentRequest::Swap(AcquireCounteragentRequest* other) {
  if (other != this) {
    std::swap(orgid_, other->orgid_);
    std::swap(inn_, other->inn_);
    std::swap(messagetocounteragent_, other->messagetocounteragent_);
    std::swap(invitationdocument_, other->invitationdocument_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcquireCounteragentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcquireCounteragentRequest_descriptor_;
  metadata.reflection = AcquireCounteragentRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvitationDocument::kSignedContentFieldNumber;
const int InvitationDocument::kFileNameFieldNumber;
const int InvitationDocument::kSignatureRequestedFieldNumber;
const int InvitationDocument::kTypeFieldNumber;
#endif  // !_MSC_VER

InvitationDocument::InvitationDocument()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.InvitationDocument)
}

void InvitationDocument::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

InvitationDocument::InvitationDocument(const InvitationDocument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.InvitationDocument)
}

void InvitationDocument::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signaturerequested_ = false;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitationDocument::~InvitationDocument() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.InvitationDocument)
  SharedDtor();
}

void InvitationDocument::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void InvitationDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitationDocument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvitationDocument_descriptor_;
}

const InvitationDocument& InvitationDocument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AcquireCounteragent_2eproto();
  return *default_instance_;
}

InvitationDocument* InvitationDocument::default_instance_ = NULL;

InvitationDocument* InvitationDocument::New() const {
  return new InvitationDocument;
}

void InvitationDocument::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    signaturerequested_ = false;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvitationDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.InvitationDocument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (tag == 18) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SignatureRequested;
        break;
      }

      // optional bool SignatureRequested = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_SignatureRequested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signaturerequested_)));
          set_has_signaturerequested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Type;
        break;
      }

      // optional string Type = 4;
      case 4: {
        if (tag == 34) {
         parse_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.InvitationDocument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.InvitationDocument)
  return false;
#undef DO_
}

void InvitationDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.InvitationDocument)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional bool SignatureRequested = 3 [default = false];
  if (has_signaturerequested()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->signaturerequested(), output);
  }

  // optional string Type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.InvitationDocument)
}

::google::protobuf::uint8* InvitationDocument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.InvitationDocument)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional bool SignatureRequested = 3 [default = false];
  if (has_signaturerequested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->signaturerequested(), target);
  }

  // optional string Type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.InvitationDocument)
  return target;
}

int InvitationDocument::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional bool SignatureRequested = 3 [default = false];
    if (has_signaturerequested()) {
      total_size += 1 + 1;
    }

    // optional string Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitationDocument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvitationDocument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvitationDocument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvitationDocument::MergeFrom(const InvitationDocument& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_signaturerequested()) {
      set_signaturerequested(from.signaturerequested());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvitationDocument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationDocument::CopyFrom(const InvitationDocument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationDocument::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InvitationDocument::Swap(InvitationDocument* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(signaturerequested_, other->signaturerequested_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvitationDocument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvitationDocument_descriptor_;
  metadata.reflection = InvitationDocument_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcquireCounteragentResult::kOrgIdFieldNumber;
const int AcquireCounteragentResult::kInvitationDocumentIdFieldNumber;
#endif  // !_MSC_VER

AcquireCounteragentResult::AcquireCounteragentResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.AcquireCounteragentResult)
}

void AcquireCounteragentResult::InitAsDefaultInstance() {
  invitationdocumentid_ = const_cast< ::Diadoc::Api::Proto::DocumentId*>(&::Diadoc::Api::Proto::DocumentId::default_instance());
}

AcquireCounteragentResult::AcquireCounteragentResult(const AcquireCounteragentResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.AcquireCounteragentResult)
}

void AcquireCounteragentResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitationdocumentid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcquireCounteragentResult::~AcquireCounteragentResult() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.AcquireCounteragentResult)
  SharedDtor();
}

void AcquireCounteragentResult::SharedDtor() {
  if (orgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgid_;
  }
  if (this != default_instance_) {
    delete invitationdocumentid_;
  }
}

void AcquireCounteragentResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcquireCounteragentResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcquireCounteragentResult_descriptor_;
}

const AcquireCounteragentResult& AcquireCounteragentResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AcquireCounteragent_2eproto();
  return *default_instance_;
}

AcquireCounteragentResult* AcquireCounteragentResult::default_instance_ = NULL;

AcquireCounteragentResult* AcquireCounteragentResult::New() const {
  return new AcquireCounteragentResult;
}

void AcquireCounteragentResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_orgid()) {
      if (orgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orgid_->clear();
      }
    }
    if (has_invitationdocumentid()) {
      if (invitationdocumentid_ != NULL) invitationdocumentid_->::Diadoc::Api::Proto::DocumentId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcquireCounteragentResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.AcquireCounteragentResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string OrgId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orgid().data(), this->orgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orgid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_InvitationDocumentId;
        break;
      }

      // optional .Diadoc.Api.Proto.DocumentId InvitationDocumentId = 2;
      case 2: {
        if (tag == 18) {
         parse_InvitationDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitationdocumentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.AcquireCounteragentResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.AcquireCounteragentResult)
  return false;
#undef DO_
}

void AcquireCounteragentResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.AcquireCounteragentResult)
  // required string OrgId = 1;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orgid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->orgid(), output);
  }

  // optional .Diadoc.Api.Proto.DocumentId InvitationDocumentId = 2;
  if (has_invitationdocumentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->invitationdocumentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.AcquireCounteragentResult)
}

::google::protobuf::uint8* AcquireCounteragentResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.AcquireCounteragentResult)
  // required string OrgId = 1;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orgid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orgid(), target);
  }

  // optional .Diadoc.Api.Proto.DocumentId InvitationDocumentId = 2;
  if (has_invitationdocumentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->invitationdocumentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.AcquireCounteragentResult)
  return target;
}

int AcquireCounteragentResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string OrgId = 1;
    if (has_orgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgid());
    }

    // optional .Diadoc.Api.Proto.DocumentId InvitationDocumentId = 2;
    if (has_invitationdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitationdocumentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcquireCounteragentResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcquireCounteragentResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcquireCounteragentResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcquireCounteragentResult::MergeFrom(const AcquireCounteragentResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orgid()) {
      set_orgid(from.orgid());
    }
    if (from.has_invitationdocumentid()) {
      mutable_invitationdocumentid()->::Diadoc::Api::Proto::DocumentId::MergeFrom(from.invitationdocumentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcquireCounteragentResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcquireCounteragentResult::CopyFrom(const AcquireCounteragentResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcquireCounteragentResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_invitationdocumentid()) {
    if (!this->invitationdocumentid().IsInitialized()) return false;
  }
  return true;
}

void AcquireCounteragentResult::Swap(AcquireCounteragentResult* other) {
  if (other != this) {
    std::swap(orgid_, other->orgid_);
    std::swap(invitationdocumentid_, other->invitationdocumentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcquireCounteragentResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcquireCounteragentResult_descriptor_;
  metadata.reflection = AcquireCounteragentResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
