// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Certificates/CertificateInfoV2.proto

#ifndef PROTOBUF_Certificates_2fCertificateInfoV2_2eproto__INCLUDED
#define PROTOBUF_Certificates_2fCertificateInfoV2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Certificates {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Certificates_2fCertificateInfoV2_2eproto();
void protobuf_AssignDesc_Certificates_2fCertificateInfoV2_2eproto();
void protobuf_ShutdownFile_Certificates_2fCertificateInfoV2_2eproto();

class CertificateInfoV2;

enum CertificateType {
  Unknown = 0,
  Token = 1,
  Dss = 2,
  KonturCertificate = 3
};
bool CertificateType_IsValid(int value);
const CertificateType CertificateType_MIN = Unknown;
const CertificateType CertificateType_MAX = KonturCertificate;
const int CertificateType_ARRAYSIZE = CertificateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CertificateType_descriptor();
inline const ::std::string& CertificateType_Name(CertificateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CertificateType_descriptor(), value);
}
inline bool CertificateType_Parse(
    const ::std::string& name, CertificateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CertificateType>(
    CertificateType_descriptor(), name, value);
}
// ===================================================================

class CertificateInfoV2 : public ::google::protobuf::Message {
 public:
  CertificateInfoV2();
  virtual ~CertificateInfoV2();

  CertificateInfoV2(const CertificateInfoV2& from);

  inline CertificateInfoV2& operator=(const CertificateInfoV2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CertificateInfoV2& default_instance();

  void Swap(CertificateInfoV2* other);

  // implements Message ----------------------------------------------

  CertificateInfoV2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CertificateInfoV2& from);
  void MergeFrom(const CertificateInfoV2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Thumbprint = 1;
  inline bool has_thumbprint() const;
  inline void clear_thumbprint();
  static const int kThumbprintFieldNumber = 1;
  inline const ::std::string& thumbprint() const;
  inline void set_thumbprint(const ::std::string& value);
  inline void set_thumbprint(const char* value);
  inline void set_thumbprint(const char* value, size_t size);
  inline ::std::string* mutable_thumbprint();
  inline ::std::string* release_thumbprint();
  inline void set_allocated_thumbprint(::std::string* thumbprint);

  // required .Diadoc.Api.Proto.Certificates.CertificateType Type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Diadoc::Api::Proto::Certificates::CertificateType type() const;
  inline void set_type(::Diadoc::Api::Proto::Certificates::CertificateType value);

  // optional sfixed64 ValidFrom = 3;
  inline bool has_validfrom() const;
  inline void clear_validfrom();
  static const int kValidFromFieldNumber = 3;
  inline ::google::protobuf::int64 validfrom() const;
  inline void set_validfrom(::google::protobuf::int64 value);

  // optional sfixed64 ValidTo = 4;
  inline bool has_validto() const;
  inline void clear_validto();
  static const int kValidToFieldNumber = 4;
  inline ::google::protobuf::int64 validto() const;
  inline void set_validto(::google::protobuf::int64 value);

  // optional sfixed64 PrivateKeyValidFrom = 5;
  inline bool has_privatekeyvalidfrom() const;
  inline void clear_privatekeyvalidfrom();
  static const int kPrivateKeyValidFromFieldNumber = 5;
  inline ::google::protobuf::int64 privatekeyvalidfrom() const;
  inline void set_privatekeyvalidfrom(::google::protobuf::int64 value);

  // optional sfixed64 PrivateKeyValidTo = 6;
  inline bool has_privatekeyvalidto() const;
  inline void clear_privatekeyvalidto();
  static const int kPrivateKeyValidToFieldNumber = 6;
  inline ::google::protobuf::int64 privatekeyvalidto() const;
  inline void set_privatekeyvalidto(::google::protobuf::int64 value);

  // optional string OrganizationName = 7;
  inline bool has_organizationname() const;
  inline void clear_organizationname();
  static const int kOrganizationNameFieldNumber = 7;
  inline const ::std::string& organizationname() const;
  inline void set_organizationname(const ::std::string& value);
  inline void set_organizationname(const char* value);
  inline void set_organizationname(const char* value, size_t size);
  inline ::std::string* mutable_organizationname();
  inline ::std::string* release_organizationname();
  inline void set_allocated_organizationname(::std::string* organizationname);

  // optional string Inn = 8;
  inline bool has_inn() const;
  inline void clear_inn();
  static const int kInnFieldNumber = 8;
  inline const ::std::string& inn() const;
  inline void set_inn(const ::std::string& value);
  inline void set_inn(const char* value);
  inline void set_inn(const char* value, size_t size);
  inline ::std::string* mutable_inn();
  inline ::std::string* release_inn();
  inline void set_allocated_inn(::std::string* inn);

  // optional string UserFirstName = 9;
  inline bool has_userfirstname() const;
  inline void clear_userfirstname();
  static const int kUserFirstNameFieldNumber = 9;
  inline const ::std::string& userfirstname() const;
  inline void set_userfirstname(const ::std::string& value);
  inline void set_userfirstname(const char* value);
  inline void set_userfirstname(const char* value, size_t size);
  inline ::std::string* mutable_userfirstname();
  inline ::std::string* release_userfirstname();
  inline void set_allocated_userfirstname(::std::string* userfirstname);

  // optional string UserMiddleName = 10;
  inline bool has_usermiddlename() const;
  inline void clear_usermiddlename();
  static const int kUserMiddleNameFieldNumber = 10;
  inline const ::std::string& usermiddlename() const;
  inline void set_usermiddlename(const ::std::string& value);
  inline void set_usermiddlename(const char* value);
  inline void set_usermiddlename(const char* value, size_t size);
  inline ::std::string* mutable_usermiddlename();
  inline ::std::string* release_usermiddlename();
  inline void set_allocated_usermiddlename(::std::string* usermiddlename);

  // optional string UserLastName = 11;
  inline bool has_userlastname() const;
  inline void clear_userlastname();
  static const int kUserLastNameFieldNumber = 11;
  inline const ::std::string& userlastname() const;
  inline void set_userlastname(const ::std::string& value);
  inline void set_userlastname(const char* value);
  inline void set_userlastname(const char* value, size_t size);
  inline ::std::string* mutable_userlastname();
  inline ::std::string* release_userlastname();
  inline void set_allocated_userlastname(::std::string* userlastname);

  // optional string UserShortName = 12;
  inline bool has_usershortname() const;
  inline void clear_usershortname();
  static const int kUserShortNameFieldNumber = 12;
  inline const ::std::string& usershortname() const;
  inline void set_usershortname(const ::std::string& value);
  inline void set_usershortname(const char* value);
  inline void set_usershortname(const char* value, size_t size);
  inline ::std::string* mutable_usershortname();
  inline ::std::string* release_usershortname();
  inline void set_allocated_usershortname(::std::string* usershortname);

  // optional bool IsDefault = 13;
  inline bool has_isdefault() const;
  inline void clear_isdefault();
  static const int kIsDefaultFieldNumber = 13;
  inline bool isdefault() const;
  inline void set_isdefault(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Certificates.CertificateInfoV2)
 private:
  inline void set_has_thumbprint();
  inline void clear_has_thumbprint();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_validfrom();
  inline void clear_has_validfrom();
  inline void set_has_validto();
  inline void clear_has_validto();
  inline void set_has_privatekeyvalidfrom();
  inline void clear_has_privatekeyvalidfrom();
  inline void set_has_privatekeyvalidto();
  inline void clear_has_privatekeyvalidto();
  inline void set_has_organizationname();
  inline void clear_has_organizationname();
  inline void set_has_inn();
  inline void clear_has_inn();
  inline void set_has_userfirstname();
  inline void clear_has_userfirstname();
  inline void set_has_usermiddlename();
  inline void clear_has_usermiddlename();
  inline void set_has_userlastname();
  inline void clear_has_userlastname();
  inline void set_has_usershortname();
  inline void clear_has_usershortname();
  inline void set_has_isdefault();
  inline void clear_has_isdefault();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* thumbprint_;
  ::google::protobuf::int64 validfrom_;
  ::google::protobuf::int64 validto_;
  ::google::protobuf::int64 privatekeyvalidfrom_;
  ::google::protobuf::int64 privatekeyvalidto_;
  ::std::string* organizationname_;
  int type_;
  bool isdefault_;
  ::std::string* inn_;
  ::std::string* userfirstname_;
  ::std::string* usermiddlename_;
  ::std::string* userlastname_;
  ::std::string* usershortname_;
  friend void  protobuf_AddDesc_Certificates_2fCertificateInfoV2_2eproto();
  friend void protobuf_AssignDesc_Certificates_2fCertificateInfoV2_2eproto();
  friend void protobuf_ShutdownFile_Certificates_2fCertificateInfoV2_2eproto();

  void InitAsDefaultInstance();
  static CertificateInfoV2* default_instance_;
};
// ===================================================================


// ===================================================================

// CertificateInfoV2

// required string Thumbprint = 1;
inline bool CertificateInfoV2::has_thumbprint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertificateInfoV2::set_has_thumbprint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CertificateInfoV2::clear_has_thumbprint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CertificateInfoV2::clear_thumbprint() {
  if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_->clear();
  }
  clear_has_thumbprint();
}
inline const ::std::string& CertificateInfoV2::thumbprint() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Certificates.CertificateInfoV2.Thumbprint)
  return *thumbprint_;
}
inline void CertificateInfoV2::set_thumbprint(const ::std::string& value) {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  thumbprint_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Certificates.CertificateInfoV2.Thumbprint)
}
inline void CertificateInfoV2::set_thumbprint(const char* value) {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  thumbprint_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Certificates.CertificateInfoV2.Thumbprint)
}
inline void CertificateInfoV2::set_thumbprint(const char* value, size_t size) {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  thumbprint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Certificates.CertificateInfoV2.Thumbprint)
}
inline ::std::string* CertificateInfoV2::mutable_thumbprint() {
  set_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thumbprint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Certificates.CertificateInfoV2.Thumbprint)
  return thumbprint_;
}
inline ::std::string* CertificateInfoV2::release_thumbprint() {
  clear_has_thumbprint();
  if (thumbprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = thumbprint_;
    thumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CertificateInfoV2::set_allocated_thumbprint(::std::string* thumbprint) {
  if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumbprint_;
  }
  if (thumbprint) {
    set_has_thumbprint();
    thumbprint_ = thumbprint;
  } else {
    clear_has_thumbprint();
    thumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Certificates.CertificateInfoV2.Thumbprint)
}

// required .Diadoc.Api.Proto.Certificates.CertificateType Type = 2;
inline bool CertificateInfoV2::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertificateInfoV2::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CertificateInfoV2::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CertificateInfoV2::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Diadoc::Api::Proto::Certificates::CertificateType CertificateInfoV2::type() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Certificates.CertificateInfoV2.Type)
  return static_cast< ::Diadoc::Api::Proto::Certificates::CertificateType >(type_);
}
inline void CertificateInfoV2::set_type(::Diadoc::Api::Proto::Certificates::CertificateType value) {
  assert(::Diadoc::Api::Proto::Certificates::CertificateType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Certificates.CertificateInfoV2.Type)
}

// optional sfixed64 ValidFrom = 3;
inline bool CertificateInfoV2::has_validfrom() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CertificateInfoV2::set_has_validfrom() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CertificateInfoV2::clear_has_validfrom() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CertificateInfoV2::clear_validfrom() {
  validfrom_ = GOOGLE_LONGLONG(0);
  clear_has_validfrom();
}
inline ::google::protobuf::int64 CertificateInfoV2::validfrom() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Certificates.CertificateInfoV2.ValidFrom)
  return validfrom_;
}
inline void CertificateInfoV2::set_validfrom(::google::protobuf::int64 value) {
  set_has_validfrom();
  validfrom_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Certificates.CertificateInfoV2.ValidFrom)
}

// optional sfixed64 ValidTo = 4;
inline bool CertificateInfoV2::has_validto() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CertificateInfoV2::set_has_validto() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CertificateInfoV2::clear_has_validto() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CertificateInfoV2::clear_validto() {
  validto_ = GOOGLE_LONGLONG(0);
  clear_has_validto();
}
inline ::google::protobuf::int64 CertificateInfoV2::validto() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Certificates.CertificateInfoV2.ValidTo)
  return validto_;
}
inline void CertificateInfoV2::set_validto(::google::protobuf::int64 value) {
  set_has_validto();
  validto_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Certificates.CertificateInfoV2.ValidTo)
}

// optional sfixed64 PrivateKeyValidFrom = 5;
inline bool CertificateInfoV2::has_privatekeyvalidfrom() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CertificateInfoV2::set_has_privatekeyvalidfrom() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CertificateInfoV2::clear_has_privatekeyvalidfrom() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CertificateInfoV2::clear_privatekeyvalidfrom() {
  privatekeyvalidfrom_ = GOOGLE_LONGLONG(0);
  clear_has_privatekeyvalidfrom();
}
inline ::google::protobuf::int64 CertificateInfoV2::privatekeyvalidfrom() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Certificates.CertificateInfoV2.PrivateKeyValidFrom)
  return privatekeyvalidfrom_;
}
inline void CertificateInfoV2::set_privatekeyvalidfrom(::google::protobuf::int64 value) {
  set_has_privatekeyvalidfrom();
  privatekeyvalidfrom_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Certificates.CertificateInfoV2.PrivateKeyValidFrom)
}

// optional sfixed64 PrivateKeyValidTo = 6;
inline bool CertificateInfoV2::has_privatekeyvalidto() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CertificateInfoV2::set_has_privatekeyvalidto() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CertificateInfoV2::clear_has_privatekeyvalidto() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CertificateInfoV2::clear_privatekeyvalidto() {
  privatekeyvalidto_ = GOOGLE_LONGLONG(0);
  clear_has_privatekeyvalidto();
}
inline ::google::protobuf::int64 CertificateInfoV2::privatekeyvalidto() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Certificates.CertificateInfoV2.PrivateKeyValidTo)
  return privatekeyvalidto_;
}
inline void CertificateInfoV2::set_privatekeyvalidto(::google::protobuf::int64 value) {
  set_has_privatekeyvalidto();
  privatekeyvalidto_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Certificates.CertificateInfoV2.PrivateKeyValidTo)
}

// optional string OrganizationName = 7;
inline bool CertificateInfoV2::has_organizationname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CertificateInfoV2::set_has_organizationname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CertificateInfoV2::clear_has_organizationname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CertificateInfoV2::clear_organizationname() {
  if (organizationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationname_->clear();
  }
  clear_has_organizationname();
}
inline const ::std::string& CertificateInfoV2::organizationname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Certificates.CertificateInfoV2.OrganizationName)
  return *organizationname_;
}
inline void CertificateInfoV2::set_organizationname(const ::std::string& value) {
  set_has_organizationname();
  if (organizationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationname_ = new ::std::string;
  }
  organizationname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Certificates.CertificateInfoV2.OrganizationName)
}
inline void CertificateInfoV2::set_organizationname(const char* value) {
  set_has_organizationname();
  if (organizationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationname_ = new ::std::string;
  }
  organizationname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Certificates.CertificateInfoV2.OrganizationName)
}
inline void CertificateInfoV2::set_organizationname(const char* value, size_t size) {
  set_has_organizationname();
  if (organizationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationname_ = new ::std::string;
  }
  organizationname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Certificates.CertificateInfoV2.OrganizationName)
}
inline ::std::string* CertificateInfoV2::mutable_organizationname() {
  set_has_organizationname();
  if (organizationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    organizationname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Certificates.CertificateInfoV2.OrganizationName)
  return organizationname_;
}
inline ::std::string* CertificateInfoV2::release_organizationname() {
  clear_has_organizationname();
  if (organizationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = organizationname_;
    organizationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CertificateInfoV2::set_allocated_organizationname(::std::string* organizationname) {
  if (organizationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete organizationname_;
  }
  if (organizationname) {
    set_has_organizationname();
    organizationname_ = organizationname;
  } else {
    clear_has_organizationname();
    organizationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Certificates.CertificateInfoV2.OrganizationName)
}

// optional string Inn = 8;
inline bool CertificateInfoV2::has_inn() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CertificateInfoV2::set_has_inn() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CertificateInfoV2::clear_has_inn() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CertificateInfoV2::clear_inn() {
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_->clear();
  }
  clear_has_inn();
}
inline const ::std::string& CertificateInfoV2::inn() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Certificates.CertificateInfoV2.Inn)
  return *inn_;
}
inline void CertificateInfoV2::set_inn(const ::std::string& value) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Certificates.CertificateInfoV2.Inn)
}
inline void CertificateInfoV2::set_inn(const char* value) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Certificates.CertificateInfoV2.Inn)
}
inline void CertificateInfoV2::set_inn(const char* value, size_t size) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Certificates.CertificateInfoV2.Inn)
}
inline ::std::string* CertificateInfoV2::mutable_inn() {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Certificates.CertificateInfoV2.Inn)
  return inn_;
}
inline ::std::string* CertificateInfoV2::release_inn() {
  clear_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inn_;
    inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CertificateInfoV2::set_allocated_inn(::std::string* inn) {
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inn_;
  }
  if (inn) {
    set_has_inn();
    inn_ = inn;
  } else {
    clear_has_inn();
    inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Certificates.CertificateInfoV2.Inn)
}

// optional string UserFirstName = 9;
inline bool CertificateInfoV2::has_userfirstname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CertificateInfoV2::set_has_userfirstname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CertificateInfoV2::clear_has_userfirstname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CertificateInfoV2::clear_userfirstname() {
  if (userfirstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userfirstname_->clear();
  }
  clear_has_userfirstname();
}
inline const ::std::string& CertificateInfoV2::userfirstname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserFirstName)
  return *userfirstname_;
}
inline void CertificateInfoV2::set_userfirstname(const ::std::string& value) {
  set_has_userfirstname();
  if (userfirstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userfirstname_ = new ::std::string;
  }
  userfirstname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserFirstName)
}
inline void CertificateInfoV2::set_userfirstname(const char* value) {
  set_has_userfirstname();
  if (userfirstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userfirstname_ = new ::std::string;
  }
  userfirstname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserFirstName)
}
inline void CertificateInfoV2::set_userfirstname(const char* value, size_t size) {
  set_has_userfirstname();
  if (userfirstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userfirstname_ = new ::std::string;
  }
  userfirstname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserFirstName)
}
inline ::std::string* CertificateInfoV2::mutable_userfirstname() {
  set_has_userfirstname();
  if (userfirstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userfirstname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserFirstName)
  return userfirstname_;
}
inline ::std::string* CertificateInfoV2::release_userfirstname() {
  clear_has_userfirstname();
  if (userfirstname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userfirstname_;
    userfirstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CertificateInfoV2::set_allocated_userfirstname(::std::string* userfirstname) {
  if (userfirstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userfirstname_;
  }
  if (userfirstname) {
    set_has_userfirstname();
    userfirstname_ = userfirstname;
  } else {
    clear_has_userfirstname();
    userfirstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserFirstName)
}

// optional string UserMiddleName = 10;
inline bool CertificateInfoV2::has_usermiddlename() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CertificateInfoV2::set_has_usermiddlename() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CertificateInfoV2::clear_has_usermiddlename() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CertificateInfoV2::clear_usermiddlename() {
  if (usermiddlename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usermiddlename_->clear();
  }
  clear_has_usermiddlename();
}
inline const ::std::string& CertificateInfoV2::usermiddlename() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserMiddleName)
  return *usermiddlename_;
}
inline void CertificateInfoV2::set_usermiddlename(const ::std::string& value) {
  set_has_usermiddlename();
  if (usermiddlename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usermiddlename_ = new ::std::string;
  }
  usermiddlename_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserMiddleName)
}
inline void CertificateInfoV2::set_usermiddlename(const char* value) {
  set_has_usermiddlename();
  if (usermiddlename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usermiddlename_ = new ::std::string;
  }
  usermiddlename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserMiddleName)
}
inline void CertificateInfoV2::set_usermiddlename(const char* value, size_t size) {
  set_has_usermiddlename();
  if (usermiddlename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usermiddlename_ = new ::std::string;
  }
  usermiddlename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserMiddleName)
}
inline ::std::string* CertificateInfoV2::mutable_usermiddlename() {
  set_has_usermiddlename();
  if (usermiddlename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usermiddlename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserMiddleName)
  return usermiddlename_;
}
inline ::std::string* CertificateInfoV2::release_usermiddlename() {
  clear_has_usermiddlename();
  if (usermiddlename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usermiddlename_;
    usermiddlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CertificateInfoV2::set_allocated_usermiddlename(::std::string* usermiddlename) {
  if (usermiddlename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usermiddlename_;
  }
  if (usermiddlename) {
    set_has_usermiddlename();
    usermiddlename_ = usermiddlename;
  } else {
    clear_has_usermiddlename();
    usermiddlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserMiddleName)
}

// optional string UserLastName = 11;
inline bool CertificateInfoV2::has_userlastname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CertificateInfoV2::set_has_userlastname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CertificateInfoV2::clear_has_userlastname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CertificateInfoV2::clear_userlastname() {
  if (userlastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userlastname_->clear();
  }
  clear_has_userlastname();
}
inline const ::std::string& CertificateInfoV2::userlastname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserLastName)
  return *userlastname_;
}
inline void CertificateInfoV2::set_userlastname(const ::std::string& value) {
  set_has_userlastname();
  if (userlastname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userlastname_ = new ::std::string;
  }
  userlastname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserLastName)
}
inline void CertificateInfoV2::set_userlastname(const char* value) {
  set_has_userlastname();
  if (userlastname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userlastname_ = new ::std::string;
  }
  userlastname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserLastName)
}
inline void CertificateInfoV2::set_userlastname(const char* value, size_t size) {
  set_has_userlastname();
  if (userlastname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userlastname_ = new ::std::string;
  }
  userlastname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserLastName)
}
inline ::std::string* CertificateInfoV2::mutable_userlastname() {
  set_has_userlastname();
  if (userlastname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userlastname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserLastName)
  return userlastname_;
}
inline ::std::string* CertificateInfoV2::release_userlastname() {
  clear_has_userlastname();
  if (userlastname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userlastname_;
    userlastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CertificateInfoV2::set_allocated_userlastname(::std::string* userlastname) {
  if (userlastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userlastname_;
  }
  if (userlastname) {
    set_has_userlastname();
    userlastname_ = userlastname;
  } else {
    clear_has_userlastname();
    userlastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserLastName)
}

// optional string UserShortName = 12;
inline bool CertificateInfoV2::has_usershortname() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CertificateInfoV2::set_has_usershortname() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CertificateInfoV2::clear_has_usershortname() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CertificateInfoV2::clear_usershortname() {
  if (usershortname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usershortname_->clear();
  }
  clear_has_usershortname();
}
inline const ::std::string& CertificateInfoV2::usershortname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserShortName)
  return *usershortname_;
}
inline void CertificateInfoV2::set_usershortname(const ::std::string& value) {
  set_has_usershortname();
  if (usershortname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usershortname_ = new ::std::string;
  }
  usershortname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserShortName)
}
inline void CertificateInfoV2::set_usershortname(const char* value) {
  set_has_usershortname();
  if (usershortname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usershortname_ = new ::std::string;
  }
  usershortname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserShortName)
}
inline void CertificateInfoV2::set_usershortname(const char* value, size_t size) {
  set_has_usershortname();
  if (usershortname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usershortname_ = new ::std::string;
  }
  usershortname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserShortName)
}
inline ::std::string* CertificateInfoV2::mutable_usershortname() {
  set_has_usershortname();
  if (usershortname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usershortname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserShortName)
  return usershortname_;
}
inline ::std::string* CertificateInfoV2::release_usershortname() {
  clear_has_usershortname();
  if (usershortname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usershortname_;
    usershortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CertificateInfoV2::set_allocated_usershortname(::std::string* usershortname) {
  if (usershortname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usershortname_;
  }
  if (usershortname) {
    set_has_usershortname();
    usershortname_ = usershortname;
  } else {
    clear_has_usershortname();
    usershortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Certificates.CertificateInfoV2.UserShortName)
}

// optional bool IsDefault = 13;
inline bool CertificateInfoV2::has_isdefault() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CertificateInfoV2::set_has_isdefault() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CertificateInfoV2::clear_has_isdefault() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CertificateInfoV2::clear_isdefault() {
  isdefault_ = false;
  clear_has_isdefault();
}
inline bool CertificateInfoV2::isdefault() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Certificates.CertificateInfoV2.IsDefault)
  return isdefault_;
}
inline void CertificateInfoV2::set_isdefault(bool value) {
  set_has_isdefault();
  isdefault_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Certificates.CertificateInfoV2.IsDefault)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Certificates
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Diadoc::Api::Proto::Certificates::CertificateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Certificates::CertificateType>() {
  return ::Diadoc::Api::Proto::Certificates::CertificateType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Certificates_2fCertificateInfoV2_2eproto__INCLUDED
