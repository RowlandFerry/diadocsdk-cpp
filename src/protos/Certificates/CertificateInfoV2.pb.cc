// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Certificates/CertificateInfoV2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Certificates/CertificateInfoV2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Certificates {

namespace {

const ::google::protobuf::Descriptor* CertificateInfoV2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CertificateInfoV2_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CertificateType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Certificates_2fCertificateInfoV2_2eproto() {
  protobuf_AddDesc_Certificates_2fCertificateInfoV2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Certificates/CertificateInfoV2.proto");
  GOOGLE_CHECK(file != NULL);
  CertificateInfoV2_descriptor_ = file->message_type(0);
  static const int CertificateInfoV2_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateInfoV2, thumbprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateInfoV2, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateInfoV2, validfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateInfoV2, validto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateInfoV2, privatekeyvalidfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateInfoV2, privatekeyvalidto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateInfoV2, organizationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateInfoV2, inn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateInfoV2, userfirstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateInfoV2, usermiddlename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateInfoV2, userlastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateInfoV2, usershortname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateInfoV2, isdefault_),
  };
  CertificateInfoV2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CertificateInfoV2_descriptor_,
      CertificateInfoV2::default_instance_,
      CertificateInfoV2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateInfoV2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateInfoV2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CertificateInfoV2));
  CertificateType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Certificates_2fCertificateInfoV2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CertificateInfoV2_descriptor_, &CertificateInfoV2::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Certificates_2fCertificateInfoV2_2eproto() {
  delete CertificateInfoV2::default_instance_;
  delete CertificateInfoV2_reflection_;
}

void protobuf_AddDesc_Certificates_2fCertificateInfoV2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$Certificates/CertificateInfoV2.proto\022\035"
    "Diadoc.Api.Proto.Certificates\"\327\002\n\021Certif"
    "icateInfoV2\022\022\n\nThumbprint\030\001 \002(\t\022<\n\004Type\030"
    "\002 \002(\0162..Diadoc.Api.Proto.Certificates.Ce"
    "rtificateType\022\021\n\tValidFrom\030\003 \001(\020\022\017\n\007Vali"
    "dTo\030\004 \001(\020\022\033\n\023PrivateKeyValidFrom\030\005 \001(\020\022\031"
    "\n\021PrivateKeyValidTo\030\006 \001(\020\022\030\n\020Organizatio"
    "nName\030\007 \001(\t\022\013\n\003Inn\030\010 \001(\t\022\025\n\rUserFirstNam"
    "e\030\t \001(\t\022\026\n\016UserMiddleName\030\n \001(\t\022\024\n\014UserL"
    "astName\030\013 \001(\t\022\025\n\rUserShortName\030\014 \001(\t\022\021\n\t"
    "IsDefault\030\r \001(\010*I\n\017CertificateType\022\013\n\007Un"
    "known\020\000\022\t\n\005Token\020\001\022\007\n\003Dss\020\002\022\025\n\021KonturCer"
    "tificate\020\003", 490);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Certificates/CertificateInfoV2.proto", &protobuf_RegisterTypes);
  CertificateInfoV2::default_instance_ = new CertificateInfoV2();
  CertificateInfoV2::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Certificates_2fCertificateInfoV2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Certificates_2fCertificateInfoV2_2eproto {
  StaticDescriptorInitializer_Certificates_2fCertificateInfoV2_2eproto() {
    protobuf_AddDesc_Certificates_2fCertificateInfoV2_2eproto();
  }
} static_descriptor_initializer_Certificates_2fCertificateInfoV2_2eproto_;
const ::google::protobuf::EnumDescriptor* CertificateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CertificateType_descriptor_;
}
bool CertificateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CertificateInfoV2::kThumbprintFieldNumber;
const int CertificateInfoV2::kTypeFieldNumber;
const int CertificateInfoV2::kValidFromFieldNumber;
const int CertificateInfoV2::kValidToFieldNumber;
const int CertificateInfoV2::kPrivateKeyValidFromFieldNumber;
const int CertificateInfoV2::kPrivateKeyValidToFieldNumber;
const int CertificateInfoV2::kOrganizationNameFieldNumber;
const int CertificateInfoV2::kInnFieldNumber;
const int CertificateInfoV2::kUserFirstNameFieldNumber;
const int CertificateInfoV2::kUserMiddleNameFieldNumber;
const int CertificateInfoV2::kUserLastNameFieldNumber;
const int CertificateInfoV2::kUserShortNameFieldNumber;
const int CertificateInfoV2::kIsDefaultFieldNumber;
#endif  // !_MSC_VER

CertificateInfoV2::CertificateInfoV2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Certificates.CertificateInfoV2)
}

void CertificateInfoV2::InitAsDefaultInstance() {
}

CertificateInfoV2::CertificateInfoV2(const CertificateInfoV2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Certificates.CertificateInfoV2)
}

void CertificateInfoV2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  thumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  validfrom_ = GOOGLE_LONGLONG(0);
  validto_ = GOOGLE_LONGLONG(0);
  privatekeyvalidfrom_ = GOOGLE_LONGLONG(0);
  privatekeyvalidto_ = GOOGLE_LONGLONG(0);
  organizationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userfirstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usermiddlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userlastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usershortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isdefault_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CertificateInfoV2::~CertificateInfoV2() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Certificates.CertificateInfoV2)
  SharedDtor();
}

void CertificateInfoV2::SharedDtor() {
  if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumbprint_;
  }
  if (organizationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete organizationname_;
  }
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inn_;
  }
  if (userfirstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userfirstname_;
  }
  if (usermiddlename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usermiddlename_;
  }
  if (userlastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userlastname_;
  }
  if (usershortname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usershortname_;
  }
  if (this != default_instance_) {
  }
}

void CertificateInfoV2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CertificateInfoV2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CertificateInfoV2_descriptor_;
}

const CertificateInfoV2& CertificateInfoV2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Certificates_2fCertificateInfoV2_2eproto();
  return *default_instance_;
}

CertificateInfoV2* CertificateInfoV2::default_instance_ = NULL;

CertificateInfoV2* CertificateInfoV2::New() const {
  return new CertificateInfoV2;
}

void CertificateInfoV2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CertificateInfoV2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(validfrom_, privatekeyvalidto_);
    if (has_thumbprint()) {
      if (thumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thumbprint_->clear();
      }
    }
    type_ = 0;
    if (has_organizationname()) {
      if (organizationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        organizationname_->clear();
      }
    }
    if (has_inn()) {
      if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inn_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_userfirstname()) {
      if (userfirstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userfirstname_->clear();
      }
    }
    if (has_usermiddlename()) {
      if (usermiddlename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        usermiddlename_->clear();
      }
    }
    if (has_userlastname()) {
      if (userlastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userlastname_->clear();
      }
    }
    if (has_usershortname()) {
      if (usershortname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        usershortname_->clear();
      }
    }
    isdefault_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CertificateInfoV2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Certificates.CertificateInfoV2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Thumbprint = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbprint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumbprint().data(), this->thumbprint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thumbprint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required .Diadoc.Api.Proto.Certificates.CertificateType Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Certificates::CertificateType_IsValid(value)) {
            set_type(static_cast< ::Diadoc::Api::Proto::Certificates::CertificateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_ValidFrom;
        break;
      }

      // optional sfixed64 ValidFrom = 3;
      case 3: {
        if (tag == 25) {
         parse_ValidFrom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &validfrom_)));
          set_has_validfrom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_ValidTo;
        break;
      }

      // optional sfixed64 ValidTo = 4;
      case 4: {
        if (tag == 33) {
         parse_ValidTo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &validto_)));
          set_has_validto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_PrivateKeyValidFrom;
        break;
      }

      // optional sfixed64 PrivateKeyValidFrom = 5;
      case 5: {
        if (tag == 41) {
         parse_PrivateKeyValidFrom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &privatekeyvalidfrom_)));
          set_has_privatekeyvalidfrom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_PrivateKeyValidTo;
        break;
      }

      // optional sfixed64 PrivateKeyValidTo = 6;
      case 6: {
        if (tag == 49) {
         parse_PrivateKeyValidTo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &privatekeyvalidto_)));
          set_has_privatekeyvalidto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_OrganizationName;
        break;
      }

      // optional string OrganizationName = 7;
      case 7: {
        if (tag == 58) {
         parse_OrganizationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_organizationname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->organizationname().data(), this->organizationname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "organizationname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Inn;
        break;
      }

      // optional string Inn = 8;
      case 8: {
        if (tag == 66) {
         parse_Inn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inn().data(), this->inn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_UserFirstName;
        break;
      }

      // optional string UserFirstName = 9;
      case 9: {
        if (tag == 74) {
         parse_UserFirstName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userfirstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userfirstname().data(), this->userfirstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userfirstname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_UserMiddleName;
        break;
      }

      // optional string UserMiddleName = 10;
      case 10: {
        if (tag == 82) {
         parse_UserMiddleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usermiddlename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->usermiddlename().data(), this->usermiddlename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "usermiddlename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_UserLastName;
        break;
      }

      // optional string UserLastName = 11;
      case 11: {
        if (tag == 90) {
         parse_UserLastName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userlastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userlastname().data(), this->userlastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userlastname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_UserShortName;
        break;
      }

      // optional string UserShortName = 12;
      case 12: {
        if (tag == 98) {
         parse_UserShortName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usershortname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->usershortname().data(), this->usershortname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "usershortname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_IsDefault;
        break;
      }

      // optional bool IsDefault = 13;
      case 13: {
        if (tag == 104) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Certificates.CertificateInfoV2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Certificates.CertificateInfoV2)
  return false;
#undef DO_
}

void CertificateInfoV2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Certificates.CertificateInfoV2)
  // required string Thumbprint = 1;
  if (has_thumbprint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbprint().data(), this->thumbprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumbprint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->thumbprint(), output);
  }

  // required .Diadoc.Api.Proto.Certificates.CertificateType Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional sfixed64 ValidFrom = 3;
  if (has_validfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->validfrom(), output);
  }

  // optional sfixed64 ValidTo = 4;
  if (has_validto()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->validto(), output);
  }

  // optional sfixed64 PrivateKeyValidFrom = 5;
  if (has_privatekeyvalidfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->privatekeyvalidfrom(), output);
  }

  // optional sfixed64 PrivateKeyValidTo = 6;
  if (has_privatekeyvalidto()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->privatekeyvalidto(), output);
  }

  // optional string OrganizationName = 7;
  if (has_organizationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->organizationname().data(), this->organizationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "organizationname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->organizationname(), output);
  }

  // optional string Inn = 8;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->inn(), output);
  }

  // optional string UserFirstName = 9;
  if (has_userfirstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userfirstname().data(), this->userfirstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userfirstname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->userfirstname(), output);
  }

  // optional string UserMiddleName = 10;
  if (has_usermiddlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usermiddlename().data(), this->usermiddlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usermiddlename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->usermiddlename(), output);
  }

  // optional string UserLastName = 11;
  if (has_userlastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userlastname().data(), this->userlastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userlastname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->userlastname(), output);
  }

  // optional string UserShortName = 12;
  if (has_usershortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usershortname().data(), this->usershortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usershortname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->usershortname(), output);
  }

  // optional bool IsDefault = 13;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isdefault(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Certificates.CertificateInfoV2)
}

::google::protobuf::uint8* CertificateInfoV2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Certificates.CertificateInfoV2)
  // required string Thumbprint = 1;
  if (has_thumbprint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumbprint().data(), this->thumbprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumbprint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->thumbprint(), target);
  }

  // required .Diadoc.Api.Proto.Certificates.CertificateType Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional sfixed64 ValidFrom = 3;
  if (has_validfrom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->validfrom(), target);
  }

  // optional sfixed64 ValidTo = 4;
  if (has_validto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->validto(), target);
  }

  // optional sfixed64 PrivateKeyValidFrom = 5;
  if (has_privatekeyvalidfrom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->privatekeyvalidfrom(), target);
  }

  // optional sfixed64 PrivateKeyValidTo = 6;
  if (has_privatekeyvalidto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->privatekeyvalidto(), target);
  }

  // optional string OrganizationName = 7;
  if (has_organizationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->organizationname().data(), this->organizationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "organizationname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->organizationname(), target);
  }

  // optional string Inn = 8;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->inn(), target);
  }

  // optional string UserFirstName = 9;
  if (has_userfirstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userfirstname().data(), this->userfirstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userfirstname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->userfirstname(), target);
  }

  // optional string UserMiddleName = 10;
  if (has_usermiddlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usermiddlename().data(), this->usermiddlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usermiddlename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->usermiddlename(), target);
  }

  // optional string UserLastName = 11;
  if (has_userlastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userlastname().data(), this->userlastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userlastname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->userlastname(), target);
  }

  // optional string UserShortName = 12;
  if (has_usershortname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usershortname().data(), this->usershortname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usershortname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->usershortname(), target);
  }

  // optional bool IsDefault = 13;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isdefault(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Certificates.CertificateInfoV2)
  return target;
}

int CertificateInfoV2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Thumbprint = 1;
    if (has_thumbprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbprint());
    }

    // required .Diadoc.Api.Proto.Certificates.CertificateType Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional sfixed64 ValidFrom = 3;
    if (has_validfrom()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 ValidTo = 4;
    if (has_validto()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 PrivateKeyValidFrom = 5;
    if (has_privatekeyvalidfrom()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 PrivateKeyValidTo = 6;
    if (has_privatekeyvalidto()) {
      total_size += 1 + 8;
    }

    // optional string OrganizationName = 7;
    if (has_organizationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->organizationname());
    }

    // optional string Inn = 8;
    if (has_inn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inn());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string UserFirstName = 9;
    if (has_userfirstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userfirstname());
    }

    // optional string UserMiddleName = 10;
    if (has_usermiddlename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usermiddlename());
    }

    // optional string UserLastName = 11;
    if (has_userlastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userlastname());
    }

    // optional string UserShortName = 12;
    if (has_usershortname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usershortname());
    }

    // optional bool IsDefault = 13;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertificateInfoV2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CertificateInfoV2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CertificateInfoV2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CertificateInfoV2::MergeFrom(const CertificateInfoV2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thumbprint()) {
      set_thumbprint(from.thumbprint());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_validfrom()) {
      set_validfrom(from.validfrom());
    }
    if (from.has_validto()) {
      set_validto(from.validto());
    }
    if (from.has_privatekeyvalidfrom()) {
      set_privatekeyvalidfrom(from.privatekeyvalidfrom());
    }
    if (from.has_privatekeyvalidto()) {
      set_privatekeyvalidto(from.privatekeyvalidto());
    }
    if (from.has_organizationname()) {
      set_organizationname(from.organizationname());
    }
    if (from.has_inn()) {
      set_inn(from.inn());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_userfirstname()) {
      set_userfirstname(from.userfirstname());
    }
    if (from.has_usermiddlename()) {
      set_usermiddlename(from.usermiddlename());
    }
    if (from.has_userlastname()) {
      set_userlastname(from.userlastname());
    }
    if (from.has_usershortname()) {
      set_usershortname(from.usershortname());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CertificateInfoV2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CertificateInfoV2::CopyFrom(const CertificateInfoV2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateInfoV2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CertificateInfoV2::Swap(CertificateInfoV2* other) {
  if (other != this) {
    std::swap(thumbprint_, other->thumbprint_);
    std::swap(type_, other->type_);
    std::swap(validfrom_, other->validfrom_);
    std::swap(validto_, other->validto_);
    std::swap(privatekeyvalidfrom_, other->privatekeyvalidfrom_);
    std::swap(privatekeyvalidto_, other->privatekeyvalidto_);
    std::swap(organizationname_, other->organizationname_);
    std::swap(inn_, other->inn_);
    std::swap(userfirstname_, other->userfirstname_);
    std::swap(usermiddlename_, other->usermiddlename_);
    std::swap(userlastname_, other->userlastname_);
    std::swap(usershortname_, other->usershortname_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CertificateInfoV2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CertificateInfoV2_descriptor_;
  metadata.reflection = CertificateInfoV2_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Certificates
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
