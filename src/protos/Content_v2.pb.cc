// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Content_v2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Content_v2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* Content_v2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Content_v2_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Content_5fv2_2eproto() {
  protobuf_AddDesc_Content_5fv2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Content_v2.proto");
  GOOGLE_CHECK(file != NULL);
  Content_v2_descriptor_ = file->message_type(0);
  static const int Content_v2_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content_v2, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content_v2, nameonshelf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content_v2, patchedcontentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content_v2, documentid_),
  };
  Content_v2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Content_v2_descriptor_,
      Content_v2::default_instance_,
      Content_v2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content_v2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content_v2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Content_v2));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Content_5fv2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Content_v2_descriptor_, &Content_v2::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Content_5fv2_2eproto() {
  delete Content_v2::default_instance_;
  delete Content_v2_reflection_;
}

void protobuf_AddDesc_Content_5fv2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_DocumentId_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020Content_v2.proto\022\020Diadoc.Api.Proto\032\020Do"
    "cumentId.proto\"\200\001\n\nContent_v2\022\017\n\007Content"
    "\030\001 \001(\014\022\023\n\013NameOnShelf\030\002 \001(\t\022\030\n\020PatchedCo"
    "ntentId\030\003 \001(\t\0222\n\nDocumentId\030\004 \001(\0132\036.Diad"
    "oc.Api.Proto.DocumentIdEx", 185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Content_v2.proto", &protobuf_RegisterTypes);
  Content_v2::default_instance_ = new Content_v2();
  Content_v2::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Content_5fv2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Content_5fv2_2eproto {
  StaticDescriptorInitializer_Content_5fv2_2eproto() {
    protobuf_AddDesc_Content_5fv2_2eproto();
  }
} static_descriptor_initializer_Content_5fv2_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Content_v2::kContentFieldNumber;
const int Content_v2::kNameOnShelfFieldNumber;
const int Content_v2::kPatchedContentIdFieldNumber;
const int Content_v2::kDocumentIdFieldNumber;
#endif  // !_MSC_VER

Content_v2::Content_v2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Content_v2)
}

void Content_v2::InitAsDefaultInstance() {
  documentid_ = const_cast< ::Diadoc::Api::Proto::DocumentIdEx*>(&::Diadoc::Api::Proto::DocumentIdEx::default_instance());
}

Content_v2::Content_v2(const Content_v2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Content_v2)
}

void Content_v2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nameonshelf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patchedcontentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Content_v2::~Content_v2() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Content_v2)
  SharedDtor();
}

void Content_v2::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (nameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nameonshelf_;
  }
  if (patchedcontentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patchedcontentid_;
  }
  if (this != default_instance_) {
    delete documentid_;
  }
}

void Content_v2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Content_v2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Content_v2_descriptor_;
}

const Content_v2& Content_v2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Content_5fv2_2eproto();
  return *default_instance_;
}

Content_v2* Content_v2::default_instance_ = NULL;

Content_v2* Content_v2::New() const {
  return new Content_v2;
}

void Content_v2::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_nameonshelf()) {
      if (nameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nameonshelf_->clear();
      }
    }
    if (has_patchedcontentid()) {
      if (patchedcontentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        patchedcontentid_->clear();
      }
    }
    if (has_documentid()) {
      if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentIdEx::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Content_v2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Content_v2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes Content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NameOnShelf;
        break;
      }

      // optional string NameOnShelf = 2;
      case 2: {
        if (tag == 18) {
         parse_NameOnShelf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nameonshelf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nameonshelf().data(), this->nameonshelf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nameonshelf");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PatchedContentId;
        break;
      }

      // optional string PatchedContentId = 3;
      case 3: {
        if (tag == 26) {
         parse_PatchedContentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patchedcontentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patchedcontentid().data(), this->patchedcontentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "patchedcontentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DocumentId;
        break;
      }

      // optional .Diadoc.Api.Proto.DocumentIdEx DocumentId = 4;
      case 4: {
        if (tag == 34) {
         parse_DocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Content_v2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Content_v2)
  return false;
#undef DO_
}

void Content_v2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Content_v2)
  // optional bytes Content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  // optional string NameOnShelf = 2;
  if (has_nameonshelf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nameonshelf().data(), this->nameonshelf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nameonshelf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nameonshelf(), output);
  }

  // optional string PatchedContentId = 3;
  if (has_patchedcontentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patchedcontentid().data(), this->patchedcontentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patchedcontentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->patchedcontentid(), output);
  }

  // optional .Diadoc.Api.Proto.DocumentIdEx DocumentId = 4;
  if (has_documentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->documentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Content_v2)
}

::google::protobuf::uint8* Content_v2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Content_v2)
  // optional bytes Content = 1;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // optional string NameOnShelf = 2;
  if (has_nameonshelf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nameonshelf().data(), this->nameonshelf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nameonshelf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nameonshelf(), target);
  }

  // optional string PatchedContentId = 3;
  if (has_patchedcontentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patchedcontentid().data(), this->patchedcontentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patchedcontentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->patchedcontentid(), target);
  }

  // optional .Diadoc.Api.Proto.DocumentIdEx DocumentId = 4;
  if (has_documentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->documentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Content_v2)
  return target;
}

int Content_v2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes Content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional string NameOnShelf = 2;
    if (has_nameonshelf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nameonshelf());
    }

    // optional string PatchedContentId = 3;
    if (has_patchedcontentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patchedcontentid());
    }

    // optional .Diadoc.Api.Proto.DocumentIdEx DocumentId = 4;
    if (has_documentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Content_v2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Content_v2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Content_v2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Content_v2::MergeFrom(const Content_v2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_nameonshelf()) {
      set_nameonshelf(from.nameonshelf());
    }
    if (from.has_patchedcontentid()) {
      set_patchedcontentid(from.patchedcontentid());
    }
    if (from.has_documentid()) {
      mutable_documentid()->::Diadoc::Api::Proto::DocumentIdEx::MergeFrom(from.documentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Content_v2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Content_v2::CopyFrom(const Content_v2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content_v2::IsInitialized() const {

  if (has_documentid()) {
    if (!this->documentid().IsInitialized()) return false;
  }
  return true;
}

void Content_v2::Swap(Content_v2* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(nameonshelf_, other->nameonshelf_);
    std::swap(patchedcontentid_, other->patchedcontentid_);
    std::swap(documentid_, other->documentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Content_v2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Content_v2_descriptor_;
  metadata.reflection = Content_v2_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
