// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Events/ResolutionRouteInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Events/ResolutionRouteInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Events {

namespace {

const ::google::protobuf::Descriptor* ResolutionRouteAssignmentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionRouteAssignmentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionRouteRemovalInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionRouteRemovalInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Events_2fResolutionRouteInfo_2eproto() {
  protobuf_AddDesc_Events_2fResolutionRouteInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Events/ResolutionRouteInfo.proto");
  GOOGLE_CHECK(file != NULL);
  ResolutionRouteAssignmentInfo_descriptor_ = file->message_type(0);
  static const int ResolutionRouteAssignmentInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteAssignmentInfo, routeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteAssignmentInfo, author_),
  };
  ResolutionRouteAssignmentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionRouteAssignmentInfo_descriptor_,
      ResolutionRouteAssignmentInfo::default_instance_,
      ResolutionRouteAssignmentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteAssignmentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteAssignmentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionRouteAssignmentInfo));
  ResolutionRouteRemovalInfo_descriptor_ = file->message_type(1);
  static const int ResolutionRouteRemovalInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteRemovalInfo, routeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteRemovalInfo, author_),
  };
  ResolutionRouteRemovalInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionRouteRemovalInfo_descriptor_,
      ResolutionRouteRemovalInfo::default_instance_,
      ResolutionRouteRemovalInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteRemovalInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteRemovalInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionRouteRemovalInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Events_2fResolutionRouteInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionRouteAssignmentInfo_descriptor_, &ResolutionRouteAssignmentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionRouteRemovalInfo_descriptor_, &ResolutionRouteRemovalInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Events_2fResolutionRouteInfo_2eproto() {
  delete ResolutionRouteAssignmentInfo::default_instance_;
  delete ResolutionRouteAssignmentInfo_reflection_;
  delete ResolutionRouteRemovalInfo::default_instance_;
  delete ResolutionRouteRemovalInfo_reflection_;
}

void protobuf_AddDesc_Events_2fResolutionRouteInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n Events/ResolutionRouteInfo.proto\022\027Diad"
    "oc.Api.Proto.Events\"@\n\035ResolutionRouteAs"
    "signmentInfo\022\017\n\007RouteId\030\001 \002(\t\022\016\n\006Author\030"
    "\002 \002(\t\"=\n\032ResolutionRouteRemovalInfo\022\017\n\007R"
    "outeId\030\001 \002(\t\022\016\n\006Author\030\002 \002(\t", 188);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Events/ResolutionRouteInfo.proto", &protobuf_RegisterTypes);
  ResolutionRouteAssignmentInfo::default_instance_ = new ResolutionRouteAssignmentInfo();
  ResolutionRouteRemovalInfo::default_instance_ = new ResolutionRouteRemovalInfo();
  ResolutionRouteAssignmentInfo::default_instance_->InitAsDefaultInstance();
  ResolutionRouteRemovalInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Events_2fResolutionRouteInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Events_2fResolutionRouteInfo_2eproto {
  StaticDescriptorInitializer_Events_2fResolutionRouteInfo_2eproto() {
    protobuf_AddDesc_Events_2fResolutionRouteInfo_2eproto();
  }
} static_descriptor_initializer_Events_2fResolutionRouteInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ResolutionRouteAssignmentInfo::kRouteIdFieldNumber;
const int ResolutionRouteAssignmentInfo::kAuthorFieldNumber;
#endif  // !_MSC_VER

ResolutionRouteAssignmentInfo::ResolutionRouteAssignmentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.ResolutionRouteAssignmentInfo)
}

void ResolutionRouteAssignmentInfo::InitAsDefaultInstance() {
}

ResolutionRouteAssignmentInfo::ResolutionRouteAssignmentInfo(const ResolutionRouteAssignmentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.ResolutionRouteAssignmentInfo)
}

void ResolutionRouteAssignmentInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  routeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionRouteAssignmentInfo::~ResolutionRouteAssignmentInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.ResolutionRouteAssignmentInfo)
  SharedDtor();
}

void ResolutionRouteAssignmentInfo::SharedDtor() {
  if (routeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete routeid_;
  }
  if (author_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete author_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionRouteAssignmentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionRouteAssignmentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionRouteAssignmentInfo_descriptor_;
}

const ResolutionRouteAssignmentInfo& ResolutionRouteAssignmentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fResolutionRouteInfo_2eproto();
  return *default_instance_;
}

ResolutionRouteAssignmentInfo* ResolutionRouteAssignmentInfo::default_instance_ = NULL;

ResolutionRouteAssignmentInfo* ResolutionRouteAssignmentInfo::New() const {
  return new ResolutionRouteAssignmentInfo;
}

void ResolutionRouteAssignmentInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_routeid()) {
      if (routeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        routeid_->clear();
      }
    }
    if (has_author()) {
      if (author_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        author_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionRouteAssignmentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.ResolutionRouteAssignmentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string RouteId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_routeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->routeid().data(), this->routeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "routeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Author;
        break;
      }

      // required string Author = 2;
      case 2: {
        if (tag == 18) {
         parse_Author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author().data(), this->author().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "author");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.ResolutionRouteAssignmentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.ResolutionRouteAssignmentInfo)
  return false;
#undef DO_
}

void ResolutionRouteAssignmentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.ResolutionRouteAssignmentInfo)
  // required string RouteId = 1;
  if (has_routeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routeid().data(), this->routeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "routeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->routeid(), output);
  }

  // required string Author = 2;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->author(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.ResolutionRouteAssignmentInfo)
}

::google::protobuf::uint8* ResolutionRouteAssignmentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.ResolutionRouteAssignmentInfo)
  // required string RouteId = 1;
  if (has_routeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routeid().data(), this->routeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "routeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->routeid(), target);
  }

  // required string Author = 2;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->author(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.ResolutionRouteAssignmentInfo)
  return target;
}

int ResolutionRouteAssignmentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string RouteId = 1;
    if (has_routeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->routeid());
    }

    // required string Author = 2;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->author());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionRouteAssignmentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionRouteAssignmentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionRouteAssignmentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionRouteAssignmentInfo::MergeFrom(const ResolutionRouteAssignmentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_routeid()) {
      set_routeid(from.routeid());
    }
    if (from.has_author()) {
      set_author(from.author());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionRouteAssignmentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionRouteAssignmentInfo::CopyFrom(const ResolutionRouteAssignmentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionRouteAssignmentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResolutionRouteAssignmentInfo::Swap(ResolutionRouteAssignmentInfo* other) {
  if (other != this) {
    std::swap(routeid_, other->routeid_);
    std::swap(author_, other->author_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionRouteAssignmentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionRouteAssignmentInfo_descriptor_;
  metadata.reflection = ResolutionRouteAssignmentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionRouteRemovalInfo::kRouteIdFieldNumber;
const int ResolutionRouteRemovalInfo::kAuthorFieldNumber;
#endif  // !_MSC_VER

ResolutionRouteRemovalInfo::ResolutionRouteRemovalInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.ResolutionRouteRemovalInfo)
}

void ResolutionRouteRemovalInfo::InitAsDefaultInstance() {
}

ResolutionRouteRemovalInfo::ResolutionRouteRemovalInfo(const ResolutionRouteRemovalInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.ResolutionRouteRemovalInfo)
}

void ResolutionRouteRemovalInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  routeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionRouteRemovalInfo::~ResolutionRouteRemovalInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.ResolutionRouteRemovalInfo)
  SharedDtor();
}

void ResolutionRouteRemovalInfo::SharedDtor() {
  if (routeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete routeid_;
  }
  if (author_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete author_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionRouteRemovalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionRouteRemovalInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionRouteRemovalInfo_descriptor_;
}

const ResolutionRouteRemovalInfo& ResolutionRouteRemovalInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fResolutionRouteInfo_2eproto();
  return *default_instance_;
}

ResolutionRouteRemovalInfo* ResolutionRouteRemovalInfo::default_instance_ = NULL;

ResolutionRouteRemovalInfo* ResolutionRouteRemovalInfo::New() const {
  return new ResolutionRouteRemovalInfo;
}

void ResolutionRouteRemovalInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_routeid()) {
      if (routeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        routeid_->clear();
      }
    }
    if (has_author()) {
      if (author_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        author_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionRouteRemovalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.ResolutionRouteRemovalInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string RouteId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_routeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->routeid().data(), this->routeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "routeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Author;
        break;
      }

      // required string Author = 2;
      case 2: {
        if (tag == 18) {
         parse_Author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author().data(), this->author().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "author");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.ResolutionRouteRemovalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.ResolutionRouteRemovalInfo)
  return false;
#undef DO_
}

void ResolutionRouteRemovalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.ResolutionRouteRemovalInfo)
  // required string RouteId = 1;
  if (has_routeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routeid().data(), this->routeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "routeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->routeid(), output);
  }

  // required string Author = 2;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->author(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.ResolutionRouteRemovalInfo)
}

::google::protobuf::uint8* ResolutionRouteRemovalInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.ResolutionRouteRemovalInfo)
  // required string RouteId = 1;
  if (has_routeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routeid().data(), this->routeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "routeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->routeid(), target);
  }

  // required string Author = 2;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->author(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.ResolutionRouteRemovalInfo)
  return target;
}

int ResolutionRouteRemovalInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string RouteId = 1;
    if (has_routeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->routeid());
    }

    // required string Author = 2;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->author());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionRouteRemovalInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionRouteRemovalInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionRouteRemovalInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionRouteRemovalInfo::MergeFrom(const ResolutionRouteRemovalInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_routeid()) {
      set_routeid(from.routeid());
    }
    if (from.has_author()) {
      set_author(from.author());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionRouteRemovalInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionRouteRemovalInfo::CopyFrom(const ResolutionRouteRemovalInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionRouteRemovalInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResolutionRouteRemovalInfo::Swap(ResolutionRouteRemovalInfo* other) {
  if (other != this) {
    std::swap(routeid_, other->routeid_);
    std::swap(author_, other->author_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionRouteRemovalInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionRouteRemovalInfo_descriptor_;
  metadata.reflection = ResolutionRouteRemovalInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Events
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
