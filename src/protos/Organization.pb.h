// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Organization.proto

#ifndef PROTOBUF_Organization_2eproto__INCLUDED
#define PROTOBUF_Organization_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Address.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Organization_2eproto();
void protobuf_AssignDesc_Organization_2eproto();
void protobuf_ShutdownFile_Organization_2eproto();

class OrganizationList;
class Organization;
class Department;
class Box;

enum OrganizationInvoiceFormatVersion {
  v5_01 = 1,
  v5_02 = 2
};
bool OrganizationInvoiceFormatVersion_IsValid(int value);
const OrganizationInvoiceFormatVersion OrganizationInvoiceFormatVersion_MIN = v5_01;
const OrganizationInvoiceFormatVersion OrganizationInvoiceFormatVersion_MAX = v5_02;
const int OrganizationInvoiceFormatVersion_ARRAYSIZE = OrganizationInvoiceFormatVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrganizationInvoiceFormatVersion_descriptor();
inline const ::std::string& OrganizationInvoiceFormatVersion_Name(OrganizationInvoiceFormatVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrganizationInvoiceFormatVersion_descriptor(), value);
}
inline bool OrganizationInvoiceFormatVersion_Parse(
    const ::std::string& name, OrganizationInvoiceFormatVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrganizationInvoiceFormatVersion>(
    OrganizationInvoiceFormatVersion_descriptor(), name, value);
}
enum Sociability {
  AllOrganizations = 0,
  CounteragentsOnly = 1
};
bool Sociability_IsValid(int value);
const Sociability Sociability_MIN = AllOrganizations;
const Sociability Sociability_MAX = CounteragentsOnly;
const int Sociability_ARRAYSIZE = Sociability_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sociability_descriptor();
inline const ::std::string& Sociability_Name(Sociability value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sociability_descriptor(), value);
}
inline bool Sociability_Parse(
    const ::std::string& name, Sociability* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sociability>(
    Sociability_descriptor(), name, value);
}
// ===================================================================

class OrganizationList : public ::google::protobuf::Message {
 public:
  OrganizationList();
  virtual ~OrganizationList();

  OrganizationList(const OrganizationList& from);

  inline OrganizationList& operator=(const OrganizationList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrganizationList& default_instance();

  void Swap(OrganizationList* other);

  // implements Message ----------------------------------------------

  OrganizationList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrganizationList& from);
  void MergeFrom(const OrganizationList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.Organization Organizations = 1;
  inline int organizations_size() const;
  inline void clear_organizations();
  static const int kOrganizationsFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Organization& organizations(int index) const;
  inline ::Diadoc::Api::Proto::Organization* mutable_organizations(int index);
  inline ::Diadoc::Api::Proto::Organization* add_organizations();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Organization >&
      organizations() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Organization >*
      mutable_organizations();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.OrganizationList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Organization > organizations_;
  friend void  protobuf_AddDesc_Organization_2eproto();
  friend void protobuf_AssignDesc_Organization_2eproto();
  friend void protobuf_ShutdownFile_Organization_2eproto();

  void InitAsDefaultInstance();
  static OrganizationList* default_instance_;
};
// -------------------------------------------------------------------

class Organization : public ::google::protobuf::Message {
 public:
  Organization();
  virtual ~Organization();

  Organization(const Organization& from);

  inline Organization& operator=(const Organization& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Organization& default_instance();

  void Swap(Organization* other);

  // implements Message ----------------------------------------------

  Organization* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Organization& from);
  void MergeFrom(const Organization& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string OrgId = 1;
  inline bool has_orgid() const;
  inline void clear_orgid();
  static const int kOrgIdFieldNumber = 1;
  inline const ::std::string& orgid() const;
  inline void set_orgid(const ::std::string& value);
  inline void set_orgid(const char* value);
  inline void set_orgid(const char* value, size_t size);
  inline ::std::string* mutable_orgid();
  inline ::std::string* release_orgid();
  inline void set_allocated_orgid(::std::string* orgid);

  // required string Inn = 2;
  inline bool has_inn() const;
  inline void clear_inn();
  static const int kInnFieldNumber = 2;
  inline const ::std::string& inn() const;
  inline void set_inn(const ::std::string& value);
  inline void set_inn(const char* value);
  inline void set_inn(const char* value, size_t size);
  inline ::std::string* mutable_inn();
  inline ::std::string* release_inn();
  inline void set_allocated_inn(::std::string* inn);

  // optional string Kpp = 3;
  inline bool has_kpp() const;
  inline void clear_kpp();
  static const int kKppFieldNumber = 3;
  inline const ::std::string& kpp() const;
  inline void set_kpp(const ::std::string& value);
  inline void set_kpp(const char* value);
  inline void set_kpp(const char* value, size_t size);
  inline ::std::string* mutable_kpp();
  inline ::std::string* release_kpp();
  inline void set_allocated_kpp(::std::string* kpp);

  // required string FullName = 4;
  inline bool has_fullname() const;
  inline void clear_fullname();
  static const int kFullNameFieldNumber = 4;
  inline const ::std::string& fullname() const;
  inline void set_fullname(const ::std::string& value);
  inline void set_fullname(const char* value);
  inline void set_fullname(const char* value, size_t size);
  inline ::std::string* mutable_fullname();
  inline ::std::string* release_fullname();
  inline void set_allocated_fullname(::std::string* fullname);

  // optional string ShortName = 5;
  inline bool has_shortname() const;
  inline void clear_shortname();
  static const int kShortNameFieldNumber = 5;
  inline const ::std::string& shortname() const;
  inline void set_shortname(const ::std::string& value);
  inline void set_shortname(const char* value);
  inline void set_shortname(const char* value, size_t size);
  inline ::std::string* mutable_shortname();
  inline ::std::string* release_shortname();
  inline void set_allocated_shortname(::std::string* shortname);

  // repeated .Diadoc.Api.Proto.Box Boxes = 7;
  inline int boxes_size() const;
  inline void clear_boxes();
  static const int kBoxesFieldNumber = 7;
  inline const ::Diadoc::Api::Proto::Box& boxes(int index) const;
  inline ::Diadoc::Api::Proto::Box* mutable_boxes(int index);
  inline ::Diadoc::Api::Proto::Box* add_boxes();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Box >&
      boxes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Box >*
      mutable_boxes();

  // optional string Ogrn = 8;
  inline bool has_ogrn() const;
  inline void clear_ogrn();
  static const int kOgrnFieldNumber = 8;
  inline const ::std::string& ogrn() const;
  inline void set_ogrn(const ::std::string& value);
  inline void set_ogrn(const char* value);
  inline void set_ogrn(const char* value, size_t size);
  inline ::std::string* mutable_ogrn();
  inline ::std::string* release_ogrn();
  inline void set_allocated_ogrn(::std::string* ogrn);

  // optional string FnsParticipantId = 9;
  inline bool has_fnsparticipantid() const;
  inline void clear_fnsparticipantid();
  static const int kFnsParticipantIdFieldNumber = 9;
  inline const ::std::string& fnsparticipantid() const;
  inline void set_fnsparticipantid(const ::std::string& value);
  inline void set_fnsparticipantid(const char* value);
  inline void set_fnsparticipantid(const char* value, size_t size);
  inline ::std::string* mutable_fnsparticipantid();
  inline ::std::string* release_fnsparticipantid();
  inline void set_allocated_fnsparticipantid(::std::string* fnsparticipantid);

  // optional .Diadoc.Api.Proto.Address Address = 10;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 10;
  inline const ::Diadoc::Api::Proto::Address& address() const;
  inline ::Diadoc::Api::Proto::Address* mutable_address();
  inline ::Diadoc::Api::Proto::Address* release_address();
  inline void set_allocated_address(::Diadoc::Api::Proto::Address* address);

  // optional string FnsRegistrationDate = 11;
  inline bool has_fnsregistrationdate() const;
  inline void clear_fnsregistrationdate();
  static const int kFnsRegistrationDateFieldNumber = 11;
  inline const ::std::string& fnsregistrationdate() const;
  inline void set_fnsregistrationdate(const ::std::string& value);
  inline void set_fnsregistrationdate(const char* value);
  inline void set_fnsregistrationdate(const char* value, size_t size);
  inline ::std::string* mutable_fnsregistrationdate();
  inline ::std::string* release_fnsregistrationdate();
  inline void set_allocated_fnsregistrationdate(::std::string* fnsregistrationdate);

  // repeated .Diadoc.Api.Proto.Department Departments = 12;
  inline int departments_size() const;
  inline void clear_departments();
  static const int kDepartmentsFieldNumber = 12;
  inline const ::Diadoc::Api::Proto::Department& departments(int index) const;
  inline ::Diadoc::Api::Proto::Department* mutable_departments(int index);
  inline ::Diadoc::Api::Proto::Department* add_departments();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Department >&
      departments() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Department >*
      mutable_departments();

  // optional string IfnsCode = 13;
  inline bool has_ifnscode() const;
  inline void clear_ifnscode();
  static const int kIfnsCodeFieldNumber = 13;
  inline const ::std::string& ifnscode() const;
  inline void set_ifnscode(const ::std::string& value);
  inline void set_ifnscode(const char* value);
  inline void set_ifnscode(const char* value, size_t size);
  inline ::std::string* mutable_ifnscode();
  inline ::std::string* release_ifnscode();
  inline void set_allocated_ifnscode(::std::string* ifnscode);

  // optional bool IsPilot = 14;
  inline bool has_ispilot() const;
  inline void clear_ispilot();
  static const int kIsPilotFieldNumber = 14;
  inline bool ispilot() const;
  inline void set_ispilot(bool value);

  // optional bool IsActive = 15;
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsActiveFieldNumber = 15;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // optional bool IsTest = 16;
  inline bool has_istest() const;
  inline void clear_istest();
  static const int kIsTestFieldNumber = 16;
  inline bool istest() const;
  inline void set_istest(bool value);

  // optional bool IsBranch = 17;
  inline bool has_isbranch() const;
  inline void clear_isbranch();
  static const int kIsBranchFieldNumber = 17;
  inline bool isbranch() const;
  inline void set_isbranch(bool value);

  // optional bool IsRoaming = 18;
  inline bool has_isroaming() const;
  inline void clear_isroaming();
  static const int kIsRoamingFieldNumber = 18;
  inline bool isroaming() const;
  inline void set_isroaming(bool value);

  // optional bool IsEmployee = 19;
  inline bool has_isemployee() const;
  inline void clear_isemployee();
  static const int kIsEmployeeFieldNumber = 19;
  inline bool isemployee() const;
  inline void set_isemployee(bool value);

  // optional int32 InvitationCount = 20;
  inline bool has_invitationcount() const;
  inline void clear_invitationcount();
  static const int kInvitationCountFieldNumber = 20;
  inline ::google::protobuf::int32 invitationcount() const;
  inline void set_invitationcount(::google::protobuf::int32 value);

  // optional int32 SearchCount = 21;
  inline bool has_searchcount() const;
  inline void clear_searchcount();
  static const int kSearchCountFieldNumber = 21;
  inline ::google::protobuf::int32 searchcount() const;
  inline void set_searchcount(::google::protobuf::int32 value);

  // required .Diadoc.Api.Proto.Sociability Sociability = 22;
  inline bool has_sociability() const;
  inline void clear_sociability();
  static const int kSociabilityFieldNumber = 22;
  inline ::Diadoc::Api::Proto::Sociability sociability() const;
  inline void set_sociability(::Diadoc::Api::Proto::Sociability value);

  // optional string LiquidationDate = 23;
  inline bool has_liquidationdate() const;
  inline void clear_liquidationdate();
  static const int kLiquidationDateFieldNumber = 23;
  inline const ::std::string& liquidationdate() const;
  inline void set_liquidationdate(const ::std::string& value);
  inline void set_liquidationdate(const char* value);
  inline void set_liquidationdate(const char* value, size_t size);
  inline ::std::string* mutable_liquidationdate();
  inline ::std::string* release_liquidationdate();
  inline void set_allocated_liquidationdate(::std::string* liquidationdate);

  // optional string CertificateOfRegistryInfo = 24;
  inline bool has_certificateofregistryinfo() const;
  inline void clear_certificateofregistryinfo();
  static const int kCertificateOfRegistryInfoFieldNumber = 24;
  inline const ::std::string& certificateofregistryinfo() const;
  inline void set_certificateofregistryinfo(const ::std::string& value);
  inline void set_certificateofregistryinfo(const char* value);
  inline void set_certificateofregistryinfo(const char* value, size_t size);
  inline ::std::string* mutable_certificateofregistryinfo();
  inline ::std::string* release_certificateofregistryinfo();
  inline void set_allocated_certificateofregistryinfo(::std::string* certificateofregistryinfo);

  // optional bool IsForeign = 25;
  inline bool has_isforeign() const;
  inline void clear_isforeign();
  static const int kIsForeignFieldNumber = 25;
  inline bool isforeign() const;
  inline void set_isforeign(bool value);

  // optional bool HasCertificateToSign = 26;
  inline bool has_hascertificatetosign() const;
  inline void clear_hascertificatetosign();
  static const int kHasCertificateToSignFieldNumber = 26;
  inline bool hascertificatetosign() const;
  inline void set_hascertificatetosign(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Organization)
 private:
  inline void set_has_orgid();
  inline void clear_has_orgid();
  inline void set_has_inn();
  inline void clear_has_inn();
  inline void set_has_kpp();
  inline void clear_has_kpp();
  inline void set_has_fullname();
  inline void clear_has_fullname();
  inline void set_has_shortname();
  inline void clear_has_shortname();
  inline void set_has_ogrn();
  inline void clear_has_ogrn();
  inline void set_has_fnsparticipantid();
  inline void clear_has_fnsparticipantid();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_fnsregistrationdate();
  inline void clear_has_fnsregistrationdate();
  inline void set_has_ifnscode();
  inline void clear_has_ifnscode();
  inline void set_has_ispilot();
  inline void clear_has_ispilot();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_istest();
  inline void clear_has_istest();
  inline void set_has_isbranch();
  inline void clear_has_isbranch();
  inline void set_has_isroaming();
  inline void clear_has_isroaming();
  inline void set_has_isemployee();
  inline void clear_has_isemployee();
  inline void set_has_invitationcount();
  inline void clear_has_invitationcount();
  inline void set_has_searchcount();
  inline void clear_has_searchcount();
  inline void set_has_sociability();
  inline void clear_has_sociability();
  inline void set_has_liquidationdate();
  inline void clear_has_liquidationdate();
  inline void set_has_certificateofregistryinfo();
  inline void clear_has_certificateofregistryinfo();
  inline void set_has_isforeign();
  inline void clear_has_isforeign();
  inline void set_has_hascertificatetosign();
  inline void clear_has_hascertificatetosign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* orgid_;
  ::std::string* inn_;
  ::std::string* kpp_;
  ::std::string* fullname_;
  ::std::string* shortname_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Box > boxes_;
  ::std::string* ogrn_;
  ::std::string* fnsparticipantid_;
  ::Diadoc::Api::Proto::Address* address_;
  ::std::string* fnsregistrationdate_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Department > departments_;
  ::std::string* ifnscode_;
  bool ispilot_;
  bool isactive_;
  bool istest_;
  bool isbranch_;
  ::google::protobuf::int32 invitationcount_;
  ::google::protobuf::int32 searchcount_;
  int sociability_;
  ::std::string* liquidationdate_;
  ::std::string* certificateofregistryinfo_;
  bool isroaming_;
  bool isemployee_;
  bool isforeign_;
  bool hascertificatetosign_;
  friend void  protobuf_AddDesc_Organization_2eproto();
  friend void protobuf_AssignDesc_Organization_2eproto();
  friend void protobuf_ShutdownFile_Organization_2eproto();

  void InitAsDefaultInstance();
  static Organization* default_instance_;
};
// -------------------------------------------------------------------

class Department : public ::google::protobuf::Message {
 public:
  Department();
  virtual ~Department();

  Department(const Department& from);

  inline Department& operator=(const Department& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Department& default_instance();

  void Swap(Department* other);

  // implements Message ----------------------------------------------

  Department* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Department& from);
  void MergeFrom(const Department& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string DepartmentId = 1;
  inline bool has_departmentid() const;
  inline void clear_departmentid();
  static const int kDepartmentIdFieldNumber = 1;
  inline const ::std::string& departmentid() const;
  inline void set_departmentid(const ::std::string& value);
  inline void set_departmentid(const char* value);
  inline void set_departmentid(const char* value, size_t size);
  inline ::std::string* mutable_departmentid();
  inline ::std::string* release_departmentid();
  inline void set_allocated_departmentid(::std::string* departmentid);

  // required string ParentDepartmentId = 2;
  inline bool has_parentdepartmentid() const;
  inline void clear_parentdepartmentid();
  static const int kParentDepartmentIdFieldNumber = 2;
  inline const ::std::string& parentdepartmentid() const;
  inline void set_parentdepartmentid(const ::std::string& value);
  inline void set_parentdepartmentid(const char* value);
  inline void set_parentdepartmentid(const char* value, size_t size);
  inline ::std::string* mutable_parentdepartmentid();
  inline ::std::string* release_parentdepartmentid();
  inline void set_allocated_parentdepartmentid(::std::string* parentdepartmentid);

  // required string Name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string Abbreviation = 4;
  inline bool has_abbreviation() const;
  inline void clear_abbreviation();
  static const int kAbbreviationFieldNumber = 4;
  inline const ::std::string& abbreviation() const;
  inline void set_abbreviation(const ::std::string& value);
  inline void set_abbreviation(const char* value);
  inline void set_abbreviation(const char* value, size_t size);
  inline ::std::string* mutable_abbreviation();
  inline ::std::string* release_abbreviation();
  inline void set_allocated_abbreviation(::std::string* abbreviation);

  // optional string Kpp = 5;
  inline bool has_kpp() const;
  inline void clear_kpp();
  static const int kKppFieldNumber = 5;
  inline const ::std::string& kpp() const;
  inline void set_kpp(const ::std::string& value);
  inline void set_kpp(const char* value);
  inline void set_kpp(const char* value, size_t size);
  inline ::std::string* mutable_kpp();
  inline ::std::string* release_kpp();
  inline void set_allocated_kpp(::std::string* kpp);

  // optional .Diadoc.Api.Proto.Address Address = 6;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::Address& address() const;
  inline ::Diadoc::Api::Proto::Address* mutable_address();
  inline ::Diadoc::Api::Proto::Address* release_address();
  inline void set_allocated_address(::Diadoc::Api::Proto::Address* address);

  // optional bool IsDisabled = 7 [default = false];
  inline bool has_isdisabled() const;
  inline void clear_isdisabled();
  static const int kIsDisabledFieldNumber = 7;
  inline bool isdisabled() const;
  inline void set_isdisabled(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Department)
 private:
  inline void set_has_departmentid();
  inline void clear_has_departmentid();
  inline void set_has_parentdepartmentid();
  inline void clear_has_parentdepartmentid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_abbreviation();
  inline void clear_has_abbreviation();
  inline void set_has_kpp();
  inline void clear_has_kpp();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_isdisabled();
  inline void clear_has_isdisabled();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* departmentid_;
  ::std::string* parentdepartmentid_;
  ::std::string* name_;
  ::std::string* abbreviation_;
  ::std::string* kpp_;
  ::Diadoc::Api::Proto::Address* address_;
  bool isdisabled_;
  friend void  protobuf_AddDesc_Organization_2eproto();
  friend void protobuf_AssignDesc_Organization_2eproto();
  friend void protobuf_ShutdownFile_Organization_2eproto();

  void InitAsDefaultInstance();
  static Department* default_instance_;
};
// -------------------------------------------------------------------

class Box : public ::google::protobuf::Message {
 public:
  Box();
  virtual ~Box();

  Box(const Box& from);

  inline Box& operator=(const Box& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Box& default_instance();

  void Swap(Box* other);

  // implements Message ----------------------------------------------

  Box* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Box& from);
  void MergeFrom(const Box& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BoxId = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 1;
  inline const ::std::string& boxid() const;
  inline void set_boxid(const ::std::string& value);
  inline void set_boxid(const char* value);
  inline void set_boxid(const char* value, size_t size);
  inline ::std::string* mutable_boxid();
  inline ::std::string* release_boxid();
  inline void set_allocated_boxid(::std::string* boxid);

  // required string BoxIdGuid = 6;
  inline bool has_boxidguid() const;
  inline void clear_boxidguid();
  static const int kBoxIdGuidFieldNumber = 6;
  inline const ::std::string& boxidguid() const;
  inline void set_boxidguid(const ::std::string& value);
  inline void set_boxidguid(const char* value);
  inline void set_boxidguid(const char* value, size_t size);
  inline ::std::string* mutable_boxidguid();
  inline ::std::string* release_boxidguid();
  inline void set_allocated_boxidguid(::std::string* boxidguid);

  // required string Title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional .Diadoc.Api.Proto.Organization Organization = 3;
  inline bool has_organization() const;
  inline void clear_organization();
  static const int kOrganizationFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Organization& organization() const;
  inline ::Diadoc::Api::Proto::Organization* mutable_organization();
  inline ::Diadoc::Api::Proto::Organization* release_organization();
  inline void set_allocated_organization(::Diadoc::Api::Proto::Organization* organization);

  // optional .Diadoc.Api.Proto.OrganizationInvoiceFormatVersion InvoiceFormatVersion = 4 [default = v5_02];
  inline bool has_invoiceformatversion() const;
  inline void clear_invoiceformatversion();
  static const int kInvoiceFormatVersionFieldNumber = 4;
  inline ::Diadoc::Api::Proto::OrganizationInvoiceFormatVersion invoiceformatversion() const;
  inline void set_invoiceformatversion(::Diadoc::Api::Proto::OrganizationInvoiceFormatVersion value);

  // optional bool EncryptedDocumentsAllowed = 5;
  inline bool has_encrypteddocumentsallowed() const;
  inline void clear_encrypteddocumentsallowed();
  static const int kEncryptedDocumentsAllowedFieldNumber = 5;
  inline bool encrypteddocumentsallowed() const;
  inline void set_encrypteddocumentsallowed(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Box)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_boxidguid();
  inline void clear_has_boxidguid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_organization();
  inline void clear_has_organization();
  inline void set_has_invoiceformatversion();
  inline void clear_has_invoiceformatversion();
  inline void set_has_encrypteddocumentsallowed();
  inline void clear_has_encrypteddocumentsallowed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* boxid_;
  ::std::string* boxidguid_;
  ::std::string* title_;
  ::Diadoc::Api::Proto::Organization* organization_;
  int invoiceformatversion_;
  bool encrypteddocumentsallowed_;
  friend void  protobuf_AddDesc_Organization_2eproto();
  friend void protobuf_AssignDesc_Organization_2eproto();
  friend void protobuf_ShutdownFile_Organization_2eproto();

  void InitAsDefaultInstance();
  static Box* default_instance_;
};
// ===================================================================


// ===================================================================

// OrganizationList

// repeated .Diadoc.Api.Proto.Organization Organizations = 1;
inline int OrganizationList::organizations_size() const {
  return organizations_.size();
}
inline void OrganizationList::clear_organizations() {
  organizations_.Clear();
}
inline const ::Diadoc::Api::Proto::Organization& OrganizationList::organizations(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationList.Organizations)
  return organizations_.Get(index);
}
inline ::Diadoc::Api::Proto::Organization* OrganizationList::mutable_organizations(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.OrganizationList.Organizations)
  return organizations_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Organization* OrganizationList::add_organizations() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.OrganizationList.Organizations)
  return organizations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Organization >&
OrganizationList::organizations() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.OrganizationList.Organizations)
  return organizations_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Organization >*
OrganizationList::mutable_organizations() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.OrganizationList.Organizations)
  return &organizations_;
}

// -------------------------------------------------------------------

// Organization

// required string OrgId = 1;
inline bool Organization::has_orgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Organization::set_has_orgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Organization::clear_has_orgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Organization::clear_orgid() {
  if (orgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgid_->clear();
  }
  clear_has_orgid();
}
inline const ::std::string& Organization::orgid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.OrgId)
  return *orgid_;
}
inline void Organization::set_orgid(const ::std::string& value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.OrgId)
}
inline void Organization::set_orgid(const char* value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Organization.OrgId)
}
inline void Organization::set_orgid(const char* value, size_t size) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Organization.OrgId)
}
inline ::std::string* Organization::mutable_orgid() {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orgid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organization.OrgId)
  return orgid_;
}
inline ::std::string* Organization::release_orgid() {
  clear_has_orgid();
  if (orgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = orgid_;
    orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Organization::set_allocated_orgid(::std::string* orgid) {
  if (orgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orgid_;
  }
  if (orgid) {
    set_has_orgid();
    orgid_ = orgid;
  } else {
    clear_has_orgid();
    orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Organization.OrgId)
}

// required string Inn = 2;
inline bool Organization::has_inn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Organization::set_has_inn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Organization::clear_has_inn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Organization::clear_inn() {
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_->clear();
  }
  clear_has_inn();
}
inline const ::std::string& Organization::inn() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.Inn)
  return *inn_;
}
inline void Organization::set_inn(const ::std::string& value) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.Inn)
}
inline void Organization::set_inn(const char* value) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Organization.Inn)
}
inline void Organization::set_inn(const char* value, size_t size) {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  inn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Organization.Inn)
}
inline ::std::string* Organization::mutable_inn() {
  set_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organization.Inn)
  return inn_;
}
inline ::std::string* Organization::release_inn() {
  clear_has_inn();
  if (inn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inn_;
    inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Organization::set_allocated_inn(::std::string* inn) {
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inn_;
  }
  if (inn) {
    set_has_inn();
    inn_ = inn;
  } else {
    clear_has_inn();
    inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Organization.Inn)
}

// optional string Kpp = 3;
inline bool Organization::has_kpp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Organization::set_has_kpp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Organization::clear_has_kpp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Organization::clear_kpp() {
  if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_->clear();
  }
  clear_has_kpp();
}
inline const ::std::string& Organization::kpp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.Kpp)
  return *kpp_;
}
inline void Organization::set_kpp(const ::std::string& value) {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  kpp_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.Kpp)
}
inline void Organization::set_kpp(const char* value) {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  kpp_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Organization.Kpp)
}
inline void Organization::set_kpp(const char* value, size_t size) {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  kpp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Organization.Kpp)
}
inline ::std::string* Organization::mutable_kpp() {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organization.Kpp)
  return kpp_;
}
inline ::std::string* Organization::release_kpp() {
  clear_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = kpp_;
    kpp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Organization::set_allocated_kpp(::std::string* kpp) {
  if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kpp_;
  }
  if (kpp) {
    set_has_kpp();
    kpp_ = kpp;
  } else {
    clear_has_kpp();
    kpp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Organization.Kpp)
}

// required string FullName = 4;
inline bool Organization::has_fullname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Organization::set_has_fullname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Organization::clear_has_fullname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Organization::clear_fullname() {
  if (fullname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fullname_->clear();
  }
  clear_has_fullname();
}
inline const ::std::string& Organization::fullname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.FullName)
  return *fullname_;
}
inline void Organization::set_fullname(const ::std::string& value) {
  set_has_fullname();
  if (fullname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fullname_ = new ::std::string;
  }
  fullname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.FullName)
}
inline void Organization::set_fullname(const char* value) {
  set_has_fullname();
  if (fullname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fullname_ = new ::std::string;
  }
  fullname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Organization.FullName)
}
inline void Organization::set_fullname(const char* value, size_t size) {
  set_has_fullname();
  if (fullname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fullname_ = new ::std::string;
  }
  fullname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Organization.FullName)
}
inline ::std::string* Organization::mutable_fullname() {
  set_has_fullname();
  if (fullname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fullname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organization.FullName)
  return fullname_;
}
inline ::std::string* Organization::release_fullname() {
  clear_has_fullname();
  if (fullname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fullname_;
    fullname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Organization::set_allocated_fullname(::std::string* fullname) {
  if (fullname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fullname_;
  }
  if (fullname) {
    set_has_fullname();
    fullname_ = fullname;
  } else {
    clear_has_fullname();
    fullname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Organization.FullName)
}

// optional string ShortName = 5;
inline bool Organization::has_shortname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Organization::set_has_shortname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Organization::clear_has_shortname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Organization::clear_shortname() {
  if (shortname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shortname_->clear();
  }
  clear_has_shortname();
}
inline const ::std::string& Organization::shortname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.ShortName)
  return *shortname_;
}
inline void Organization::set_shortname(const ::std::string& value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.ShortName)
}
inline void Organization::set_shortname(const char* value) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Organization.ShortName)
}
inline void Organization::set_shortname(const char* value, size_t size) {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shortname_ = new ::std::string;
  }
  shortname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Organization.ShortName)
}
inline ::std::string* Organization::mutable_shortname() {
  set_has_shortname();
  if (shortname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shortname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organization.ShortName)
  return shortname_;
}
inline ::std::string* Organization::release_shortname() {
  clear_has_shortname();
  if (shortname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = shortname_;
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Organization::set_allocated_shortname(::std::string* shortname) {
  if (shortname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shortname_;
  }
  if (shortname) {
    set_has_shortname();
    shortname_ = shortname;
  } else {
    clear_has_shortname();
    shortname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Organization.ShortName)
}

// repeated .Diadoc.Api.Proto.Box Boxes = 7;
inline int Organization::boxes_size() const {
  return boxes_.size();
}
inline void Organization::clear_boxes() {
  boxes_.Clear();
}
inline const ::Diadoc::Api::Proto::Box& Organization::boxes(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.Boxes)
  return boxes_.Get(index);
}
inline ::Diadoc::Api::Proto::Box* Organization::mutable_boxes(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organization.Boxes)
  return boxes_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Box* Organization::add_boxes() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Organization.Boxes)
  return boxes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Box >&
Organization::boxes() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Organization.Boxes)
  return boxes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Box >*
Organization::mutable_boxes() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Organization.Boxes)
  return &boxes_;
}

// optional string Ogrn = 8;
inline bool Organization::has_ogrn() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Organization::set_has_ogrn() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Organization::clear_has_ogrn() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Organization::clear_ogrn() {
  if (ogrn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ogrn_->clear();
  }
  clear_has_ogrn();
}
inline const ::std::string& Organization::ogrn() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.Ogrn)
  return *ogrn_;
}
inline void Organization::set_ogrn(const ::std::string& value) {
  set_has_ogrn();
  if (ogrn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ogrn_ = new ::std::string;
  }
  ogrn_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.Ogrn)
}
inline void Organization::set_ogrn(const char* value) {
  set_has_ogrn();
  if (ogrn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ogrn_ = new ::std::string;
  }
  ogrn_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Organization.Ogrn)
}
inline void Organization::set_ogrn(const char* value, size_t size) {
  set_has_ogrn();
  if (ogrn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ogrn_ = new ::std::string;
  }
  ogrn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Organization.Ogrn)
}
inline ::std::string* Organization::mutable_ogrn() {
  set_has_ogrn();
  if (ogrn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ogrn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organization.Ogrn)
  return ogrn_;
}
inline ::std::string* Organization::release_ogrn() {
  clear_has_ogrn();
  if (ogrn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ogrn_;
    ogrn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Organization::set_allocated_ogrn(::std::string* ogrn) {
  if (ogrn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ogrn_;
  }
  if (ogrn) {
    set_has_ogrn();
    ogrn_ = ogrn;
  } else {
    clear_has_ogrn();
    ogrn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Organization.Ogrn)
}

// optional string FnsParticipantId = 9;
inline bool Organization::has_fnsparticipantid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Organization::set_has_fnsparticipantid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Organization::clear_has_fnsparticipantid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Organization::clear_fnsparticipantid() {
  if (fnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fnsparticipantid_->clear();
  }
  clear_has_fnsparticipantid();
}
inline const ::std::string& Organization::fnsparticipantid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.FnsParticipantId)
  return *fnsparticipantid_;
}
inline void Organization::set_fnsparticipantid(const ::std::string& value) {
  set_has_fnsparticipantid();
  if (fnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fnsparticipantid_ = new ::std::string;
  }
  fnsparticipantid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.FnsParticipantId)
}
inline void Organization::set_fnsparticipantid(const char* value) {
  set_has_fnsparticipantid();
  if (fnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fnsparticipantid_ = new ::std::string;
  }
  fnsparticipantid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Organization.FnsParticipantId)
}
inline void Organization::set_fnsparticipantid(const char* value, size_t size) {
  set_has_fnsparticipantid();
  if (fnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fnsparticipantid_ = new ::std::string;
  }
  fnsparticipantid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Organization.FnsParticipantId)
}
inline ::std::string* Organization::mutable_fnsparticipantid() {
  set_has_fnsparticipantid();
  if (fnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fnsparticipantid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organization.FnsParticipantId)
  return fnsparticipantid_;
}
inline ::std::string* Organization::release_fnsparticipantid() {
  clear_has_fnsparticipantid();
  if (fnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fnsparticipantid_;
    fnsparticipantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Organization::set_allocated_fnsparticipantid(::std::string* fnsparticipantid) {
  if (fnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fnsparticipantid_;
  }
  if (fnsparticipantid) {
    set_has_fnsparticipantid();
    fnsparticipantid_ = fnsparticipantid;
  } else {
    clear_has_fnsparticipantid();
    fnsparticipantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Organization.FnsParticipantId)
}

// optional .Diadoc.Api.Proto.Address Address = 10;
inline bool Organization::has_address() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Organization::set_has_address() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Organization::clear_has_address() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Organization::clear_address() {
  if (address_ != NULL) address_->::Diadoc::Api::Proto::Address::Clear();
  clear_has_address();
}
inline const ::Diadoc::Api::Proto::Address& Organization::address() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.Address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::Diadoc::Api::Proto::Address* Organization::mutable_address() {
  set_has_address();
  if (address_ == NULL) address_ = new ::Diadoc::Api::Proto::Address;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organization.Address)
  return address_;
}
inline ::Diadoc::Api::Proto::Address* Organization::release_address() {
  clear_has_address();
  ::Diadoc::Api::Proto::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline void Organization::set_allocated_address(::Diadoc::Api::Proto::Address* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Organization.Address)
}

// optional string FnsRegistrationDate = 11;
inline bool Organization::has_fnsregistrationdate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Organization::set_has_fnsregistrationdate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Organization::clear_has_fnsregistrationdate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Organization::clear_fnsregistrationdate() {
  if (fnsregistrationdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fnsregistrationdate_->clear();
  }
  clear_has_fnsregistrationdate();
}
inline const ::std::string& Organization::fnsregistrationdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.FnsRegistrationDate)
  return *fnsregistrationdate_;
}
inline void Organization::set_fnsregistrationdate(const ::std::string& value) {
  set_has_fnsregistrationdate();
  if (fnsregistrationdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fnsregistrationdate_ = new ::std::string;
  }
  fnsregistrationdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.FnsRegistrationDate)
}
inline void Organization::set_fnsregistrationdate(const char* value) {
  set_has_fnsregistrationdate();
  if (fnsregistrationdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fnsregistrationdate_ = new ::std::string;
  }
  fnsregistrationdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Organization.FnsRegistrationDate)
}
inline void Organization::set_fnsregistrationdate(const char* value, size_t size) {
  set_has_fnsregistrationdate();
  if (fnsregistrationdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fnsregistrationdate_ = new ::std::string;
  }
  fnsregistrationdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Organization.FnsRegistrationDate)
}
inline ::std::string* Organization::mutable_fnsregistrationdate() {
  set_has_fnsregistrationdate();
  if (fnsregistrationdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fnsregistrationdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organization.FnsRegistrationDate)
  return fnsregistrationdate_;
}
inline ::std::string* Organization::release_fnsregistrationdate() {
  clear_has_fnsregistrationdate();
  if (fnsregistrationdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fnsregistrationdate_;
    fnsregistrationdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Organization::set_allocated_fnsregistrationdate(::std::string* fnsregistrationdate) {
  if (fnsregistrationdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fnsregistrationdate_;
  }
  if (fnsregistrationdate) {
    set_has_fnsregistrationdate();
    fnsregistrationdate_ = fnsregistrationdate;
  } else {
    clear_has_fnsregistrationdate();
    fnsregistrationdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Organization.FnsRegistrationDate)
}

// repeated .Diadoc.Api.Proto.Department Departments = 12;
inline int Organization::departments_size() const {
  return departments_.size();
}
inline void Organization::clear_departments() {
  departments_.Clear();
}
inline const ::Diadoc::Api::Proto::Department& Organization::departments(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.Departments)
  return departments_.Get(index);
}
inline ::Diadoc::Api::Proto::Department* Organization::mutable_departments(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organization.Departments)
  return departments_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Department* Organization::add_departments() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Organization.Departments)
  return departments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Department >&
Organization::departments() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Organization.Departments)
  return departments_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Department >*
Organization::mutable_departments() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Organization.Departments)
  return &departments_;
}

// optional string IfnsCode = 13;
inline bool Organization::has_ifnscode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Organization::set_has_ifnscode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Organization::clear_has_ifnscode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Organization::clear_ifnscode() {
  if (ifnscode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ifnscode_->clear();
  }
  clear_has_ifnscode();
}
inline const ::std::string& Organization::ifnscode() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.IfnsCode)
  return *ifnscode_;
}
inline void Organization::set_ifnscode(const ::std::string& value) {
  set_has_ifnscode();
  if (ifnscode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ifnscode_ = new ::std::string;
  }
  ifnscode_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.IfnsCode)
}
inline void Organization::set_ifnscode(const char* value) {
  set_has_ifnscode();
  if (ifnscode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ifnscode_ = new ::std::string;
  }
  ifnscode_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Organization.IfnsCode)
}
inline void Organization::set_ifnscode(const char* value, size_t size) {
  set_has_ifnscode();
  if (ifnscode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ifnscode_ = new ::std::string;
  }
  ifnscode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Organization.IfnsCode)
}
inline ::std::string* Organization::mutable_ifnscode() {
  set_has_ifnscode();
  if (ifnscode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ifnscode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organization.IfnsCode)
  return ifnscode_;
}
inline ::std::string* Organization::release_ifnscode() {
  clear_has_ifnscode();
  if (ifnscode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ifnscode_;
    ifnscode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Organization::set_allocated_ifnscode(::std::string* ifnscode) {
  if (ifnscode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ifnscode_;
  }
  if (ifnscode) {
    set_has_ifnscode();
    ifnscode_ = ifnscode;
  } else {
    clear_has_ifnscode();
    ifnscode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Organization.IfnsCode)
}

// optional bool IsPilot = 14;
inline bool Organization::has_ispilot() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Organization::set_has_ispilot() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Organization::clear_has_ispilot() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Organization::clear_ispilot() {
  ispilot_ = false;
  clear_has_ispilot();
}
inline bool Organization::ispilot() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.IsPilot)
  return ispilot_;
}
inline void Organization::set_ispilot(bool value) {
  set_has_ispilot();
  ispilot_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.IsPilot)
}

// optional bool IsActive = 15;
inline bool Organization::has_isactive() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Organization::set_has_isactive() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Organization::clear_has_isactive() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Organization::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool Organization::isactive() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.IsActive)
  return isactive_;
}
inline void Organization::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.IsActive)
}

// optional bool IsTest = 16;
inline bool Organization::has_istest() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Organization::set_has_istest() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Organization::clear_has_istest() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Organization::clear_istest() {
  istest_ = false;
  clear_has_istest();
}
inline bool Organization::istest() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.IsTest)
  return istest_;
}
inline void Organization::set_istest(bool value) {
  set_has_istest();
  istest_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.IsTest)
}

// optional bool IsBranch = 17;
inline bool Organization::has_isbranch() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Organization::set_has_isbranch() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Organization::clear_has_isbranch() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Organization::clear_isbranch() {
  isbranch_ = false;
  clear_has_isbranch();
}
inline bool Organization::isbranch() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.IsBranch)
  return isbranch_;
}
inline void Organization::set_isbranch(bool value) {
  set_has_isbranch();
  isbranch_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.IsBranch)
}

// optional bool IsRoaming = 18;
inline bool Organization::has_isroaming() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Organization::set_has_isroaming() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Organization::clear_has_isroaming() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Organization::clear_isroaming() {
  isroaming_ = false;
  clear_has_isroaming();
}
inline bool Organization::isroaming() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.IsRoaming)
  return isroaming_;
}
inline void Organization::set_isroaming(bool value) {
  set_has_isroaming();
  isroaming_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.IsRoaming)
}

// optional bool IsEmployee = 19;
inline bool Organization::has_isemployee() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Organization::set_has_isemployee() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Organization::clear_has_isemployee() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Organization::clear_isemployee() {
  isemployee_ = false;
  clear_has_isemployee();
}
inline bool Organization::isemployee() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.IsEmployee)
  return isemployee_;
}
inline void Organization::set_isemployee(bool value) {
  set_has_isemployee();
  isemployee_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.IsEmployee)
}

// optional int32 InvitationCount = 20;
inline bool Organization::has_invitationcount() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Organization::set_has_invitationcount() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Organization::clear_has_invitationcount() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Organization::clear_invitationcount() {
  invitationcount_ = 0;
  clear_has_invitationcount();
}
inline ::google::protobuf::int32 Organization::invitationcount() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.InvitationCount)
  return invitationcount_;
}
inline void Organization::set_invitationcount(::google::protobuf::int32 value) {
  set_has_invitationcount();
  invitationcount_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.InvitationCount)
}

// optional int32 SearchCount = 21;
inline bool Organization::has_searchcount() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Organization::set_has_searchcount() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Organization::clear_has_searchcount() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Organization::clear_searchcount() {
  searchcount_ = 0;
  clear_has_searchcount();
}
inline ::google::protobuf::int32 Organization::searchcount() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.SearchCount)
  return searchcount_;
}
inline void Organization::set_searchcount(::google::protobuf::int32 value) {
  set_has_searchcount();
  searchcount_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.SearchCount)
}

// required .Diadoc.Api.Proto.Sociability Sociability = 22;
inline bool Organization::has_sociability() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Organization::set_has_sociability() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Organization::clear_has_sociability() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Organization::clear_sociability() {
  sociability_ = 0;
  clear_has_sociability();
}
inline ::Diadoc::Api::Proto::Sociability Organization::sociability() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.Sociability)
  return static_cast< ::Diadoc::Api::Proto::Sociability >(sociability_);
}
inline void Organization::set_sociability(::Diadoc::Api::Proto::Sociability value) {
  assert(::Diadoc::Api::Proto::Sociability_IsValid(value));
  set_has_sociability();
  sociability_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.Sociability)
}

// optional string LiquidationDate = 23;
inline bool Organization::has_liquidationdate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Organization::set_has_liquidationdate() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Organization::clear_has_liquidationdate() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Organization::clear_liquidationdate() {
  if (liquidationdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liquidationdate_->clear();
  }
  clear_has_liquidationdate();
}
inline const ::std::string& Organization::liquidationdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.LiquidationDate)
  return *liquidationdate_;
}
inline void Organization::set_liquidationdate(const ::std::string& value) {
  set_has_liquidationdate();
  if (liquidationdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liquidationdate_ = new ::std::string;
  }
  liquidationdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.LiquidationDate)
}
inline void Organization::set_liquidationdate(const char* value) {
  set_has_liquidationdate();
  if (liquidationdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liquidationdate_ = new ::std::string;
  }
  liquidationdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Organization.LiquidationDate)
}
inline void Organization::set_liquidationdate(const char* value, size_t size) {
  set_has_liquidationdate();
  if (liquidationdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liquidationdate_ = new ::std::string;
  }
  liquidationdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Organization.LiquidationDate)
}
inline ::std::string* Organization::mutable_liquidationdate() {
  set_has_liquidationdate();
  if (liquidationdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    liquidationdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organization.LiquidationDate)
  return liquidationdate_;
}
inline ::std::string* Organization::release_liquidationdate() {
  clear_has_liquidationdate();
  if (liquidationdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = liquidationdate_;
    liquidationdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Organization::set_allocated_liquidationdate(::std::string* liquidationdate) {
  if (liquidationdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete liquidationdate_;
  }
  if (liquidationdate) {
    set_has_liquidationdate();
    liquidationdate_ = liquidationdate;
  } else {
    clear_has_liquidationdate();
    liquidationdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Organization.LiquidationDate)
}

// optional string CertificateOfRegistryInfo = 24;
inline bool Organization::has_certificateofregistryinfo() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Organization::set_has_certificateofregistryinfo() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Organization::clear_has_certificateofregistryinfo() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Organization::clear_certificateofregistryinfo() {
  if (certificateofregistryinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificateofregistryinfo_->clear();
  }
  clear_has_certificateofregistryinfo();
}
inline const ::std::string& Organization::certificateofregistryinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.CertificateOfRegistryInfo)
  return *certificateofregistryinfo_;
}
inline void Organization::set_certificateofregistryinfo(const ::std::string& value) {
  set_has_certificateofregistryinfo();
  if (certificateofregistryinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificateofregistryinfo_ = new ::std::string;
  }
  certificateofregistryinfo_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.CertificateOfRegistryInfo)
}
inline void Organization::set_certificateofregistryinfo(const char* value) {
  set_has_certificateofregistryinfo();
  if (certificateofregistryinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificateofregistryinfo_ = new ::std::string;
  }
  certificateofregistryinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Organization.CertificateOfRegistryInfo)
}
inline void Organization::set_certificateofregistryinfo(const char* value, size_t size) {
  set_has_certificateofregistryinfo();
  if (certificateofregistryinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificateofregistryinfo_ = new ::std::string;
  }
  certificateofregistryinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Organization.CertificateOfRegistryInfo)
}
inline ::std::string* Organization::mutable_certificateofregistryinfo() {
  set_has_certificateofregistryinfo();
  if (certificateofregistryinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificateofregistryinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Organization.CertificateOfRegistryInfo)
  return certificateofregistryinfo_;
}
inline ::std::string* Organization::release_certificateofregistryinfo() {
  clear_has_certificateofregistryinfo();
  if (certificateofregistryinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = certificateofregistryinfo_;
    certificateofregistryinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Organization::set_allocated_certificateofregistryinfo(::std::string* certificateofregistryinfo) {
  if (certificateofregistryinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete certificateofregistryinfo_;
  }
  if (certificateofregistryinfo) {
    set_has_certificateofregistryinfo();
    certificateofregistryinfo_ = certificateofregistryinfo;
  } else {
    clear_has_certificateofregistryinfo();
    certificateofregistryinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Organization.CertificateOfRegistryInfo)
}

// optional bool IsForeign = 25;
inline bool Organization::has_isforeign() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Organization::set_has_isforeign() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Organization::clear_has_isforeign() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Organization::clear_isforeign() {
  isforeign_ = false;
  clear_has_isforeign();
}
inline bool Organization::isforeign() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.IsForeign)
  return isforeign_;
}
inline void Organization::set_isforeign(bool value) {
  set_has_isforeign();
  isforeign_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.IsForeign)
}

// optional bool HasCertificateToSign = 26;
inline bool Organization::has_hascertificatetosign() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Organization::set_has_hascertificatetosign() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Organization::clear_has_hascertificatetosign() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Organization::clear_hascertificatetosign() {
  hascertificatetosign_ = false;
  clear_has_hascertificatetosign();
}
inline bool Organization::hascertificatetosign() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Organization.HasCertificateToSign)
  return hascertificatetosign_;
}
inline void Organization::set_hascertificatetosign(bool value) {
  set_has_hascertificatetosign();
  hascertificatetosign_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Organization.HasCertificateToSign)
}

// -------------------------------------------------------------------

// Department

// required string DepartmentId = 1;
inline bool Department::has_departmentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Department::set_has_departmentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Department::clear_has_departmentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Department::clear_departmentid() {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_->clear();
  }
  clear_has_departmentid();
}
inline const ::std::string& Department::departmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Department.DepartmentId)
  return *departmentid_;
}
inline void Department::set_departmentid(const ::std::string& value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Department.DepartmentId)
}
inline void Department::set_departmentid(const char* value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Department.DepartmentId)
}
inline void Department::set_departmentid(const char* value, size_t size) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Department.DepartmentId)
}
inline ::std::string* Department::mutable_departmentid() {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Department.DepartmentId)
  return departmentid_;
}
inline ::std::string* Department::release_departmentid() {
  clear_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = departmentid_;
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Department::set_allocated_departmentid(::std::string* departmentid) {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete departmentid_;
  }
  if (departmentid) {
    set_has_departmentid();
    departmentid_ = departmentid;
  } else {
    clear_has_departmentid();
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Department.DepartmentId)
}

// required string ParentDepartmentId = 2;
inline bool Department::has_parentdepartmentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Department::set_has_parentdepartmentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Department::clear_has_parentdepartmentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Department::clear_parentdepartmentid() {
  if (parentdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentdepartmentid_->clear();
  }
  clear_has_parentdepartmentid();
}
inline const ::std::string& Department::parentdepartmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Department.ParentDepartmentId)
  return *parentdepartmentid_;
}
inline void Department::set_parentdepartmentid(const ::std::string& value) {
  set_has_parentdepartmentid();
  if (parentdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentdepartmentid_ = new ::std::string;
  }
  parentdepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Department.ParentDepartmentId)
}
inline void Department::set_parentdepartmentid(const char* value) {
  set_has_parentdepartmentid();
  if (parentdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentdepartmentid_ = new ::std::string;
  }
  parentdepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Department.ParentDepartmentId)
}
inline void Department::set_parentdepartmentid(const char* value, size_t size) {
  set_has_parentdepartmentid();
  if (parentdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentdepartmentid_ = new ::std::string;
  }
  parentdepartmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Department.ParentDepartmentId)
}
inline ::std::string* Department::mutable_parentdepartmentid() {
  set_has_parentdepartmentid();
  if (parentdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentdepartmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Department.ParentDepartmentId)
  return parentdepartmentid_;
}
inline ::std::string* Department::release_parentdepartmentid() {
  clear_has_parentdepartmentid();
  if (parentdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parentdepartmentid_;
    parentdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Department::set_allocated_parentdepartmentid(::std::string* parentdepartmentid) {
  if (parentdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parentdepartmentid_;
  }
  if (parentdepartmentid) {
    set_has_parentdepartmentid();
    parentdepartmentid_ = parentdepartmentid;
  } else {
    clear_has_parentdepartmentid();
    parentdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Department.ParentDepartmentId)
}

// required string Name = 3;
inline bool Department::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Department::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Department::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Department::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Department::name() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Department.Name)
  return *name_;
}
inline void Department::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Department.Name)
}
inline void Department::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Department.Name)
}
inline void Department::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Department.Name)
}
inline ::std::string* Department::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Department.Name)
  return name_;
}
inline ::std::string* Department::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Department::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Department.Name)
}

// optional string Abbreviation = 4;
inline bool Department::has_abbreviation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Department::set_has_abbreviation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Department::clear_has_abbreviation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Department::clear_abbreviation() {
  if (abbreviation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abbreviation_->clear();
  }
  clear_has_abbreviation();
}
inline const ::std::string& Department::abbreviation() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Department.Abbreviation)
  return *abbreviation_;
}
inline void Department::set_abbreviation(const ::std::string& value) {
  set_has_abbreviation();
  if (abbreviation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abbreviation_ = new ::std::string;
  }
  abbreviation_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Department.Abbreviation)
}
inline void Department::set_abbreviation(const char* value) {
  set_has_abbreviation();
  if (abbreviation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abbreviation_ = new ::std::string;
  }
  abbreviation_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Department.Abbreviation)
}
inline void Department::set_abbreviation(const char* value, size_t size) {
  set_has_abbreviation();
  if (abbreviation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abbreviation_ = new ::std::string;
  }
  abbreviation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Department.Abbreviation)
}
inline ::std::string* Department::mutable_abbreviation() {
  set_has_abbreviation();
  if (abbreviation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    abbreviation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Department.Abbreviation)
  return abbreviation_;
}
inline ::std::string* Department::release_abbreviation() {
  clear_has_abbreviation();
  if (abbreviation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = abbreviation_;
    abbreviation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Department::set_allocated_abbreviation(::std::string* abbreviation) {
  if (abbreviation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete abbreviation_;
  }
  if (abbreviation) {
    set_has_abbreviation();
    abbreviation_ = abbreviation;
  } else {
    clear_has_abbreviation();
    abbreviation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Department.Abbreviation)
}

// optional string Kpp = 5;
inline bool Department::has_kpp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Department::set_has_kpp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Department::clear_has_kpp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Department::clear_kpp() {
  if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_->clear();
  }
  clear_has_kpp();
}
inline const ::std::string& Department::kpp() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Department.Kpp)
  return *kpp_;
}
inline void Department::set_kpp(const ::std::string& value) {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  kpp_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Department.Kpp)
}
inline void Department::set_kpp(const char* value) {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  kpp_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Department.Kpp)
}
inline void Department::set_kpp(const char* value, size_t size) {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  kpp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Department.Kpp)
}
inline ::std::string* Department::mutable_kpp() {
  set_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kpp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Department.Kpp)
  return kpp_;
}
inline ::std::string* Department::release_kpp() {
  clear_has_kpp();
  if (kpp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = kpp_;
    kpp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Department::set_allocated_kpp(::std::string* kpp) {
  if (kpp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kpp_;
  }
  if (kpp) {
    set_has_kpp();
    kpp_ = kpp;
  } else {
    clear_has_kpp();
    kpp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Department.Kpp)
}

// optional .Diadoc.Api.Proto.Address Address = 6;
inline bool Department::has_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Department::set_has_address() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Department::clear_has_address() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Department::clear_address() {
  if (address_ != NULL) address_->::Diadoc::Api::Proto::Address::Clear();
  clear_has_address();
}
inline const ::Diadoc::Api::Proto::Address& Department::address() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Department.Address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::Diadoc::Api::Proto::Address* Department::mutable_address() {
  set_has_address();
  if (address_ == NULL) address_ = new ::Diadoc::Api::Proto::Address;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Department.Address)
  return address_;
}
inline ::Diadoc::Api::Proto::Address* Department::release_address() {
  clear_has_address();
  ::Diadoc::Api::Proto::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline void Department::set_allocated_address(::Diadoc::Api::Proto::Address* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Department.Address)
}

// optional bool IsDisabled = 7 [default = false];
inline bool Department::has_isdisabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Department::set_has_isdisabled() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Department::clear_has_isdisabled() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Department::clear_isdisabled() {
  isdisabled_ = false;
  clear_has_isdisabled();
}
inline bool Department::isdisabled() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Department.IsDisabled)
  return isdisabled_;
}
inline void Department::set_isdisabled(bool value) {
  set_has_isdisabled();
  isdisabled_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Department.IsDisabled)
}

// -------------------------------------------------------------------

// Box

// required string BoxId = 1;
inline bool Box::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Box::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Box::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Box::clear_boxid() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_->clear();
  }
  clear_has_boxid();
}
inline const ::std::string& Box::boxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Box.BoxId)
  return *boxid_;
}
inline void Box::set_boxid(const ::std::string& value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Box.BoxId)
}
inline void Box::set_boxid(const char* value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Box.BoxId)
}
inline void Box::set_boxid(const char* value, size_t size) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Box.BoxId)
}
inline ::std::string* Box::mutable_boxid() {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Box.BoxId)
  return boxid_;
}
inline ::std::string* Box::release_boxid() {
  clear_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = boxid_;
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Box::set_allocated_boxid(::std::string* boxid) {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (boxid) {
    set_has_boxid();
    boxid_ = boxid;
  } else {
    clear_has_boxid();
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Box.BoxId)
}

// required string BoxIdGuid = 6;
inline bool Box::has_boxidguid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Box::set_has_boxidguid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Box::clear_has_boxidguid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Box::clear_boxidguid() {
  if (boxidguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxidguid_->clear();
  }
  clear_has_boxidguid();
}
inline const ::std::string& Box::boxidguid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Box.BoxIdGuid)
  return *boxidguid_;
}
inline void Box::set_boxidguid(const ::std::string& value) {
  set_has_boxidguid();
  if (boxidguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxidguid_ = new ::std::string;
  }
  boxidguid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Box.BoxIdGuid)
}
inline void Box::set_boxidguid(const char* value) {
  set_has_boxidguid();
  if (boxidguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxidguid_ = new ::std::string;
  }
  boxidguid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Box.BoxIdGuid)
}
inline void Box::set_boxidguid(const char* value, size_t size) {
  set_has_boxidguid();
  if (boxidguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxidguid_ = new ::std::string;
  }
  boxidguid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Box.BoxIdGuid)
}
inline ::std::string* Box::mutable_boxidguid() {
  set_has_boxidguid();
  if (boxidguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxidguid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Box.BoxIdGuid)
  return boxidguid_;
}
inline ::std::string* Box::release_boxidguid() {
  clear_has_boxidguid();
  if (boxidguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = boxidguid_;
    boxidguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Box::set_allocated_boxidguid(::std::string* boxidguid) {
  if (boxidguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxidguid_;
  }
  if (boxidguid) {
    set_has_boxidguid();
    boxidguid_ = boxidguid;
  } else {
    clear_has_boxidguid();
    boxidguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Box.BoxIdGuid)
}

// required string Title = 2;
inline bool Box::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Box::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Box::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Box::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Box::title() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Box.Title)
  return *title_;
}
inline void Box::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Box.Title)
}
inline void Box::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Box.Title)
}
inline void Box::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Box.Title)
}
inline ::std::string* Box::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Box.Title)
  return title_;
}
inline ::std::string* Box::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Box::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Box.Title)
}

// optional .Diadoc.Api.Proto.Organization Organization = 3;
inline bool Box::has_organization() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Box::set_has_organization() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Box::clear_has_organization() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Box::clear_organization() {
  if (organization_ != NULL) organization_->::Diadoc::Api::Proto::Organization::Clear();
  clear_has_organization();
}
inline const ::Diadoc::Api::Proto::Organization& Box::organization() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Box.Organization)
  return organization_ != NULL ? *organization_ : *default_instance_->organization_;
}
inline ::Diadoc::Api::Proto::Organization* Box::mutable_organization() {
  set_has_organization();
  if (organization_ == NULL) organization_ = new ::Diadoc::Api::Proto::Organization;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Box.Organization)
  return organization_;
}
inline ::Diadoc::Api::Proto::Organization* Box::release_organization() {
  clear_has_organization();
  ::Diadoc::Api::Proto::Organization* temp = organization_;
  organization_ = NULL;
  return temp;
}
inline void Box::set_allocated_organization(::Diadoc::Api::Proto::Organization* organization) {
  delete organization_;
  organization_ = organization;
  if (organization) {
    set_has_organization();
  } else {
    clear_has_organization();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Box.Organization)
}

// optional .Diadoc.Api.Proto.OrganizationInvoiceFormatVersion InvoiceFormatVersion = 4 [default = v5_02];
inline bool Box::has_invoiceformatversion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Box::set_has_invoiceformatversion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Box::clear_has_invoiceformatversion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Box::clear_invoiceformatversion() {
  invoiceformatversion_ = 2;
  clear_has_invoiceformatversion();
}
inline ::Diadoc::Api::Proto::OrganizationInvoiceFormatVersion Box::invoiceformatversion() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Box.InvoiceFormatVersion)
  return static_cast< ::Diadoc::Api::Proto::OrganizationInvoiceFormatVersion >(invoiceformatversion_);
}
inline void Box::set_invoiceformatversion(::Diadoc::Api::Proto::OrganizationInvoiceFormatVersion value) {
  assert(::Diadoc::Api::Proto::OrganizationInvoiceFormatVersion_IsValid(value));
  set_has_invoiceformatversion();
  invoiceformatversion_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Box.InvoiceFormatVersion)
}

// optional bool EncryptedDocumentsAllowed = 5;
inline bool Box::has_encrypteddocumentsallowed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Box::set_has_encrypteddocumentsallowed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Box::clear_has_encrypteddocumentsallowed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Box::clear_encrypteddocumentsallowed() {
  encrypteddocumentsallowed_ = false;
  clear_has_encrypteddocumentsallowed();
}
inline bool Box::encrypteddocumentsallowed() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Box.EncryptedDocumentsAllowed)
  return encrypteddocumentsallowed_;
}
inline void Box::set_encrypteddocumentsallowed(bool value) {
  set_has_encrypteddocumentsallowed();
  encrypteddocumentsallowed_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Box.EncryptedDocumentsAllowed)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Diadoc::Api::Proto::OrganizationInvoiceFormatVersion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::OrganizationInvoiceFormatVersion>() {
  return ::Diadoc::Api::Proto::OrganizationInvoiceFormatVersion_descriptor();
}
template <> struct is_proto_enum< ::Diadoc::Api::Proto::Sociability> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Sociability>() {
  return ::Diadoc::Api::Proto::Sociability_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Organization_2eproto__INCLUDED
