// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CloudSign.proto

#ifndef PROTOBUF_CloudSign_2eproto__INCLUDED
#define PROTOBUF_CloudSign_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Content_v2.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CloudSign_2eproto();
void protobuf_AssignDesc_CloudSign_2eproto();
void protobuf_ShutdownFile_CloudSign_2eproto();

class CloudSignRequest;
class CloudSignFile;
class CloudSignResult;
class CloudSignConfirmResult;
class AutosignReceiptsResult;

// ===================================================================

class CloudSignRequest : public ::google::protobuf::Message {
 public:
  CloudSignRequest();
  virtual ~CloudSignRequest();

  CloudSignRequest(const CloudSignRequest& from);

  inline CloudSignRequest& operator=(const CloudSignRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudSignRequest& default_instance();

  void Swap(CloudSignRequest* other);

  // implements Message ----------------------------------------------

  CloudSignRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloudSignRequest& from);
  void MergeFrom(const CloudSignRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.CloudSignFile Files = 1;
  inline int files_size() const;
  inline void clear_files();
  static const int kFilesFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::CloudSignFile& files(int index) const;
  inline ::Diadoc::Api::Proto::CloudSignFile* mutable_files(int index);
  inline ::Diadoc::Api::Proto::CloudSignFile* add_files();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CloudSignFile >&
      files() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CloudSignFile >*
      mutable_files();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.CloudSignRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CloudSignFile > files_;
  friend void  protobuf_AddDesc_CloudSign_2eproto();
  friend void protobuf_AssignDesc_CloudSign_2eproto();
  friend void protobuf_ShutdownFile_CloudSign_2eproto();

  void InitAsDefaultInstance();
  static CloudSignRequest* default_instance_;
};
// -------------------------------------------------------------------

class CloudSignFile : public ::google::protobuf::Message {
 public:
  CloudSignFile();
  virtual ~CloudSignFile();

  CloudSignFile(const CloudSignFile& from);

  inline CloudSignFile& operator=(const CloudSignFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudSignFile& default_instance();

  void Swap(CloudSignFile* other);

  // implements Message ----------------------------------------------

  CloudSignFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloudSignFile& from);
  void MergeFrom(const CloudSignFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Content_v2 Content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Content_v2& content() const;
  inline ::Diadoc::Api::Proto::Content_v2* mutable_content();
  inline ::Diadoc::Api::Proto::Content_v2* release_content();
  inline void set_allocated_content(::Diadoc::Api::Proto::Content_v2* content);

  // optional string FileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.CloudSignFile)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_filename();
  inline void clear_has_filename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Content_v2* content_;
  ::std::string* filename_;
  friend void  protobuf_AddDesc_CloudSign_2eproto();
  friend void protobuf_AssignDesc_CloudSign_2eproto();
  friend void protobuf_ShutdownFile_CloudSign_2eproto();

  void InitAsDefaultInstance();
  static CloudSignFile* default_instance_;
};
// -------------------------------------------------------------------

class CloudSignResult : public ::google::protobuf::Message {
 public:
  CloudSignResult();
  virtual ~CloudSignResult();

  CloudSignResult(const CloudSignResult& from);

  inline CloudSignResult& operator=(const CloudSignResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudSignResult& default_instance();

  void Swap(CloudSignResult* other);

  // implements Message ----------------------------------------------

  CloudSignResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloudSignResult& from);
  void MergeFrom(const CloudSignResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.CloudSignResult)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  friend void  protobuf_AddDesc_CloudSign_2eproto();
  friend void protobuf_AssignDesc_CloudSign_2eproto();
  friend void protobuf_ShutdownFile_CloudSign_2eproto();

  void InitAsDefaultInstance();
  static CloudSignResult* default_instance_;
};
// -------------------------------------------------------------------

class CloudSignConfirmResult : public ::google::protobuf::Message {
 public:
  CloudSignConfirmResult();
  virtual ~CloudSignConfirmResult();

  CloudSignConfirmResult(const CloudSignConfirmResult& from);

  inline CloudSignConfirmResult& operator=(const CloudSignConfirmResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudSignConfirmResult& default_instance();

  void Swap(CloudSignConfirmResult* other);

  // implements Message ----------------------------------------------

  CloudSignConfirmResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloudSignConfirmResult& from);
  void MergeFrom(const CloudSignConfirmResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.Content_v2 Signatures = 1;
  inline int signatures_size() const;
  inline void clear_signatures();
  static const int kSignaturesFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Content_v2& signatures(int index) const;
  inline ::Diadoc::Api::Proto::Content_v2* mutable_signatures(int index);
  inline ::Diadoc::Api::Proto::Content_v2* add_signatures();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Content_v2 >&
      signatures() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Content_v2 >*
      mutable_signatures();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.CloudSignConfirmResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Content_v2 > signatures_;
  friend void  protobuf_AddDesc_CloudSign_2eproto();
  friend void protobuf_AssignDesc_CloudSign_2eproto();
  friend void protobuf_ShutdownFile_CloudSign_2eproto();

  void InitAsDefaultInstance();
  static CloudSignConfirmResult* default_instance_;
};
// -------------------------------------------------------------------

class AutosignReceiptsResult : public ::google::protobuf::Message {
 public:
  AutosignReceiptsResult();
  virtual ~AutosignReceiptsResult();

  AutosignReceiptsResult(const AutosignReceiptsResult& from);

  inline AutosignReceiptsResult& operator=(const AutosignReceiptsResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutosignReceiptsResult& default_instance();

  void Swap(AutosignReceiptsResult* other);

  // implements Message ----------------------------------------------

  AutosignReceiptsResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutosignReceiptsResult& from);
  void MergeFrom(const AutosignReceiptsResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 SignedReceiptsCount = 1;
  inline bool has_signedreceiptscount() const;
  inline void clear_signedreceiptscount();
  static const int kSignedReceiptsCountFieldNumber = 1;
  inline ::google::protobuf::int64 signedreceiptscount() const;
  inline void set_signedreceiptscount(::google::protobuf::int64 value);

  // required string NextBatchKey = 2;
  inline bool has_nextbatchkey() const;
  inline void clear_nextbatchkey();
  static const int kNextBatchKeyFieldNumber = 2;
  inline const ::std::string& nextbatchkey() const;
  inline void set_nextbatchkey(const ::std::string& value);
  inline void set_nextbatchkey(const char* value);
  inline void set_nextbatchkey(const char* value, size_t size);
  inline ::std::string* mutable_nextbatchkey();
  inline ::std::string* release_nextbatchkey();
  inline void set_allocated_nextbatchkey(::std::string* nextbatchkey);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.AutosignReceiptsResult)
 private:
  inline void set_has_signedreceiptscount();
  inline void clear_has_signedreceiptscount();
  inline void set_has_nextbatchkey();
  inline void clear_has_nextbatchkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 signedreceiptscount_;
  ::std::string* nextbatchkey_;
  friend void  protobuf_AddDesc_CloudSign_2eproto();
  friend void protobuf_AssignDesc_CloudSign_2eproto();
  friend void protobuf_ShutdownFile_CloudSign_2eproto();

  void InitAsDefaultInstance();
  static AutosignReceiptsResult* default_instance_;
};
// ===================================================================


// ===================================================================

// CloudSignRequest

// repeated .Diadoc.Api.Proto.CloudSignFile Files = 1;
inline int CloudSignRequest::files_size() const {
  return files_.size();
}
inline void CloudSignRequest::clear_files() {
  files_.Clear();
}
inline const ::Diadoc::Api::Proto::CloudSignFile& CloudSignRequest::files(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.CloudSignRequest.Files)
  return files_.Get(index);
}
inline ::Diadoc::Api::Proto::CloudSignFile* CloudSignRequest::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.CloudSignRequest.Files)
  return files_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CloudSignFile* CloudSignRequest::add_files() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.CloudSignRequest.Files)
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CloudSignFile >&
CloudSignRequest::files() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.CloudSignRequest.Files)
  return files_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CloudSignFile >*
CloudSignRequest::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.CloudSignRequest.Files)
  return &files_;
}

// -------------------------------------------------------------------

// CloudSignFile

// optional .Diadoc.Api.Proto.Content_v2 Content = 1;
inline bool CloudSignFile::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloudSignFile::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CloudSignFile::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CloudSignFile::clear_content() {
  if (content_ != NULL) content_->::Diadoc::Api::Proto::Content_v2::Clear();
  clear_has_content();
}
inline const ::Diadoc::Api::Proto::Content_v2& CloudSignFile::content() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.CloudSignFile.Content)
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::Diadoc::Api::Proto::Content_v2* CloudSignFile::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::Diadoc::Api::Proto::Content_v2;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.CloudSignFile.Content)
  return content_;
}
inline ::Diadoc::Api::Proto::Content_v2* CloudSignFile::release_content() {
  clear_has_content();
  ::Diadoc::Api::Proto::Content_v2* temp = content_;
  content_ = NULL;
  return temp;
}
inline void CloudSignFile::set_allocated_content(::Diadoc::Api::Proto::Content_v2* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.CloudSignFile.Content)
}

// optional string FileName = 2;
inline bool CloudSignFile::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloudSignFile::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CloudSignFile::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CloudSignFile::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& CloudSignFile::filename() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.CloudSignFile.FileName)
  return *filename_;
}
inline void CloudSignFile::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.CloudSignFile.FileName)
}
inline void CloudSignFile::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.CloudSignFile.FileName)
}
inline void CloudSignFile::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.CloudSignFile.FileName)
}
inline ::std::string* CloudSignFile::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.CloudSignFile.FileName)
  return filename_;
}
inline ::std::string* CloudSignFile::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CloudSignFile::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.CloudSignFile.FileName)
}

// -------------------------------------------------------------------

// CloudSignResult

// optional string Token = 1;
inline bool CloudSignResult::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloudSignResult::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CloudSignResult::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CloudSignResult::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& CloudSignResult::token() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.CloudSignResult.Token)
  return *token_;
}
inline void CloudSignResult::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.CloudSignResult.Token)
}
inline void CloudSignResult::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.CloudSignResult.Token)
}
inline void CloudSignResult::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.CloudSignResult.Token)
}
inline ::std::string* CloudSignResult::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.CloudSignResult.Token)
  return token_;
}
inline ::std::string* CloudSignResult::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CloudSignResult::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.CloudSignResult.Token)
}

// -------------------------------------------------------------------

// CloudSignConfirmResult

// repeated .Diadoc.Api.Proto.Content_v2 Signatures = 1;
inline int CloudSignConfirmResult::signatures_size() const {
  return signatures_.size();
}
inline void CloudSignConfirmResult::clear_signatures() {
  signatures_.Clear();
}
inline const ::Diadoc::Api::Proto::Content_v2& CloudSignConfirmResult::signatures(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.CloudSignConfirmResult.Signatures)
  return signatures_.Get(index);
}
inline ::Diadoc::Api::Proto::Content_v2* CloudSignConfirmResult::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.CloudSignConfirmResult.Signatures)
  return signatures_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Content_v2* CloudSignConfirmResult::add_signatures() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.CloudSignConfirmResult.Signatures)
  return signatures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Content_v2 >&
CloudSignConfirmResult::signatures() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.CloudSignConfirmResult.Signatures)
  return signatures_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Content_v2 >*
CloudSignConfirmResult::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.CloudSignConfirmResult.Signatures)
  return &signatures_;
}

// -------------------------------------------------------------------

// AutosignReceiptsResult

// required int64 SignedReceiptsCount = 1;
inline bool AutosignReceiptsResult::has_signedreceiptscount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutosignReceiptsResult::set_has_signedreceiptscount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutosignReceiptsResult::clear_has_signedreceiptscount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutosignReceiptsResult::clear_signedreceiptscount() {
  signedreceiptscount_ = GOOGLE_LONGLONG(0);
  clear_has_signedreceiptscount();
}
inline ::google::protobuf::int64 AutosignReceiptsResult::signedreceiptscount() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.AutosignReceiptsResult.SignedReceiptsCount)
  return signedreceiptscount_;
}
inline void AutosignReceiptsResult::set_signedreceiptscount(::google::protobuf::int64 value) {
  set_has_signedreceiptscount();
  signedreceiptscount_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.AutosignReceiptsResult.SignedReceiptsCount)
}

// required string NextBatchKey = 2;
inline bool AutosignReceiptsResult::has_nextbatchkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutosignReceiptsResult::set_has_nextbatchkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutosignReceiptsResult::clear_has_nextbatchkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutosignReceiptsResult::clear_nextbatchkey() {
  if (nextbatchkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nextbatchkey_->clear();
  }
  clear_has_nextbatchkey();
}
inline const ::std::string& AutosignReceiptsResult::nextbatchkey() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.AutosignReceiptsResult.NextBatchKey)
  return *nextbatchkey_;
}
inline void AutosignReceiptsResult::set_nextbatchkey(const ::std::string& value) {
  set_has_nextbatchkey();
  if (nextbatchkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nextbatchkey_ = new ::std::string;
  }
  nextbatchkey_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.AutosignReceiptsResult.NextBatchKey)
}
inline void AutosignReceiptsResult::set_nextbatchkey(const char* value) {
  set_has_nextbatchkey();
  if (nextbatchkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nextbatchkey_ = new ::std::string;
  }
  nextbatchkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.AutosignReceiptsResult.NextBatchKey)
}
inline void AutosignReceiptsResult::set_nextbatchkey(const char* value, size_t size) {
  set_has_nextbatchkey();
  if (nextbatchkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nextbatchkey_ = new ::std::string;
  }
  nextbatchkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.AutosignReceiptsResult.NextBatchKey)
}
inline ::std::string* AutosignReceiptsResult::mutable_nextbatchkey() {
  set_has_nextbatchkey();
  if (nextbatchkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nextbatchkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.AutosignReceiptsResult.NextBatchKey)
  return nextbatchkey_;
}
inline ::std::string* AutosignReceiptsResult::release_nextbatchkey() {
  clear_has_nextbatchkey();
  if (nextbatchkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nextbatchkey_;
    nextbatchkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AutosignReceiptsResult::set_allocated_nextbatchkey(::std::string* nextbatchkey) {
  if (nextbatchkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nextbatchkey_;
  }
  if (nextbatchkey) {
    set_has_nextbatchkey();
    nextbatchkey_ = nextbatchkey;
  } else {
    clear_has_nextbatchkey();
    nextbatchkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.AutosignReceiptsResult.NextBatchKey)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CloudSign_2eproto__INCLUDED
